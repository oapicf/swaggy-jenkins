/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.ComputerSet
import org.openapitools.client.model.FreeStyleBuild
import org.openapitools.client.model.FreeStyleProject
import org.openapitools.client.model.Hudson
import org.openapitools.client.model.ListView
import org.openapitools.client.model.Queue
import org.openapitools.client.core.JsonSupport._
import sttp.client3._
import sttp.model.Method

object RemoteAccessApi {

def apply(baseUrl: String = "http://localhost") = new RemoteAccessApi(baseUrl)
}

class RemoteAccessApi(baseUrl: String) {

  /**
   * Retrieve computer details
   * 
   * Expected answers:
   *   code 200 : ComputerSet (Successfully retrieved computer details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param depth Recursion depth in response model
   */
  def getComputer(username: String, password: String)(depth: Int
): Request[Either[ResponseException[String, Exception], ComputerSet], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/computer/api/json?depth=${ depth }")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[ComputerSet])

  /**
   * Retrieve Jenkins details
   * 
   * Expected answers:
   *   code 200 : Hudson (Successfully retrieved Jenkins details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   */
  def getJenkins(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], Hudson], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/api/json")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[Hudson])

  /**
   * Retrieve job details
   * 
   * Expected answers:
   *   code 200 : FreeStyleProject (Successfully retrieved job details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   */
  def getJob(username: String, password: String)(name: String
): Request[Either[ResponseException[String, Exception], FreeStyleProject], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/job/${name}/api/json")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[FreeStyleProject])

  /**
   * Retrieve job configuration
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved job configuration in config.xml format)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   */
  def getJobConfig(username: String, password: String)(name: String
): Request[Either[ResponseException[String, Exception], String], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/job/${name}/config.xml")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[String])

  /**
   * Retrieve job's last build details
   * 
   * Expected answers:
   *   code 200 : FreeStyleBuild (Successfully retrieved job's last build details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   */
  def getJobLastBuild(username: String, password: String)(name: String
): Request[Either[ResponseException[String, Exception], FreeStyleBuild], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/job/${name}/lastBuild/api/json")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[FreeStyleBuild])

  /**
   * Retrieve job's build progressive text output
   * 
   * Expected answers:
   *   code 200 :  (Successfully retrieved job's build progressive text output)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   * @param number Build number
   * @param start Starting point of progressive text output
   */
  def getJobProgressiveText(username: String, password: String)(name: String, number: String, start: String
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/job/${name}/${number}/logText/progressiveText?start=${ start }")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[Unit])

  /**
   * Retrieve queue details
   * 
   * Expected answers:
   *   code 200 : Queue (Successfully retrieved queue details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   */
  def getQueue(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], Queue], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/queue/api/json")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[Queue])

  /**
   * Retrieve queued item details
   * 
   * Expected answers:
   *   code 200 : Queue (Successfully retrieved queued item details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param number Queue number
   */
  def getQueueItem(username: String, password: String)(number: String
): Request[Either[ResponseException[String, Exception], Queue], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/queue/item/${number}/api/json")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[Queue])

  /**
   * Retrieve view details
   * 
   * Expected answers:
   *   code 200 : ListView (Successfully retrieved view details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (View cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the view
   */
  def getView(username: String, password: String)(name: String
): Request[Either[ResponseException[String, Exception], ListView], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/view/${name}/api/json")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[ListView])

  /**
   * Retrieve view configuration
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved view configuration in config.xml format)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (View cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the view
   */
  def getViewConfig(username: String, password: String)(name: String
): Request[Either[ResponseException[String, Exception], String], Any] =
    basicRequest
      .method(Method.GET, uri"$baseUrl/view/${name}/config.xml")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[String])

  /**
   * Retrieve Jenkins headers
   * 
   * Expected answers:
   *   code 200 :  (Successfully retrieved Jenkins headers)
   *              Headers :
   *                x-jenkins - Jenkins version number
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   */
  def headJenkins(username: String, password: String)(
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.HEAD, uri"$baseUrl/api/json")
      .contentType("application/json")
      .auth.basic(username, password)
      .response(asJson[Unit])

  /**
   * Create a new job using job configuration, or copied from an existing job
   * 
   * Expected answers:
   *   code 200 :  (Successfully created a new job)
   *   code 400 : String (An error has occurred - error message is embedded inside the HTML response)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the new job
   * @param from Existing job to copy from
   * @param mode Set to 'copy' for copying an existing job
   * @param jenkinsCrumb CSRF protection token
   * @param contentType Content type header application/xml
   * @param body Job configuration in config.xml format
   */
  def postCreateItem(username: String, password: String)(name: String, from: Option[String] = None, mode: Option[String] = None, jenkinsCrumb: Option[String] = None, contentType: Option[String] = None, body: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/createItem?name=${ name }&from=${ from }&mode=${ mode }")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .header("Content-Type", contentType.toString)
      .auth.basic(username, password)
      .body(body)
      .response(asJson[Unit])

  /**
   * Create a new view using view configuration
   * 
   * Expected answers:
   *   code 200 :  (Successfully created the view)
   *   code 400 : String (An error has occurred - error message is embedded inside the HTML response)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the new view
   * @param jenkinsCrumb CSRF protection token
   * @param contentType Content type header application/xml
   * @param body View configuration in config.xml format
   */
  def postCreateView(username: String, password: String)(name: String, jenkinsCrumb: Option[String] = None, contentType: Option[String] = None, body: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/createView?name=${ name }")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .header("Content-Type", contentType.toString)
      .auth.basic(username, password)
      .body(body)
      .response(asJson[Unit])

  /**
   * Build a job
   * 
   * Expected answers:
   *   code 200 :  (Successfully built the job (backward compatibility for older versions of Jenkins))
   *   code 201 :  (Successfully built the job)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   * @param json 
   * @param token 
   * @param jenkinsCrumb CSRF protection token
   */
  def postJobBuild(username: String, password: String)(name: String, json: String, token: Option[String] = None, jenkinsCrumb: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/job/${name}/build?json=${ json }&token=${ token }")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .auth.basic(username, password)
      .response(asJson[Unit])

  /**
   * Update job configuration
   * 
   * Expected answers:
   *   code 200 :  (Successfully retrieved job configuration in config.xml format)
   *   code 400 : String (An error has occurred - error message is embedded inside the HTML response)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   * @param body Job configuration in config.xml format
   * @param jenkinsCrumb CSRF protection token
   */
  def postJobConfig(username: String, password: String)(name: String, body: String, jenkinsCrumb: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/job/${name}/config.xml")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .auth.basic(username, password)
      .body(body)
      .response(asJson[Unit])

  /**
   * Delete a job
   * 
   * Expected answers:
   *   code 200 :  (Successfully deleted the job)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   * @param jenkinsCrumb CSRF protection token
   */
  def postJobDelete(username: String, password: String)(name: String, jenkinsCrumb: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/job/${name}/doDelete")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .auth.basic(username, password)
      .response(asJson[Unit])

  /**
   * Disable a job
   * 
   * Expected answers:
   *   code 200 :  (Successfully disabled the job)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   * @param jenkinsCrumb CSRF protection token
   */
  def postJobDisable(username: String, password: String)(name: String, jenkinsCrumb: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/job/${name}/disable")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .auth.basic(username, password)
      .response(asJson[Unit])

  /**
   * Enable a job
   * 
   * Expected answers:
   *   code 200 :  (Successfully enabled the job)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   * @param jenkinsCrumb CSRF protection token
   */
  def postJobEnable(username: String, password: String)(name: String, jenkinsCrumb: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/job/${name}/enable")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .auth.basic(username, password)
      .response(asJson[Unit])

  /**
   * Stop a job
   * 
   * Expected answers:
   *   code 200 :  (Successfully stopped the job)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Job cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the job
   * @param jenkinsCrumb CSRF protection token
   */
  def postJobLastBuildStop(username: String, password: String)(name: String, jenkinsCrumb: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/job/${name}/lastBuild/stop")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .auth.basic(username, password)
      .response(asJson[Unit])

  /**
   * Update view configuration
   * 
   * Expected answers:
   *   code 200 :  (Successfully updated view configuration)
   *   code 400 : String (An error has occurred - error message is embedded inside the HTML response)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (View cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param name Name of the view
   * @param body View configuration in config.xml format
   * @param jenkinsCrumb CSRF protection token
   */
  def postViewConfig(username: String, password: String)(name: String, body: String, jenkinsCrumb: Option[String] = None
): Request[Either[ResponseException[String, Exception], Unit], Any] =
    basicRequest
      .method(Method.POST, uri"$baseUrl/view/${name}/config.xml")
      .contentType("application/json")
      .header("Jenkins-Crumb", jenkinsCrumb.toString)
      .auth.basic(username, password)
      .body(body)
      .response(asJson[Unit])

}
