// tslint:disable
/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Observable } from 'rxjs';
import type { AjaxResponse } from 'rxjs/ajax';
import { BaseAPI, throwIfNullOrUndefined, encodeURI } from '../runtime';
import type { OperationOpts, HttpHeaders, HttpQuery } from '../runtime';
import type {
    BranchImpl,
    FavoriteImpl,
    GithubOrganization,
    GithubScm,
    MultibranchPipeline,
    Organisation,
    Pipeline,
    PipelineActivity,
    PipelineFolderImpl,
    PipelineImpl,
    PipelineRun,
    PipelineRunNode,
    PipelineStepImpl,
    QueueItemImpl,
    User,
} from '../models';

export interface DeletePipelineQueueItemRequest {
    organization: string;
    pipeline: string;
    queue: string;
}

export interface GetAuthenticatedUserRequest {
    organization: string;
}

export interface GetClassesRequest {
    _class: string;
}

export interface GetJsonWebKeyRequest {
    key: number;
}

export interface GetJsonWebTokenRequest {
    expiryTimeInMins?: number;
    maxExpiryTimeInMins?: number;
}

export interface GetOrganisationRequest {
    organization: string;
}

export interface GetPipelineRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineActivitiesRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineBranchRequest {
    organization: string;
    pipeline: string;
    branch: string;
}

export interface GetPipelineBranchRunRequest {
    organization: string;
    pipeline: string;
    branch: string;
    run: string;
}

export interface GetPipelineBranchesRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineFolderRequest {
    organization: string;
    folder: string;
}

export interface GetPipelineFolderPipelineRequest {
    organization: string;
    pipeline: string;
    folder: string;
}

export interface GetPipelineQueueRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface GetPipelineRunLogRequest {
    organization: string;
    pipeline: string;
    run: string;
    start?: number;
    download?: boolean;
}

export interface GetPipelineRunNodeRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
}

export interface GetPipelineRunNodeStepRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
    step: string;
}

export interface GetPipelineRunNodeStepLogRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
    step: string;
}

export interface GetPipelineRunNodeStepsRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
}

export interface GetPipelineRunNodesRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface GetPipelineRunsRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelinesRequest {
    organization: string;
}

export interface GetSCMRequest {
    organization: string;
    scm: string;
}

export interface GetSCMOrganisationRepositoriesRequest {
    organization: string;
    scm: string;
    scmOrganisation: string;
    credentialId?: string;
    pageSize?: number;
    pageNumber?: number;
}

export interface GetSCMOrganisationRepositoryRequest {
    organization: string;
    scm: string;
    scmOrganisation: string;
    repository: string;
    credentialId?: string;
}

export interface GetSCMOrganisationsRequest {
    organization: string;
    scm: string;
    credentialId?: string;
}

export interface GetUserRequest {
    organization: string;
    user: string;
}

export interface GetUserFavoritesRequest {
    user: string;
}

export interface GetUsersRequest {
    organization: string;
}

export interface PostPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface PostPipelineRunsRequest {
    organization: string;
    pipeline: string;
}

export interface PutPipelineFavoriteRequest {
    organization: string;
    pipeline: string;
    body: boolean;
}

export interface PutPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
    blocking?: string;
    timeOutInSecs?: number;
}

export interface SearchRequest {
    q: string;
}

export interface SearchClassesRequest {
    q: string;
}

/**
 * no description
 */
export class BlueOceanApi extends BaseAPI {

    /**
     * Delete queue item from an organization pipeline queue
     */
    deletePipelineQueueItem({ organization, pipeline, queue }: DeletePipelineQueueItemRequest): Observable<void>
    deletePipelineQueueItem({ organization, pipeline, queue }: DeletePipelineQueueItemRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>>
    deletePipelineQueueItem({ organization, pipeline, queue }: DeletePipelineQueueItemRequest, opts?: OperationOpts): Observable<void | AjaxResponse<void>> {
        throwIfNullOrUndefined(organization, 'organization', 'deletePipelineQueueItem');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'deletePipelineQueueItem');
        throwIfNullOrUndefined(queue, 'queue', 'deletePipelineQueueItem');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<void>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{queue}', encodeURI(queue)),
            method: 'DELETE',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve authenticated user details for an organization
     */
    getAuthenticatedUser({ organization }: GetAuthenticatedUserRequest): Observable<User>
    getAuthenticatedUser({ organization }: GetAuthenticatedUserRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    getAuthenticatedUser({ organization }: GetAuthenticatedUserRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(organization, 'organization', 'getAuthenticatedUser');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<User>({
            url: '/blue/rest/organizations/{organization}/user/'.replace('{organization}', encodeURI(organization)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get a list of class names supported by a given class
     */
    getClasses({ _class }: GetClassesRequest): Observable<string>
    getClasses({ _class }: GetClassesRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    getClasses({ _class }: GetClassesRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(_class, '_class', 'getClasses');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<string>({
            url: '/blue/rest/classes/{class}'.replace('{class}', encodeURI(_class)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve JSON Web Key
     */
    getJsonWebKey({ key }: GetJsonWebKeyRequest): Observable<string>
    getJsonWebKey({ key }: GetJsonWebKeyRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    getJsonWebKey({ key }: GetJsonWebKeyRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(key, 'key', 'getJsonWebKey');

        return this.request<string>({
            url: '/jwt-auth/jwks/{key}'.replace('{key}', encodeURI(key)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * Retrieve JSON Web Token
     */
    getJsonWebToken({ expiryTimeInMins, maxExpiryTimeInMins }: GetJsonWebTokenRequest): Observable<string>
    getJsonWebToken({ expiryTimeInMins, maxExpiryTimeInMins }: GetJsonWebTokenRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    getJsonWebToken({ expiryTimeInMins, maxExpiryTimeInMins }: GetJsonWebTokenRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {

        const query: HttpQuery = {};

        if (expiryTimeInMins != null) { query['expiryTimeInMins'] = expiryTimeInMins; }
        if (maxExpiryTimeInMins != null) { query['maxExpiryTimeInMins'] = maxExpiryTimeInMins; }

        return this.request<string>({
            url: '/jwt-auth/token',
            method: 'GET',
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve organization details
     */
    getOrganisation({ organization }: GetOrganisationRequest): Observable<Organisation>
    getOrganisation({ organization }: GetOrganisationRequest, opts?: OperationOpts): Observable<AjaxResponse<Organisation>>
    getOrganisation({ organization }: GetOrganisationRequest, opts?: OperationOpts): Observable<Organisation | AjaxResponse<Organisation>> {
        throwIfNullOrUndefined(organization, 'organization', 'getOrganisation');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Organisation>({
            url: '/blue/rest/organizations/{organization}'.replace('{organization}', encodeURI(organization)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve all organizations details
     */
    getOrganisations(): Observable<Array<Organisation>>
    getOrganisations(opts?: OperationOpts): Observable<AjaxResponse<Array<Organisation>>>
    getOrganisations(opts?: OperationOpts): Observable<Array<Organisation> | AjaxResponse<Array<Organisation>>> {
        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<Organisation>>({
            url: '/blue/rest/organizations/',
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve pipeline details for an organization
     */
    getPipeline({ organization, pipeline }: GetPipelineRequest): Observable<Pipeline>
    getPipeline({ organization, pipeline }: GetPipelineRequest, opts?: OperationOpts): Observable<AjaxResponse<Pipeline>>
    getPipeline({ organization, pipeline }: GetPipelineRequest, opts?: OperationOpts): Observable<Pipeline | AjaxResponse<Pipeline>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipeline');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipeline');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Pipeline>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve all activities details for an organization pipeline
     */
    getPipelineActivities({ organization, pipeline }: GetPipelineActivitiesRequest): Observable<Array<PipelineActivity>>
    getPipelineActivities({ organization, pipeline }: GetPipelineActivitiesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PipelineActivity>>>
    getPipelineActivities({ organization, pipeline }: GetPipelineActivitiesRequest, opts?: OperationOpts): Observable<Array<PipelineActivity> | AjaxResponse<Array<PipelineActivity>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineActivities');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineActivities');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<PipelineActivity>>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve branch details for an organization pipeline
     */
    getPipelineBranch({ organization, pipeline, branch }: GetPipelineBranchRequest): Observable<BranchImpl>
    getPipelineBranch({ organization, pipeline, branch }: GetPipelineBranchRequest, opts?: OperationOpts): Observable<AjaxResponse<BranchImpl>>
    getPipelineBranch({ organization, pipeline, branch }: GetPipelineBranchRequest, opts?: OperationOpts): Observable<BranchImpl | AjaxResponse<BranchImpl>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineBranch');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineBranch');
        throwIfNullOrUndefined(branch, 'branch', 'getPipelineBranch');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<BranchImpl>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{branch}', encodeURI(branch)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve branch run details for an organization pipeline
     */
    getPipelineBranchRun({ organization, pipeline, branch, run }: GetPipelineBranchRunRequest): Observable<PipelineRun>
    getPipelineBranchRun({ organization, pipeline, branch, run }: GetPipelineBranchRunRequest, opts?: OperationOpts): Observable<AjaxResponse<PipelineRun>>
    getPipelineBranchRun({ organization, pipeline, branch, run }: GetPipelineBranchRunRequest, opts?: OperationOpts): Observable<PipelineRun | AjaxResponse<PipelineRun>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineBranchRun');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineBranchRun');
        throwIfNullOrUndefined(branch, 'branch', 'getPipelineBranchRun');
        throwIfNullOrUndefined(run, 'run', 'getPipelineBranchRun');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PipelineRun>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{branch}', encodeURI(branch)).replace('{run}', encodeURI(run)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve all branches details for an organization pipeline
     */
    getPipelineBranches({ organization, pipeline }: GetPipelineBranchesRequest): Observable<MultibranchPipeline>
    getPipelineBranches({ organization, pipeline }: GetPipelineBranchesRequest, opts?: OperationOpts): Observable<AjaxResponse<MultibranchPipeline>>
    getPipelineBranches({ organization, pipeline }: GetPipelineBranchesRequest, opts?: OperationOpts): Observable<MultibranchPipeline | AjaxResponse<MultibranchPipeline>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineBranches');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineBranches');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<MultibranchPipeline>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve pipeline folder for an organization
     */
    getPipelineFolder({ organization, folder }: GetPipelineFolderRequest): Observable<PipelineFolderImpl>
    getPipelineFolder({ organization, folder }: GetPipelineFolderRequest, opts?: OperationOpts): Observable<AjaxResponse<PipelineFolderImpl>>
    getPipelineFolder({ organization, folder }: GetPipelineFolderRequest, opts?: OperationOpts): Observable<PipelineFolderImpl | AjaxResponse<PipelineFolderImpl>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineFolder');
        throwIfNullOrUndefined(folder, 'folder', 'getPipelineFolder');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PipelineFolderImpl>({
            url: '/blue/rest/organizations/{organization}/pipelines/{folder}/'.replace('{organization}', encodeURI(organization)).replace('{folder}', encodeURI(folder)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve pipeline details for an organization folder
     */
    getPipelineFolderPipeline({ organization, pipeline, folder }: GetPipelineFolderPipelineRequest): Observable<PipelineImpl>
    getPipelineFolderPipeline({ organization, pipeline, folder }: GetPipelineFolderPipelineRequest, opts?: OperationOpts): Observable<AjaxResponse<PipelineImpl>>
    getPipelineFolderPipeline({ organization, pipeline, folder }: GetPipelineFolderPipelineRequest, opts?: OperationOpts): Observable<PipelineImpl | AjaxResponse<PipelineImpl>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineFolderPipeline');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineFolderPipeline');
        throwIfNullOrUndefined(folder, 'folder', 'getPipelineFolderPipeline');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PipelineImpl>({
            url: '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{folder}', encodeURI(folder)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve queue details for an organization pipeline
     */
    getPipelineQueue({ organization, pipeline }: GetPipelineQueueRequest): Observable<Array<QueueItemImpl>>
    getPipelineQueue({ organization, pipeline }: GetPipelineQueueRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<QueueItemImpl>>>
    getPipelineQueue({ organization, pipeline }: GetPipelineQueueRequest, opts?: OperationOpts): Observable<Array<QueueItemImpl> | AjaxResponse<Array<QueueItemImpl>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineQueue');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineQueue');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<QueueItemImpl>>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve run details for an organization pipeline
     */
    getPipelineRun({ organization, pipeline, run }: GetPipelineRunRequest): Observable<PipelineRun>
    getPipelineRun({ organization, pipeline, run }: GetPipelineRunRequest, opts?: OperationOpts): Observable<AjaxResponse<PipelineRun>>
    getPipelineRun({ organization, pipeline, run }: GetPipelineRunRequest, opts?: OperationOpts): Observable<PipelineRun | AjaxResponse<PipelineRun>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineRun');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineRun');
        throwIfNullOrUndefined(run, 'run', 'getPipelineRun');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PipelineRun>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get log for a pipeline run
     */
    getPipelineRunLog({ organization, pipeline, run, start, download }: GetPipelineRunLogRequest): Observable<string>
    getPipelineRunLog({ organization, pipeline, run, start, download }: GetPipelineRunLogRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    getPipelineRunLog({ organization, pipeline, run, start, download }: GetPipelineRunLogRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineRunLog');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineRunLog');
        throwIfNullOrUndefined(run, 'run', 'getPipelineRunLog');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (start != null) { query['start'] = start; }
        if (download != null) { query['download'] = download; }

        return this.request<string>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve run node details for an organization pipeline
     */
    getPipelineRunNode({ organization, pipeline, run, node }: GetPipelineRunNodeRequest): Observable<PipelineRunNode>
    getPipelineRunNode({ organization, pipeline, run, node }: GetPipelineRunNodeRequest, opts?: OperationOpts): Observable<AjaxResponse<PipelineRunNode>>
    getPipelineRunNode({ organization, pipeline, run, node }: GetPipelineRunNodeRequest, opts?: OperationOpts): Observable<PipelineRunNode | AjaxResponse<PipelineRunNode>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineRunNode');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineRunNode');
        throwIfNullOrUndefined(run, 'run', 'getPipelineRunNode');
        throwIfNullOrUndefined(node, 'node', 'getPipelineRunNode');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PipelineRunNode>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)).replace('{node}', encodeURI(node)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve run node details for an organization pipeline
     */
    getPipelineRunNodeStep({ organization, pipeline, run, node, step }: GetPipelineRunNodeStepRequest): Observable<PipelineStepImpl>
    getPipelineRunNodeStep({ organization, pipeline, run, node, step }: GetPipelineRunNodeStepRequest, opts?: OperationOpts): Observable<AjaxResponse<PipelineStepImpl>>
    getPipelineRunNodeStep({ organization, pipeline, run, node, step }: GetPipelineRunNodeStepRequest, opts?: OperationOpts): Observable<PipelineStepImpl | AjaxResponse<PipelineStepImpl>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineRunNodeStep');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineRunNodeStep');
        throwIfNullOrUndefined(run, 'run', 'getPipelineRunNodeStep');
        throwIfNullOrUndefined(node, 'node', 'getPipelineRunNodeStep');
        throwIfNullOrUndefined(step, 'step', 'getPipelineRunNodeStep');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<PipelineStepImpl>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)).replace('{node}', encodeURI(node)).replace('{step}', encodeURI(step)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Get log for a pipeline run node step
     */
    getPipelineRunNodeStepLog({ organization, pipeline, run, node, step }: GetPipelineRunNodeStepLogRequest): Observable<string>
    getPipelineRunNodeStepLog({ organization, pipeline, run, node, step }: GetPipelineRunNodeStepLogRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    getPipelineRunNodeStepLog({ organization, pipeline, run, node, step }: GetPipelineRunNodeStepLogRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineRunNodeStepLog');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineRunNodeStepLog');
        throwIfNullOrUndefined(run, 'run', 'getPipelineRunNodeStepLog');
        throwIfNullOrUndefined(node, 'node', 'getPipelineRunNodeStepLog');
        throwIfNullOrUndefined(step, 'step', 'getPipelineRunNodeStepLog');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<string>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)).replace('{node}', encodeURI(node)).replace('{step}', encodeURI(step)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve run node steps details for an organization pipeline
     */
    getPipelineRunNodeSteps({ organization, pipeline, run, node }: GetPipelineRunNodeStepsRequest): Observable<Array<PipelineStepImpl>>
    getPipelineRunNodeSteps({ organization, pipeline, run, node }: GetPipelineRunNodeStepsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PipelineStepImpl>>>
    getPipelineRunNodeSteps({ organization, pipeline, run, node }: GetPipelineRunNodeStepsRequest, opts?: OperationOpts): Observable<Array<PipelineStepImpl> | AjaxResponse<Array<PipelineStepImpl>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineRunNodeSteps');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineRunNodeSteps');
        throwIfNullOrUndefined(run, 'run', 'getPipelineRunNodeSteps');
        throwIfNullOrUndefined(node, 'node', 'getPipelineRunNodeSteps');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<PipelineStepImpl>>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)).replace('{node}', encodeURI(node)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve run nodes details for an organization pipeline
     */
    getPipelineRunNodes({ organization, pipeline, run }: GetPipelineRunNodesRequest): Observable<Array<PipelineRunNode>>
    getPipelineRunNodes({ organization, pipeline, run }: GetPipelineRunNodesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PipelineRunNode>>>
    getPipelineRunNodes({ organization, pipeline, run }: GetPipelineRunNodesRequest, opts?: OperationOpts): Observable<Array<PipelineRunNode> | AjaxResponse<Array<PipelineRunNode>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineRunNodes');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineRunNodes');
        throwIfNullOrUndefined(run, 'run', 'getPipelineRunNodes');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<PipelineRunNode>>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve all runs details for an organization pipeline
     */
    getPipelineRuns({ organization, pipeline }: GetPipelineRunsRequest): Observable<Array<PipelineRun>>
    getPipelineRuns({ organization, pipeline }: GetPipelineRunsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<PipelineRun>>>
    getPipelineRuns({ organization, pipeline }: GetPipelineRunsRequest, opts?: OperationOpts): Observable<Array<PipelineRun> | AjaxResponse<Array<PipelineRun>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelineRuns');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'getPipelineRuns');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<PipelineRun>>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve all pipelines details for an organization
     */
    getPipelines({ organization }: GetPipelinesRequest): Observable<Array<Pipeline>>
    getPipelines({ organization }: GetPipelinesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<Pipeline>>>
    getPipelines({ organization }: GetPipelinesRequest, opts?: OperationOpts): Observable<Array<Pipeline> | AjaxResponse<Array<Pipeline>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getPipelines');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<Pipeline>>({
            url: '/blue/rest/organizations/{organization}/pipelines/'.replace('{organization}', encodeURI(organization)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve SCM details for an organization
     */
    getSCM({ organization, scm }: GetSCMRequest): Observable<GithubScm>
    getSCM({ organization, scm }: GetSCMRequest, opts?: OperationOpts): Observable<AjaxResponse<GithubScm>>
    getSCM({ organization, scm }: GetSCMRequest, opts?: OperationOpts): Observable<GithubScm | AjaxResponse<GithubScm>> {
        throwIfNullOrUndefined(organization, 'organization', 'getSCM');
        throwIfNullOrUndefined(scm, 'scm', 'getSCM');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<GithubScm>({
            url: '/blue/rest/organizations/{organization}/scm/{scm}'.replace('{organization}', encodeURI(organization)).replace('{scm}', encodeURI(scm)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve SCM organization repositories details for an organization
     */
    getSCMOrganisationRepositories({ organization, scm, scmOrganisation, credentialId, pageSize, pageNumber }: GetSCMOrganisationRepositoriesRequest): Observable<Array<GithubOrganization>>
    getSCMOrganisationRepositories({ organization, scm, scmOrganisation, credentialId, pageSize, pageNumber }: GetSCMOrganisationRepositoriesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<GithubOrganization>>>
    getSCMOrganisationRepositories({ organization, scm, scmOrganisation, credentialId, pageSize, pageNumber }: GetSCMOrganisationRepositoriesRequest, opts?: OperationOpts): Observable<Array<GithubOrganization> | AjaxResponse<Array<GithubOrganization>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getSCMOrganisationRepositories');
        throwIfNullOrUndefined(scm, 'scm', 'getSCMOrganisationRepositories');
        throwIfNullOrUndefined(scmOrganisation, 'scmOrganisation', 'getSCMOrganisationRepositories');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (credentialId != null) { query['credentialId'] = credentialId; }
        if (pageSize != null) { query['pageSize'] = pageSize; }
        if (pageNumber != null) { query['pageNumber'] = pageNumber; }

        return this.request<Array<GithubOrganization>>({
            url: '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories'.replace('{organization}', encodeURI(organization)).replace('{scm}', encodeURI(scm)).replace('{scmOrganisation}', encodeURI(scmOrganisation)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve SCM organization repository details for an organization
     */
    getSCMOrganisationRepository({ organization, scm, scmOrganisation, repository, credentialId }: GetSCMOrganisationRepositoryRequest): Observable<Array<GithubOrganization>>
    getSCMOrganisationRepository({ organization, scm, scmOrganisation, repository, credentialId }: GetSCMOrganisationRepositoryRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<GithubOrganization>>>
    getSCMOrganisationRepository({ organization, scm, scmOrganisation, repository, credentialId }: GetSCMOrganisationRepositoryRequest, opts?: OperationOpts): Observable<Array<GithubOrganization> | AjaxResponse<Array<GithubOrganization>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getSCMOrganisationRepository');
        throwIfNullOrUndefined(scm, 'scm', 'getSCMOrganisationRepository');
        throwIfNullOrUndefined(scmOrganisation, 'scmOrganisation', 'getSCMOrganisationRepository');
        throwIfNullOrUndefined(repository, 'repository', 'getSCMOrganisationRepository');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (credentialId != null) { query['credentialId'] = credentialId; }

        return this.request<Array<GithubOrganization>>({
            url: '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}'.replace('{organization}', encodeURI(organization)).replace('{scm}', encodeURI(scm)).replace('{scmOrganisation}', encodeURI(scmOrganisation)).replace('{repository}', encodeURI(repository)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve SCM organizations details for an organization
     */
    getSCMOrganisations({ organization, scm, credentialId }: GetSCMOrganisationsRequest): Observable<Array<GithubOrganization>>
    getSCMOrganisations({ organization, scm, credentialId }: GetSCMOrganisationsRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<GithubOrganization>>>
    getSCMOrganisations({ organization, scm, credentialId }: GetSCMOrganisationsRequest, opts?: OperationOpts): Observable<Array<GithubOrganization> | AjaxResponse<Array<GithubOrganization>>> {
        throwIfNullOrUndefined(organization, 'organization', 'getSCMOrganisations');
        throwIfNullOrUndefined(scm, 'scm', 'getSCMOrganisations');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (credentialId != null) { query['credentialId'] = credentialId; }

        return this.request<Array<GithubOrganization>>({
            url: '/blue/rest/organizations/{organization}/scm/{scm}/organizations'.replace('{organization}', encodeURI(organization)).replace('{scm}', encodeURI(scm)),
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve user details for an organization
     */
    getUser({ organization, user }: GetUserRequest): Observable<User>
    getUser({ organization, user }: GetUserRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    getUser({ organization, user }: GetUserRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(organization, 'organization', 'getUser');
        throwIfNullOrUndefined(user, 'user', 'getUser');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<User>({
            url: '/blue/rest/organizations/{organization}/users/{user}'.replace('{organization}', encodeURI(organization)).replace('{user}', encodeURI(user)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve user favorites details for an organization
     */
    getUserFavorites({ user }: GetUserFavoritesRequest): Observable<Array<FavoriteImpl>>
    getUserFavorites({ user }: GetUserFavoritesRequest, opts?: OperationOpts): Observable<AjaxResponse<Array<FavoriteImpl>>>
    getUserFavorites({ user }: GetUserFavoritesRequest, opts?: OperationOpts): Observable<Array<FavoriteImpl> | AjaxResponse<Array<FavoriteImpl>>> {
        throwIfNullOrUndefined(user, 'user', 'getUserFavorites');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<Array<FavoriteImpl>>({
            url: '/blue/rest/users/{user}/favorites'.replace('{user}', encodeURI(user)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Retrieve users details for an organization
     */
    getUsers({ organization }: GetUsersRequest): Observable<User>
    getUsers({ organization }: GetUsersRequest, opts?: OperationOpts): Observable<AjaxResponse<User>>
    getUsers({ organization }: GetUsersRequest, opts?: OperationOpts): Observable<User | AjaxResponse<User>> {
        throwIfNullOrUndefined(organization, 'organization', 'getUsers');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<User>({
            url: '/blue/rest/organizations/{organization}/users/'.replace('{organization}', encodeURI(organization)),
            method: 'GET',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Replay an organization pipeline run
     */
    postPipelineRun({ organization, pipeline, run }: PostPipelineRunRequest): Observable<QueueItemImpl>
    postPipelineRun({ organization, pipeline, run }: PostPipelineRunRequest, opts?: OperationOpts): Observable<AjaxResponse<QueueItemImpl>>
    postPipelineRun({ organization, pipeline, run }: PostPipelineRunRequest, opts?: OperationOpts): Observable<QueueItemImpl | AjaxResponse<QueueItemImpl>> {
        throwIfNullOrUndefined(organization, 'organization', 'postPipelineRun');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'postPipelineRun');
        throwIfNullOrUndefined(run, 'run', 'postPipelineRun');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<QueueItemImpl>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Start a build for an organization pipeline
     */
    postPipelineRuns({ organization, pipeline }: PostPipelineRunsRequest): Observable<QueueItemImpl>
    postPipelineRuns({ organization, pipeline }: PostPipelineRunsRequest, opts?: OperationOpts): Observable<AjaxResponse<QueueItemImpl>>
    postPipelineRuns({ organization, pipeline }: PostPipelineRunsRequest, opts?: OperationOpts): Observable<QueueItemImpl | AjaxResponse<QueueItemImpl>> {
        throwIfNullOrUndefined(organization, 'organization', 'postPipelineRuns');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'postPipelineRuns');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<QueueItemImpl>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)),
            method: 'POST',
            headers,
        }, opts?.responseOpts);
    };

    /**
     * Favorite/unfavorite a pipeline
     */
    putPipelineFavorite({ organization, pipeline, body }: PutPipelineFavoriteRequest): Observable<FavoriteImpl>
    putPipelineFavorite({ organization, pipeline, body }: PutPipelineFavoriteRequest, opts?: OperationOpts): Observable<AjaxResponse<FavoriteImpl>>
    putPipelineFavorite({ organization, pipeline, body }: PutPipelineFavoriteRequest, opts?: OperationOpts): Observable<FavoriteImpl | AjaxResponse<FavoriteImpl>> {
        throwIfNullOrUndefined(organization, 'organization', 'putPipelineFavorite');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'putPipelineFavorite');
        throwIfNullOrUndefined(body, 'body', 'putPipelineFavorite');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        return this.request<FavoriteImpl>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)),
            method: 'PUT',
            headers,
            body: body as any,
        }, opts?.responseOpts);
    };

    /**
     * Stop a build of an organization pipeline
     */
    putPipelineRun({ organization, pipeline, run, blocking, timeOutInSecs }: PutPipelineRunRequest): Observable<PipelineRun>
    putPipelineRun({ organization, pipeline, run, blocking, timeOutInSecs }: PutPipelineRunRequest, opts?: OperationOpts): Observable<AjaxResponse<PipelineRun>>
    putPipelineRun({ organization, pipeline, run, blocking, timeOutInSecs }: PutPipelineRunRequest, opts?: OperationOpts): Observable<PipelineRun | AjaxResponse<PipelineRun>> {
        throwIfNullOrUndefined(organization, 'organization', 'putPipelineRun');
        throwIfNullOrUndefined(pipeline, 'pipeline', 'putPipelineRun');
        throwIfNullOrUndefined(run, 'run', 'putPipelineRun');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = {};

        if (blocking != null) { query['blocking'] = blocking; }
        if (timeOutInSecs != null) { query['timeOutInSecs'] = timeOutInSecs; }

        return this.request<PipelineRun>({
            url: '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop'.replace('{organization}', encodeURI(organization)).replace('{pipeline}', encodeURI(pipeline)).replace('{run}', encodeURI(run)),
            method: 'PUT',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Search for any resource details
     */
    search({ q }: SearchRequest): Observable<string>
    search({ q }: SearchRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    search({ q }: SearchRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(q, 'q', 'search');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'q': q,
        };

        return this.request<string>({
            url: '/blue/rest/search/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

    /**
     * Get classes details
     */
    searchClasses({ q }: SearchClassesRequest): Observable<string>
    searchClasses({ q }: SearchClassesRequest, opts?: OperationOpts): Observable<AjaxResponse<string>>
    searchClasses({ q }: SearchClassesRequest, opts?: OperationOpts): Observable<string | AjaxResponse<string>> {
        throwIfNullOrUndefined(q, 'q', 'searchClasses');

        const headers: HttpHeaders = {
            ...(this.configuration.username != null && this.configuration.password != null ? { Authorization: `Basic ${btoa(this.configuration.username + ':' + this.configuration.password)}` } : undefined),
        };

        const query: HttpQuery = { // required parameters are used directly since they are already checked by throwIfNullOrUndefined
            'q': q,
        };

        return this.request<string>({
            url: '/blue/rest/classes/',
            method: 'GET',
            headers,
            query,
        }, opts?.responseOpts);
    };

}
