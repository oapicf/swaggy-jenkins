from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.pipeline_impllinks import PipelineImpllinks
from openapi_server import util

from openapi_server.models.pipeline_impllinks import PipelineImpllinks  # noqa: E501

class PipelineImpl(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _class=None, display_name=None, estimated_duration_in_millis=None, full_name=None, latest_run=None, name=None, organization=None, weather_score=None, links=None):  # noqa: E501
        """PipelineImpl - a model defined in OpenAPI

        :param _class: The _class of this PipelineImpl.  # noqa: E501
        :type _class: str
        :param display_name: The display_name of this PipelineImpl.  # noqa: E501
        :type display_name: str
        :param estimated_duration_in_millis: The estimated_duration_in_millis of this PipelineImpl.  # noqa: E501
        :type estimated_duration_in_millis: int
        :param full_name: The full_name of this PipelineImpl.  # noqa: E501
        :type full_name: str
        :param latest_run: The latest_run of this PipelineImpl.  # noqa: E501
        :type latest_run: str
        :param name: The name of this PipelineImpl.  # noqa: E501
        :type name: str
        :param organization: The organization of this PipelineImpl.  # noqa: E501
        :type organization: str
        :param weather_score: The weather_score of this PipelineImpl.  # noqa: E501
        :type weather_score: int
        :param links: The links of this PipelineImpl.  # noqa: E501
        :type links: PipelineImpllinks
        """
        self.openapi_types = {
            '_class': str,
            'display_name': str,
            'estimated_duration_in_millis': int,
            'full_name': str,
            'latest_run': str,
            'name': str,
            'organization': str,
            'weather_score': int,
            'links': PipelineImpllinks
        }

        self.attribute_map = {
            '_class': '_class',
            'display_name': 'displayName',
            'estimated_duration_in_millis': 'estimatedDurationInMillis',
            'full_name': 'fullName',
            'latest_run': 'latestRun',
            'name': 'name',
            'organization': 'organization',
            'weather_score': 'weatherScore',
            'links': '_links'
        }

        self.__class = _class
        self._display_name = display_name
        self._estimated_duration_in_millis = estimated_duration_in_millis
        self._full_name = full_name
        self._latest_run = latest_run
        self._name = name
        self._organization = organization
        self._weather_score = weather_score
        self._links = links

    @classmethod
    def from_dict(cls, dikt) -> 'PipelineImpl':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PipelineImpl of this PipelineImpl.  # noqa: E501
        :rtype: PipelineImpl
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self) -> str:
        """Gets the _class of this PipelineImpl.


        :return: The _class of this PipelineImpl.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this PipelineImpl.


        :param _class: The _class of this PipelineImpl.
        :type _class: str
        """

        self.__class = _class

    @property
    def display_name(self) -> str:
        """Gets the display_name of this PipelineImpl.


        :return: The display_name of this PipelineImpl.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this PipelineImpl.


        :param display_name: The display_name of this PipelineImpl.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def estimated_duration_in_millis(self) -> int:
        """Gets the estimated_duration_in_millis of this PipelineImpl.


        :return: The estimated_duration_in_millis of this PipelineImpl.
        :rtype: int
        """
        return self._estimated_duration_in_millis

    @estimated_duration_in_millis.setter
    def estimated_duration_in_millis(self, estimated_duration_in_millis: int):
        """Sets the estimated_duration_in_millis of this PipelineImpl.


        :param estimated_duration_in_millis: The estimated_duration_in_millis of this PipelineImpl.
        :type estimated_duration_in_millis: int
        """

        self._estimated_duration_in_millis = estimated_duration_in_millis

    @property
    def full_name(self) -> str:
        """Gets the full_name of this PipelineImpl.


        :return: The full_name of this PipelineImpl.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name: str):
        """Sets the full_name of this PipelineImpl.


        :param full_name: The full_name of this PipelineImpl.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def latest_run(self) -> str:
        """Gets the latest_run of this PipelineImpl.


        :return: The latest_run of this PipelineImpl.
        :rtype: str
        """
        return self._latest_run

    @latest_run.setter
    def latest_run(self, latest_run: str):
        """Sets the latest_run of this PipelineImpl.


        :param latest_run: The latest_run of this PipelineImpl.
        :type latest_run: str
        """

        self._latest_run = latest_run

    @property
    def name(self) -> str:
        """Gets the name of this PipelineImpl.


        :return: The name of this PipelineImpl.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PipelineImpl.


        :param name: The name of this PipelineImpl.
        :type name: str
        """

        self._name = name

    @property
    def organization(self) -> str:
        """Gets the organization of this PipelineImpl.


        :return: The organization of this PipelineImpl.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization: str):
        """Sets the organization of this PipelineImpl.


        :param organization: The organization of this PipelineImpl.
        :type organization: str
        """

        self._organization = organization

    @property
    def weather_score(self) -> int:
        """Gets the weather_score of this PipelineImpl.


        :return: The weather_score of this PipelineImpl.
        :rtype: int
        """
        return self._weather_score

    @weather_score.setter
    def weather_score(self, weather_score: int):
        """Sets the weather_score of this PipelineImpl.


        :param weather_score: The weather_score of this PipelineImpl.
        :type weather_score: int
        """

        self._weather_score = weather_score

    @property
    def links(self) -> PipelineImpllinks:
        """Gets the links of this PipelineImpl.


        :return: The links of this PipelineImpl.
        :rtype: PipelineImpllinks
        """
        return self._links

    @links.setter
    def links(self, links: PipelineImpllinks):
        """Sets the links of this PipelineImpl.


        :param links: The links of this PipelineImpl.
        :type links: PipelineImpllinks
        """

        self._links = links
