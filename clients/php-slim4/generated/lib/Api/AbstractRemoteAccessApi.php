<?php

/**
 * Swaggy Jenkins
 * PHP version 7.4
 *
 * @package OpenAPIServer
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */

/**
 * Jenkins API clients generated from Swagger / Open API specification
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 * Extend this class with your controller. You can inject dependencies via class constructor,
 * @see https://github.com/PHP-DI/Slim-Bridge basic example.
 */
namespace OpenAPIServer\Api;

use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Message\ResponseInterface;
use Slim\Exception\HttpNotImplementedException;

/**
 * AbstractRemoteAccessApi Class Doc Comment
 *
 * @package OpenAPIServer\Api
 * @author  OpenAPI Generator team
 * @link    https://github.com/openapitools/openapi-generator
 */
abstract class AbstractRemoteAccessApi
{
    /**
     * GET getComputer
     * Notes: Retrieve computer details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getComputer(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $depth = (key_exists('depth', $queryParams)) ? $queryParams['depth'] : null;
        $message = "How about implementing getComputer as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getJenkins
     * Notes: Retrieve Jenkins details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getJenkins(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $message = "How about implementing getJenkins as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getJob
     * Notes: Retrieve job details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getJob(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $message = "How about implementing getJob as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getJobConfig
     * Notes: Retrieve job configuration
     * Output-Formats: [text/xml]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getJobConfig(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $message = "How about implementing getJobConfig as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getJobLastBuild
     * Notes: Retrieve job&#39;s last build details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getJobLastBuild(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $message = "How about implementing getJobLastBuild as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getJobProgressiveText
     * Notes: Retrieve job&#39;s build progressive text output
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     * @param string $number Build number
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getJobProgressiveText(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name,
        string $number
    ): ResponseInterface {
        $queryParams = $request->getQueryParams();
        $start = (key_exists('start', $queryParams)) ? $queryParams['start'] : null;
        $message = "How about implementing getJobProgressiveText as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getQueue
     * Notes: Retrieve queue details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getQueue(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $message = "How about implementing getQueue as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getQueueItem
     * Notes: Retrieve queued item details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $number Queue number
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getQueueItem(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $number
    ): ResponseInterface {
        $message = "How about implementing getQueueItem as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getView
     * Notes: Retrieve view details
     * Output-Formats: [application/json]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the view
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getView(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $message = "How about implementing getView as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * GET getViewConfig
     * Notes: Retrieve view configuration
     * Output-Formats: [text/xml]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the view
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function getViewConfig(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $message = "How about implementing getViewConfig as a GET method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * HEAD headJenkins
     * Notes: Retrieve Jenkins headers
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function headJenkins(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $message = "How about implementing headJenkins as a HEAD method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postCreateItem
     * Notes: Create a new job using job configuration, or copied from an existing job
     * Output-Formats: [*_/_*]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postCreateItem(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $contentType = $request->hasHeader('Content-Type') ? $headers['Content-Type'] : null;
        $queryParams = $request->getQueryParams();
        $name = (key_exists('name', $queryParams)) ? $queryParams['name'] : null;
        $from = (key_exists('from', $queryParams)) ? $queryParams['from'] : null;
        $mode = (key_exists('mode', $queryParams)) ? $queryParams['mode'] : null;
        $body = $request->getParsedBody();
        $message = "How about implementing postCreateItem as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postCreateView
     * Notes: Create a new view using view configuration
     * Output-Formats: [*_/_*]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postCreateView(
        ServerRequestInterface $request,
        ResponseInterface $response
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $contentType = $request->hasHeader('Content-Type') ? $headers['Content-Type'] : null;
        $queryParams = $request->getQueryParams();
        $name = (key_exists('name', $queryParams)) ? $queryParams['name'] : null;
        $body = $request->getParsedBody();
        $message = "How about implementing postCreateView as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postJobBuild
     * Notes: Build a job
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postJobBuild(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $queryParams = $request->getQueryParams();
        $json = (key_exists('json', $queryParams)) ? $queryParams['json'] : null;
        $token = (key_exists('token', $queryParams)) ? $queryParams['token'] : null;
        $message = "How about implementing postJobBuild as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postJobConfig
     * Notes: Update job configuration
     * Output-Formats: [*_/_*]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postJobConfig(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $body = $request->getParsedBody();
        $message = "How about implementing postJobConfig as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postJobDelete
     * Notes: Delete a job
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postJobDelete(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $message = "How about implementing postJobDelete as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postJobDisable
     * Notes: Disable a job
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postJobDisable(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $message = "How about implementing postJobDisable as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postJobEnable
     * Notes: Enable a job
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postJobEnable(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $message = "How about implementing postJobEnable as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postJobLastBuildStop
     * Notes: Stop a job
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the job
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postJobLastBuildStop(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $message = "How about implementing postJobLastBuildStop as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }

    /**
     * POST postViewConfig
     * Notes: Update view configuration
     * Output-Formats: [*_/_*]
     *
     * @param ServerRequestInterface $request  Request
     * @param ResponseInterface      $response Response
     * @param string $name Name of the view
     *
     * @return ResponseInterface
     * @throws HttpNotImplementedException to force implementation class to override this method
     */
    public function postViewConfig(
        ServerRequestInterface $request,
        ResponseInterface $response,
        string $name
    ): ResponseInterface {
        $headers = $request->getHeaders();
        $jenkinsCrumb = $request->hasHeader('Jenkins-Crumb') ? $headers['Jenkins-Crumb'] : null;
        $body = $request->getParsedBody();
        $message = "How about implementing postViewConfig as a POST method in OpenAPIServer\Api\RemoteAccessApi class?";
        throw new HttpNotImplementedException($request, $message);
    }
}
