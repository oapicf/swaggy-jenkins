/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.swaggyjenkins.api;

import com.github.oapicf.swaggyjenkins.ApiCallback;
import com.github.oapicf.swaggyjenkins.ApiClient;
import com.github.oapicf.swaggyjenkins.ApiException;
import com.github.oapicf.swaggyjenkins.ApiResponse;
import com.github.oapicf.swaggyjenkins.Configuration;
import com.github.oapicf.swaggyjenkins.Pair;
import com.github.oapicf.swaggyjenkins.ProgressRequestBody;
import com.github.oapicf.swaggyjenkins.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.oapicf.swaggyjenkins.model.BranchImpl;
import com.github.oapicf.swaggyjenkins.model.FavoriteImpl;
import com.github.oapicf.swaggyjenkins.model.GithubOrganization;
import com.github.oapicf.swaggyjenkins.model.GithubScm;
import com.github.oapicf.swaggyjenkins.model.MultibranchPipeline;
import com.github.oapicf.swaggyjenkins.model.Organisation;
import com.github.oapicf.swaggyjenkins.model.Pipeline;
import com.github.oapicf.swaggyjenkins.model.PipelineActivity;
import com.github.oapicf.swaggyjenkins.model.PipelineFolderImpl;
import com.github.oapicf.swaggyjenkins.model.PipelineImpl;
import com.github.oapicf.swaggyjenkins.model.PipelineRun;
import com.github.oapicf.swaggyjenkins.model.PipelineRunNode;
import com.github.oapicf.swaggyjenkins.model.PipelineStepImpl;
import com.github.oapicf.swaggyjenkins.model.QueueItemImpl;
import com.github.oapicf.swaggyjenkins.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlueOceanApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BlueOceanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlueOceanApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deletePipelineQueueItem
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param queue Name of the queue item (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted queue item </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePipelineQueueItemCall(String organization, String pipeline, String queue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "queue" + "}", localVarApiClient.escapeString(queue.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePipelineQueueItemValidateBeforeCall(String organization, String pipeline, String queue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling deletePipelineQueueItem(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling deletePipelineQueueItem(Async)");
        }

        // verify the required parameter 'queue' is set
        if (queue == null) {
            throw new ApiException("Missing the required parameter 'queue' when calling deletePipelineQueueItem(Async)");
        }

        return deletePipelineQueueItemCall(organization, pipeline, queue, _callback);

    }

    /**
     * 
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param queue Name of the queue item (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted queue item </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public void deletePipelineQueueItem(String organization, String pipeline, String queue) throws ApiException {
        deletePipelineQueueItemWithHttpInfo(organization, pipeline, queue);
    }

    /**
     * 
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param queue Name of the queue item (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted queue item </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePipelineQueueItemWithHttpInfo(String organization, String pipeline, String queue) throws ApiException {
        okhttp3.Call localVarCall = deletePipelineQueueItemValidateBeforeCall(organization, pipeline, queue, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param queue Name of the queue item (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted queue item </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePipelineQueueItemAsync(String organization, String pipeline, String queue, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePipelineQueueItemValidateBeforeCall(organization, pipeline, queue, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthenticatedUser
     * @param organization Name of the organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved authenticated user details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthenticatedUserCall(String organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/user/"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthenticatedUserValidateBeforeCall(String organization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getAuthenticatedUser(Async)");
        }

        return getAuthenticatedUserCall(organization, _callback);

    }

    /**
     * 
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved authenticated user details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public User getAuthenticatedUser(String organization) throws ApiException {
        ApiResponse<User> localVarResp = getAuthenticatedUserWithHttpInfo(organization);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved authenticated user details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getAuthenticatedUserWithHttpInfo(String organization) throws ApiException {
        okhttp3.Call localVarCall = getAuthenticatedUserValidateBeforeCall(organization, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved authenticated user details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthenticatedUserAsync(String organization, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthenticatedUserValidateBeforeCall(organization, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClasses
     * @param propertyClass Name of the class (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved class names </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassesCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/classes/{class}"
            .replace("{" + "class" + "}", localVarApiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClassesValidateBeforeCall(String propertyClass, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling getClasses(Async)");
        }

        return getClassesCall(propertyClass, _callback);

    }

    /**
     * 
     * Get a list of class names supported by a given class
     * @param propertyClass Name of the class (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved class names </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public String getClasses(String propertyClass) throws ApiException {
        ApiResponse<String> localVarResp = getClassesWithHttpInfo(propertyClass);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a list of class names supported by a given class
     * @param propertyClass Name of the class (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved class names </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getClassesWithHttpInfo(String propertyClass) throws ApiException {
        okhttp3.Call localVarCall = getClassesValidateBeforeCall(propertyClass, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of class names supported by a given class
     * @param propertyClass Name of the class (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved class names </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClassesAsync(String propertyClass, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClassesValidateBeforeCall(propertyClass, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJsonWebKey
     * @param key Key ID received as part of JWT header field kid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved JWT token </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonWebKeyCall(Integer key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jwt-auth/jwks/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonWebKeyValidateBeforeCall(Integer key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getJsonWebKey(Async)");
        }

        return getJsonWebKeyCall(key, _callback);

    }

    /**
     * 
     * Retrieve JSON Web Key
     * @param key Key ID received as part of JWT header field kid (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved JWT token </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public String getJsonWebKey(Integer key) throws ApiException {
        ApiResponse<String> localVarResp = getJsonWebKeyWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve JSON Web Key
     * @param key Key ID received as part of JWT header field kid (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved JWT token </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getJsonWebKeyWithHttpInfo(Integer key) throws ApiException {
        okhttp3.Call localVarCall = getJsonWebKeyValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve JSON Web Key
     * @param key Key ID received as part of JWT header field kid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved JWT token </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonWebKeyAsync(Integer key, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonWebKeyValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJsonWebToken
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes (optional)
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved JWT token </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonWebTokenCall(Integer expiryTimeInMins, Integer maxExpiryTimeInMins, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/jwt-auth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expiryTimeInMins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiryTimeInMins", expiryTimeInMins));
        }

        if (maxExpiryTimeInMins != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxExpiryTimeInMins", maxExpiryTimeInMins));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonWebTokenValidateBeforeCall(Integer expiryTimeInMins, Integer maxExpiryTimeInMins, final ApiCallback _callback) throws ApiException {
        return getJsonWebTokenCall(expiryTimeInMins, maxExpiryTimeInMins, _callback);

    }

    /**
     * 
     * Retrieve JSON Web Token
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes (optional)
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved JWT token </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public String getJsonWebToken(Integer expiryTimeInMins, Integer maxExpiryTimeInMins) throws ApiException {
        ApiResponse<String> localVarResp = getJsonWebTokenWithHttpInfo(expiryTimeInMins, maxExpiryTimeInMins);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve JSON Web Token
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes (optional)
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved JWT token </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getJsonWebTokenWithHttpInfo(Integer expiryTimeInMins, Integer maxExpiryTimeInMins) throws ApiException {
        okhttp3.Call localVarCall = getJsonWebTokenValidateBeforeCall(expiryTimeInMins, maxExpiryTimeInMins, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve JSON Web Token
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes (optional)
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved JWT token </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJsonWebTokenAsync(Integer expiryTimeInMins, Integer maxExpiryTimeInMins, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonWebTokenValidateBeforeCall(expiryTimeInMins, maxExpiryTimeInMins, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisation
     * @param organization Name of the organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationCall(String organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationValidateBeforeCall(String organization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getOrganisation(Async)");
        }

        return getOrganisationCall(organization, _callback);

    }

    /**
     * 
     * Retrieve organization details
     * @param organization Name of the organization (required)
     * @return Organisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public Organisation getOrganisation(String organization) throws ApiException {
        ApiResponse<Organisation> localVarResp = getOrganisationWithHttpInfo(organization);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve organization details
     * @param organization Name of the organization (required)
     * @return ApiResponse&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Organisation> getOrganisationWithHttpInfo(String organization) throws ApiException {
        okhttp3.Call localVarCall = getOrganisationValidateBeforeCall(organization, null);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve organization details
     * @param organization Name of the organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationAsync(String organization, final ApiCallback<Organisation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationValidateBeforeCall(organization, _callback);
        Type localVarReturnType = new TypeToken<Organisation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganisations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipelines details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganisationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOrganisationsCall(_callback);

    }

    /**
     * 
     * Retrieve all organizations details
     * @return List&lt;Organisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipelines details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<Organisation> getOrganisations() throws ApiException {
        ApiResponse<List<Organisation>> localVarResp = getOrganisationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all organizations details
     * @return ApiResponse&lt;List&lt;Organisation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipelines details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Organisation>> getOrganisationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOrganisationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Organisation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all organizations details
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipelines details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrganisationsAsync(final ApiCallback<List<Organisation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganisationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Organisation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineValidateBeforeCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipeline(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipeline(Async)");
        }

        return getPipelineCall(organization, pipeline, _callback);

    }

    /**
     * 
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Pipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public Pipeline getPipeline(String organization, String pipeline) throws ApiException {
        ApiResponse<Pipeline> localVarResp = getPipelineWithHttpInfo(organization, pipeline);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return ApiResponse&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Pipeline> getPipelineWithHttpInfo(String organization, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getPipelineValidateBeforeCall(organization, pipeline, null);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Pipeline cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineAsync(String organization, String pipeline, final ApiCallback<Pipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineValidateBeforeCall(organization, pipeline, _callback);
        Type localVarReturnType = new TypeToken<Pipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineActivities
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all activities details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineActivitiesCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineActivitiesValidateBeforeCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineActivities(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineActivities(Async)");
        }

        return getPipelineActivitiesCall(organization, pipeline, _callback);

    }

    /**
     * 
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;PipelineActivity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all activities details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<PipelineActivity> getPipelineActivities(String organization, String pipeline) throws ApiException {
        ApiResponse<List<PipelineActivity>> localVarResp = getPipelineActivitiesWithHttpInfo(organization, pipeline);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return ApiResponse&lt;List&lt;PipelineActivity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all activities details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PipelineActivity>> getPipelineActivitiesWithHttpInfo(String organization, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getPipelineActivitiesValidateBeforeCall(organization, pipeline, null);
        Type localVarReturnType = new TypeToken<List<PipelineActivity>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all activities details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineActivitiesAsync(String organization, String pipeline, final ApiCallback<List<PipelineActivity>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineActivitiesValidateBeforeCall(organization, pipeline, _callback);
        Type localVarReturnType = new TypeToken<List<PipelineActivity>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineBranch
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved branch details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineBranchCall(String organization, String pipeline, String branch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineBranchValidateBeforeCall(String organization, String pipeline, String branch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineBranch(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineBranch(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getPipelineBranch(Async)");
        }

        return getPipelineBranchCall(organization, pipeline, branch, _callback);

    }

    /**
     * 
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return BranchImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved branch details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public BranchImpl getPipelineBranch(String organization, String pipeline, String branch) throws ApiException {
        ApiResponse<BranchImpl> localVarResp = getPipelineBranchWithHttpInfo(organization, pipeline, branch);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return ApiResponse&lt;BranchImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved branch details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BranchImpl> getPipelineBranchWithHttpInfo(String organization, String pipeline, String branch) throws ApiException {
        okhttp3.Call localVarCall = getPipelineBranchValidateBeforeCall(organization, pipeline, branch, null);
        Type localVarReturnType = new TypeToken<BranchImpl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved branch details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineBranchAsync(String organization, String pipeline, String branch, final ApiCallback<BranchImpl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineBranchValidateBeforeCall(organization, pipeline, branch, _callback);
        Type localVarReturnType = new TypeToken<BranchImpl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineBranchRun
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param run Name of the run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineBranchRunCall(String organization, String pipeline, String branch, String run, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "branch" + "}", localVarApiClient.escapeString(branch.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineBranchRunValidateBeforeCall(String organization, String pipeline, String branch, String run, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineBranchRun(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineBranchRun(Async)");
        }

        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getPipelineBranchRun(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling getPipelineBranchRun(Async)");
        }

        return getPipelineBranchRunCall(organization, pipeline, branch, run, _callback);

    }

    /**
     * 
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param run Name of the run (required)
     * @return PipelineRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public PipelineRun getPipelineBranchRun(String organization, String pipeline, String branch, String run) throws ApiException {
        ApiResponse<PipelineRun> localVarResp = getPipelineBranchRunWithHttpInfo(organization, pipeline, branch, run);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param run Name of the run (required)
     * @return ApiResponse&lt;PipelineRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineRun> getPipelineBranchRunWithHttpInfo(String organization, String pipeline, String branch, String run) throws ApiException {
        okhttp3.Call localVarCall = getPipelineBranchRunValidateBeforeCall(organization, pipeline, branch, run, null);
        Type localVarReturnType = new TypeToken<PipelineRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param run Name of the run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineBranchRunAsync(String organization, String pipeline, String branch, String run, final ApiCallback<PipelineRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineBranchRunValidateBeforeCall(organization, pipeline, branch, run, _callback);
        Type localVarReturnType = new TypeToken<PipelineRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineBranches
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all branches details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineBranchesCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineBranchesValidateBeforeCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineBranches(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineBranches(Async)");
        }

        return getPipelineBranchesCall(organization, pipeline, _callback);

    }

    /**
     * 
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return MultibranchPipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all branches details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public MultibranchPipeline getPipelineBranches(String organization, String pipeline) throws ApiException {
        ApiResponse<MultibranchPipeline> localVarResp = getPipelineBranchesWithHttpInfo(organization, pipeline);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return ApiResponse&lt;MultibranchPipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all branches details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultibranchPipeline> getPipelineBranchesWithHttpInfo(String organization, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getPipelineBranchesValidateBeforeCall(organization, pipeline, null);
        Type localVarReturnType = new TypeToken<MultibranchPipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved all branches details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineBranchesAsync(String organization, String pipeline, final ApiCallback<MultibranchPipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineBranchesValidateBeforeCall(organization, pipeline, _callback);
        Type localVarReturnType = new TypeToken<MultibranchPipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineFolder
     * @param organization Name of the organization (required)
     * @param folder Name of the folder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved folder details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineFolderCall(String organization, String folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{folder}/"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineFolderValidateBeforeCall(String organization, String folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineFolder(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling getPipelineFolder(Async)");
        }

        return getPipelineFolderCall(organization, folder, _callback);

    }

    /**
     * 
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization (required)
     * @param folder Name of the folder (required)
     * @return PipelineFolderImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved folder details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public PipelineFolderImpl getPipelineFolder(String organization, String folder) throws ApiException {
        ApiResponse<PipelineFolderImpl> localVarResp = getPipelineFolderWithHttpInfo(organization, folder);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization (required)
     * @param folder Name of the folder (required)
     * @return ApiResponse&lt;PipelineFolderImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved folder details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineFolderImpl> getPipelineFolderWithHttpInfo(String organization, String folder) throws ApiException {
        okhttp3.Call localVarCall = getPipelineFolderValidateBeforeCall(organization, folder, null);
        Type localVarReturnType = new TypeToken<PipelineFolderImpl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization (required)
     * @param folder Name of the folder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved folder details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineFolderAsync(String organization, String folder, final ApiCallback<PipelineFolderImpl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineFolderValidateBeforeCall(organization, folder, _callback);
        Type localVarReturnType = new TypeToken<PipelineFolderImpl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineFolderPipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineFolderPipelineCall(String organization, String pipeline, String folder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "folder" + "}", localVarApiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineFolderPipelineValidateBeforeCall(String organization, String pipeline, String folder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineFolderPipeline(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineFolderPipeline(Async)");
        }

        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling getPipelineFolderPipeline(Async)");
        }

        return getPipelineFolderPipelineCall(organization, pipeline, folder, _callback);

    }

    /**
     * 
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return PipelineImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public PipelineImpl getPipelineFolderPipeline(String organization, String pipeline, String folder) throws ApiException {
        ApiResponse<PipelineImpl> localVarResp = getPipelineFolderPipelineWithHttpInfo(organization, pipeline, folder);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return ApiResponse&lt;PipelineImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineImpl> getPipelineFolderPipelineWithHttpInfo(String organization, String pipeline, String folder) throws ApiException {
        okhttp3.Call localVarCall = getPipelineFolderPipelineValidateBeforeCall(organization, pipeline, folder, null);
        Type localVarReturnType = new TypeToken<PipelineImpl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineFolderPipelineAsync(String organization, String pipeline, String folder, final ApiCallback<PipelineImpl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineFolderPipelineValidateBeforeCall(organization, pipeline, folder, _callback);
        Type localVarReturnType = new TypeToken<PipelineImpl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineQueue
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queue details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineQueueCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineQueueValidateBeforeCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineQueue(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineQueue(Async)");
        }

        return getPipelineQueueCall(organization, pipeline, _callback);

    }

    /**
     * 
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;QueueItemImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queue details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<QueueItemImpl> getPipelineQueue(String organization, String pipeline) throws ApiException {
        ApiResponse<List<QueueItemImpl>> localVarResp = getPipelineQueueWithHttpInfo(organization, pipeline);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return ApiResponse&lt;List&lt;QueueItemImpl&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queue details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<QueueItemImpl>> getPipelineQueueWithHttpInfo(String organization, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getPipelineQueueValidateBeforeCall(organization, pipeline, null);
        Type localVarReturnType = new TypeToken<List<QueueItemImpl>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queue details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineQueueAsync(String organization, String pipeline, final ApiCallback<List<QueueItemImpl>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineQueueValidateBeforeCall(organization, pipeline, _callback);
        Type localVarReturnType = new TypeToken<List<QueueItemImpl>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineRun
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunCall(String organization, String pipeline, String run, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineRunValidateBeforeCall(String organization, String pipeline, String run, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineRun(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineRun(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling getPipelineRun(Async)");
        }

        return getPipelineRunCall(organization, pipeline, run, _callback);

    }

    /**
     * 
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return PipelineRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public PipelineRun getPipelineRun(String organization, String pipeline, String run) throws ApiException {
        ApiResponse<PipelineRun> localVarResp = getPipelineRunWithHttpInfo(organization, pipeline, run);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return ApiResponse&lt;PipelineRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineRun> getPipelineRunWithHttpInfo(String organization, String pipeline, String run) throws ApiException {
        okhttp3.Call localVarCall = getPipelineRunValidateBeforeCall(organization, pipeline, run, null);
        Type localVarReturnType = new TypeToken<PipelineRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunAsync(String organization, String pipeline, String run, final ApiCallback<PipelineRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineRunValidateBeforeCall(organization, pipeline, run, _callback);
        Type localVarReturnType = new TypeToken<PipelineRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineRunLog
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param start Start position of the log (optional)
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline run log </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunLogCall(String organization, String pipeline, String run, Integer start, Boolean download, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (download != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download", download));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineRunLogValidateBeforeCall(String organization, String pipeline, String run, Integer start, Boolean download, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineRunLog(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineRunLog(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling getPipelineRunLog(Async)");
        }

        return getPipelineRunLogCall(organization, pipeline, run, start, download, _callback);

    }

    /**
     * 
     * Get log for a pipeline run
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param start Start position of the log (optional)
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline run log </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public String getPipelineRunLog(String organization, String pipeline, String run, Integer start, Boolean download) throws ApiException {
        ApiResponse<String> localVarResp = getPipelineRunLogWithHttpInfo(organization, pipeline, run, start, download);
        return localVarResp.getData();
    }

    /**
     * 
     * Get log for a pipeline run
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param start Start position of the log (optional)
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline run log </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getPipelineRunLogWithHttpInfo(String organization, String pipeline, String run, Integer start, Boolean download) throws ApiException {
        okhttp3.Call localVarCall = getPipelineRunLogValidateBeforeCall(organization, pipeline, run, start, download, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get log for a pipeline run
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param start Start position of the log (optional)
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline run log </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunLogAsync(String organization, String pipeline, String run, Integer start, Boolean download, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineRunLogValidateBeforeCall(organization, pipeline, run, start, download, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineRunNode
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodeCall(String organization, String pipeline, String run, String node, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()))
            .replace("{" + "node" + "}", localVarApiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineRunNodeValidateBeforeCall(String organization, String pipeline, String run, String node, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineRunNode(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineRunNode(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling getPipelineRunNode(Async)");
        }

        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getPipelineRunNode(Async)");
        }

        return getPipelineRunNodeCall(organization, pipeline, run, node, _callback);

    }

    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return PipelineRunNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public PipelineRunNode getPipelineRunNode(String organization, String pipeline, String run, String node) throws ApiException {
        ApiResponse<PipelineRunNode> localVarResp = getPipelineRunNodeWithHttpInfo(organization, pipeline, run, node);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return ApiResponse&lt;PipelineRunNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineRunNode> getPipelineRunNodeWithHttpInfo(String organization, String pipeline, String run, String node) throws ApiException {
        okhttp3.Call localVarCall = getPipelineRunNodeValidateBeforeCall(organization, pipeline, run, node, null);
        Type localVarReturnType = new TypeToken<PipelineRunNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodeAsync(String organization, String pipeline, String run, String node, final ApiCallback<PipelineRunNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineRunNodeValidateBeforeCall(organization, pipeline, run, node, _callback);
        Type localVarReturnType = new TypeToken<PipelineRunNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineRunNodeStep
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node step details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodeStepCall(String organization, String pipeline, String run, String node, String step, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()))
            .replace("{" + "node" + "}", localVarApiClient.escapeString(node.toString()))
            .replace("{" + "step" + "}", localVarApiClient.escapeString(step.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineRunNodeStepValidateBeforeCall(String organization, String pipeline, String run, String node, String step, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineRunNodeStep(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineRunNodeStep(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling getPipelineRunNodeStep(Async)");
        }

        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getPipelineRunNodeStep(Async)");
        }

        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling getPipelineRunNodeStep(Async)");
        }

        return getPipelineRunNodeStepCall(organization, pipeline, run, node, step, _callback);

    }

    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return PipelineStepImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node step details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public PipelineStepImpl getPipelineRunNodeStep(String organization, String pipeline, String run, String node, String step) throws ApiException {
        ApiResponse<PipelineStepImpl> localVarResp = getPipelineRunNodeStepWithHttpInfo(organization, pipeline, run, node, step);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return ApiResponse&lt;PipelineStepImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node step details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineStepImpl> getPipelineRunNodeStepWithHttpInfo(String organization, String pipeline, String run, String node, String step) throws ApiException {
        okhttp3.Call localVarCall = getPipelineRunNodeStepValidateBeforeCall(organization, pipeline, run, node, step, null);
        Type localVarReturnType = new TypeToken<PipelineStepImpl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node step details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodeStepAsync(String organization, String pipeline, String run, String node, String step, final ApiCallback<PipelineStepImpl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineRunNodeStepValidateBeforeCall(organization, pipeline, run, node, step, _callback);
        Type localVarReturnType = new TypeToken<PipelineStepImpl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineRunNodeStepLog
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline run node step log </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodeStepLogCall(String organization, String pipeline, String run, String node, String step, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()))
            .replace("{" + "node" + "}", localVarApiClient.escapeString(node.toString()))
            .replace("{" + "step" + "}", localVarApiClient.escapeString(step.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineRunNodeStepLogValidateBeforeCall(String organization, String pipeline, String run, String node, String step, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineRunNodeStepLog(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineRunNodeStepLog(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling getPipelineRunNodeStepLog(Async)");
        }

        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getPipelineRunNodeStepLog(Async)");
        }

        // verify the required parameter 'step' is set
        if (step == null) {
            throw new ApiException("Missing the required parameter 'step' when calling getPipelineRunNodeStepLog(Async)");
        }

        return getPipelineRunNodeStepLogCall(organization, pipeline, run, node, step, _callback);

    }

    /**
     * 
     * Get log for a pipeline run node step
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline run node step log </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public String getPipelineRunNodeStepLog(String organization, String pipeline, String run, String node, String step) throws ApiException {
        ApiResponse<String> localVarResp = getPipelineRunNodeStepLogWithHttpInfo(organization, pipeline, run, node, step);
        return localVarResp.getData();
    }

    /**
     * 
     * Get log for a pipeline run node step
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline run node step log </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getPipelineRunNodeStepLogWithHttpInfo(String organization, String pipeline, String run, String node, String step) throws ApiException {
        okhttp3.Call localVarCall = getPipelineRunNodeStepLogValidateBeforeCall(organization, pipeline, run, node, step, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get log for a pipeline run node step
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipeline run node step log </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodeStepLogAsync(String organization, String pipeline, String run, String node, String step, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineRunNodeStepLogValidateBeforeCall(organization, pipeline, run, node, step, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineRunNodeSteps
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node steps details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodeStepsCall(String organization, String pipeline, String run, String node, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()))
            .replace("{" + "node" + "}", localVarApiClient.escapeString(node.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineRunNodeStepsValidateBeforeCall(String organization, String pipeline, String run, String node, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineRunNodeSteps(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineRunNodeSteps(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling getPipelineRunNodeSteps(Async)");
        }

        // verify the required parameter 'node' is set
        if (node == null) {
            throw new ApiException("Missing the required parameter 'node' when calling getPipelineRunNodeSteps(Async)");
        }

        return getPipelineRunNodeStepsCall(organization, pipeline, run, node, _callback);

    }

    /**
     * 
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return List&lt;PipelineStepImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node steps details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<PipelineStepImpl> getPipelineRunNodeSteps(String organization, String pipeline, String run, String node) throws ApiException {
        ApiResponse<List<PipelineStepImpl>> localVarResp = getPipelineRunNodeStepsWithHttpInfo(organization, pipeline, run, node);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return ApiResponse&lt;List&lt;PipelineStepImpl&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node steps details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PipelineStepImpl>> getPipelineRunNodeStepsWithHttpInfo(String organization, String pipeline, String run, String node) throws ApiException {
        okhttp3.Call localVarCall = getPipelineRunNodeStepsValidateBeforeCall(organization, pipeline, run, node, null);
        Type localVarReturnType = new TypeToken<List<PipelineStepImpl>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run node steps details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodeStepsAsync(String organization, String pipeline, String run, String node, final ApiCallback<List<PipelineStepImpl>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineRunNodeStepsValidateBeforeCall(organization, pipeline, run, node, _callback);
        Type localVarReturnType = new TypeToken<List<PipelineStepImpl>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineRunNodes
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run nodes details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodesCall(String organization, String pipeline, String run, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineRunNodesValidateBeforeCall(String organization, String pipeline, String run, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineRunNodes(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineRunNodes(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling getPipelineRunNodes(Async)");
        }

        return getPipelineRunNodesCall(organization, pipeline, run, _callback);

    }

    /**
     * 
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return List&lt;PipelineRunNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run nodes details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<PipelineRunNode> getPipelineRunNodes(String organization, String pipeline, String run) throws ApiException {
        ApiResponse<List<PipelineRunNode>> localVarResp = getPipelineRunNodesWithHttpInfo(organization, pipeline, run);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return ApiResponse&lt;List&lt;PipelineRunNode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run nodes details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PipelineRunNode>> getPipelineRunNodesWithHttpInfo(String organization, String pipeline, String run) throws ApiException {
        okhttp3.Call localVarCall = getPipelineRunNodesValidateBeforeCall(organization, pipeline, run, null);
        Type localVarReturnType = new TypeToken<List<PipelineRunNode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved run nodes details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunNodesAsync(String organization, String pipeline, String run, final ApiCallback<List<PipelineRunNode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineRunNodesValidateBeforeCall(organization, pipeline, run, _callback);
        Type localVarReturnType = new TypeToken<List<PipelineRunNode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelineRuns
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved runs details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunsCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelineRunsValidateBeforeCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelineRuns(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineRuns(Async)");
        }

        return getPipelineRunsCall(organization, pipeline, _callback);

    }

    /**
     * 
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;PipelineRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved runs details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<PipelineRun> getPipelineRuns(String organization, String pipeline) throws ApiException {
        ApiResponse<List<PipelineRun>> localVarResp = getPipelineRunsWithHttpInfo(organization, pipeline);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return ApiResponse&lt;List&lt;PipelineRun&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved runs details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PipelineRun>> getPipelineRunsWithHttpInfo(String organization, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = getPipelineRunsValidateBeforeCall(organization, pipeline, null);
        Type localVarReturnType = new TypeToken<List<PipelineRun>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved runs details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelineRunsAsync(String organization, String pipeline, final ApiCallback<List<PipelineRun>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelineRunsValidateBeforeCall(organization, pipeline, _callback);
        Type localVarReturnType = new TypeToken<List<PipelineRun>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPipelines
     * @param organization Name of the organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipelines details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelinesCall(String organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPipelinesValidateBeforeCall(String organization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getPipelines(Async)");
        }

        return getPipelinesCall(organization, _callback);

    }

    /**
     * 
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization (required)
     * @return List&lt;Pipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipelines details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<Pipeline> getPipelines(String organization) throws ApiException {
        ApiResponse<List<Pipeline>> localVarResp = getPipelinesWithHttpInfo(organization);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization (required)
     * @return ApiResponse&lt;List&lt;Pipeline&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipelines details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Pipeline>> getPipelinesWithHttpInfo(String organization) throws ApiException {
        okhttp3.Call localVarCall = getPipelinesValidateBeforeCall(organization, null);
        Type localVarReturnType = new TypeToken<List<Pipeline>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved pipelines details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPipelinesAsync(String organization, final ApiCallback<List<Pipeline>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPipelinesValidateBeforeCall(organization, _callback);
        Type localVarReturnType = new TypeToken<List<Pipeline>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSCM
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCMCall(String organization, String scm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "scm" + "}", localVarApiClient.escapeString(scm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSCMValidateBeforeCall(String organization, String scm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getSCM(Async)");
        }

        // verify the required parameter 'scm' is set
        if (scm == null) {
            throw new ApiException("Missing the required parameter 'scm' when calling getSCM(Async)");
        }

        return getSCMCall(organization, scm, _callback);

    }

    /**
     * 
     * Retrieve SCM details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @return GithubScm
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public GithubScm getSCM(String organization, String scm) throws ApiException {
        ApiResponse<GithubScm> localVarResp = getSCMWithHttpInfo(organization, scm);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve SCM details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @return ApiResponse&lt;GithubScm&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GithubScm> getSCMWithHttpInfo(String organization, String scm) throws ApiException {
        okhttp3.Call localVarCall = getSCMValidateBeforeCall(organization, scm, null);
        Type localVarReturnType = new TypeToken<GithubScm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve SCM details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCMAsync(String organization, String scm, final ApiCallback<GithubScm> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSCMValidateBeforeCall(organization, scm, _callback);
        Type localVarReturnType = new TypeToken<GithubScm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSCMOrganisationRepositories
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param credentialId Credential ID (optional)
     * @param pageSize Number of items in a page (optional)
     * @param pageNumber Page number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organization repositories details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCMOrganisationRepositoriesCall(String organization, String scm, String scmOrganisation, String credentialId, Integer pageSize, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "scm" + "}", localVarApiClient.escapeString(scm.toString()))
            .replace("{" + "scmOrganisation" + "}", localVarApiClient.escapeString(scmOrganisation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (credentialId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("credentialId", credentialId));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSCMOrganisationRepositoriesValidateBeforeCall(String organization, String scm, String scmOrganisation, String credentialId, Integer pageSize, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getSCMOrganisationRepositories(Async)");
        }

        // verify the required parameter 'scm' is set
        if (scm == null) {
            throw new ApiException("Missing the required parameter 'scm' when calling getSCMOrganisationRepositories(Async)");
        }

        // verify the required parameter 'scmOrganisation' is set
        if (scmOrganisation == null) {
            throw new ApiException("Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepositories(Async)");
        }

        return getSCMOrganisationRepositoriesCall(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber, _callback);

    }

    /**
     * 
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param credentialId Credential ID (optional)
     * @param pageSize Number of items in a page (optional)
     * @param pageNumber Page number (optional)
     * @return List&lt;GithubOrganization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organization repositories details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<GithubOrganization> getSCMOrganisationRepositories(String organization, String scm, String scmOrganisation, String credentialId, Integer pageSize, Integer pageNumber) throws ApiException {
        ApiResponse<List<GithubOrganization>> localVarResp = getSCMOrganisationRepositoriesWithHttpInfo(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param credentialId Credential ID (optional)
     * @param pageSize Number of items in a page (optional)
     * @param pageNumber Page number (optional)
     * @return ApiResponse&lt;List&lt;GithubOrganization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organization repositories details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GithubOrganization>> getSCMOrganisationRepositoriesWithHttpInfo(String organization, String scm, String scmOrganisation, String credentialId, Integer pageSize, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getSCMOrganisationRepositoriesValidateBeforeCall(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber, null);
        Type localVarReturnType = new TypeToken<List<GithubOrganization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param credentialId Credential ID (optional)
     * @param pageSize Number of items in a page (optional)
     * @param pageNumber Page number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organization repositories details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCMOrganisationRepositoriesAsync(String organization, String scm, String scmOrganisation, String credentialId, Integer pageSize, Integer pageNumber, final ApiCallback<List<GithubOrganization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSCMOrganisationRepositoriesValidateBeforeCall(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<List<GithubOrganization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSCMOrganisationRepository
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param repository Name of the SCM repository (required)
     * @param credentialId Credential ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organizations details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCMOrganisationRepositoryCall(String organization, String scm, String scmOrganisation, String repository, String credentialId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "scm" + "}", localVarApiClient.escapeString(scm.toString()))
            .replace("{" + "scmOrganisation" + "}", localVarApiClient.escapeString(scmOrganisation.toString()))
            .replace("{" + "repository" + "}", localVarApiClient.escapeString(repository.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (credentialId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("credentialId", credentialId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSCMOrganisationRepositoryValidateBeforeCall(String organization, String scm, String scmOrganisation, String repository, String credentialId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getSCMOrganisationRepository(Async)");
        }

        // verify the required parameter 'scm' is set
        if (scm == null) {
            throw new ApiException("Missing the required parameter 'scm' when calling getSCMOrganisationRepository(Async)");
        }

        // verify the required parameter 'scmOrganisation' is set
        if (scmOrganisation == null) {
            throw new ApiException("Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepository(Async)");
        }

        // verify the required parameter 'repository' is set
        if (repository == null) {
            throw new ApiException("Missing the required parameter 'repository' when calling getSCMOrganisationRepository(Async)");
        }

        return getSCMOrganisationRepositoryCall(organization, scm, scmOrganisation, repository, credentialId, _callback);

    }

    /**
     * 
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param repository Name of the SCM repository (required)
     * @param credentialId Credential ID (optional)
     * @return List&lt;GithubOrganization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organizations details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<GithubOrganization> getSCMOrganisationRepository(String organization, String scm, String scmOrganisation, String repository, String credentialId) throws ApiException {
        ApiResponse<List<GithubOrganization>> localVarResp = getSCMOrganisationRepositoryWithHttpInfo(organization, scm, scmOrganisation, repository, credentialId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param repository Name of the SCM repository (required)
     * @param credentialId Credential ID (optional)
     * @return ApiResponse&lt;List&lt;GithubOrganization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organizations details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GithubOrganization>> getSCMOrganisationRepositoryWithHttpInfo(String organization, String scm, String scmOrganisation, String repository, String credentialId) throws ApiException {
        okhttp3.Call localVarCall = getSCMOrganisationRepositoryValidateBeforeCall(organization, scm, scmOrganisation, repository, credentialId, null);
        Type localVarReturnType = new TypeToken<List<GithubOrganization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param repository Name of the SCM repository (required)
     * @param credentialId Credential ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organizations details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCMOrganisationRepositoryAsync(String organization, String scm, String scmOrganisation, String repository, String credentialId, final ApiCallback<List<GithubOrganization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSCMOrganisationRepositoryValidateBeforeCall(organization, scm, scmOrganisation, repository, credentialId, _callback);
        Type localVarReturnType = new TypeToken<List<GithubOrganization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSCMOrganisations
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param credentialId Credential ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organizations details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCMOrganisationsCall(String organization, String scm, String credentialId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/scm/{scm}/organizations"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "scm" + "}", localVarApiClient.escapeString(scm.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (credentialId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("credentialId", credentialId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSCMOrganisationsValidateBeforeCall(String organization, String scm, String credentialId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getSCMOrganisations(Async)");
        }

        // verify the required parameter 'scm' is set
        if (scm == null) {
            throw new ApiException("Missing the required parameter 'scm' when calling getSCMOrganisations(Async)");
        }

        return getSCMOrganisationsCall(organization, scm, credentialId, _callback);

    }

    /**
     * 
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param credentialId Credential ID (optional)
     * @return List&lt;GithubOrganization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organizations details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<GithubOrganization> getSCMOrganisations(String organization, String scm, String credentialId) throws ApiException {
        ApiResponse<List<GithubOrganization>> localVarResp = getSCMOrganisationsWithHttpInfo(organization, scm, credentialId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param credentialId Credential ID (optional)
     * @return ApiResponse&lt;List&lt;GithubOrganization&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organizations details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<GithubOrganization>> getSCMOrganisationsWithHttpInfo(String organization, String scm, String credentialId) throws ApiException {
        okhttp3.Call localVarCall = getSCMOrganisationsValidateBeforeCall(organization, scm, credentialId, null);
        Type localVarReturnType = new TypeToken<List<GithubOrganization>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param credentialId Credential ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved SCM organizations details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSCMOrganisationsAsync(String organization, String scm, String credentialId, final ApiCallback<List<GithubOrganization>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSCMOrganisationsValidateBeforeCall(organization, scm, credentialId, _callback);
        Type localVarReturnType = new TypeToken<List<GithubOrganization>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param organization Name of the organization (required)
     * @param user Name of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String organization, String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/users/{user}"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String organization, String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getUser(Async)");
        }

        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling getUser(Async)");
        }

        return getUserCall(organization, user, _callback);

    }

    /**
     * 
     * Retrieve user details for an organization
     * @param organization Name of the organization (required)
     * @param user Name of the user (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public User getUser(String organization, String user) throws ApiException {
        ApiResponse<User> localVarResp = getUserWithHttpInfo(organization, user);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve user details for an organization
     * @param organization Name of the organization (required)
     * @param user Name of the user (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUserWithHttpInfo(String organization, String user) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(organization, user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve user details for an organization
     * @param organization Name of the organization (required)
     * @param user Name of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String organization, String user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(organization, user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserFavorites
     * @param user Name of the user (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users favorites details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserFavoritesCall(String user, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/users/{user}/favorites"
            .replace("{" + "user" + "}", localVarApiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserFavoritesValidateBeforeCall(String user, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling getUserFavorites(Async)");
        }

        return getUserFavoritesCall(user, _callback);

    }

    /**
     * 
     * Retrieve user favorites details for an organization
     * @param user Name of the user (required)
     * @return List&lt;FavoriteImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users favorites details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public List<FavoriteImpl> getUserFavorites(String user) throws ApiException {
        ApiResponse<List<FavoriteImpl>> localVarResp = getUserFavoritesWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve user favorites details for an organization
     * @param user Name of the user (required)
     * @return ApiResponse&lt;List&lt;FavoriteImpl&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users favorites details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FavoriteImpl>> getUserFavoritesWithHttpInfo(String user) throws ApiException {
        okhttp3.Call localVarCall = getUserFavoritesValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<List<FavoriteImpl>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve user favorites details for an organization
     * @param user Name of the user (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users favorites details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserFavoritesAsync(String user, final ApiCallback<List<FavoriteImpl>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserFavoritesValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<List<FavoriteImpl>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param organization Name of the organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(String organization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/users/"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(String organization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling getUsers(Async)");
        }

        return getUsersCall(organization, _callback);

    }

    /**
     * 
     * Retrieve users details for an organization
     * @param organization Name of the organization (required)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public User getUsers(String organization) throws ApiException {
        ApiResponse<User> localVarResp = getUsersWithHttpInfo(organization);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve users details for an organization
     * @param organization Name of the organization (required)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> getUsersWithHttpInfo(String organization) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(organization, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve users details for an organization
     * @param organization Name of the organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved users details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(String organization, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(organization, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPipelineRun
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully replayed a pipeline run </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPipelineRunCall(String organization, String pipeline, String run, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPipelineRunValidateBeforeCall(String organization, String pipeline, String run, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling postPipelineRun(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling postPipelineRun(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling postPipelineRun(Async)");
        }

        return postPipelineRunCall(organization, pipeline, run, _callback);

    }

    /**
     * 
     * Replay an organization pipeline run
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return QueueItemImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully replayed a pipeline run </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public QueueItemImpl postPipelineRun(String organization, String pipeline, String run) throws ApiException {
        ApiResponse<QueueItemImpl> localVarResp = postPipelineRunWithHttpInfo(organization, pipeline, run);
        return localVarResp.getData();
    }

    /**
     * 
     * Replay an organization pipeline run
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return ApiResponse&lt;QueueItemImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully replayed a pipeline run </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueItemImpl> postPipelineRunWithHttpInfo(String organization, String pipeline, String run) throws ApiException {
        okhttp3.Call localVarCall = postPipelineRunValidateBeforeCall(organization, pipeline, run, null);
        Type localVarReturnType = new TypeToken<QueueItemImpl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replay an organization pipeline run
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully replayed a pipeline run </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPipelineRunAsync(String organization, String pipeline, String run, final ApiCallback<QueueItemImpl> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPipelineRunValidateBeforeCall(organization, pipeline, run, _callback);
        Type localVarReturnType = new TypeToken<QueueItemImpl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postPipelineRuns
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started a build </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPipelineRunsCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postPipelineRunsValidateBeforeCall(String organization, String pipeline, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling postPipelineRuns(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling postPipelineRuns(Async)");
        }

        return postPipelineRunsCall(organization, pipeline, _callback);

    }

    /**
     * 
     * Start a build for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return QueueItemImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started a build </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public QueueItemImpl postPipelineRuns(String organization, String pipeline) throws ApiException {
        ApiResponse<QueueItemImpl> localVarResp = postPipelineRunsWithHttpInfo(organization, pipeline);
        return localVarResp.getData();
    }

    /**
     * 
     * Start a build for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return ApiResponse&lt;QueueItemImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started a build </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QueueItemImpl> postPipelineRunsWithHttpInfo(String organization, String pipeline) throws ApiException {
        okhttp3.Call localVarCall = postPipelineRunsValidateBeforeCall(organization, pipeline, null);
        Type localVarReturnType = new TypeToken<QueueItemImpl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Start a build for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully started a build </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postPipelineRunsAsync(String organization, String pipeline, final ApiCallback<QueueItemImpl> _callback) throws ApiException {

        okhttp3.Call localVarCall = postPipelineRunsValidateBeforeCall(organization, pipeline, _callback);
        Type localVarReturnType = new TypeToken<QueueItemImpl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPipelineFavorite
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully favorited/unfavorited a pipeline </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPipelineFavoriteCall(String organization, String pipeline, Boolean body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPipelineFavoriteValidateBeforeCall(String organization, String pipeline, Boolean body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling putPipelineFavorite(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling putPipelineFavorite(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling putPipelineFavorite(Async)");
        }

        return putPipelineFavoriteCall(organization, pipeline, body, _callback);

    }

    /**
     * 
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite (required)
     * @return FavoriteImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully favorited/unfavorited a pipeline </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public FavoriteImpl putPipelineFavorite(String organization, String pipeline, Boolean body) throws ApiException {
        ApiResponse<FavoriteImpl> localVarResp = putPipelineFavoriteWithHttpInfo(organization, pipeline, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite (required)
     * @return ApiResponse&lt;FavoriteImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully favorited/unfavorited a pipeline </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FavoriteImpl> putPipelineFavoriteWithHttpInfo(String organization, String pipeline, Boolean body) throws ApiException {
        okhttp3.Call localVarCall = putPipelineFavoriteValidateBeforeCall(organization, pipeline, body, null);
        Type localVarReturnType = new TypeToken<FavoriteImpl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully favorited/unfavorited a pipeline </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPipelineFavoriteAsync(String organization, String pipeline, Boolean body, final ApiCallback<FavoriteImpl> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPipelineFavoriteValidateBeforeCall(organization, pipeline, body, _callback);
        Type localVarReturnType = new TypeToken<FavoriteImpl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putPipelineRun
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param blocking Set to true to make blocking stop, default: false (optional)
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped a build </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPipelineRunCall(String organization, String pipeline, String run, String blocking, Integer timeOutInSecs, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop"
            .replace("{" + "organization" + "}", localVarApiClient.escapeString(organization.toString()))
            .replace("{" + "pipeline" + "}", localVarApiClient.escapeString(pipeline.toString()))
            .replace("{" + "run" + "}", localVarApiClient.escapeString(run.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blocking != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blocking", blocking));
        }

        if (timeOutInSecs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeOutInSecs", timeOutInSecs));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putPipelineRunValidateBeforeCall(String organization, String pipeline, String run, String blocking, Integer timeOutInSecs, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organization' is set
        if (organization == null) {
            throw new ApiException("Missing the required parameter 'organization' when calling putPipelineRun(Async)");
        }

        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling putPipelineRun(Async)");
        }

        // verify the required parameter 'run' is set
        if (run == null) {
            throw new ApiException("Missing the required parameter 'run' when calling putPipelineRun(Async)");
        }

        return putPipelineRunCall(organization, pipeline, run, blocking, timeOutInSecs, _callback);

    }

    /**
     * 
     * Stop a build of an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param blocking Set to true to make blocking stop, default: false (optional)
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds (optional)
     * @return PipelineRun
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped a build </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public PipelineRun putPipelineRun(String organization, String pipeline, String run, String blocking, Integer timeOutInSecs) throws ApiException {
        ApiResponse<PipelineRun> localVarResp = putPipelineRunWithHttpInfo(organization, pipeline, run, blocking, timeOutInSecs);
        return localVarResp.getData();
    }

    /**
     * 
     * Stop a build of an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param blocking Set to true to make blocking stop, default: false (optional)
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds (optional)
     * @return ApiResponse&lt;PipelineRun&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped a build </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PipelineRun> putPipelineRunWithHttpInfo(String organization, String pipeline, String run, String blocking, Integer timeOutInSecs) throws ApiException {
        okhttp3.Call localVarCall = putPipelineRunValidateBeforeCall(organization, pipeline, run, blocking, timeOutInSecs, null);
        Type localVarReturnType = new TypeToken<PipelineRun>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Stop a build of an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param blocking Set to true to make blocking stop, default: false (optional)
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped a build </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putPipelineRunAsync(String organization, String pipeline, String run, String blocking, Integer timeOutInSecs, final ApiCallback<PipelineRun> _callback) throws ApiException {

        okhttp3.Call localVarCall = putPipelineRunValidateBeforeCall(organization, pipeline, run, blocking, timeOutInSecs, _callback);
        Type localVarReturnType = new TypeToken<PipelineRun>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param q Query string (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/search/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling search(Async)");
        }

        return searchCall(q, _callback);

    }

    /**
     * 
     * Search for any resource details
     * @param q Query string (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public String search(String q) throws ApiException {
        ApiResponse<String> localVarResp = searchWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for any resource details
     * @param q Query string (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> searchWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for any resource details
     * @param q Query string (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String q, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchClasses
     * @param q Query string containing an array of class names (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchClassesCall(String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/blue/rest/classes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchClassesValidateBeforeCall(String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchClasses(Async)");
        }

        return searchClassesCall(q, _callback);

    }

    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public String searchClasses(String q) throws ApiException {
        ApiResponse<String> localVarResp = searchClassesWithHttpInfo(q);
        return localVarResp.getData();
    }

    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> searchClassesWithHttpInfo(String q) throws ApiException {
        okhttp3.Call localVarCall = searchClassesValidateBeforeCall(q, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get classes details
     * @param q Query string containing an array of class names (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved search result </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchClassesAsync(String q, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchClassesValidateBeforeCall(q, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
