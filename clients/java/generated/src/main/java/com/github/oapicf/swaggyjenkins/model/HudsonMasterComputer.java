/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.swaggyjenkins.model;

import java.util.Objects;
import com.github.oapicf.swaggyjenkins.model.HudsonMasterComputerexecutors;
import com.github.oapicf.swaggyjenkins.model.HudsonMasterComputermonitorData;
import com.github.oapicf.swaggyjenkins.model.Label1;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.github.oapicf.swaggyjenkins.JSON;

/**
 * HudsonMasterComputer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-10T02:39:55.130842976Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class HudsonMasterComputer {
  public static final String SERIALIZED_NAME_PROPERTY_CLASS = "_class";
  @SerializedName(SERIALIZED_NAME_PROPERTY_CLASS)
  @javax.annotation.Nullable
  private String propertyClass;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public static final String SERIALIZED_NAME_EXECUTORS = "executors";
  @SerializedName(SERIALIZED_NAME_EXECUTORS)
  @javax.annotation.Nullable
  private List<HudsonMasterComputerexecutors> executors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ICON = "icon";
  @SerializedName(SERIALIZED_NAME_ICON)
  @javax.annotation.Nullable
  private String icon;

  public static final String SERIALIZED_NAME_ICON_CLASS_NAME = "iconClassName";
  @SerializedName(SERIALIZED_NAME_ICON_CLASS_NAME)
  @javax.annotation.Nullable
  private String iconClassName;

  public static final String SERIALIZED_NAME_IDLE = "idle";
  @SerializedName(SERIALIZED_NAME_IDLE)
  @javax.annotation.Nullable
  private Boolean idle;

  public static final String SERIALIZED_NAME_JNLP_AGENT = "jnlpAgent";
  @SerializedName(SERIALIZED_NAME_JNLP_AGENT)
  @javax.annotation.Nullable
  private Boolean jnlpAgent;

  public static final String SERIALIZED_NAME_LAUNCH_SUPPORTED = "launchSupported";
  @SerializedName(SERIALIZED_NAME_LAUNCH_SUPPORTED)
  @javax.annotation.Nullable
  private Boolean launchSupported;

  public static final String SERIALIZED_NAME_LOAD_STATISTICS = "loadStatistics";
  @SerializedName(SERIALIZED_NAME_LOAD_STATISTICS)
  @javax.annotation.Nullable
  private Label1 loadStatistics;

  public static final String SERIALIZED_NAME_MANUAL_LAUNCH_ALLOWED = "manualLaunchAllowed";
  @SerializedName(SERIALIZED_NAME_MANUAL_LAUNCH_ALLOWED)
  @javax.annotation.Nullable
  private Boolean manualLaunchAllowed;

  public static final String SERIALIZED_NAME_MONITOR_DATA = "monitorData";
  @SerializedName(SERIALIZED_NAME_MONITOR_DATA)
  @javax.annotation.Nullable
  private HudsonMasterComputermonitorData monitorData;

  public static final String SERIALIZED_NAME_NUM_EXECUTORS = "numExecutors";
  @SerializedName(SERIALIZED_NAME_NUM_EXECUTORS)
  @javax.annotation.Nullable
  private Integer numExecutors;

  public static final String SERIALIZED_NAME_OFFLINE = "offline";
  @SerializedName(SERIALIZED_NAME_OFFLINE)
  @javax.annotation.Nullable
  private Boolean offline;

  public static final String SERIALIZED_NAME_OFFLINE_CAUSE = "offlineCause";
  @SerializedName(SERIALIZED_NAME_OFFLINE_CAUSE)
  @javax.annotation.Nullable
  private String offlineCause;

  public static final String SERIALIZED_NAME_OFFLINE_CAUSE_REASON = "offlineCauseReason";
  @SerializedName(SERIALIZED_NAME_OFFLINE_CAUSE_REASON)
  @javax.annotation.Nullable
  private String offlineCauseReason;

  public static final String SERIALIZED_NAME_TEMPORARILY_OFFLINE = "temporarilyOffline";
  @SerializedName(SERIALIZED_NAME_TEMPORARILY_OFFLINE)
  @javax.annotation.Nullable
  private Boolean temporarilyOffline;

  public HudsonMasterComputer() {
  }

  public HudsonMasterComputer propertyClass(@javax.annotation.Nullable String propertyClass) {
    this.propertyClass = propertyClass;
    return this;
  }

  /**
   * Get propertyClass
   * @return propertyClass
   */
  @javax.annotation.Nullable
  public String getPropertyClass() {
    return propertyClass;
  }

  public void setPropertyClass(@javax.annotation.Nullable String propertyClass) {
    this.propertyClass = propertyClass;
  }


  public HudsonMasterComputer displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }


  public HudsonMasterComputer executors(@javax.annotation.Nullable List<HudsonMasterComputerexecutors> executors) {
    this.executors = executors;
    return this;
  }

  public HudsonMasterComputer addExecutorsItem(HudsonMasterComputerexecutors executorsItem) {
    if (this.executors == null) {
      this.executors = new ArrayList<>();
    }
    this.executors.add(executorsItem);
    return this;
  }

  /**
   * Get executors
   * @return executors
   */
  @javax.annotation.Nullable
  public List<HudsonMasterComputerexecutors> getExecutors() {
    return executors;
  }

  public void setExecutors(@javax.annotation.Nullable List<HudsonMasterComputerexecutors> executors) {
    this.executors = executors;
  }


  public HudsonMasterComputer icon(@javax.annotation.Nullable String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * Get icon
   * @return icon
   */
  @javax.annotation.Nullable
  public String getIcon() {
    return icon;
  }

  public void setIcon(@javax.annotation.Nullable String icon) {
    this.icon = icon;
  }


  public HudsonMasterComputer iconClassName(@javax.annotation.Nullable String iconClassName) {
    this.iconClassName = iconClassName;
    return this;
  }

  /**
   * Get iconClassName
   * @return iconClassName
   */
  @javax.annotation.Nullable
  public String getIconClassName() {
    return iconClassName;
  }

  public void setIconClassName(@javax.annotation.Nullable String iconClassName) {
    this.iconClassName = iconClassName;
  }


  public HudsonMasterComputer idle(@javax.annotation.Nullable Boolean idle) {
    this.idle = idle;
    return this;
  }

  /**
   * Get idle
   * @return idle
   */
  @javax.annotation.Nullable
  public Boolean getIdle() {
    return idle;
  }

  public void setIdle(@javax.annotation.Nullable Boolean idle) {
    this.idle = idle;
  }


  public HudsonMasterComputer jnlpAgent(@javax.annotation.Nullable Boolean jnlpAgent) {
    this.jnlpAgent = jnlpAgent;
    return this;
  }

  /**
   * Get jnlpAgent
   * @return jnlpAgent
   */
  @javax.annotation.Nullable
  public Boolean getJnlpAgent() {
    return jnlpAgent;
  }

  public void setJnlpAgent(@javax.annotation.Nullable Boolean jnlpAgent) {
    this.jnlpAgent = jnlpAgent;
  }


  public HudsonMasterComputer launchSupported(@javax.annotation.Nullable Boolean launchSupported) {
    this.launchSupported = launchSupported;
    return this;
  }

  /**
   * Get launchSupported
   * @return launchSupported
   */
  @javax.annotation.Nullable
  public Boolean getLaunchSupported() {
    return launchSupported;
  }

  public void setLaunchSupported(@javax.annotation.Nullable Boolean launchSupported) {
    this.launchSupported = launchSupported;
  }


  public HudsonMasterComputer loadStatistics(@javax.annotation.Nullable Label1 loadStatistics) {
    this.loadStatistics = loadStatistics;
    return this;
  }

  /**
   * Get loadStatistics
   * @return loadStatistics
   */
  @javax.annotation.Nullable
  public Label1 getLoadStatistics() {
    return loadStatistics;
  }

  public void setLoadStatistics(@javax.annotation.Nullable Label1 loadStatistics) {
    this.loadStatistics = loadStatistics;
  }


  public HudsonMasterComputer manualLaunchAllowed(@javax.annotation.Nullable Boolean manualLaunchAllowed) {
    this.manualLaunchAllowed = manualLaunchAllowed;
    return this;
  }

  /**
   * Get manualLaunchAllowed
   * @return manualLaunchAllowed
   */
  @javax.annotation.Nullable
  public Boolean getManualLaunchAllowed() {
    return manualLaunchAllowed;
  }

  public void setManualLaunchAllowed(@javax.annotation.Nullable Boolean manualLaunchAllowed) {
    this.manualLaunchAllowed = manualLaunchAllowed;
  }


  public HudsonMasterComputer monitorData(@javax.annotation.Nullable HudsonMasterComputermonitorData monitorData) {
    this.monitorData = monitorData;
    return this;
  }

  /**
   * Get monitorData
   * @return monitorData
   */
  @javax.annotation.Nullable
  public HudsonMasterComputermonitorData getMonitorData() {
    return monitorData;
  }

  public void setMonitorData(@javax.annotation.Nullable HudsonMasterComputermonitorData monitorData) {
    this.monitorData = monitorData;
  }


  public HudsonMasterComputer numExecutors(@javax.annotation.Nullable Integer numExecutors) {
    this.numExecutors = numExecutors;
    return this;
  }

  /**
   * Get numExecutors
   * @return numExecutors
   */
  @javax.annotation.Nullable
  public Integer getNumExecutors() {
    return numExecutors;
  }

  public void setNumExecutors(@javax.annotation.Nullable Integer numExecutors) {
    this.numExecutors = numExecutors;
  }


  public HudsonMasterComputer offline(@javax.annotation.Nullable Boolean offline) {
    this.offline = offline;
    return this;
  }

  /**
   * Get offline
   * @return offline
   */
  @javax.annotation.Nullable
  public Boolean getOffline() {
    return offline;
  }

  public void setOffline(@javax.annotation.Nullable Boolean offline) {
    this.offline = offline;
  }


  public HudsonMasterComputer offlineCause(@javax.annotation.Nullable String offlineCause) {
    this.offlineCause = offlineCause;
    return this;
  }

  /**
   * Get offlineCause
   * @return offlineCause
   */
  @javax.annotation.Nullable
  public String getOfflineCause() {
    return offlineCause;
  }

  public void setOfflineCause(@javax.annotation.Nullable String offlineCause) {
    this.offlineCause = offlineCause;
  }


  public HudsonMasterComputer offlineCauseReason(@javax.annotation.Nullable String offlineCauseReason) {
    this.offlineCauseReason = offlineCauseReason;
    return this;
  }

  /**
   * Get offlineCauseReason
   * @return offlineCauseReason
   */
  @javax.annotation.Nullable
  public String getOfflineCauseReason() {
    return offlineCauseReason;
  }

  public void setOfflineCauseReason(@javax.annotation.Nullable String offlineCauseReason) {
    this.offlineCauseReason = offlineCauseReason;
  }


  public HudsonMasterComputer temporarilyOffline(@javax.annotation.Nullable Boolean temporarilyOffline) {
    this.temporarilyOffline = temporarilyOffline;
    return this;
  }

  /**
   * Get temporarilyOffline
   * @return temporarilyOffline
   */
  @javax.annotation.Nullable
  public Boolean getTemporarilyOffline() {
    return temporarilyOffline;
  }

  public void setTemporarilyOffline(@javax.annotation.Nullable Boolean temporarilyOffline) {
    this.temporarilyOffline = temporarilyOffline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HudsonMasterComputer hudsonMasterComputer = (HudsonMasterComputer) o;
    return Objects.equals(this.propertyClass, hudsonMasterComputer.propertyClass) &&
        Objects.equals(this.displayName, hudsonMasterComputer.displayName) &&
        Objects.equals(this.executors, hudsonMasterComputer.executors) &&
        Objects.equals(this.icon, hudsonMasterComputer.icon) &&
        Objects.equals(this.iconClassName, hudsonMasterComputer.iconClassName) &&
        Objects.equals(this.idle, hudsonMasterComputer.idle) &&
        Objects.equals(this.jnlpAgent, hudsonMasterComputer.jnlpAgent) &&
        Objects.equals(this.launchSupported, hudsonMasterComputer.launchSupported) &&
        Objects.equals(this.loadStatistics, hudsonMasterComputer.loadStatistics) &&
        Objects.equals(this.manualLaunchAllowed, hudsonMasterComputer.manualLaunchAllowed) &&
        Objects.equals(this.monitorData, hudsonMasterComputer.monitorData) &&
        Objects.equals(this.numExecutors, hudsonMasterComputer.numExecutors) &&
        Objects.equals(this.offline, hudsonMasterComputer.offline) &&
        Objects.equals(this.offlineCause, hudsonMasterComputer.offlineCause) &&
        Objects.equals(this.offlineCauseReason, hudsonMasterComputer.offlineCauseReason) &&
        Objects.equals(this.temporarilyOffline, hudsonMasterComputer.temporarilyOffline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyClass, displayName, executors, icon, iconClassName, idle, jnlpAgent, launchSupported, loadStatistics, manualLaunchAllowed, monitorData, numExecutors, offline, offlineCause, offlineCauseReason, temporarilyOffline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HudsonMasterComputer {\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    executors: ").append(toIndentedString(executors)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    iconClassName: ").append(toIndentedString(iconClassName)).append("\n");
    sb.append("    idle: ").append(toIndentedString(idle)).append("\n");
    sb.append("    jnlpAgent: ").append(toIndentedString(jnlpAgent)).append("\n");
    sb.append("    launchSupported: ").append(toIndentedString(launchSupported)).append("\n");
    sb.append("    loadStatistics: ").append(toIndentedString(loadStatistics)).append("\n");
    sb.append("    manualLaunchAllowed: ").append(toIndentedString(manualLaunchAllowed)).append("\n");
    sb.append("    monitorData: ").append(toIndentedString(monitorData)).append("\n");
    sb.append("    numExecutors: ").append(toIndentedString(numExecutors)).append("\n");
    sb.append("    offline: ").append(toIndentedString(offline)).append("\n");
    sb.append("    offlineCause: ").append(toIndentedString(offlineCause)).append("\n");
    sb.append("    offlineCauseReason: ").append(toIndentedString(offlineCauseReason)).append("\n");
    sb.append("    temporarilyOffline: ").append(toIndentedString(temporarilyOffline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_class");
    openapiFields.add("displayName");
    openapiFields.add("executors");
    openapiFields.add("icon");
    openapiFields.add("iconClassName");
    openapiFields.add("idle");
    openapiFields.add("jnlpAgent");
    openapiFields.add("launchSupported");
    openapiFields.add("loadStatistics");
    openapiFields.add("manualLaunchAllowed");
    openapiFields.add("monitorData");
    openapiFields.add("numExecutors");
    openapiFields.add("offline");
    openapiFields.add("offlineCause");
    openapiFields.add("offlineCauseReason");
    openapiFields.add("temporarilyOffline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HudsonMasterComputer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HudsonMasterComputer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HudsonMasterComputer is not found in the empty JSON string", HudsonMasterComputer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HudsonMasterComputer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HudsonMasterComputer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_class") != null && !jsonObj.get("_class").isJsonNull()) && !jsonObj.get("_class").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_class` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_class").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("executors") != null && !jsonObj.get("executors").isJsonNull()) {
        JsonArray jsonArrayexecutors = jsonObj.getAsJsonArray("executors");
        if (jsonArrayexecutors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("executors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `executors` to be an array in the JSON string but got `%s`", jsonObj.get("executors").toString()));
          }

          // validate the optional field `executors` (array)
          for (int i = 0; i < jsonArrayexecutors.size(); i++) {
            HudsonMasterComputerexecutors.validateJsonElement(jsonArrayexecutors.get(i));
          };
        }
      }
      if ((jsonObj.get("icon") != null && !jsonObj.get("icon").isJsonNull()) && !jsonObj.get("icon").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `icon` to be a primitive type in the JSON string but got `%s`", jsonObj.get("icon").toString()));
      }
      if ((jsonObj.get("iconClassName") != null && !jsonObj.get("iconClassName").isJsonNull()) && !jsonObj.get("iconClassName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iconClassName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iconClassName").toString()));
      }
      // validate the optional field `loadStatistics`
      if (jsonObj.get("loadStatistics") != null && !jsonObj.get("loadStatistics").isJsonNull()) {
        Label1.validateJsonElement(jsonObj.get("loadStatistics"));
      }
      // validate the optional field `monitorData`
      if (jsonObj.get("monitorData") != null && !jsonObj.get("monitorData").isJsonNull()) {
        HudsonMasterComputermonitorData.validateJsonElement(jsonObj.get("monitorData"));
      }
      if ((jsonObj.get("offlineCause") != null && !jsonObj.get("offlineCause").isJsonNull()) && !jsonObj.get("offlineCause").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offlineCause` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offlineCause").toString()));
      }
      if ((jsonObj.get("offlineCauseReason") != null && !jsonObj.get("offlineCauseReason").isJsonNull()) && !jsonObj.get("offlineCauseReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offlineCauseReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offlineCauseReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HudsonMasterComputer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HudsonMasterComputer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HudsonMasterComputer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HudsonMasterComputer.class));

       return (TypeAdapter<T>) new TypeAdapter<HudsonMasterComputer>() {
           @Override
           public void write(JsonWriter out, HudsonMasterComputer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HudsonMasterComputer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HudsonMasterComputer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HudsonMasterComputer
   * @throws IOException if the JSON string is invalid with respect to HudsonMasterComputer
   */
  public static HudsonMasterComputer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HudsonMasterComputer.class);
  }

  /**
   * Convert an instance of HudsonMasterComputer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

