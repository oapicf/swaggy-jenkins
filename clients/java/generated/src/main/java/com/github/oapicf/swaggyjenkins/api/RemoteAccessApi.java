/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.github.oapicf.swaggyjenkins.api;

import com.github.oapicf.swaggyjenkins.ApiCallback;
import com.github.oapicf.swaggyjenkins.ApiClient;
import com.github.oapicf.swaggyjenkins.ApiException;
import com.github.oapicf.swaggyjenkins.ApiResponse;
import com.github.oapicf.swaggyjenkins.Configuration;
import com.github.oapicf.swaggyjenkins.Pair;
import com.github.oapicf.swaggyjenkins.ProgressRequestBody;
import com.github.oapicf.swaggyjenkins.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.github.oapicf.swaggyjenkins.model.ComputerSet;
import com.github.oapicf.swaggyjenkins.model.FreeStyleBuild;
import com.github.oapicf.swaggyjenkins.model.FreeStyleProject;
import com.github.oapicf.swaggyjenkins.model.Hudson;
import com.github.oapicf.swaggyjenkins.model.ListView;
import com.github.oapicf.swaggyjenkins.model.Queue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RemoteAccessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RemoteAccessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RemoteAccessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getComputer
     * @param depth Recursion depth in response model (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved computer details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComputerCall(Integer depth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/computer/api/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (depth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("depth", depth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getComputerValidateBeforeCall(Integer depth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'depth' is set
        if (depth == null) {
            throw new ApiException("Missing the required parameter 'depth' when calling getComputer(Async)");
        }

        return getComputerCall(depth, _callback);

    }

    /**
     * 
     * Retrieve computer details
     * @param depth Recursion depth in response model (required)
     * @return ComputerSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved computer details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ComputerSet getComputer(Integer depth) throws ApiException {
        ApiResponse<ComputerSet> localVarResp = getComputerWithHttpInfo(depth);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve computer details
     * @param depth Recursion depth in response model (required)
     * @return ApiResponse&lt;ComputerSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved computer details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComputerSet> getComputerWithHttpInfo(Integer depth) throws ApiException {
        okhttp3.Call localVarCall = getComputerValidateBeforeCall(depth, null);
        Type localVarReturnType = new TypeToken<ComputerSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve computer details
     * @param depth Recursion depth in response model (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved computer details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getComputerAsync(Integer depth, final ApiCallback<ComputerSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = getComputerValidateBeforeCall(depth, _callback);
        Type localVarReturnType = new TypeToken<ComputerSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJenkins
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Jenkins details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJenkinsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJenkinsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getJenkinsCall(_callback);

    }

    /**
     * 
     * Retrieve Jenkins details
     * @return Hudson
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Jenkins details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public Hudson getJenkins() throws ApiException {
        ApiResponse<Hudson> localVarResp = getJenkinsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve Jenkins details
     * @return ApiResponse&lt;Hudson&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Jenkins details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Hudson> getJenkinsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getJenkinsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Hudson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve Jenkins details
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Jenkins details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJenkinsAsync(final ApiCallback<Hudson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJenkinsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Hudson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJob
     * @param name Name of the job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/api/json"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getJob(Async)");
        }

        return getJobCall(name, _callback);

    }

    /**
     * 
     * Retrieve job details
     * @param name Name of the job (required)
     * @return FreeStyleProject
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public FreeStyleProject getJob(String name) throws ApiException {
        ApiResponse<FreeStyleProject> localVarResp = getJobWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve job details
     * @param name Name of the job (required)
     * @return ApiResponse&lt;FreeStyleProject&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FreeStyleProject> getJobWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getJobValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<FreeStyleProject>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve job details
     * @param name Name of the job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobAsync(String name, final ApiCallback<FreeStyleProject> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<FreeStyleProject>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobConfig
     * @param name Name of the job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobConfigCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/config.xml"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobConfigValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getJobConfig(Async)");
        }

        return getJobConfigCall(name, _callback);

    }

    /**
     * 
     * Retrieve job configuration
     * @param name Name of the job (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public String getJobConfig(String name) throws ApiException {
        ApiResponse<String> localVarResp = getJobConfigWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve job configuration
     * @param name Name of the job (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getJobConfigWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getJobConfigValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve job configuration
     * @param name Name of the job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobConfigAsync(String name, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobConfigValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobLastBuild
     * @param name Name of the job (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job&#39;s last build details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobLastBuildCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/lastBuild/api/json"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobLastBuildValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getJobLastBuild(Async)");
        }

        return getJobLastBuildCall(name, _callback);

    }

    /**
     * 
     * Retrieve job&#39;s last build details
     * @param name Name of the job (required)
     * @return FreeStyleBuild
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job&#39;s last build details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public FreeStyleBuild getJobLastBuild(String name) throws ApiException {
        ApiResponse<FreeStyleBuild> localVarResp = getJobLastBuildWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve job&#39;s last build details
     * @param name Name of the job (required)
     * @return ApiResponse&lt;FreeStyleBuild&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job&#39;s last build details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FreeStyleBuild> getJobLastBuildWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getJobLastBuildValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<FreeStyleBuild>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve job&#39;s last build details
     * @param name Name of the job (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job&#39;s last build details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobLastBuildAsync(String name, final ApiCallback<FreeStyleBuild> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobLastBuildValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<FreeStyleBuild>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJobProgressiveText
     * @param name Name of the job (required)
     * @param number Build number (required)
     * @param start Starting point of progressive text output (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job&#39;s build progressive text output </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobProgressiveTextCall(String name, String number, String start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/{number}/logText/progressiveText"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()))
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJobProgressiveTextValidateBeforeCall(String name, String number, String start, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getJobProgressiveText(Async)");
        }

        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getJobProgressiveText(Async)");
        }

        // verify the required parameter 'start' is set
        if (start == null) {
            throw new ApiException("Missing the required parameter 'start' when calling getJobProgressiveText(Async)");
        }

        return getJobProgressiveTextCall(name, number, start, _callback);

    }

    /**
     * 
     * Retrieve job&#39;s build progressive text output
     * @param name Name of the job (required)
     * @param number Build number (required)
     * @param start Starting point of progressive text output (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job&#39;s build progressive text output </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public void getJobProgressiveText(String name, String number, String start) throws ApiException {
        getJobProgressiveTextWithHttpInfo(name, number, start);
    }

    /**
     * 
     * Retrieve job&#39;s build progressive text output
     * @param name Name of the job (required)
     * @param number Build number (required)
     * @param start Starting point of progressive text output (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job&#39;s build progressive text output </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getJobProgressiveTextWithHttpInfo(String name, String number, String start) throws ApiException {
        okhttp3.Call localVarCall = getJobProgressiveTextValidateBeforeCall(name, number, start, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve job&#39;s build progressive text output
     * @param name Name of the job (required)
     * @param number Build number (required)
     * @param start Starting point of progressive text output (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job&#39;s build progressive text output </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJobProgressiveTextAsync(String name, String number, String start, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJobProgressiveTextValidateBeforeCall(name, number, start, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueue
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queue details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueueCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/api/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueueValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getQueueCall(_callback);

    }

    /**
     * 
     * Retrieve queue details
     * @return Queue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queue details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public Queue getQueue() throws ApiException {
        ApiResponse<Queue> localVarResp = getQueueWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve queue details
     * @return ApiResponse&lt;Queue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queue details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Queue> getQueueWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getQueueValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve queue details
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queue details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueueAsync(final ApiCallback<Queue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueueValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQueueItem
     * @param number Queue number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queued item details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueueItemCall(String number, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/queue/item/{number}/api/json"
            .replace("{" + "number" + "}", localVarApiClient.escapeString(number.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQueueItemValidateBeforeCall(String number, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'number' is set
        if (number == null) {
            throw new ApiException("Missing the required parameter 'number' when calling getQueueItem(Async)");
        }

        return getQueueItemCall(number, _callback);

    }

    /**
     * 
     * Retrieve queued item details
     * @param number Queue number (required)
     * @return Queue
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queued item details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public Queue getQueueItem(String number) throws ApiException {
        ApiResponse<Queue> localVarResp = getQueueItemWithHttpInfo(number);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve queued item details
     * @param number Queue number (required)
     * @return ApiResponse&lt;Queue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queued item details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Queue> getQueueItemWithHttpInfo(String number) throws ApiException {
        okhttp3.Call localVarCall = getQueueItemValidateBeforeCall(number, null);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve queued item details
     * @param number Queue number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved queued item details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQueueItemAsync(String number, final ApiCallback<Queue> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQueueItemValidateBeforeCall(number, _callback);
        Type localVarReturnType = new TypeToken<Queue>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getView
     * @param name Name of the view (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved view details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/view/{name}/api/json"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getView(Async)");
        }

        return getViewCall(name, _callback);

    }

    /**
     * 
     * Retrieve view details
     * @param name Name of the view (required)
     * @return ListView
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved view details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ListView getView(String name) throws ApiException {
        ApiResponse<ListView> localVarResp = getViewWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve view details
     * @param name Name of the view (required)
     * @return ApiResponse&lt;ListView&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved view details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListView> getViewWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getViewValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<ListView>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve view details
     * @param name Name of the view (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved view details </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewAsync(String name, final ApiCallback<ListView> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<ListView>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getViewConfig
     * @param name Name of the view (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved view configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewConfigCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/view/{name}/config.xml"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getViewConfigValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getViewConfig(Async)");
        }

        return getViewConfigCall(name, _callback);

    }

    /**
     * 
     * Retrieve view configuration
     * @param name Name of the view (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved view configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public String getViewConfig(String name) throws ApiException {
        ApiResponse<String> localVarResp = getViewConfigWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve view configuration
     * @param name Name of the view (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved view configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getViewConfigWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = getViewConfigValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve view configuration
     * @param name Name of the view (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved view configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getViewConfigAsync(String name, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getViewConfigValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for headJenkins
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Jenkins headers </td><td>  * x-jenkins - Jenkins version number <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headJenkinsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "HEAD", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call headJenkinsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return headJenkinsCall(_callback);

    }

    /**
     * 
     * Retrieve Jenkins headers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Jenkins headers </td><td>  * x-jenkins - Jenkins version number <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public void headJenkins() throws ApiException {
        headJenkinsWithHttpInfo();
    }

    /**
     * 
     * Retrieve Jenkins headers
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Jenkins headers </td><td>  * x-jenkins - Jenkins version number <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> headJenkinsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = headJenkinsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Retrieve Jenkins headers
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved Jenkins headers </td><td>  * x-jenkins - Jenkins version number <br>  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call headJenkinsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = headJenkinsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCreateItem
     * @param name Name of the new job (required)
     * @param from Existing job to copy from (optional)
     * @param mode Set to &#39;copy&#39; for copying an existing job (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body Job configuration in config.xml format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCreateItemCall(String name, String from, String mode, String jenkinsCrumb, String contentType, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/createItem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCreateItemValidateBeforeCall(String name, String from, String mode, String jenkinsCrumb, String contentType, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postCreateItem(Async)");
        }

        return postCreateItemCall(name, from, mode, jenkinsCrumb, contentType, body, _callback);

    }

    /**
     * 
     * Create a new job using job configuration, or copied from an existing job
     * @param name Name of the new job (required)
     * @param from Existing job to copy from (optional)
     * @param mode Set to &#39;copy&#39; for copying an existing job (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body Job configuration in config.xml format (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public void postCreateItem(String name, String from, String mode, String jenkinsCrumb, String contentType, String body) throws ApiException {
        postCreateItemWithHttpInfo(name, from, mode, jenkinsCrumb, contentType, body);
    }

    /**
     * 
     * Create a new job using job configuration, or copied from an existing job
     * @param name Name of the new job (required)
     * @param from Existing job to copy from (optional)
     * @param mode Set to &#39;copy&#39; for copying an existing job (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body Job configuration in config.xml format (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postCreateItemWithHttpInfo(String name, String from, String mode, String jenkinsCrumb, String contentType, String body) throws ApiException {
        okhttp3.Call localVarCall = postCreateItemValidateBeforeCall(name, from, mode, jenkinsCrumb, contentType, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a new job using job configuration, or copied from an existing job
     * @param name Name of the new job (required)
     * @param from Existing job to copy from (optional)
     * @param mode Set to &#39;copy&#39; for copying an existing job (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body Job configuration in config.xml format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created a new job </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCreateItemAsync(String name, String from, String mode, String jenkinsCrumb, String contentType, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCreateItemValidateBeforeCall(name, from, mode, jenkinsCrumb, contentType, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postCreateView
     * @param name Name of the new view (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body View configuration in config.xml format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the view </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCreateViewCall(String name, String jenkinsCrumb, String contentType, String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/createView";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postCreateViewValidateBeforeCall(String name, String jenkinsCrumb, String contentType, String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postCreateView(Async)");
        }

        return postCreateViewCall(name, jenkinsCrumb, contentType, body, _callback);

    }

    /**
     * 
     * Create a new view using view configuration
     * @param name Name of the new view (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body View configuration in config.xml format (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the view </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public void postCreateView(String name, String jenkinsCrumb, String contentType, String body) throws ApiException {
        postCreateViewWithHttpInfo(name, jenkinsCrumb, contentType, body);
    }

    /**
     * 
     * Create a new view using view configuration
     * @param name Name of the new view (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body View configuration in config.xml format (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the view </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postCreateViewWithHttpInfo(String name, String jenkinsCrumb, String contentType, String body) throws ApiException {
        okhttp3.Call localVarCall = postCreateViewValidateBeforeCall(name, jenkinsCrumb, contentType, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a new view using view configuration
     * @param name Name of the new view (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body View configuration in config.xml format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully created the view </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postCreateViewAsync(String name, String jenkinsCrumb, String contentType, String body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postCreateViewValidateBeforeCall(name, jenkinsCrumb, contentType, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobBuild
     * @param name Name of the job (required)
     * @param json  (required)
     * @param token  (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully built the job (backward compatibility for older versions of Jenkins) </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully built the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobBuildCall(String name, String json, String token, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/build"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (json != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("json", json));
        }

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobBuildValidateBeforeCall(String name, String json, String token, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postJobBuild(Async)");
        }

        // verify the required parameter 'json' is set
        if (json == null) {
            throw new ApiException("Missing the required parameter 'json' when calling postJobBuild(Async)");
        }

        return postJobBuildCall(name, json, token, jenkinsCrumb, _callback);

    }

    /**
     * 
     * Build a job
     * @param name Name of the job (required)
     * @param json  (required)
     * @param token  (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully built the job (backward compatibility for older versions of Jenkins) </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully built the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public void postJobBuild(String name, String json, String token, String jenkinsCrumb) throws ApiException {
        postJobBuildWithHttpInfo(name, json, token, jenkinsCrumb);
    }

    /**
     * 
     * Build a job
     * @param name Name of the job (required)
     * @param json  (required)
     * @param token  (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully built the job (backward compatibility for older versions of Jenkins) </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully built the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postJobBuildWithHttpInfo(String name, String json, String token, String jenkinsCrumb) throws ApiException {
        okhttp3.Call localVarCall = postJobBuildValidateBeforeCall(name, json, token, jenkinsCrumb, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Build a job
     * @param name Name of the job (required)
     * @param json  (required)
     * @param token  (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully built the job (backward compatibility for older versions of Jenkins) </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Successfully built the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobBuildAsync(String name, String json, String token, String jenkinsCrumb, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobBuildValidateBeforeCall(name, json, token, jenkinsCrumb, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobConfig
     * @param name Name of the job (required)
     * @param body Job configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobConfigCall(String name, String body, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/job/{name}/config.xml"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobConfigValidateBeforeCall(String name, String body, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postJobConfig(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postJobConfig(Async)");
        }

        return postJobConfigCall(name, body, jenkinsCrumb, _callback);

    }

    /**
     * 
     * Update job configuration
     * @param name Name of the job (required)
     * @param body Job configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public void postJobConfig(String name, String body, String jenkinsCrumb) throws ApiException {
        postJobConfigWithHttpInfo(name, body, jenkinsCrumb);
    }

    /**
     * 
     * Update job configuration
     * @param name Name of the job (required)
     * @param body Job configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postJobConfigWithHttpInfo(String name, String body, String jenkinsCrumb) throws ApiException {
        okhttp3.Call localVarCall = postJobConfigValidateBeforeCall(name, body, jenkinsCrumb, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update job configuration
     * @param name Name of the job (required)
     * @param body Job configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully retrieved job configuration in config.xml format </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobConfigAsync(String name, String body, String jenkinsCrumb, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobConfigValidateBeforeCall(name, body, jenkinsCrumb, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobDelete
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobDeleteCall(String name, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/doDelete"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobDeleteValidateBeforeCall(String name, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postJobDelete(Async)");
        }

        return postJobDeleteCall(name, jenkinsCrumb, _callback);

    }

    /**
     * 
     * Delete a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public void postJobDelete(String name, String jenkinsCrumb) throws ApiException {
        postJobDeleteWithHttpInfo(name, jenkinsCrumb);
    }

    /**
     * 
     * Delete a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postJobDeleteWithHttpInfo(String name, String jenkinsCrumb) throws ApiException {
        okhttp3.Call localVarCall = postJobDeleteValidateBeforeCall(name, jenkinsCrumb, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully deleted the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobDeleteAsync(String name, String jenkinsCrumb, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobDeleteValidateBeforeCall(name, jenkinsCrumb, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobDisable
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobDisableCall(String name, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/disable"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobDisableValidateBeforeCall(String name, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postJobDisable(Async)");
        }

        return postJobDisableCall(name, jenkinsCrumb, _callback);

    }

    /**
     * 
     * Disable a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public void postJobDisable(String name, String jenkinsCrumb) throws ApiException {
        postJobDisableWithHttpInfo(name, jenkinsCrumb);
    }

    /**
     * 
     * Disable a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postJobDisableWithHttpInfo(String name, String jenkinsCrumb) throws ApiException {
        okhttp3.Call localVarCall = postJobDisableValidateBeforeCall(name, jenkinsCrumb, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disable a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully disabled the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobDisableAsync(String name, String jenkinsCrumb, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobDisableValidateBeforeCall(name, jenkinsCrumb, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobEnable
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobEnableCall(String name, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/enable"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobEnableValidateBeforeCall(String name, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postJobEnable(Async)");
        }

        return postJobEnableCall(name, jenkinsCrumb, _callback);

    }

    /**
     * 
     * Enable a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public void postJobEnable(String name, String jenkinsCrumb) throws ApiException {
        postJobEnableWithHttpInfo(name, jenkinsCrumb);
    }

    /**
     * 
     * Enable a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postJobEnableWithHttpInfo(String name, String jenkinsCrumb) throws ApiException {
        okhttp3.Call localVarCall = postJobEnableValidateBeforeCall(name, jenkinsCrumb, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enable a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully enabled the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobEnableAsync(String name, String jenkinsCrumb, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobEnableValidateBeforeCall(name, jenkinsCrumb, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postJobLastBuildStop
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobLastBuildStopCall(String name, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/job/{name}/lastBuild/stop"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postJobLastBuildStopValidateBeforeCall(String name, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postJobLastBuildStop(Async)");
        }

        return postJobLastBuildStopCall(name, jenkinsCrumb, _callback);

    }

    /**
     * 
     * Stop a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public void postJobLastBuildStop(String name, String jenkinsCrumb) throws ApiException {
        postJobLastBuildStopWithHttpInfo(name, jenkinsCrumb);
    }

    /**
     * 
     * Stop a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postJobLastBuildStopWithHttpInfo(String name, String jenkinsCrumb) throws ApiException {
        okhttp3.Call localVarCall = postJobLastBuildStopValidateBeforeCall(name, jenkinsCrumb, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Stop a job
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully stopped the job </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Job cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postJobLastBuildStopAsync(String name, String jenkinsCrumb, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postJobLastBuildStopValidateBeforeCall(name, jenkinsCrumb, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for postViewConfig
     * @param name Name of the view (required)
     * @param body View configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated view configuration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postViewConfigCall(String name, String body, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/view/{name}/config.xml"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (jenkinsCrumb != null) {
            localVarHeaderParams.put("Jenkins-Crumb", localVarApiClient.parameterToString(jenkinsCrumb));
        }


        String[] localVarAuthNames = new String[] { "jenkins_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postViewConfigValidateBeforeCall(String name, String body, String jenkinsCrumb, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postViewConfig(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling postViewConfig(Async)");
        }

        return postViewConfigCall(name, body, jenkinsCrumb, _callback);

    }

    /**
     * 
     * Update view configuration
     * @param name Name of the view (required)
     * @param body View configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated view configuration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public void postViewConfig(String name, String body, String jenkinsCrumb) throws ApiException {
        postViewConfigWithHttpInfo(name, body, jenkinsCrumb);
    }

    /**
     * 
     * Update view configuration
     * @param name Name of the view (required)
     * @param body View configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated view configuration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postViewConfigWithHttpInfo(String name, String body, String jenkinsCrumb) throws ApiException {
        okhttp3.Call localVarCall = postViewConfigValidateBeforeCall(name, body, jenkinsCrumb, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update view configuration
     * @param name Name of the view (required)
     * @param body View configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully updated view configuration </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> An error has occurred - error message is embedded inside the HTML response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed - incorrect username and/or password </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Jenkins requires authentication - please set username and password </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> View cannot be found on Jenkins instance </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postViewConfigAsync(String name, String body, String jenkinsCrumb, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postViewConfigValidateBeforeCall(name, body, jenkinsCrumb, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
