/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.client.api

import org.openapitools.client.model.BranchImpl
import org.openapitools.client.model.FavoriteImpl
import org.openapitools.client.model.GithubOrganization
import org.openapitools.client.model.GithubScm
import org.openapitools.client.model.MultibranchPipeline
import org.openapitools.client.model.Organisation
import org.openapitools.client.model.Pipeline
import org.openapitools.client.model.PipelineActivity
import org.openapitools.client.model.PipelineFolderImpl
import org.openapitools.client.model.PipelineImpl
import org.openapitools.client.model.PipelineRun
import org.openapitools.client.model.PipelineRunNode
import org.openapitools.client.model.PipelineStepImpl
import org.openapitools.client.model.QueueItemImpl
import org.openapitools.client.model.User
import org.openapitools.client.core._
import org.openapitools.client.core.CollectionFormats._
import org.openapitools.client.core.ApiKeyLocations._

object BlueOceanApi {

  def apply(baseUrl: String = "http://localhost") = new BlueOceanApi(baseUrl)
}

class BlueOceanApi(baseUrl: String) {

  /**
   * Delete queue item from an organization pipeline queue
   * 
   * Expected answers:
   *   code 200 :  (Successfully deleted queue item)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param queue Name of the queue item
   */
  def deletePipelineQueueItem(organization: String, pipeline: String, queue: String)(implicit basicAuth: BasicCredentials): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("queue", queue)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve authenticated user details for an organization
   * 
   * Expected answers:
   *   code 200 : User (Successfully retrieved authenticated user details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   */
  def getAuthenticatedUser(organization: String)(implicit basicAuth: BasicCredentials): ApiRequest[User] =
    ApiRequest[User](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/user/", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withSuccessResponse[User](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Get a list of class names supported by a given class
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved class names)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param `class` Name of the class
   */
  def getClasses(`class`: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/blue/rest/classes/{class}", "application/json")
      .withCredentials(basicAuth).withPathParam("class", `class`)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve JSON Web Key
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved JWT token)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * @param key Key ID received as part of JWT header field kid
   */
  def getJsonWebKey(key: Int): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/jwt-auth/jwks/{key}", "application/json")
      .withPathParam("key", key)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve JSON Web Token
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved JWT token)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes
   * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
   */
  def getJsonWebToken(expiryTimeInMins: Option[Int] = None, maxExpiryTimeInMins: Option[Int] = None): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/jwt-auth/token", "application/json")
      .withQueryParam("expiryTimeInMins", expiryTimeInMins)
      .withQueryParam("maxExpiryTimeInMins", maxExpiryTimeInMins)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve organization details
   * 
   * Expected answers:
   *   code 200 : Organisation (Successfully retrieved pipeline details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Pipeline cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   */
  def getOrganisation(organization: String)(implicit basicAuth: BasicCredentials): ApiRequest[Organisation] =
    ApiRequest[Organisation](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withSuccessResponse[Organisation](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      

  /**
   * Retrieve all organizations details
   * 
   * Expected answers:
   *   code 200 : Seq[Organisation] (Successfully retrieved pipelines details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   */
  def getOrganisations()(implicit basicAuth: BasicCredentials): ApiRequest[Seq[Organisation]] =
    ApiRequest[Seq[Organisation]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/", "application/json")
      .withCredentials(basicAuth).withSuccessResponse[Seq[Organisation]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve pipeline details for an organization
   * 
   * Expected answers:
   *   code 200 : Pipeline (Successfully retrieved pipeline details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   *   code 404 :  (Pipeline cannot be found on Jenkins instance)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   */
  def getPipeline(organization: String, pipeline: String)(implicit basicAuth: BasicCredentials): ApiRequest[Pipeline] =
    ApiRequest[Pipeline](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[Pipeline](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      .withErrorResponse[Unit](404)
      

  /**
   * Retrieve all activities details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : Seq[PipelineActivity] (Successfully retrieved all activities details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   */
  def getPipelineActivities(organization: String, pipeline: String)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[PipelineActivity]] =
    ApiRequest[Seq[PipelineActivity]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[Seq[PipelineActivity]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve branch details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : BranchImpl (Successfully retrieved branch details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param branch Name of the branch
   */
  def getPipelineBranch(organization: String, pipeline: String, branch: String)(implicit basicAuth: BasicCredentials): ApiRequest[BranchImpl] =
    ApiRequest[BranchImpl](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("branch", branch)
      .withSuccessResponse[BranchImpl](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve branch run details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : PipelineRun (Successfully retrieved run details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param branch Name of the branch
   * @param run Name of the run
   */
  def getPipelineBranchRun(organization: String, pipeline: String, branch: String, run: String)(implicit basicAuth: BasicCredentials): ApiRequest[PipelineRun] =
    ApiRequest[PipelineRun](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("branch", branch)
      .withPathParam("run", run)
      .withSuccessResponse[PipelineRun](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve all branches details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : MultibranchPipeline (Successfully retrieved all branches details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   */
  def getPipelineBranches(organization: String, pipeline: String)(implicit basicAuth: BasicCredentials): ApiRequest[MultibranchPipeline] =
    ApiRequest[MultibranchPipeline](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[MultibranchPipeline](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve pipeline folder for an organization
   * 
   * Expected answers:
   *   code 200 : PipelineFolderImpl (Successfully retrieved folder details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param folder Name of the folder
   */
  def getPipelineFolder(organization: String, folder: String)(implicit basicAuth: BasicCredentials): ApiRequest[PipelineFolderImpl] =
    ApiRequest[PipelineFolderImpl](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{folder}/", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("folder", folder)
      .withSuccessResponse[PipelineFolderImpl](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve pipeline details for an organization folder
   * 
   * Expected answers:
   *   code 200 : PipelineImpl (Successfully retrieved pipeline details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param folder Name of the folder
   */
  def getPipelineFolderPipeline(organization: String, pipeline: String, folder: String)(implicit basicAuth: BasicCredentials): ApiRequest[PipelineImpl] =
    ApiRequest[PipelineImpl](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("folder", folder)
      .withSuccessResponse[PipelineImpl](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve queue details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : Seq[QueueItemImpl] (Successfully retrieved queue details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   */
  def getPipelineQueue(organization: String, pipeline: String)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[QueueItemImpl]] =
    ApiRequest[Seq[QueueItemImpl]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[Seq[QueueItemImpl]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve run details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : PipelineRun (Successfully retrieved run details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   */
  def getPipelineRun(organization: String, pipeline: String, run: String)(implicit basicAuth: BasicCredentials): ApiRequest[PipelineRun] =
    ApiRequest[PipelineRun](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withSuccessResponse[PipelineRun](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Get log for a pipeline run
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved pipeline run log)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param start Start position of the log
   * @param download Set to true in order to download the file, otherwise it's passed as a response body
   */
  def getPipelineRunLog(organization: String, pipeline: String, run: String, start: Option[Int] = None, download: Option[Boolean] = None)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log", "application/json")
      .withCredentials(basicAuth).withQueryParam("start", start)
      .withQueryParam("download", download)
      .withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve run node details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : PipelineRunNode (Successfully retrieved run node details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param node Name of the node
   */
  def getPipelineRunNode(organization: String, pipeline: String, run: String, node: String)(implicit basicAuth: BasicCredentials): ApiRequest[PipelineRunNode] =
    ApiRequest[PipelineRunNode](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withPathParam("node", node)
      .withSuccessResponse[PipelineRunNode](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve run node details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : PipelineStepImpl (Successfully retrieved run node step details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param node Name of the node
   * @param step Name of the step
   */
  def getPipelineRunNodeStep(organization: String, pipeline: String, run: String, node: String, step: String)(implicit basicAuth: BasicCredentials): ApiRequest[PipelineStepImpl] =
    ApiRequest[PipelineStepImpl](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withPathParam("node", node)
      .withPathParam("step", step)
      .withSuccessResponse[PipelineStepImpl](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Get log for a pipeline run node step
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved pipeline run node step log)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param node Name of the node
   * @param step Name of the step
   */
  def getPipelineRunNodeStepLog(organization: String, pipeline: String, run: String, node: String, step: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withPathParam("node", node)
      .withPathParam("step", step)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve run node steps details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : Seq[PipelineStepImpl] (Successfully retrieved run node steps details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param node Name of the node
   */
  def getPipelineRunNodeSteps(organization: String, pipeline: String, run: String, node: String)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[PipelineStepImpl]] =
    ApiRequest[Seq[PipelineStepImpl]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withPathParam("node", node)
      .withSuccessResponse[Seq[PipelineStepImpl]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve run nodes details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : Seq[PipelineRunNode] (Successfully retrieved run nodes details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   */
  def getPipelineRunNodes(organization: String, pipeline: String, run: String)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[PipelineRunNode]] =
    ApiRequest[Seq[PipelineRunNode]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withSuccessResponse[Seq[PipelineRunNode]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve all runs details for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : Seq[PipelineRun] (Successfully retrieved runs details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   */
  def getPipelineRuns(organization: String, pipeline: String)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[PipelineRun]] =
    ApiRequest[Seq[PipelineRun]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[Seq[PipelineRun]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve all pipelines details for an organization
   * 
   * Expected answers:
   *   code 200 : Seq[Pipeline] (Successfully retrieved pipelines details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   */
  def getPipelines(organization: String)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[Pipeline]] =
    ApiRequest[Seq[Pipeline]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/pipelines/", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withSuccessResponse[Seq[Pipeline]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve SCM details for an organization
   * 
   * Expected answers:
   *   code 200 : GithubScm (Successfully retrieved SCM details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param scm Name of SCM
   */
  def getSCM(organization: String, scm: String)(implicit basicAuth: BasicCredentials): ApiRequest[GithubScm] =
    ApiRequest[GithubScm](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/scm/{scm}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("scm", scm)
      .withSuccessResponse[GithubScm](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve SCM organization repositories details for an organization
   * 
   * Expected answers:
   *   code 200 : Seq[GithubOrganization] (Successfully retrieved SCM organization repositories details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param scm Name of SCM
   * @param scmOrganisation Name of the SCM organization
   * @param credentialId Credential ID
   * @param pageSize Number of items in a page
   * @param pageNumber Page number
   */
  def getSCMOrganisationRepositories(organization: String, scm: String, scmOrganisation: String, credentialId: Option[String] = None, pageSize: Option[Int] = None, pageNumber: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[GithubOrganization]] =
    ApiRequest[Seq[GithubOrganization]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories", "application/json")
      .withCredentials(basicAuth).withQueryParam("credentialId", credentialId)
      .withQueryParam("pageSize", pageSize)
      .withQueryParam("pageNumber", pageNumber)
      .withPathParam("organization", organization)
      .withPathParam("scm", scm)
      .withPathParam("scmOrganisation", scmOrganisation)
      .withSuccessResponse[Seq[GithubOrganization]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve SCM organization repository details for an organization
   * 
   * Expected answers:
   *   code 200 : Seq[GithubOrganization] (Successfully retrieved SCM organizations details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param scm Name of SCM
   * @param scmOrganisation Name of the SCM organization
   * @param repository Name of the SCM repository
   * @param credentialId Credential ID
   */
  def getSCMOrganisationRepository(organization: String, scm: String, scmOrganisation: String, repository: String, credentialId: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[GithubOrganization]] =
    ApiRequest[Seq[GithubOrganization]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}", "application/json")
      .withCredentials(basicAuth).withQueryParam("credentialId", credentialId)
      .withPathParam("organization", organization)
      .withPathParam("scm", scm)
      .withPathParam("scmOrganisation", scmOrganisation)
      .withPathParam("repository", repository)
      .withSuccessResponse[Seq[GithubOrganization]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve SCM organizations details for an organization
   * 
   * Expected answers:
   *   code 200 : Seq[GithubOrganization] (Successfully retrieved SCM organizations details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param scm Name of SCM
   * @param credentialId Credential ID
   */
  def getSCMOrganisations(organization: String, scm: String, credentialId: Option[String] = None)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[GithubOrganization]] =
    ApiRequest[Seq[GithubOrganization]](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/scm/{scm}/organizations", "application/json")
      .withCredentials(basicAuth).withQueryParam("credentialId", credentialId)
      .withPathParam("organization", organization)
      .withPathParam("scm", scm)
      .withSuccessResponse[Seq[GithubOrganization]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve user details for an organization
   * 
   * Expected answers:
   *   code 200 : User (Successfully retrieved users details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param user Name of the user
   */
  def getUser(organization: String, user: String)(implicit basicAuth: BasicCredentials): ApiRequest[User] =
    ApiRequest[User](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/users/{user}", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("user", user)
      .withSuccessResponse[User](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve user favorites details for an organization
   * 
   * Expected answers:
   *   code 200 : Seq[FavoriteImpl] (Successfully retrieved users favorites details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param user Name of the user
   */
  def getUserFavorites(user: String)(implicit basicAuth: BasicCredentials): ApiRequest[Seq[FavoriteImpl]] =
    ApiRequest[Seq[FavoriteImpl]](ApiMethods.GET, baseUrl, "/blue/rest/users/{user}/favorites", "application/json")
      .withCredentials(basicAuth).withPathParam("user", user)
      .withSuccessResponse[Seq[FavoriteImpl]](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Retrieve users details for an organization
   * 
   * Expected answers:
   *   code 200 : User (Successfully retrieved users details)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   */
  def getUsers(organization: String)(implicit basicAuth: BasicCredentials): ApiRequest[User] =
    ApiRequest[User](ApiMethods.GET, baseUrl, "/blue/rest/organizations/{organization}/users/", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withSuccessResponse[User](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Replay an organization pipeline run
   * 
   * Expected answers:
   *   code 200 : QueueItemImpl (Successfully replayed a pipeline run)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   */
  def postPipelineRun(organization: String, pipeline: String, run: String)(implicit basicAuth: BasicCredentials): ApiRequest[QueueItemImpl] =
    ApiRequest[QueueItemImpl](ApiMethods.POST, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withSuccessResponse[QueueItemImpl](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Start a build for an organization pipeline
   * 
   * Expected answers:
   *   code 200 : QueueItemImpl (Successfully started a build)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   */
  def postPipelineRuns(organization: String, pipeline: String)(implicit basicAuth: BasicCredentials): ApiRequest[QueueItemImpl] =
    ApiRequest[QueueItemImpl](ApiMethods.POST, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs", "application/json")
      .withCredentials(basicAuth).withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[QueueItemImpl](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Favorite/unfavorite a pipeline
   * 
   * Expected answers:
   *   code 200 : FavoriteImpl (Successfully favorited/unfavorited a pipeline)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param body Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite
   */
  def putPipelineFavorite(organization: String, pipeline: String, body: Boolean)(implicit basicAuth: BasicCredentials): ApiRequest[FavoriteImpl] =
    ApiRequest[FavoriteImpl](ApiMethods.PUT, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite", "application/json")
      .withCredentials(basicAuth).withBody(body)
      .withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withSuccessResponse[FavoriteImpl](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Stop a build of an organization pipeline
   * 
   * Expected answers:
   *   code 200 : PipelineRun (Successfully stopped a build)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param blocking Set to true to make blocking stop, default: false
   * @param timeOutInSecs Timeout in seconds, default: 10 seconds
   */
  def putPipelineRun(organization: String, pipeline: String, run: String, blocking: Option[String] = None, timeOutInSecs: Option[Int] = None)(implicit basicAuth: BasicCredentials): ApiRequest[PipelineRun] =
    ApiRequest[PipelineRun](ApiMethods.PUT, baseUrl, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop", "application/json")
      .withCredentials(basicAuth).withQueryParam("blocking", blocking)
      .withQueryParam("timeOutInSecs", timeOutInSecs)
      .withPathParam("organization", organization)
      .withPathParam("pipeline", pipeline)
      .withPathParam("run", run)
      .withSuccessResponse[PipelineRun](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Search for any resource details
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved search result)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param `q` Query string
   */
  def search(`q`: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/blue/rest/search/", "application/json")
      .withCredentials(basicAuth).withQueryParam("q", `q`)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      

  /**
   * Get classes details
   * 
   * Expected answers:
   *   code 200 : String (Successfully retrieved search result)
   *   code 401 :  (Authentication failed - incorrect username and/or password)
   *   code 403 :  (Jenkins requires authentication - please set username and password)
   * 
   * Available security schemes:
   *   jenkins_auth (http)
   * 
   * @param `q` Query string containing an array of class names
   */
  def searchClasses(`q`: String)(implicit basicAuth: BasicCredentials): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, baseUrl, "/blue/rest/classes/", "application/json")
      .withCredentials(basicAuth).withQueryParam("q", `q`)
      .withSuccessResponse[String](200)
      .withErrorResponse[Unit](401)
      .withErrorResponse[Unit](403)
      



}

