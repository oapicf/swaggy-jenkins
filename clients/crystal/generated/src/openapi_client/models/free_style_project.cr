# #Swaggy Jenkins
#
##Jenkins API clients generated from Swagger / Open API specification
#
#The version of the OpenAPI document: 3.0.2-pre.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.12.0
#

require "big"
require "json"
require "time"

module OpenAPIClient
  class FreeStyleProject
    include JSON::Serializable

    # Optional properties
    @[JSON::Field(key: "_class", type: String?, nillable: true, emit_null: false)]
    property _class : String?

    @[JSON::Field(key: "name", type: String?, nillable: true, emit_null: false)]
    property name : String?

    @[JSON::Field(key: "url", type: String?, nillable: true, emit_null: false)]
    property url : String?

    @[JSON::Field(key: "color", type: String?, nillable: true, emit_null: false)]
    property color : String?

    @[JSON::Field(key: "actions", type: Array(FreeStyleProjectactions)?, nillable: true, emit_null: false)]
    property actions : Array(FreeStyleProjectactions)?

    @[JSON::Field(key: "description", type: String?, nillable: true, emit_null: false)]
    property description : String?

    @[JSON::Field(key: "displayName", type: String?, nillable: true, emit_null: false)]
    property display_name : String?

    @[JSON::Field(key: "displayNameOrNull", type: String?, nillable: true, emit_null: false)]
    property display_name_or_null : String?

    @[JSON::Field(key: "fullDisplayName", type: String?, nillable: true, emit_null: false)]
    property full_display_name : String?

    @[JSON::Field(key: "fullName", type: String?, nillable: true, emit_null: false)]
    property full_name : String?

    @[JSON::Field(key: "buildable", type: Bool?, nillable: true, emit_null: false)]
    property buildable : Bool?

    @[JSON::Field(key: "builds", type: Array(FreeStyleBuild)?, nillable: true, emit_null: false)]
    property builds : Array(FreeStyleBuild)?

    @[JSON::Field(key: "firstBuild", type: FreeStyleBuild?, nillable: true, emit_null: false)]
    property first_build : FreeStyleBuild?

    @[JSON::Field(key: "healthReport", type: Array(FreeStyleProjecthealthReport)?, nillable: true, emit_null: false)]
    property health_report : Array(FreeStyleProjecthealthReport)?

    @[JSON::Field(key: "inQueue", type: Bool?, nillable: true, emit_null: false)]
    property in_queue : Bool?

    @[JSON::Field(key: "keepDependencies", type: Bool?, nillable: true, emit_null: false)]
    property keep_dependencies : Bool?

    @[JSON::Field(key: "lastBuild", type: FreeStyleBuild?, nillable: true, emit_null: false)]
    property last_build : FreeStyleBuild?

    @[JSON::Field(key: "lastCompletedBuild", type: FreeStyleBuild?, nillable: true, emit_null: false)]
    property last_completed_build : FreeStyleBuild?

    @[JSON::Field(key: "lastFailedBuild", type: String?, nillable: true, emit_null: false)]
    property last_failed_build : String?

    @[JSON::Field(key: "lastStableBuild", type: FreeStyleBuild?, nillable: true, emit_null: false)]
    property last_stable_build : FreeStyleBuild?

    @[JSON::Field(key: "lastSuccessfulBuild", type: FreeStyleBuild?, nillable: true, emit_null: false)]
    property last_successful_build : FreeStyleBuild?

    @[JSON::Field(key: "lastUnstableBuild", type: String?, nillable: true, emit_null: false)]
    property last_unstable_build : String?

    @[JSON::Field(key: "lastUnsuccessfulBuild", type: String?, nillable: true, emit_null: false)]
    property last_unsuccessful_build : String?

    @[JSON::Field(key: "nextBuildNumber", type: Int32?, nillable: true, emit_null: false)]
    property next_build_number : Int32?

    @[JSON::Field(key: "queueItem", type: String?, nillable: true, emit_null: false)]
    property queue_item : String?

    @[JSON::Field(key: "concurrentBuild", type: Bool?, nillable: true, emit_null: false)]
    property concurrent_build : Bool?

    @[JSON::Field(key: "scm", type: NullSCM?, nillable: true, emit_null: false)]
    property scm : NullSCM?

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(@_class : String?, @name : String?, @url : String?, @color : String?, @actions : Array(FreeStyleProjectactions)?, @description : String?, @display_name : String?, @display_name_or_null : String?, @full_display_name : String?, @full_name : String?, @buildable : Bool?, @builds : Array(FreeStyleBuild)?, @first_build : FreeStyleBuild?, @health_report : Array(FreeStyleProjecthealthReport)?, @in_queue : Bool?, @keep_dependencies : Bool?, @last_build : FreeStyleBuild?, @last_completed_build : FreeStyleBuild?, @last_failed_build : String?, @last_stable_build : FreeStyleBuild?, @last_successful_build : FreeStyleBuild?, @last_unstable_build : String?, @last_unsuccessful_build : String?, @next_build_number : Int32?, @queue_item : String?, @concurrent_build : Bool?, @scm : NullSCM?)
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array(String).new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.same?(o)
      self.class == o.class &&
          _class == o._class &&
          name == o.name &&
          url == o.url &&
          color == o.color &&
          actions == o.actions &&
          description == o.description &&
          display_name == o.display_name &&
          display_name_or_null == o.display_name_or_null &&
          full_display_name == o.full_display_name &&
          full_name == o.full_name &&
          buildable == o.buildable &&
          builds == o.builds &&
          first_build == o.first_build &&
          health_report == o.health_report &&
          in_queue == o.in_queue &&
          keep_dependencies == o.keep_dependencies &&
          last_build == o.last_build &&
          last_completed_build == o.last_completed_build &&
          last_failed_build == o.last_failed_build &&
          last_stable_build == o.last_stable_build &&
          last_successful_build == o.last_successful_build &&
          last_unstable_build == o.last_unstable_build &&
          last_unsuccessful_build == o.last_unsuccessful_build &&
          next_build_number == o.next_build_number &&
          queue_item == o.queue_item &&
          concurrent_build == o.concurrent_build &&
          scm == o.scm
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [_class, name, url, color, actions, description, display_name, display_name_or_null, full_display_name, full_name, buildable, builds, first_build, health_report, in_queue, keep_dependencies, last_build, last_completed_build, last_failed_build, last_stable_build, last_successful_build, last_unstable_build, last_unsuccessful_build, next_build_number, queue_item, concurrent_build, scm].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if !attributes[self.class.attribute_map[key]]? && self.class.openapi_nullable.includes?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        ({} of Symbol => String).tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenAPIClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {} of Symbol => String
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.includes?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        ({} of Symbol => String).tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
