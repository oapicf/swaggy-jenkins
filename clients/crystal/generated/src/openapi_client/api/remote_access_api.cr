# #Swaggy Jenkins
#
##Jenkins API clients generated from Swagger / Open API specification
#
#The version of the OpenAPI document: 2.0.1-pre.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "uri"

module OpenAPIClient
  class RemoteAccessApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Retrieve computer details
    # @param depth [Int32] Recursion depth in response model
    # @return [ComputerSet]
    def get_computer(depth : Int32)
      data, _status_code, _headers = get_computer_with_http_info(depth)
      data
    end

    # Retrieve computer details
    # @param depth [Int32] Recursion depth in response model
    # @return [Array<(ComputerSet, Integer, Hash)>] ComputerSet data, response status code and response headers
    def get_computer_with_http_info(depth : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_computer ..."}
      end
      # verify the required parameter "depth" is set
      if @api_client.config.client_side_validation && depth.nil?
        raise ArgumentError.new("Missing the required parameter 'depth' when calling RemoteAccessApi.get_computer")
      end
      # resource path
      local_var_path = "/computer/api/json"

      # query parameters
      query_params = Hash(String, String).new
      query_params["depth"] = depth.to_s unless depth.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ComputerSet"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_computer",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_computer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ComputerSet.from_json(data), status_code, headers
    end

    # Retrieve Jenkins details
    # @return [Hudson]
    def get_jenkins()
      data, _status_code, _headers = get_jenkins_with_http_info()
      data
    end

    # Retrieve Jenkins details
    # @return [Array<(Hudson, Integer, Hash)>] Hudson data, response status code and response headers
    def get_jenkins_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_jenkins ..."}
      end
      # resource path
      local_var_path = "/api/json"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Hudson"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_jenkins",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_jenkins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Hudson.from_json(data), status_code, headers
    end

    # Retrieve job details
    # @param name [String] Name of the job
    # @return [FreeStyleProject]
    def get_job(name : String)
      data, _status_code, _headers = get_job_with_http_info(name)
      data
    end

    # Retrieve job details
    # @param name [String] Name of the job
    # @return [Array<(FreeStyleProject, Integer, Hash)>] FreeStyleProject data, response status code and response headers
    def get_job_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_job ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.get_job")
      end
      # resource path
      local_var_path = "/job/{name}/api/json".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "FreeStyleProject"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_job",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_job\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return FreeStyleProject.from_json(data), status_code, headers
    end

    # Retrieve job configuration
    # @param name [String] Name of the job
    # @return [String]
    def get_job_config(name : String)
      data, _status_code, _headers = get_job_config_with_http_info(name)
      data
    end

    # Retrieve job configuration
    # @param name [String] Name of the job
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_job_config_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_job_config ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.get_job_config")
      end
      # resource path
      local_var_path = "/job/{name}/config.xml".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["text/xml"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_job_config",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_job_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Retrieve job's last build details
    # @param name [String] Name of the job
    # @return [FreeStyleBuild]
    def get_job_last_build(name : String)
      data, _status_code, _headers = get_job_last_build_with_http_info(name)
      data
    end

    # Retrieve job&#39;s last build details
    # @param name [String] Name of the job
    # @return [Array<(FreeStyleBuild, Integer, Hash)>] FreeStyleBuild data, response status code and response headers
    def get_job_last_build_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_job_last_build ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.get_job_last_build")
      end
      # resource path
      local_var_path = "/job/{name}/lastBuild/api/json".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "FreeStyleBuild"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_job_last_build",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_job_last_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return FreeStyleBuild.from_json(data), status_code, headers
    end

    # Retrieve job's build progressive text output
    # @param name [String] Name of the job
    # @param number [String] Build number
    # @param start [String] Starting point of progressive text output
    # @return [nil]
    def get_job_progressive_text(name : String, number : String, start : String)
      get_job_progressive_text_with_http_info(name, number, start)
      nil
    end

    # Retrieve job&#39;s build progressive text output
    # @param name [String] Name of the job
    # @param number [String] Build number
    # @param start [String] Starting point of progressive text output
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_job_progressive_text_with_http_info(name : String, number : String, start : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_job_progressive_text ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.get_job_progressive_text")
      end
      # verify the required parameter "number" is set
      if @api_client.config.client_side_validation && number.nil?
        raise ArgumentError.new("Missing the required parameter 'number' when calling RemoteAccessApi.get_job_progressive_text")
      end
      # verify the required parameter "start" is set
      if @api_client.config.client_side_validation && start.nil?
        raise ArgumentError.new("Missing the required parameter 'start' when calling RemoteAccessApi.get_job_progressive_text")
      end
      # resource path
      local_var_path = "/job/{name}/{number}/logText/progressiveText".sub("{" + "name" + "}", URI.encode_path(name.to_s)).sub("{" + "number" + "}", URI.encode_path(number.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start"] = start.to_s unless start.nil?

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_job_progressive_text",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_job_progressive_text\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve queue details
    # @return [Queue]
    def get_queue()
      data, _status_code, _headers = get_queue_with_http_info()
      data
    end

    # Retrieve queue details
    # @return [Array<(Queue, Integer, Hash)>] Queue data, response status code and response headers
    def get_queue_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_queue ..."}
      end
      # resource path
      local_var_path = "/queue/api/json"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Queue"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_queue",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Queue.from_json(data), status_code, headers
    end

    # Retrieve queued item details
    # @param number [String] Queue number
    # @return [Queue]
    def get_queue_item(number : String)
      data, _status_code, _headers = get_queue_item_with_http_info(number)
      data
    end

    # Retrieve queued item details
    # @param number [String] Queue number
    # @return [Array<(Queue, Integer, Hash)>] Queue data, response status code and response headers
    def get_queue_item_with_http_info(number : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_queue_item ..."}
      end
      # verify the required parameter "number" is set
      if @api_client.config.client_side_validation && number.nil?
        raise ArgumentError.new("Missing the required parameter 'number' when calling RemoteAccessApi.get_queue_item")
      end
      # resource path
      local_var_path = "/queue/item/{number}/api/json".sub("{" + "number" + "}", URI.encode_path(number.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Queue"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_queue_item",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_queue_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Queue.from_json(data), status_code, headers
    end

    # Retrieve view details
    # @param name [String] Name of the view
    # @return [ListView]
    def get_view(name : String)
      data, _status_code, _headers = get_view_with_http_info(name)
      data
    end

    # Retrieve view details
    # @param name [String] Name of the view
    # @return [Array<(ListView, Integer, Hash)>] ListView data, response status code and response headers
    def get_view_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_view ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.get_view")
      end
      # resource path
      local_var_path = "/view/{name}/api/json".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "ListView"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_view",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return ListView.from_json(data), status_code, headers
    end

    # Retrieve view configuration
    # @param name [String] Name of the view
    # @return [String]
    def get_view_config(name : String)
      data, _status_code, _headers = get_view_config_with_http_info(name)
      data
    end

    # Retrieve view configuration
    # @param name [String] Name of the view
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_view_config_with_http_info(name : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.get_view_config ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.get_view_config")
      end
      # resource path
      local_var_path = "/view/{name}/config.xml".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["text/xml"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"RemoteAccessApi.get_view_config",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#get_view_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Retrieve Jenkins headers
    # @return [nil]
    def head_jenkins()
      head_jenkins_with_http_info()
      nil
    end

    # Retrieve Jenkins headers
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def head_jenkins_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.head_jenkins ..."}
      end
      # resource path
      local_var_path = "/api/json"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:HEAD,
                                                        local_var_path,
                                                        :"RemoteAccessApi.head_jenkins",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#head_jenkins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create a new job using job configuration, or copied from an existing job
    # @param name [String] Name of the new job
    # @return [nil]
    def post_create_item(name : String, from : String?, mode : String?, jenkins_crumb : String?, content_type : String?, body : String?)
      post_create_item_with_http_info(name, from, mode, jenkins_crumb, content_type, body)
      nil
    end

    # Create a new job using job configuration, or copied from an existing job
    # @param name [String] Name of the new job
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_create_item_with_http_info(name : String, from : String?, mode : String?, jenkins_crumb : String?, content_type : String?, body : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_create_item ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_create_item")
      end
      # resource path
      local_var_path = "/createItem"

      # query parameters
      query_params = Hash(String, String).new
      query_params["name"] = name.to_s unless name.nil?
      query_params["from"] = from.to_s unless from.nil?
      query_params["mode"] = mode.to_s unless mode.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])
      header_params["Jenkins-Crumb"] = jenkins_crumb
      header_params["Content-Type"] = content_type

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = body.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_create_item",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_create_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Create a new view using view configuration
    # @param name [String] Name of the new view
    # @return [nil]
    def post_create_view(name : String, jenkins_crumb : String?, content_type : String?, body : String?)
      post_create_view_with_http_info(name, jenkins_crumb, content_type, body)
      nil
    end

    # Create a new view using view configuration
    # @param name [String] Name of the new view
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_create_view_with_http_info(name : String, jenkins_crumb : String?, content_type : String?, body : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_create_view ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_create_view")
      end
      # resource path
      local_var_path = "/createView"

      # query parameters
      query_params = Hash(String, String).new
      query_params["name"] = name.to_s unless name.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])
      header_params["Jenkins-Crumb"] = jenkins_crumb
      header_params["Content-Type"] = content_type

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = body.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_create_view",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_create_view\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Build a job
    # @param name [String] Name of the job
    # @param json [String] 
    # @return [nil]
    def post_job_build(name : String, json : String, token : String?, jenkins_crumb : String?)
      post_job_build_with_http_info(name, json, token, jenkins_crumb)
      nil
    end

    # Build a job
    # @param name [String] Name of the job
    # @param json [String] 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_job_build_with_http_info(name : String, json : String, token : String?, jenkins_crumb : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_job_build ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_job_build")
      end
      # verify the required parameter "json" is set
      if @api_client.config.client_side_validation && json.nil?
        raise ArgumentError.new("Missing the required parameter 'json' when calling RemoteAccessApi.post_job_build")
      end
      # resource path
      local_var_path = "/job/{name}/build".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["json"] = json.to_s unless json.nil?
      query_params["token"] = token.to_s unless token.nil?

      # header parameters
      header_params = Hash(String, String).new
      header_params["Jenkins-Crumb"] = jenkins_crumb

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_job_build",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_job_build\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update job configuration
    # @param name [String] Name of the job
    # @param body [String] Job configuration in config.xml format
    # @return [nil]
    def post_job_config(name : String, body : String, jenkins_crumb : String?)
      post_job_config_with_http_info(name, body, jenkins_crumb)
      nil
    end

    # Update job configuration
    # @param name [String] Name of the job
    # @param body [String] Job configuration in config.xml format
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_job_config_with_http_info(name : String, body : String, jenkins_crumb : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_job_config ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_job_config")
      end
      # verify the required parameter "body" is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError.new("Missing the required parameter 'body' when calling RemoteAccessApi.post_job_config")
      end
      # resource path
      local_var_path = "/job/{name}/config.xml".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])
      header_params["Jenkins-Crumb"] = jenkins_crumb

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = body.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_job_config",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_job_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Delete a job
    # @param name [String] Name of the job
    # @return [nil]
    def post_job_delete(name : String, jenkins_crumb : String?)
      post_job_delete_with_http_info(name, jenkins_crumb)
      nil
    end

    # Delete a job
    # @param name [String] Name of the job
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_job_delete_with_http_info(name : String, jenkins_crumb : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_job_delete ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_job_delete")
      end
      # resource path
      local_var_path = "/job/{name}/doDelete".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Jenkins-Crumb"] = jenkins_crumb

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_job_delete",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_job_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Disable a job
    # @param name [String] Name of the job
    # @return [nil]
    def post_job_disable(name : String, jenkins_crumb : String?)
      post_job_disable_with_http_info(name, jenkins_crumb)
      nil
    end

    # Disable a job
    # @param name [String] Name of the job
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_job_disable_with_http_info(name : String, jenkins_crumb : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_job_disable ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_job_disable")
      end
      # resource path
      local_var_path = "/job/{name}/disable".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Jenkins-Crumb"] = jenkins_crumb

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_job_disable",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_job_disable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Enable a job
    # @param name [String] Name of the job
    # @return [nil]
    def post_job_enable(name : String, jenkins_crumb : String?)
      post_job_enable_with_http_info(name, jenkins_crumb)
      nil
    end

    # Enable a job
    # @param name [String] Name of the job
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_job_enable_with_http_info(name : String, jenkins_crumb : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_job_enable ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_job_enable")
      end
      # resource path
      local_var_path = "/job/{name}/enable".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Jenkins-Crumb"] = jenkins_crumb

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_job_enable",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_job_enable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Stop a job
    # @param name [String] Name of the job
    # @return [nil]
    def post_job_last_build_stop(name : String, jenkins_crumb : String?)
      post_job_last_build_stop_with_http_info(name, jenkins_crumb)
      nil
    end

    # Stop a job
    # @param name [String] Name of the job
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_job_last_build_stop_with_http_info(name : String, jenkins_crumb : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_job_last_build_stop ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_job_last_build_stop")
      end
      # resource path
      local_var_path = "/job/{name}/lastBuild/stop".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      header_params["Jenkins-Crumb"] = jenkins_crumb

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_job_last_build_stop",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_job_last_build_stop\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Update view configuration
    # @param name [String] Name of the view
    # @param body [String] View configuration in config.xml format
    # @return [nil]
    def post_view_config(name : String, body : String, jenkins_crumb : String?)
      post_view_config_with_http_info(name, body, jenkins_crumb)
      nil
    end

    # Update view configuration
    # @param name [String] Name of the view
    # @param body [String] View configuration in config.xml format
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def post_view_config_with_http_info(name : String, body : String, jenkins_crumb : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: RemoteAccessApi.post_view_config ..."}
      end
      # verify the required parameter "name" is set
      if @api_client.config.client_side_validation && name.nil?
        raise ArgumentError.new("Missing the required parameter 'name' when calling RemoteAccessApi.post_view_config")
      end
      # verify the required parameter "body" is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError.new("Missing the required parameter 'body' when calling RemoteAccessApi.post_view_config")
      end
      # resource path
      local_var_path = "/view/{name}/config.xml".sub("{" + "name" + "}", URI.encode_path(name.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["*/*"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])
      header_params["Jenkins-Crumb"] = jenkins_crumb

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = body.to_json

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"RemoteAccessApi.post_view_config",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: RemoteAccessApi#post_view_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end
  end
end
