# #Swaggy Jenkins
#
##Jenkins API clients generated from Swagger / Open API specification
#
#The version of the OpenAPI document: 2.0.1-pre.0
#Contact: blah+oapicf@cliffano.com
#Generated by: https://openapi-generator.tech
#Generator version: 7.4.0
#

require "uri"

module OpenAPIClient
  class BlueOceanApi
    property api_client : ApiClient

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete queue item from an organization pipeline queue
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param queue [String] Name of the queue item
    # @return [nil]
    def delete_pipeline_queue_item(organization : String, pipeline : String, queue : String)
      delete_pipeline_queue_item_with_http_info(organization, pipeline, queue)
      nil
    end

    # Delete queue item from an organization pipeline queue
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param queue [String] Name of the queue item
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_pipeline_queue_item_with_http_info(organization : String, pipeline : String, queue : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.delete_pipeline_queue_item ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.delete_pipeline_queue_item")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.delete_pipeline_queue_item")
      end
      # verify the required parameter "queue" is set
      if @api_client.config.client_side_validation && queue.nil?
        raise ArgumentError.new("Missing the required parameter 'queue' when calling BlueOceanApi.delete_pipeline_queue_item")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "queue" + "}", URI.encode_path(queue.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = nil

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:DELETE,
                                                        local_var_path,
                                                        :"BlueOceanApi.delete_pipeline_queue_item",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#delete_pipeline_queue_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return nil, status_code, headers
    end

    # Retrieve authenticated user details for an organization
    # @param organization [String] Name of the organization
    # @return [User]
    def get_authenticated_user(organization : String)
      data, _status_code, _headers = get_authenticated_user_with_http_info(organization)
      data
    end

    # Retrieve authenticated user details for an organization
    # @param organization [String] Name of the organization
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_authenticated_user_with_http_info(organization : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_authenticated_user ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_authenticated_user")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/user/".sub("{" + "organization" + "}", URI.encode_path(organization.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_authenticated_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_authenticated_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Get a list of class names supported by a given class
    # @param _class [String] Name of the class
    # @return [String]
    def get_classes(_class : String)
      data, _status_code, _headers = get_classes_with_http_info(_class)
      data
    end

    # Get a list of class names supported by a given class
    # @param _class [String] Name of the class
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_classes_with_http_info(_class : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_classes ..."}
      end
      # verify the required parameter "_class" is set
      if @api_client.config.client_side_validation && _class.nil?
        raise ArgumentError.new("Missing the required parameter '_class' when calling BlueOceanApi.get_classes")
      end
      # resource path
      local_var_path = "/blue/rest/classes/{class}".sub("{" + "class" + "}", URI.encode_path(_class.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_classes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Retrieve JSON Web Key
    # @param key [Int32] Key ID received as part of JWT header field kid
    # @return [String]
    def get_json_web_key(key : Int32)
      data, _status_code, _headers = get_json_web_key_with_http_info(key)
      data
    end

    # Retrieve JSON Web Key
    # @param key [Int32] Key ID received as part of JWT header field kid
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_json_web_key_with_http_info(key : Int32)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_json_web_key ..."}
      end
      # verify the required parameter "key" is set
      if @api_client.config.client_side_validation && key.nil?
        raise ArgumentError.new("Missing the required parameter 'key' when calling BlueOceanApi.get_json_web_key")
      end
      # resource path
      local_var_path = "/jwt-auth/jwks/{key}".sub("{" + "key" + "}", URI.encode_path(key.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_json_web_key",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_json_web_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Retrieve JSON Web Token
    # @return [String]
    def get_json_web_token(expiry_time_in_mins : Int32?, max_expiry_time_in_mins : Int32?)
      data, _status_code, _headers = get_json_web_token_with_http_info(expiry_time_in_mins, max_expiry_time_in_mins)
      data
    end

    # Retrieve JSON Web Token
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_json_web_token_with_http_info(expiry_time_in_mins : Int32?, max_expiry_time_in_mins : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_json_web_token ..."}
      end
      # resource path
      local_var_path = "/jwt-auth/token"

      # query parameters
      query_params = Hash(String, String).new
      query_params["expiryTimeInMins"] = expiry_time_in_mins.to_s unless expiry_time_in_mins.nil?
      query_params["maxExpiryTimeInMins"] = max_expiry_time_in_mins.to_s unless max_expiry_time_in_mins.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = [] of String

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_json_web_token",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_json_web_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Retrieve organization details
    # @param organization [String] Name of the organization
    # @return [Organisation]
    def get_organisation(organization : String)
      data, _status_code, _headers = get_organisation_with_http_info(organization)
      data
    end

    # Retrieve organization details
    # @param organization [String] Name of the organization
    # @return [Array<(Organisation, Integer, Hash)>] Organisation data, response status code and response headers
    def get_organisation_with_http_info(organization : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_organisation ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_organisation")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Organisation"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_organisation",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_organisation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Organisation.from_json(data), status_code, headers
    end

    # Retrieve all organizations details
    # @return [Array(Organisation)]
    def get_organisations()
      data, _status_code, _headers = get_organisations_with_http_info()
      data
    end

    # Retrieve all organizations details
    # @return [Array<(Array(Organisation), Integer, Hash)>] Array(Organisation) data, response status code and response headers
    def get_organisations_with_http_info()
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_organisations ..."}
      end
      # resource path
      local_var_path = "/blue/rest/organizations/"

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Organisation)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_organisations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_organisations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Organisation).from_json(data), status_code, headers
    end

    # Retrieve pipeline details for an organization
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Pipeline]
    def get_pipeline(organization : String, pipeline : String)
      data, _status_code, _headers = get_pipeline_with_http_info(organization, pipeline)
      data
    end

    # Retrieve pipeline details for an organization
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array<(Pipeline, Integer, Hash)>] Pipeline data, response status code and response headers
    def get_pipeline_with_http_info(organization : String, pipeline : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Pipeline"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Pipeline.from_json(data), status_code, headers
    end

    # Retrieve all activities details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array(PipelineActivity)]
    def get_pipeline_activities(organization : String, pipeline : String)
      data, _status_code, _headers = get_pipeline_activities_with_http_info(organization, pipeline)
      data
    end

    # Retrieve all activities details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array<(Array(PipelineActivity), Integer, Hash)>] Array(PipelineActivity) data, response status code and response headers
    def get_pipeline_activities_with_http_info(organization : String, pipeline : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_activities ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_activities")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_activities")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(PipelineActivity)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_activities",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_activities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(PipelineActivity).from_json(data), status_code, headers
    end

    # Retrieve branch details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param branch [String] Name of the branch
    # @return [BranchImpl]
    def get_pipeline_branch(organization : String, pipeline : String, branch : String)
      data, _status_code, _headers = get_pipeline_branch_with_http_info(organization, pipeline, branch)
      data
    end

    # Retrieve branch details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param branch [String] Name of the branch
    # @return [Array<(BranchImpl, Integer, Hash)>] BranchImpl data, response status code and response headers
    def get_pipeline_branch_with_http_info(organization : String, pipeline : String, branch : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_branch ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_branch")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_branch")
      end
      # verify the required parameter "branch" is set
      if @api_client.config.client_side_validation && branch.nil?
        raise ArgumentError.new("Missing the required parameter 'branch' when calling BlueOceanApi.get_pipeline_branch")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "branch" + "}", URI.encode_path(branch.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "BranchImpl"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_branch",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_branch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return BranchImpl.from_json(data), status_code, headers
    end

    # Retrieve branch run details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param branch [String] Name of the branch
    # @param run [String] Name of the run
    # @return [PipelineRun]
    def get_pipeline_branch_run(organization : String, pipeline : String, branch : String, run : String)
      data, _status_code, _headers = get_pipeline_branch_run_with_http_info(organization, pipeline, branch, run)
      data
    end

    # Retrieve branch run details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param branch [String] Name of the branch
    # @param run [String] Name of the run
    # @return [Array<(PipelineRun, Integer, Hash)>] PipelineRun data, response status code and response headers
    def get_pipeline_branch_run_with_http_info(organization : String, pipeline : String, branch : String, run : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_branch_run ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_branch_run")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_branch_run")
      end
      # verify the required parameter "branch" is set
      if @api_client.config.client_side_validation && branch.nil?
        raise ArgumentError.new("Missing the required parameter 'branch' when calling BlueOceanApi.get_pipeline_branch_run")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_branch_run")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "branch" + "}", URI.encode_path(branch.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PipelineRun"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_branch_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_branch_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PipelineRun.from_json(data), status_code, headers
    end

    # Retrieve all branches details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [MultibranchPipeline]
    def get_pipeline_branches(organization : String, pipeline : String)
      data, _status_code, _headers = get_pipeline_branches_with_http_info(organization, pipeline)
      data
    end

    # Retrieve all branches details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array<(MultibranchPipeline, Integer, Hash)>] MultibranchPipeline data, response status code and response headers
    def get_pipeline_branches_with_http_info(organization : String, pipeline : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_branches ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_branches")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_branches")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "MultibranchPipeline"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_branches",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_branches\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return MultibranchPipeline.from_json(data), status_code, headers
    end

    # Retrieve pipeline folder for an organization
    # @param organization [String] Name of the organization
    # @param folder [String] Name of the folder
    # @return [PipelineFolderImpl]
    def get_pipeline_folder(organization : String, folder : String)
      data, _status_code, _headers = get_pipeline_folder_with_http_info(organization, folder)
      data
    end

    # Retrieve pipeline folder for an organization
    # @param organization [String] Name of the organization
    # @param folder [String] Name of the folder
    # @return [Array<(PipelineFolderImpl, Integer, Hash)>] PipelineFolderImpl data, response status code and response headers
    def get_pipeline_folder_with_http_info(organization : String, folder : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_folder ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_folder")
      end
      # verify the required parameter "folder" is set
      if @api_client.config.client_side_validation && folder.nil?
        raise ArgumentError.new("Missing the required parameter 'folder' when calling BlueOceanApi.get_pipeline_folder")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{folder}/".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "folder" + "}", URI.encode_path(folder.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PipelineFolderImpl"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_folder",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_folder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PipelineFolderImpl.from_json(data), status_code, headers
    end

    # Retrieve pipeline details for an organization folder
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param folder [String] Name of the folder
    # @return [PipelineImpl]
    def get_pipeline_folder_pipeline(organization : String, pipeline : String, folder : String)
      data, _status_code, _headers = get_pipeline_folder_pipeline_with_http_info(organization, pipeline, folder)
      data
    end

    # Retrieve pipeline details for an organization folder
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param folder [String] Name of the folder
    # @return [Array<(PipelineImpl, Integer, Hash)>] PipelineImpl data, response status code and response headers
    def get_pipeline_folder_pipeline_with_http_info(organization : String, pipeline : String, folder : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_folder_pipeline ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_folder_pipeline")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_folder_pipeline")
      end
      # verify the required parameter "folder" is set
      if @api_client.config.client_side_validation && folder.nil?
        raise ArgumentError.new("Missing the required parameter 'folder' when calling BlueOceanApi.get_pipeline_folder_pipeline")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "folder" + "}", URI.encode_path(folder.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PipelineImpl"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_folder_pipeline",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_folder_pipeline\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PipelineImpl.from_json(data), status_code, headers
    end

    # Retrieve queue details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array(QueueItemImpl)]
    def get_pipeline_queue(organization : String, pipeline : String)
      data, _status_code, _headers = get_pipeline_queue_with_http_info(organization, pipeline)
      data
    end

    # Retrieve queue details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array<(Array(QueueItemImpl), Integer, Hash)>] Array(QueueItemImpl) data, response status code and response headers
    def get_pipeline_queue_with_http_info(organization : String, pipeline : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_queue ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_queue")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_queue")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(QueueItemImpl)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_queue",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_queue\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(QueueItemImpl).from_json(data), status_code, headers
    end

    # Retrieve run details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [PipelineRun]
    def get_pipeline_run(organization : String, pipeline : String, run : String)
      data, _status_code, _headers = get_pipeline_run_with_http_info(organization, pipeline, run)
      data
    end

    # Retrieve run details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [Array<(PipelineRun, Integer, Hash)>] PipelineRun data, response status code and response headers
    def get_pipeline_run_with_http_info(organization : String, pipeline : String, run : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_run ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PipelineRun"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PipelineRun.from_json(data), status_code, headers
    end

    # Get log for a pipeline run
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [String]
    def get_pipeline_run_log(organization : String, pipeline : String, run : String, start : Int32?, download : Bool?)
      data, _status_code, _headers = get_pipeline_run_log_with_http_info(organization, pipeline, run, start, download)
      data
    end

    # Get log for a pipeline run
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_pipeline_run_log_with_http_info(organization : String, pipeline : String, run : String, start : Int32?, download : Bool?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_run_log ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_log")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_log")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_log")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["start"] = start.to_s unless start.nil?
      query_params["download"] = download.to_s unless download.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_run_log",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_run_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Retrieve run node details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @return [PipelineRunNode]
    def get_pipeline_run_node(organization : String, pipeline : String, run : String, node : String)
      data, _status_code, _headers = get_pipeline_run_node_with_http_info(organization, pipeline, run, node)
      data
    end

    # Retrieve run node details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @return [Array<(PipelineRunNode, Integer, Hash)>] PipelineRunNode data, response status code and response headers
    def get_pipeline_run_node_with_http_info(organization : String, pipeline : String, run : String, node : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_run_node ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_node")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_node")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_node")
      end
      # verify the required parameter "node" is set
      if @api_client.config.client_side_validation && node.nil?
        raise ArgumentError.new("Missing the required parameter 'node' when calling BlueOceanApi.get_pipeline_run_node")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s)).sub("{" + "node" + "}", URI.encode_path(node.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PipelineRunNode"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_run_node",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_run_node\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PipelineRunNode.from_json(data), status_code, headers
    end

    # Retrieve run node details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param step [String] Name of the step
    # @return [PipelineStepImpl]
    def get_pipeline_run_node_step(organization : String, pipeline : String, run : String, node : String, step : String)
      data, _status_code, _headers = get_pipeline_run_node_step_with_http_info(organization, pipeline, run, node, step)
      data
    end

    # Retrieve run node details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param step [String] Name of the step
    # @return [Array<(PipelineStepImpl, Integer, Hash)>] PipelineStepImpl data, response status code and response headers
    def get_pipeline_run_node_step_with_http_info(organization : String, pipeline : String, run : String, node : String, step : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_run_node_step ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_node_step")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_node_step")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_node_step")
      end
      # verify the required parameter "node" is set
      if @api_client.config.client_side_validation && node.nil?
        raise ArgumentError.new("Missing the required parameter 'node' when calling BlueOceanApi.get_pipeline_run_node_step")
      end
      # verify the required parameter "step" is set
      if @api_client.config.client_side_validation && step.nil?
        raise ArgumentError.new("Missing the required parameter 'step' when calling BlueOceanApi.get_pipeline_run_node_step")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s)).sub("{" + "node" + "}", URI.encode_path(node.to_s)).sub("{" + "step" + "}", URI.encode_path(step.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PipelineStepImpl"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_run_node_step",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_run_node_step\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PipelineStepImpl.from_json(data), status_code, headers
    end

    # Get log for a pipeline run node step
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param step [String] Name of the step
    # @return [String]
    def get_pipeline_run_node_step_log(organization : String, pipeline : String, run : String, node : String, step : String)
      data, _status_code, _headers = get_pipeline_run_node_step_log_with_http_info(organization, pipeline, run, node, step)
      data
    end

    # Get log for a pipeline run node step
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @param step [String] Name of the step
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def get_pipeline_run_node_step_log_with_http_info(organization : String, pipeline : String, run : String, node : String, step : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_run_node_step_log ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_node_step_log")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_node_step_log")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_node_step_log")
      end
      # verify the required parameter "node" is set
      if @api_client.config.client_side_validation && node.nil?
        raise ArgumentError.new("Missing the required parameter 'node' when calling BlueOceanApi.get_pipeline_run_node_step_log")
      end
      # verify the required parameter "step" is set
      if @api_client.config.client_side_validation && step.nil?
        raise ArgumentError.new("Missing the required parameter 'step' when calling BlueOceanApi.get_pipeline_run_node_step_log")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s)).sub("{" + "node" + "}", URI.encode_path(node.to_s)).sub("{" + "step" + "}", URI.encode_path(step.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_run_node_step_log",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_run_node_step_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Retrieve run node steps details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @return [Array(PipelineStepImpl)]
    def get_pipeline_run_node_steps(organization : String, pipeline : String, run : String, node : String)
      data, _status_code, _headers = get_pipeline_run_node_steps_with_http_info(organization, pipeline, run, node)
      data
    end

    # Retrieve run node steps details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @param node [String] Name of the node
    # @return [Array<(Array(PipelineStepImpl), Integer, Hash)>] Array(PipelineStepImpl) data, response status code and response headers
    def get_pipeline_run_node_steps_with_http_info(organization : String, pipeline : String, run : String, node : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_run_node_steps ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_node_steps")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_node_steps")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_node_steps")
      end
      # verify the required parameter "node" is set
      if @api_client.config.client_side_validation && node.nil?
        raise ArgumentError.new("Missing the required parameter 'node' when calling BlueOceanApi.get_pipeline_run_node_steps")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s)).sub("{" + "node" + "}", URI.encode_path(node.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(PipelineStepImpl)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_run_node_steps",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_run_node_steps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(PipelineStepImpl).from_json(data), status_code, headers
    end

    # Retrieve run nodes details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [Array(PipelineRunNode)]
    def get_pipeline_run_nodes(organization : String, pipeline : String, run : String)
      data, _status_code, _headers = get_pipeline_run_nodes_with_http_info(organization, pipeline, run)
      data
    end

    # Retrieve run nodes details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [Array<(Array(PipelineRunNode), Integer, Hash)>] Array(PipelineRunNode) data, response status code and response headers
    def get_pipeline_run_nodes_with_http_info(organization : String, pipeline : String, run : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_run_nodes ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_run_nodes")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_run_nodes")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.get_pipeline_run_nodes")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(PipelineRunNode)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_run_nodes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_run_nodes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(PipelineRunNode).from_json(data), status_code, headers
    end

    # Retrieve all runs details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array(PipelineRun)]
    def get_pipeline_runs(organization : String, pipeline : String)
      data, _status_code, _headers = get_pipeline_runs_with_http_info(organization, pipeline)
      data
    end

    # Retrieve all runs details for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array<(Array(PipelineRun), Integer, Hash)>] Array(PipelineRun) data, response status code and response headers
    def get_pipeline_runs_with_http_info(organization : String, pipeline : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipeline_runs ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipeline_runs")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.get_pipeline_runs")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(PipelineRun)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipeline_runs",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipeline_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(PipelineRun).from_json(data), status_code, headers
    end

    # Retrieve all pipelines details for an organization
    # @param organization [String] Name of the organization
    # @return [Array(Pipeline)]
    def get_pipelines(organization : String)
      data, _status_code, _headers = get_pipelines_with_http_info(organization)
      data
    end

    # Retrieve all pipelines details for an organization
    # @param organization [String] Name of the organization
    # @return [Array<(Array(Pipeline), Integer, Hash)>] Array(Pipeline) data, response status code and response headers
    def get_pipelines_with_http_info(organization : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_pipelines ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_pipelines")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/".sub("{" + "organization" + "}", URI.encode_path(organization.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(Pipeline)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_pipelines",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_pipelines\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(Pipeline).from_json(data), status_code, headers
    end

    # Retrieve SCM details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @return [GithubScm]
    def get_scm(organization : String, scm : String)
      data, _status_code, _headers = get_scm_with_http_info(organization, scm)
      data
    end

    # Retrieve SCM details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @return [Array<(GithubScm, Integer, Hash)>] GithubScm data, response status code and response headers
    def get_scm_with_http_info(organization : String, scm : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_scm ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_scm")
      end
      # verify the required parameter "scm" is set
      if @api_client.config.client_side_validation && scm.nil?
        raise ArgumentError.new("Missing the required parameter 'scm' when calling BlueOceanApi.get_scm")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/scm/{scm}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "scm" + "}", URI.encode_path(scm.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "GithubScm"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_scm",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_scm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return GithubScm.from_json(data), status_code, headers
    end

    # Retrieve SCM organization repositories details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param scm_organisation [String] Name of the SCM organization
    # @return [Array(GithubOrganization)]
    def get_scm_organisation_repositories(organization : String, scm : String, scm_organisation : String, credential_id : String?, page_size : Int32?, page_number : Int32?)
      data, _status_code, _headers = get_scm_organisation_repositories_with_http_info(organization, scm, scm_organisation, credential_id, page_size, page_number)
      data
    end

    # Retrieve SCM organization repositories details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param scm_organisation [String] Name of the SCM organization
    # @return [Array<(Array(GithubOrganization), Integer, Hash)>] Array(GithubOrganization) data, response status code and response headers
    def get_scm_organisation_repositories_with_http_info(organization : String, scm : String, scm_organisation : String, credential_id : String?, page_size : Int32?, page_number : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_scm_organisation_repositories ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_scm_organisation_repositories")
      end
      # verify the required parameter "scm" is set
      if @api_client.config.client_side_validation && scm.nil?
        raise ArgumentError.new("Missing the required parameter 'scm' when calling BlueOceanApi.get_scm_organisation_repositories")
      end
      # verify the required parameter "scm_organisation" is set
      if @api_client.config.client_side_validation && scm_organisation.nil?
        raise ArgumentError.new("Missing the required parameter 'scm_organisation' when calling BlueOceanApi.get_scm_organisation_repositories")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "scm" + "}", URI.encode_path(scm.to_s)).sub("{" + "scmOrganisation" + "}", URI.encode_path(scm_organisation.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["credentialId"] = credential_id.to_s unless credential_id.nil?
      query_params["pageSize"] = page_size.to_s unless page_size.nil?
      query_params["pageNumber"] = page_number.to_s unless page_number.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(GithubOrganization)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_scm_organisation_repositories",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_scm_organisation_repositories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(GithubOrganization).from_json(data), status_code, headers
    end

    # Retrieve SCM organization repository details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param scm_organisation [String] Name of the SCM organization
    # @param repository [String] Name of the SCM repository
    # @return [Array(GithubOrganization)]
    def get_scm_organisation_repository(organization : String, scm : String, scm_organisation : String, repository : String, credential_id : String?)
      data, _status_code, _headers = get_scm_organisation_repository_with_http_info(organization, scm, scm_organisation, repository, credential_id)
      data
    end

    # Retrieve SCM organization repository details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @param scm_organisation [String] Name of the SCM organization
    # @param repository [String] Name of the SCM repository
    # @return [Array<(Array(GithubOrganization), Integer, Hash)>] Array(GithubOrganization) data, response status code and response headers
    def get_scm_organisation_repository_with_http_info(organization : String, scm : String, scm_organisation : String, repository : String, credential_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_scm_organisation_repository ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_scm_organisation_repository")
      end
      # verify the required parameter "scm" is set
      if @api_client.config.client_side_validation && scm.nil?
        raise ArgumentError.new("Missing the required parameter 'scm' when calling BlueOceanApi.get_scm_organisation_repository")
      end
      # verify the required parameter "scm_organisation" is set
      if @api_client.config.client_side_validation && scm_organisation.nil?
        raise ArgumentError.new("Missing the required parameter 'scm_organisation' when calling BlueOceanApi.get_scm_organisation_repository")
      end
      # verify the required parameter "repository" is set
      if @api_client.config.client_side_validation && repository.nil?
        raise ArgumentError.new("Missing the required parameter 'repository' when calling BlueOceanApi.get_scm_organisation_repository")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "scm" + "}", URI.encode_path(scm.to_s)).sub("{" + "scmOrganisation" + "}", URI.encode_path(scm_organisation.to_s)).sub("{" + "repository" + "}", URI.encode_path(repository.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["credentialId"] = credential_id.to_s unless credential_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(GithubOrganization)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_scm_organisation_repository",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_scm_organisation_repository\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(GithubOrganization).from_json(data), status_code, headers
    end

    # Retrieve SCM organizations details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @return [Array(GithubOrganization)]
    def get_scm_organisations(organization : String, scm : String, credential_id : String?)
      data, _status_code, _headers = get_scm_organisations_with_http_info(organization, scm, credential_id)
      data
    end

    # Retrieve SCM organizations details for an organization
    # @param organization [String] Name of the organization
    # @param scm [String] Name of SCM
    # @return [Array<(Array(GithubOrganization), Integer, Hash)>] Array(GithubOrganization) data, response status code and response headers
    def get_scm_organisations_with_http_info(organization : String, scm : String, credential_id : String?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_scm_organisations ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_scm_organisations")
      end
      # verify the required parameter "scm" is set
      if @api_client.config.client_side_validation && scm.nil?
        raise ArgumentError.new("Missing the required parameter 'scm' when calling BlueOceanApi.get_scm_organisations")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "scm" + "}", URI.encode_path(scm.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["credentialId"] = credential_id.to_s unless credential_id.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(GithubOrganization)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_scm_organisations",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_scm_organisations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(GithubOrganization).from_json(data), status_code, headers
    end

    # Retrieve user details for an organization
    # @param organization [String] Name of the organization
    # @param user [String] Name of the user
    # @return [User]
    def get_user(organization : String, user : String)
      data, _status_code, _headers = get_user_with_http_info(organization, user)
      data
    end

    # Retrieve user details for an organization
    # @param organization [String] Name of the organization
    # @param user [String] Name of the user
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(organization : String, user : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_user ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_user")
      end
      # verify the required parameter "user" is set
      if @api_client.config.client_side_validation && user.nil?
        raise ArgumentError.new("Missing the required parameter 'user' when calling BlueOceanApi.get_user")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/users/{user}".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "user" + "}", URI.encode_path(user.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_user",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Retrieve user favorites details for an organization
    # @param user [String] Name of the user
    # @return [Array(FavoriteImpl)]
    def get_user_favorites(user : String)
      data, _status_code, _headers = get_user_favorites_with_http_info(user)
      data
    end

    # Retrieve user favorites details for an organization
    # @param user [String] Name of the user
    # @return [Array<(Array(FavoriteImpl), Integer, Hash)>] Array(FavoriteImpl) data, response status code and response headers
    def get_user_favorites_with_http_info(user : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_user_favorites ..."}
      end
      # verify the required parameter "user" is set
      if @api_client.config.client_side_validation && user.nil?
        raise ArgumentError.new("Missing the required parameter 'user' when calling BlueOceanApi.get_user_favorites")
      end
      # resource path
      local_var_path = "/blue/rest/users/{user}/favorites".sub("{" + "user" + "}", URI.encode_path(user.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "Array(FavoriteImpl)"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_user_favorites",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_user_favorites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return Array(FavoriteImpl).from_json(data), status_code, headers
    end

    # Retrieve users details for an organization
    # @param organization [String] Name of the organization
    # @return [User]
    def get_users(organization : String)
      data, _status_code, _headers = get_users_with_http_info(organization)
      data
    end

    # Retrieve users details for an organization
    # @param organization [String] Name of the organization
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_users_with_http_info(organization : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.get_users ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.get_users")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/users/".sub("{" + "organization" + "}", URI.encode_path(organization.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "User"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.get_users",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return User.from_json(data), status_code, headers
    end

    # Replay an organization pipeline run
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [QueueItemImpl]
    def post_pipeline_run(organization : String, pipeline : String, run : String)
      data, _status_code, _headers = post_pipeline_run_with_http_info(organization, pipeline, run)
      data
    end

    # Replay an organization pipeline run
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [Array<(QueueItemImpl, Integer, Hash)>] QueueItemImpl data, response status code and response headers
    def post_pipeline_run_with_http_info(organization : String, pipeline : String, run : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.post_pipeline_run ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.post_pipeline_run")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.post_pipeline_run")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.post_pipeline_run")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "QueueItemImpl"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BlueOceanApi.post_pipeline_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#post_pipeline_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return QueueItemImpl.from_json(data), status_code, headers
    end

    # Start a build for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [QueueItemImpl]
    def post_pipeline_runs(organization : String, pipeline : String)
      data, _status_code, _headers = post_pipeline_runs_with_http_info(organization, pipeline)
      data
    end

    # Start a build for an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @return [Array<(QueueItemImpl, Integer, Hash)>] QueueItemImpl data, response status code and response headers
    def post_pipeline_runs_with_http_info(organization : String, pipeline : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.post_pipeline_runs ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.post_pipeline_runs")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.post_pipeline_runs")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "QueueItemImpl"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:POST,
                                                        local_var_path,
                                                        :"BlueOceanApi.post_pipeline_runs",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#post_pipeline_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return QueueItemImpl.from_json(data), status_code, headers
    end

    # Favorite/unfavorite a pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param body [Bool] Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
    # @return [FavoriteImpl]
    def put_pipeline_favorite(organization : String, pipeline : String, body : Bool)
      data, _status_code, _headers = put_pipeline_favorite_with_http_info(organization, pipeline, body)
      data
    end

    # Favorite/unfavorite a pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param body [Bool] Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
    # @return [Array<(FavoriteImpl, Integer, Hash)>] FavoriteImpl data, response status code and response headers
    def put_pipeline_favorite_with_http_info(organization : String, pipeline : String, body : Bool)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.put_pipeline_favorite ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.put_pipeline_favorite")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.put_pipeline_favorite")
      end
      # verify the required parameter "body" is set
      if @api_client.config.client_side_validation && body.nil?
        raise ArgumentError.new("Missing the required parameter 'body' when calling BlueOceanApi.put_pipeline_favorite")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s))

      # query parameters
      query_params = Hash(String, String).new

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])
      # HTTP header "Content-Type"
      header_params["Content-Type"] = @api_client.select_header_content_type(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = body.to_json

      # return_type
      return_type = "FavoriteImpl"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"BlueOceanApi.put_pipeline_favorite",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#put_pipeline_favorite\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return FavoriteImpl.from_json(data), status_code, headers
    end

    # Stop a build of an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [PipelineRun]
    def put_pipeline_run(organization : String, pipeline : String, run : String, blocking : String?, time_out_in_secs : Int32?)
      data, _status_code, _headers = put_pipeline_run_with_http_info(organization, pipeline, run, blocking, time_out_in_secs)
      data
    end

    # Stop a build of an organization pipeline
    # @param organization [String] Name of the organization
    # @param pipeline [String] Name of the pipeline
    # @param run [String] Name of the run
    # @return [Array<(PipelineRun, Integer, Hash)>] PipelineRun data, response status code and response headers
    def put_pipeline_run_with_http_info(organization : String, pipeline : String, run : String, blocking : String?, time_out_in_secs : Int32?)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.put_pipeline_run ..."}
      end
      # verify the required parameter "organization" is set
      if @api_client.config.client_side_validation && organization.nil?
        raise ArgumentError.new("Missing the required parameter 'organization' when calling BlueOceanApi.put_pipeline_run")
      end
      # verify the required parameter "pipeline" is set
      if @api_client.config.client_side_validation && pipeline.nil?
        raise ArgumentError.new("Missing the required parameter 'pipeline' when calling BlueOceanApi.put_pipeline_run")
      end
      # verify the required parameter "run" is set
      if @api_client.config.client_side_validation && run.nil?
        raise ArgumentError.new("Missing the required parameter 'run' when calling BlueOceanApi.put_pipeline_run")
      end
      # resource path
      local_var_path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop".sub("{" + "organization" + "}", URI.encode_path(organization.to_s)).sub("{" + "pipeline" + "}", URI.encode_path(pipeline.to_s)).sub("{" + "run" + "}", URI.encode_path(run.to_s))

      # query parameters
      query_params = Hash(String, String).new
      query_params["blocking"] = blocking.to_s unless blocking.nil?
      query_params["timeOutInSecs"] = time_out_in_secs.to_s unless time_out_in_secs.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "PipelineRun"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:PUT,
                                                        local_var_path,
                                                        :"BlueOceanApi.put_pipeline_run",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#put_pipeline_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return PipelineRun.from_json(data), status_code, headers
    end

    # Search for any resource details
    # @param q [String] Query string
    # @return [String]
    def search(q : String)
      data, _status_code, _headers = search_with_http_info(q)
      data
    end

    # Search for any resource details
    # @param q [String] Query string
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def search_with_http_info(q : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.search ..."}
      end
      # verify the required parameter "q" is set
      if @api_client.config.client_side_validation && q.nil?
        raise ArgumentError.new("Missing the required parameter 'q' when calling BlueOceanApi.search")
      end
      # resource path
      local_var_path = "/blue/rest/search/"

      # query parameters
      query_params = Hash(String, String).new
      query_params["q"] = q.to_s unless q.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.search",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end

    # Get classes details
    # @param q [String] Query string containing an array of class names
    # @return [String]
    def search_classes(q : String)
      data, _status_code, _headers = search_classes_with_http_info(q)
      data
    end

    # Get classes details
    # @param q [String] Query string containing an array of class names
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def search_classes_with_http_info(q : String)
      if @api_client.config.debugging
        Log.debug {"Calling API: BlueOceanApi.search_classes ..."}
      end
      # verify the required parameter "q" is set
      if @api_client.config.client_side_validation && q.nil?
        raise ArgumentError.new("Missing the required parameter 'q' when calling BlueOceanApi.search_classes")
      end
      # resource path
      local_var_path = "/blue/rest/classes/"

      # query parameters
      query_params = Hash(String, String).new
      query_params["q"] = q.to_s unless q.nil?

      # header parameters
      header_params = Hash(String, String).new
      # HTTP header "Accept" (if needed)
      header_params["Accept"] = @api_client.select_header_accept(["application/json"])

      # form parameters
      form_params = Hash(Symbol, (String | ::File)).new

      # http body (model)
      post_body = nil

      # return_type
      return_type = "String"

      # auth_names
      auth_names = ["jenkins_auth"]

      data, status_code, headers = @api_client.call_api(:GET,
                                                        local_var_path,
                                                        :"BlueOceanApi.search_classes",
                                                        return_type,
                                                        post_body,
                                                        auth_names,
                                                        header_params,
                                                        query_params,
                                                        form_params)
      if @api_client.config.debugging
        Log.debug {"API called: BlueOceanApi#search_classes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"}
      end
      return String.from_json(data), status_code, headers
    end
  end
end
