/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.BlueOceanApi
import org.openapitools.client.models.BranchImpl
import org.openapitools.client.models.FavoriteImpl
import org.openapitools.client.models.GithubOrganization
import org.openapitools.client.models.GithubScm
import org.openapitools.client.models.MultibranchPipeline
import org.openapitools.client.models.Organisation
import org.openapitools.client.models.Pipeline
import org.openapitools.client.models.PipelineActivity
import org.openapitools.client.models.PipelineFolderImpl
import org.openapitools.client.models.PipelineImpl
import org.openapitools.client.models.PipelineRun
import org.openapitools.client.models.PipelineRunNode
import org.openapitools.client.models.PipelineStepImpl
import org.openapitools.client.models.QueueItemImpl
import org.openapitools.client.models.User

class BlueOceanApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of BlueOceanApi
        //val apiInstance = BlueOceanApi()

        // to test deletePipelineQueueItem
        should("test deletePipelineQueueItem") {
            // uncomment below to test deletePipelineQueueItem
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val queue : kotlin.String = queue_example // kotlin.String | Name of the queue item
            //apiInstance.deletePipelineQueueItem(organization, pipeline, queue)
        }

        // to test getAuthenticatedUser
        should("test getAuthenticatedUser") {
            // uncomment below to test getAuthenticatedUser
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val result : User = apiInstance.getAuthenticatedUser(organization)
            //result shouldBe ("TODO")
        }

        // to test getClasses
        should("test getClasses") {
            // uncomment below to test getClasses
            //val propertyClass : kotlin.String = propertyClass_example // kotlin.String | Name of the class
            //val result : kotlin.String = apiInstance.getClasses(propertyClass)
            //result shouldBe ("TODO")
        }

        // to test getJsonWebKey
        should("test getJsonWebKey") {
            // uncomment below to test getJsonWebKey
            //val key : kotlin.Int = 56 // kotlin.Int | Key ID received as part of JWT header field kid
            //val result : kotlin.String = apiInstance.getJsonWebKey(key)
            //result shouldBe ("TODO")
        }

        // to test getJsonWebToken
        should("test getJsonWebToken") {
            // uncomment below to test getJsonWebToken
            //val expiryTimeInMins : kotlin.Int = 56 // kotlin.Int | Token expiry time in minutes, default: 30 minutes
            //val maxExpiryTimeInMins : kotlin.Int = 56 // kotlin.Int | Maximum token expiry time in minutes, default: 480 minutes
            //val result : kotlin.String = apiInstance.getJsonWebToken(expiryTimeInMins, maxExpiryTimeInMins)
            //result shouldBe ("TODO")
        }

        // to test getOrganisation
        should("test getOrganisation") {
            // uncomment below to test getOrganisation
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val result : Organisation = apiInstance.getOrganisation(organization)
            //result shouldBe ("TODO")
        }

        // to test getOrganisations
        should("test getOrganisations") {
            // uncomment below to test getOrganisations
            //val result : kotlin.collections.List<Organisation> = apiInstance.getOrganisations()
            //result shouldBe ("TODO")
        }

        // to test getPipeline
        should("test getPipeline") {
            // uncomment below to test getPipeline
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val result : Pipeline = apiInstance.getPipeline(organization, pipeline)
            //result shouldBe ("TODO")
        }

        // to test getPipelineActivities
        should("test getPipelineActivities") {
            // uncomment below to test getPipelineActivities
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val result : kotlin.collections.List<PipelineActivity> = apiInstance.getPipelineActivities(organization, pipeline)
            //result shouldBe ("TODO")
        }

        // to test getPipelineBranch
        should("test getPipelineBranch") {
            // uncomment below to test getPipelineBranch
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val branch : kotlin.String = branch_example // kotlin.String | Name of the branch
            //val result : BranchImpl = apiInstance.getPipelineBranch(organization, pipeline, branch)
            //result shouldBe ("TODO")
        }

        // to test getPipelineBranchRun
        should("test getPipelineBranchRun") {
            // uncomment below to test getPipelineBranchRun
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val branch : kotlin.String = branch_example // kotlin.String | Name of the branch
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val result : PipelineRun = apiInstance.getPipelineBranchRun(organization, pipeline, branch, run)
            //result shouldBe ("TODO")
        }

        // to test getPipelineBranches
        should("test getPipelineBranches") {
            // uncomment below to test getPipelineBranches
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val result : MultibranchPipeline = apiInstance.getPipelineBranches(organization, pipeline)
            //result shouldBe ("TODO")
        }

        // to test getPipelineFolder
        should("test getPipelineFolder") {
            // uncomment below to test getPipelineFolder
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val folder : kotlin.String = folder_example // kotlin.String | Name of the folder
            //val result : PipelineFolderImpl = apiInstance.getPipelineFolder(organization, folder)
            //result shouldBe ("TODO")
        }

        // to test getPipelineFolderPipeline
        should("test getPipelineFolderPipeline") {
            // uncomment below to test getPipelineFolderPipeline
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val folder : kotlin.String = folder_example // kotlin.String | Name of the folder
            //val result : PipelineImpl = apiInstance.getPipelineFolderPipeline(organization, pipeline, folder)
            //result shouldBe ("TODO")
        }

        // to test getPipelineQueue
        should("test getPipelineQueue") {
            // uncomment below to test getPipelineQueue
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val result : kotlin.collections.List<QueueItemImpl> = apiInstance.getPipelineQueue(organization, pipeline)
            //result shouldBe ("TODO")
        }

        // to test getPipelineRun
        should("test getPipelineRun") {
            // uncomment below to test getPipelineRun
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val result : PipelineRun = apiInstance.getPipelineRun(organization, pipeline, run)
            //result shouldBe ("TODO")
        }

        // to test getPipelineRunLog
        should("test getPipelineRunLog") {
            // uncomment below to test getPipelineRunLog
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val start : kotlin.Int = 56 // kotlin.Int | Start position of the log
            //val download : kotlin.Boolean = true // kotlin.Boolean | Set to true in order to download the file, otherwise it's passed as a response body
            //val result : kotlin.String = apiInstance.getPipelineRunLog(organization, pipeline, run, start, download)
            //result shouldBe ("TODO")
        }

        // to test getPipelineRunNode
        should("test getPipelineRunNode") {
            // uncomment below to test getPipelineRunNode
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val node : kotlin.String = node_example // kotlin.String | Name of the node
            //val result : PipelineRunNode = apiInstance.getPipelineRunNode(organization, pipeline, run, node)
            //result shouldBe ("TODO")
        }

        // to test getPipelineRunNodeStep
        should("test getPipelineRunNodeStep") {
            // uncomment below to test getPipelineRunNodeStep
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val node : kotlin.String = node_example // kotlin.String | Name of the node
            //val step : kotlin.String = step_example // kotlin.String | Name of the step
            //val result : PipelineStepImpl = apiInstance.getPipelineRunNodeStep(organization, pipeline, run, node, step)
            //result shouldBe ("TODO")
        }

        // to test getPipelineRunNodeStepLog
        should("test getPipelineRunNodeStepLog") {
            // uncomment below to test getPipelineRunNodeStepLog
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val node : kotlin.String = node_example // kotlin.String | Name of the node
            //val step : kotlin.String = step_example // kotlin.String | Name of the step
            //val result : kotlin.String = apiInstance.getPipelineRunNodeStepLog(organization, pipeline, run, node, step)
            //result shouldBe ("TODO")
        }

        // to test getPipelineRunNodeSteps
        should("test getPipelineRunNodeSteps") {
            // uncomment below to test getPipelineRunNodeSteps
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val node : kotlin.String = node_example // kotlin.String | Name of the node
            //val result : kotlin.collections.List<PipelineStepImpl> = apiInstance.getPipelineRunNodeSteps(organization, pipeline, run, node)
            //result shouldBe ("TODO")
        }

        // to test getPipelineRunNodes
        should("test getPipelineRunNodes") {
            // uncomment below to test getPipelineRunNodes
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val result : kotlin.collections.List<PipelineRunNode> = apiInstance.getPipelineRunNodes(organization, pipeline, run)
            //result shouldBe ("TODO")
        }

        // to test getPipelineRuns
        should("test getPipelineRuns") {
            // uncomment below to test getPipelineRuns
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val result : kotlin.collections.List<PipelineRun> = apiInstance.getPipelineRuns(organization, pipeline)
            //result shouldBe ("TODO")
        }

        // to test getPipelines
        should("test getPipelines") {
            // uncomment below to test getPipelines
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val result : kotlin.collections.List<Pipeline> = apiInstance.getPipelines(organization)
            //result shouldBe ("TODO")
        }

        // to test getSCM
        should("test getSCM") {
            // uncomment below to test getSCM
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val scm : kotlin.String = scm_example // kotlin.String | Name of SCM
            //val result : GithubScm = apiInstance.getSCM(organization, scm)
            //result shouldBe ("TODO")
        }

        // to test getSCMOrganisationRepositories
        should("test getSCMOrganisationRepositories") {
            // uncomment below to test getSCMOrganisationRepositories
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val scm : kotlin.String = scm_example // kotlin.String | Name of SCM
            //val scmOrganisation : kotlin.String = scmOrganisation_example // kotlin.String | Name of the SCM organization
            //val credentialId : kotlin.String = credentialId_example // kotlin.String | Credential ID
            //val pageSize : kotlin.Int = 56 // kotlin.Int | Number of items in a page
            //val pageNumber : kotlin.Int = 56 // kotlin.Int | Page number
            //val result : kotlin.collections.List<GithubOrganization> = apiInstance.getSCMOrganisationRepositories(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber)
            //result shouldBe ("TODO")
        }

        // to test getSCMOrganisationRepository
        should("test getSCMOrganisationRepository") {
            // uncomment below to test getSCMOrganisationRepository
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val scm : kotlin.String = scm_example // kotlin.String | Name of SCM
            //val scmOrganisation : kotlin.String = scmOrganisation_example // kotlin.String | Name of the SCM organization
            //val repository : kotlin.String = repository_example // kotlin.String | Name of the SCM repository
            //val credentialId : kotlin.String = credentialId_example // kotlin.String | Credential ID
            //val result : kotlin.collections.List<GithubOrganization> = apiInstance.getSCMOrganisationRepository(organization, scm, scmOrganisation, repository, credentialId)
            //result shouldBe ("TODO")
        }

        // to test getSCMOrganisations
        should("test getSCMOrganisations") {
            // uncomment below to test getSCMOrganisations
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val scm : kotlin.String = scm_example // kotlin.String | Name of SCM
            //val credentialId : kotlin.String = credentialId_example // kotlin.String | Credential ID
            //val result : kotlin.collections.List<GithubOrganization> = apiInstance.getSCMOrganisations(organization, scm, credentialId)
            //result shouldBe ("TODO")
        }

        // to test getUser
        should("test getUser") {
            // uncomment below to test getUser
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val user : kotlin.String = user_example // kotlin.String | Name of the user
            //val result : User = apiInstance.getUser(organization, user)
            //result shouldBe ("TODO")
        }

        // to test getUserFavorites
        should("test getUserFavorites") {
            // uncomment below to test getUserFavorites
            //val user : kotlin.String = user_example // kotlin.String | Name of the user
            //val result : kotlin.collections.List<FavoriteImpl> = apiInstance.getUserFavorites(user)
            //result shouldBe ("TODO")
        }

        // to test getUsers
        should("test getUsers") {
            // uncomment below to test getUsers
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val result : User = apiInstance.getUsers(organization)
            //result shouldBe ("TODO")
        }

        // to test postPipelineRun
        should("test postPipelineRun") {
            // uncomment below to test postPipelineRun
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val result : QueueItemImpl = apiInstance.postPipelineRun(organization, pipeline, run)
            //result shouldBe ("TODO")
        }

        // to test postPipelineRuns
        should("test postPipelineRuns") {
            // uncomment below to test postPipelineRuns
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val result : QueueItemImpl = apiInstance.postPipelineRuns(organization, pipeline)
            //result shouldBe ("TODO")
        }

        // to test putPipelineFavorite
        should("test putPipelineFavorite") {
            // uncomment below to test putPipelineFavorite
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val body : kotlin.Boolean = true // kotlin.Boolean | Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite
            //val result : FavoriteImpl = apiInstance.putPipelineFavorite(organization, pipeline, body)
            //result shouldBe ("TODO")
        }

        // to test putPipelineRun
        should("test putPipelineRun") {
            // uncomment below to test putPipelineRun
            //val organization : kotlin.String = organization_example // kotlin.String | Name of the organization
            //val pipeline : kotlin.String = pipeline_example // kotlin.String | Name of the pipeline
            //val run : kotlin.String = run_example // kotlin.String | Name of the run
            //val blocking : kotlin.String = blocking_example // kotlin.String | Set to true to make blocking stop, default: false
            //val timeOutInSecs : kotlin.Int = 56 // kotlin.Int | Timeout in seconds, default: 10 seconds
            //val result : PipelineRun = apiInstance.putPipelineRun(organization, pipeline, run, blocking, timeOutInSecs)
            //result shouldBe ("TODO")
        }

        // to test search
        should("test search") {
            // uncomment below to test search
            //val q : kotlin.String = q_example // kotlin.String | Query string
            //val result : kotlin.String = apiInstance.search(q)
            //result shouldBe ("TODO")
        }

        // to test searchClasses
        should("test searchClasses") {
            // uncomment below to test searchClasses
            //val q : kotlin.String = q_example // kotlin.String | Query string containing an array of class names
            //val result : kotlin.String = apiInstance.searchClasses(q)
            //result shouldBe ("TODO")
        }

    }
}
