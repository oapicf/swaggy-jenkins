--  Swaggy Jenkins
--  Jenkins API clients generated from Swagger / Open API specification
--
--  The version of the OpenAPI document: 2.0.1_pre.0
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.4.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

package body .Models is
   pragma Style_Checks ("-bmrIu");

   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.AllView_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in AllView_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.AllView_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out AllView_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.AllView_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BranchImplpermissions_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Create.Is_Null then
         Into.Write_Entity ("create", Value.Create);
      end if;
      if not Value.Read.Is_Null then
         Into.Write_Entity ("read", Value.Read);
      end if;
      if not Value.Start.Is_Null then
         Into.Write_Entity ("start", Value.Start);
      end if;
      if not Value.Stop.Is_Null then
         Into.Write_Entity ("stop", Value.Stop);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BranchImplpermissions_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BranchImplpermissions_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "create", Value.Create);
      Swagger.Streams.Deserialize (Object, "read", Value.Read);
      Swagger.Streams.Deserialize (Object, "start", Value.Start);
      Swagger.Streams.Deserialize (Object, "stop", Value.Stop);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BranchImplpermissions_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BranchImplpermissions_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CauseUserIdCause_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Short_Description.Is_Null then
         Into.Write_Entity ("shortDescription", Value.Short_Description);
      end if;
      if not Value.User_Id.Is_Null then
         Into.Write_Entity ("userId", Value.User_Id);
      end if;
      if not Value.User_Name.Is_Null then
         Into.Write_Entity ("userName", Value.User_Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CauseUserIdCause_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CauseUserIdCause_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "shortDescription", Value.Short_Description);
      Swagger.Streams.Deserialize (Object, "userId", Value.User_Id);
      Swagger.Streams.Deserialize (Object, "userName", Value.User_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CauseUserIdCause_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CauseUserIdCause_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ClassesByClass_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "classes", Value.Classes);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ClassesByClass_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ClassesByClass_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "classes", Value.Classes);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ClassesByClass_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ClassesByClass_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ClockDifference_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Diff.Is_Null then
         Into.Write_Entity ("diff", Value.Diff);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ClockDifference_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ClockDifference_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "diff", Value.Diff);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ClockDifference_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ClockDifference_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DefaultCrumbIssuer_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Crumb.Is_Null then
         Into.Write_Entity ("crumb", Value.Crumb);
      end if;
      if not Value.Crumb_Request_Field.Is_Null then
         Into.Write_Entity ("crumbRequestField", Value.Crumb_Request_Field);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DefaultCrumbIssuer_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DefaultCrumbIssuer_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "crumb", Value.Crumb);
      Swagger.Streams.Deserialize (Object, "crumbRequestField", Value.Crumb_Request_Field);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DefaultCrumbIssuer_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DefaultCrumbIssuer_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.DiskSpaceMonitorDescriptorDiskSpace_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Path.Is_Null then
         Into.Write_Entity ("path", Value.Path);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in DiskSpaceMonitorDescriptorDiskSpace_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.DiskSpaceMonitorDescriptorDiskSpace_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "path", Value.Path);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out DiskSpaceMonitorDescriptorDiskSpace_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.DiskSpaceMonitorDescriptorDiskSpace_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.EmptyChangeLogSet_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Kind.Is_Null then
         Into.Write_Entity ("kind", Value.Kind);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in EmptyChangeLogSet_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.EmptyChangeLogSet_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "kind", Value.Kind);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out EmptyChangeLogSet_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.EmptyChangeLogSet_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FreeStyleProjectactions_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FreeStyleProjectactions_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FreeStyleProjectactions_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FreeStyleProjectactions_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FreeStyleProjectactions_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FreeStyleProjecthealthReport_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Icon_Class_Name.Is_Null then
         Into.Write_Entity ("iconClassName", Value.Icon_Class_Name);
      end if;
      if not Value.Icon_Url.Is_Null then
         Into.Write_Entity ("iconUrl", Value.Icon_Url);
      end if;
      if not Value.Score.Is_Null then
         Into.Write_Entity ("score", Value.Score);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FreeStyleProjecthealthReport_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FreeStyleProjecthealthReport_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "iconClassName", Value.Icon_Class_Name);
      Swagger.Streams.Deserialize (Object, "iconUrl", Value.Icon_Url);
      Swagger.Streams.Deserialize (Object, "score", Value.Score);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FreeStyleProjecthealthReport_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FreeStyleProjecthealthReport_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GenericResource_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Duration_In_Millis.Is_Null then
         Into.Write_Entity ("durationInMillis", Value.Duration_In_Millis);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("startTime", Value.Start_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GenericResource_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GenericResource_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "durationInMillis", Value.Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GenericResource_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GenericResource_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubContent_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Sha.Is_Null then
         Into.Write_Entity ("sha", Value.Sha);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Repo.Is_Null then
         Into.Write_Entity ("repo", Value.Repo);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      if not Value.Owner.Is_Null then
         Into.Write_Entity ("owner", Value.Owner);
      end if;
      if not Value.Path.Is_Null then
         Into.Write_Entity ("path", Value.Path);
      end if;
      if not Value.Base_64Data.Is_Null then
         Into.Write_Entity ("base64Data", Value.Base_64Data);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubContent_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubContent_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "sha", Value.Sha);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "repo", Value.Repo);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "owner", Value.Owner);
      Swagger.Streams.Deserialize (Object, "path", Value.Path);
      Swagger.Streams.Deserialize (Object, "base64Data", Value.Base_64Data);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubContent_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubContent_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubRepositorypermissions_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Admin.Is_Null then
         Into.Write_Entity ("admin", Value.Admin);
      end if;
      if not Value.Push.Is_Null then
         Into.Write_Entity ("push", Value.Push);
      end if;
      if not Value.Pull.Is_Null then
         Into.Write_Entity ("pull", Value.Pull);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubRepositorypermissions_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubRepositorypermissions_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "admin", Value.Admin);
      Swagger.Streams.Deserialize (Object, "push", Value.Push);
      Swagger.Streams.Deserialize (Object, "pull", Value.Pull);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubRepositorypermissions_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubRepositorypermissions_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.HudsonassignedLabels_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in HudsonassignedLabels_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.HudsonassignedLabels_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out HudsonassignedLabels_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.HudsonassignedLabels_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Label1_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Label1_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Label1_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Label1_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Label1_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Link_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Href.Is_Null then
         Into.Write_Entity ("href", Value.Href);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Link_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Link_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "href", Value.Href);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Link_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Link_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.MultibranchPipeline_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.Latest_Run.Is_Null then
         Into.Write_Entity ("latestRun", Value.Latest_Run);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Weather_Score.Is_Null then
         Into.Write_Entity ("weatherScore", Value.Weather_Score);
      end if;
      Serialize (Into, "branchNames", Value.Branch_Names);
      if not Value.Number_Of_Failing_Branches.Is_Null then
         Into.Write_Entity ("numberOfFailingBranches", Value.Number_Of_Failing_Branches);
      end if;
      if not Value.Number_Of_Failing_Pull_Requests.Is_Null then
         Into.Write_Entity ("numberOfFailingPullRequests", Value.Number_Of_Failing_Pull_Requests);
      end if;
      if not Value.Number_Of_Successful_Branches.Is_Null then
         Into.Write_Entity ("numberOfSuccessfulBranches", Value.Number_Of_Successful_Branches);
      end if;
      if not Value.Number_Of_Successful_Pull_Requests.Is_Null then
         Into.Write_Entity ("numberOfSuccessfulPullRequests", Value.Number_Of_Successful_Pull_Requests);
      end if;
      if not Value.Total_Number_Of_Branches.Is_Null then
         Into.Write_Entity ("totalNumberOfBranches", Value.Total_Number_Of_Branches);
      end if;
      if not Value.Total_Number_Of_Pull_Requests.Is_Null then
         Into.Write_Entity ("totalNumberOfPullRequests", Value.Total_Number_Of_Pull_Requests);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in MultibranchPipeline_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.MultibranchPipeline_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "latestRun", Value.Latest_Run);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "weatherScore", Value.Weather_Score);
      Swagger.Streams.Deserialize (Object, "branchNames", Value.Branch_Names);
      Swagger.Streams.Deserialize (Object, "numberOfFailingBranches", Value.Number_Of_Failing_Branches);
      Swagger.Streams.Deserialize (Object, "numberOfFailingPullRequests", Value.Number_Of_Failing_Pull_Requests);
      Swagger.Streams.Deserialize (Object, "numberOfSuccessfulBranches", Value.Number_Of_Successful_Branches);
      Swagger.Streams.Deserialize (Object, "numberOfSuccessfulPullRequests", Value.Number_Of_Successful_Pull_Requests);
      Swagger.Streams.Deserialize (Object, "totalNumberOfBranches", Value.Total_Number_Of_Branches);
      Swagger.Streams.Deserialize (Object, "totalNumberOfPullRequests", Value.Total_Number_Of_Pull_Requests);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out MultibranchPipeline_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.MultibranchPipeline_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.NullSCM_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in NullSCM_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.NullSCM_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out NullSCM_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.NullSCM_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Organisation_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Organisation_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Organisation_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Organisation_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Organisation_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineActivityartifacts_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineActivityartifacts_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineActivityartifacts_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineActivityartifacts_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineActivityartifacts_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineBranchesitemlatestRun_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Duration_In_Millis.Is_Null then
         Into.Write_Entity ("durationInMillis", Value.Duration_In_Millis);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.En_Queue_Time.Is_Null then
         Into.Write_Entity ("enQueueTime", Value.En_Queue_Time);
      end if;
      if not Value.End_Time.Is_Null then
         Into.Write_Entity ("endTime", Value.End_Time);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Pipeline.Is_Null then
         Into.Write_Entity ("pipeline", Value.Pipeline);
      end if;
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Run_Summary.Is_Null then
         Into.Write_Entity ("runSummary", Value.Run_Summary);
      end if;
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("startTime", Value.Start_Time);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Commit_Id.Is_Null then
         Into.Write_Entity ("commitId", Value.Commit_Id);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineBranchesitemlatestRun_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineBranchesitemlatestRun_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "durationInMillis", Value.Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "enQueueTime", Value.En_Queue_Time);
      Swagger.Streams.Deserialize (Object, "endTime", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "pipeline", Value.Pipeline);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "runSummary", Value.Run_Summary);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "commitId", Value.Commit_Id);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineBranchesitemlatestRun_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineBranchesitemlatestRun_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineBranchesitempullRequestlinks_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Self.Is_Null then
         Into.Write_Entity ("self", Value.Self);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineBranchesitempullRequestlinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineBranchesitempullRequestlinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineBranchesitempullRequestlinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineBranchesitempullRequestlinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineFolderImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Full_Name.Is_Null then
         Into.Write_Entity ("fullName", Value.Full_Name);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Number_Of_Folders.Is_Null then
         Into.Write_Entity ("numberOfFolders", Value.Number_Of_Folders);
      end if;
      if not Value.Number_Of_Pipelines.Is_Null then
         Into.Write_Entity ("numberOfPipelines", Value.Number_Of_Pipelines);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineFolderImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineFolderImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "numberOfFolders", Value.Number_Of_Folders);
      Swagger.Streams.Deserialize (Object, "numberOfPipelines", Value.Number_Of_Pipelines);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineFolderImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineFolderImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineRunNodeedges_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineRunNodeedges_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineRunNodeedges_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineRunNodeedges_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineRunNodeedges_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineRunartifacts_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineRunartifacts_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineRunartifacts_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineRunartifacts_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineRunartifacts_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelinelatestRunartifacts_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Size.Is_Null then
         Into.Write_Entity ("size", Value.Size);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelinelatestRunartifacts_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelinelatestRunartifacts_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "size", Value.Size);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelinelatestRunartifacts_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelinelatestRunartifacts_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QueueItemImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Expected_Build_Number.Is_Null then
         Into.Write_Entity ("expectedBuildNumber", Value.Expected_Build_Number);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Pipeline.Is_Null then
         Into.Write_Entity ("pipeline", Value.Pipeline);
      end if;
      if not Value.Queued_Time.Is_Null then
         Into.Write_Entity ("queuedTime", Value.Queued_Time);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QueueItemImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QueueItemImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "expectedBuildNumber", Value.Expected_Build_Number);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "pipeline", Value.Pipeline);
      Swagger.Streams.Deserialize (Object, "queuedTime", Value.Queued_Time);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QueueItemImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QueueItemImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ResponseTimeMonitorData_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Average.Is_Null then
         Into.Write_Entity ("average", Value.Average);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ResponseTimeMonitorData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ResponseTimeMonitorData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "average", Value.Average);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ResponseTimeMonitorData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ResponseTimeMonitorData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.StringParameterValue_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Value.Is_Null then
         Into.Write_Entity ("value", Value.Value);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in StringParameterValue_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.StringParameterValue_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "value", Value.Value);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out StringParameterValue_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.StringParameterValue_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.SwapSpaceMonitorMemoryUsage2_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Available_Physical_Memory.Is_Null then
         Into.Write_Entity ("availablePhysicalMemory", Value.Available_Physical_Memory);
      end if;
      if not Value.Available_Swap_Space.Is_Null then
         Into.Write_Entity ("availableSwapSpace", Value.Available_Swap_Space);
      end if;
      if not Value.Total_Physical_Memory.Is_Null then
         Into.Write_Entity ("totalPhysicalMemory", Value.Total_Physical_Memory);
      end if;
      if not Value.Total_Swap_Space.Is_Null then
         Into.Write_Entity ("totalSwapSpace", Value.Total_Swap_Space);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in SwapSpaceMonitorMemoryUsage2_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.SwapSpaceMonitorMemoryUsage2_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "availablePhysicalMemory", Value.Available_Physical_Memory);
      Swagger.Streams.Deserialize (Object, "availableSwapSpace", Value.Available_Swap_Space);
      Swagger.Streams.Deserialize (Object, "totalPhysicalMemory", Value.Total_Physical_Memory);
      Swagger.Streams.Deserialize (Object, "totalSwapSpace", Value.Total_Swap_Space);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out SwapSpaceMonitorMemoryUsage2_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.SwapSpaceMonitorMemoryUsage2_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.UnlabeledLoadStatistics_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in UnlabeledLoadStatistics_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.UnlabeledLoadStatistics_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out UnlabeledLoadStatistics_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.UnlabeledLoadStatistics_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.User_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Full_Name.Is_Null then
         Into.Write_Entity ("fullName", Value.Full_Name);
      end if;
      if not Value.Email.Is_Null then
         Into.Write_Entity ("email", Value.Email);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in User_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.User_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "email", Value.Email);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out User_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.User_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BranchImpllinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      Serialize (Into, "actions", Value.Actions);
      Serialize (Into, "runs", Value.Runs);
      Serialize (Into, "queue", Value.Queue);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BranchImpllinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BranchImpllinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Deserialize (Object, "actions", Value.Actions);
      Deserialize (Object, "runs", Value.Runs);
      Deserialize (Object, "queue", Value.Queue);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BranchImpllinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BranchImpllinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.CauseAction_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "causes", Value.Causes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in CauseAction_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.CauseAction_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "causes", Value.Causes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out CauseAction_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.CauseAction_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.HudsonMasterComputer_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      Serialize (Into, "executors", Value.Executors);
      if not Value.Icon.Is_Null then
         Into.Write_Entity ("icon", Value.Icon);
      end if;
      if not Value.Icon_Class_Name.Is_Null then
         Into.Write_Entity ("iconClassName", Value.Icon_Class_Name);
      end if;
      if not Value.Idle.Is_Null then
         Into.Write_Entity ("idle", Value.Idle);
      end if;
      if not Value.Jnlp_Agent.Is_Null then
         Into.Write_Entity ("jnlpAgent", Value.Jnlp_Agent);
      end if;
      if not Value.Launch_Supported.Is_Null then
         Into.Write_Entity ("launchSupported", Value.Launch_Supported);
      end if;
      Serialize (Into, "loadStatistics", Value.Load_Statistics);
      if not Value.Manual_Launch_Allowed.Is_Null then
         Into.Write_Entity ("manualLaunchAllowed", Value.Manual_Launch_Allowed);
      end if;
      Serialize (Into, "monitorData", Value.Monitor_Data);
      if not Value.Num_Executors.Is_Null then
         Into.Write_Entity ("numExecutors", Value.Num_Executors);
      end if;
      if not Value.Offline.Is_Null then
         Into.Write_Entity ("offline", Value.Offline);
      end if;
      if not Value.Offline_Cause.Is_Null then
         Into.Write_Entity ("offlineCause", Value.Offline_Cause);
      end if;
      if not Value.Offline_Cause_Reason.Is_Null then
         Into.Write_Entity ("offlineCauseReason", Value.Offline_Cause_Reason);
      end if;
      if not Value.Temporarily_Offline.Is_Null then
         Into.Write_Entity ("temporarilyOffline", Value.Temporarily_Offline);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in HudsonMasterComputer_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.HudsonMasterComputer_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Deserialize (Object, "executors", Value.Executors);
      Swagger.Streams.Deserialize (Object, "icon", Value.Icon);
      Swagger.Streams.Deserialize (Object, "iconClassName", Value.Icon_Class_Name);
      Swagger.Streams.Deserialize (Object, "idle", Value.Idle);
      Swagger.Streams.Deserialize (Object, "jnlpAgent", Value.Jnlp_Agent);
      Swagger.Streams.Deserialize (Object, "launchSupported", Value.Launch_Supported);
      Deserialize (Object, "loadStatistics", Value.Load_Statistics);
      Swagger.Streams.Deserialize (Object, "manualLaunchAllowed", Value.Manual_Launch_Allowed);
      Deserialize (Object, "monitorData", Value.Monitor_Data);
      Swagger.Streams.Deserialize (Object, "numExecutors", Value.Num_Executors);
      Swagger.Streams.Deserialize (Object, "offline", Value.Offline);
      Swagger.Streams.Deserialize (Object, "offlineCause", Value.Offline_Cause);
      Swagger.Streams.Deserialize (Object, "offlineCauseReason", Value.Offline_Cause_Reason);
      Swagger.Streams.Deserialize (Object, "temporarilyOffline", Value.Temporarily_Offline);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out HudsonMasterComputer_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.HudsonMasterComputer_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ComputerSet_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Busy_Executors.Is_Null then
         Into.Write_Entity ("busyExecutors", Value.Busy_Executors);
      end if;
      Serialize (Into, "computer", Value.Computer);
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Total_Executors.Is_Null then
         Into.Write_Entity ("totalExecutors", Value.Total_Executors);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ComputerSet_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ComputerSet_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "busyExecutors", Value.Busy_Executors);
      Deserialize (Object, "computer", Value.Computer);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "totalExecutors", Value.Total_Executors);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ComputerSet_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ComputerSet_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ExtensionClassContainerImpl1links_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ExtensionClassContainerImpl1links_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ExtensionClassContainerImpl1links_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ExtensionClassContainerImpl1links_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ExtensionClassContainerImpl1links_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ExtensionClassImpllinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ExtensionClassImpllinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ExtensionClassImpllinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ExtensionClassImpllinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ExtensionClassImpllinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ExtensionClassImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      Serialize (Into, "classes", Value.Classes);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ExtensionClassImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ExtensionClassImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Swagger.Streams.Deserialize (Object, "classes", Value.Classes);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ExtensionClassImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ExtensionClassImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ExtensionClassContainerImpl1map_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "io.jenkins.blueocean.service.embedded.rest.PipelineImpl", Value.Io_Jenkins_Blueocean_Service_Embedded_Rest_Pipeline_Impl);
      Serialize (Into, "io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl", Value.Io_Jenkins_Blueocean_Service_Embedded_Rest_Multi_Branch_Pipeline_Impl);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ExtensionClassContainerImpl1map_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ExtensionClassContainerImpl1map_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "io.jenkins.blueocean.service.embedded.rest.PipelineImpl", Value.Io_Jenkins_Blueocean_Service_Embedded_Rest_Pipeline_Impl);
      Deserialize (Object, "io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl", Value.Io_Jenkins_Blueocean_Service_Embedded_Rest_Multi_Branch_Pipeline_Impl);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ExtensionClassContainerImpl1map_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ExtensionClassContainerImpl1map_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FavoriteImpllinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FavoriteImpllinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FavoriteImpllinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FavoriteImpllinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FavoriteImpllinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubFile_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "content", Value.Content);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubFile_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubFile_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "content", Value.Content);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubFile_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubFile_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubOrganizationlinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "repositories", Value.Repositories);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubOrganizationlinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubOrganizationlinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "repositories", Value.Repositories);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubOrganizationlinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubOrganizationlinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubOrganization_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      if not Value.Jenkins_Organization_Pipeline.Is_Null then
         Into.Write_Entity ("jenkinsOrganizationPipeline", Value.Jenkins_Organization_Pipeline);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubOrganization_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubOrganization_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Swagger.Streams.Deserialize (Object, "jenkinsOrganizationPipeline", Value.Jenkins_Organization_Pipeline);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubOrganization_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubOrganization_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubRepositorieslinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubRepositorieslinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubRepositorieslinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubRepositorieslinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubRepositorieslinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubRepositorylinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubRepositorylinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubRepositorylinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubRepositorylinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubRepositorylinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubRespositoryContainerlinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubRespositoryContainerlinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubRespositoryContainerlinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubRespositoryContainerlinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubRespositoryContainerlinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubScmlinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubScmlinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubScmlinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubScmlinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubScmlinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubScm_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      if not Value.Credential_Id.Is_Null then
         Into.Write_Entity ("credentialId", Value.Credential_Id);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Uri.Is_Null then
         Into.Write_Entity ("uri", Value.Uri);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubScm_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubScm_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Swagger.Streams.Deserialize (Object, "credentialId", Value.Credential_Id);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "uri", Value.Uri);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubScm_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubScm_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FreeStyleBuild_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Number.Is_Null then
         Into.Write_Entity ("number", Value.Number);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      Serialize (Into, "actions", Value.Actions);
      if not Value.Building.Is_Null then
         Into.Write_Entity ("building", Value.Building);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Duration.Is_Null then
         Into.Write_Entity ("duration", Value.Duration);
      end if;
      if not Value.Estimated_Duration.Is_Null then
         Into.Write_Entity ("estimatedDuration", Value.Estimated_Duration);
      end if;
      if not Value.Executor.Is_Null then
         Into.Write_Entity ("executor", Value.Executor);
      end if;
      if not Value.Full_Display_Name.Is_Null then
         Into.Write_Entity ("fullDisplayName", Value.Full_Display_Name);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Keep_Log.Is_Null then
         Into.Write_Entity ("keepLog", Value.Keep_Log);
      end if;
      if not Value.Queue_Id.Is_Null then
         Into.Write_Entity ("queueId", Value.Queue_Id);
      end if;
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Timestamp.Is_Null then
         Into.Write_Entity ("timestamp", Value.Timestamp);
      end if;
      if not Value.Built_On.Is_Null then
         Into.Write_Entity ("builtOn", Value.Built_On);
      end if;
      Serialize (Into, "changeSet", Value.Change_Set);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FreeStyleBuild_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FreeStyleBuild_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "number", Value.Number);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Deserialize (Object, "actions", Value.Actions);
      Swagger.Streams.Deserialize (Object, "building", Value.Building);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "duration", Value.Duration);
      Swagger.Streams.Deserialize (Object, "estimatedDuration", Value.Estimated_Duration);
      Swagger.Streams.Deserialize (Object, "executor", Value.Executor);
      Swagger.Streams.Deserialize (Object, "fullDisplayName", Value.Full_Display_Name);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "keepLog", Value.Keep_Log);
      Swagger.Streams.Deserialize (Object, "queueId", Value.Queue_Id);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "timestamp", Value.Timestamp);
      Swagger.Streams.Deserialize (Object, "builtOn", Value.Built_On);
      Deserialize (Object, "changeSet", Value.Change_Set);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FreeStyleBuild_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FreeStyleBuild_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.HudsonMasterComputerexecutors_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "currentExecutable", Value.Current_Executable);
      if not Value.Idle.Is_Null then
         Into.Write_Entity ("idle", Value.Idle);
      end if;
      if not Value.Likely_Stuck.Is_Null then
         Into.Write_Entity ("likelyStuck", Value.Likely_Stuck);
      end if;
      if not Value.Number.Is_Null then
         Into.Write_Entity ("number", Value.Number);
      end if;
      if not Value.Progress.Is_Null then
         Into.Write_Entity ("progress", Value.Progress);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in HudsonMasterComputerexecutors_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.HudsonMasterComputerexecutors_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "currentExecutable", Value.Current_Executable);
      Swagger.Streams.Deserialize (Object, "idle", Value.Idle);
      Swagger.Streams.Deserialize (Object, "likelyStuck", Value.Likely_Stuck);
      Swagger.Streams.Deserialize (Object, "number", Value.Number);
      Swagger.Streams.Deserialize (Object, "progress", Value.Progress);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out HudsonMasterComputerexecutors_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.HudsonMasterComputerexecutors_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InputStepImpllinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InputStepImpllinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InputStepImpllinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InputStepImpllinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InputStepImpllinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineActivity_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "artifacts", Value.Artifacts);
      if not Value.Duration_In_Millis.Is_Null then
         Into.Write_Entity ("durationInMillis", Value.Duration_In_Millis);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.En_Queue_Time.Is_Null then
         Into.Write_Entity ("enQueueTime", Value.En_Queue_Time);
      end if;
      if not Value.End_Time.Is_Null then
         Into.Write_Entity ("endTime", Value.End_Time);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Pipeline.Is_Null then
         Into.Write_Entity ("pipeline", Value.Pipeline);
      end if;
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Run_Summary.Is_Null then
         Into.Write_Entity ("runSummary", Value.Run_Summary);
      end if;
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("startTime", Value.Start_Time);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Commit_Id.Is_Null then
         Into.Write_Entity ("commitId", Value.Commit_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineActivity_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineActivity_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "artifacts", Value.Artifacts);
      Swagger.Streams.Deserialize (Object, "durationInMillis", Value.Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "enQueueTime", Value.En_Queue_Time);
      Swagger.Streams.Deserialize (Object, "endTime", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "pipeline", Value.Pipeline);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "runSummary", Value.Run_Summary);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "commitId", Value.Commit_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineActivity_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineActivity_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineBranchesitempullRequest_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "_links", Value.P__links);
      if not Value.Author.Is_Null then
         Into.Write_Entity ("author", Value.Author);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Title.Is_Null then
         Into.Write_Entity ("title", Value.Title);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineBranchesitempullRequest_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineBranchesitempullRequest_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "_links", Value.P__links);
      Swagger.Streams.Deserialize (Object, "author", Value.Author);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "title", Value.Title);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineBranchesitempullRequest_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineBranchesitempullRequest_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineImpllinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "runs", Value.Runs);
      Serialize (Into, "self", Value.Self);
      Serialize (Into, "queue", Value.Queue);
      Serialize (Into, "actions", Value.Actions);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineImpllinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineImpllinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "runs", Value.Runs);
      Deserialize (Object, "self", Value.Self);
      Deserialize (Object, "queue", Value.Queue);
      Deserialize (Object, "actions", Value.Actions);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineImpllinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineImpllinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.Full_Name.Is_Null then
         Into.Write_Entity ("fullName", Value.Full_Name);
      end if;
      if not Value.Latest_Run.Is_Null then
         Into.Write_Entity ("latestRun", Value.Latest_Run);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Weather_Score.Is_Null then
         Into.Write_Entity ("weatherScore", Value.Weather_Score);
      end if;
      Serialize (Into, "_links", Value.P__links);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "latestRun", Value.Latest_Run);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "weatherScore", Value.Weather_Score);
      Deserialize (Object, "_links", Value.P__links);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineRunImpllinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "nodes", Value.Nodes);
      Serialize (Into, "log", Value.Log);
      Serialize (Into, "self", Value.Self);
      Serialize (Into, "actions", Value.Actions);
      Serialize (Into, "steps", Value.Steps);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineRunImpllinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineRunImpllinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "nodes", Value.Nodes);
      Deserialize (Object, "log", Value.Log);
      Deserialize (Object, "self", Value.Self);
      Deserialize (Object, "actions", Value.Actions);
      Deserialize (Object, "steps", Value.Steps);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineRunImpllinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineRunImpllinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineRunImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      if not Value.Duration_In_Millis.Is_Null then
         Into.Write_Entity ("durationInMillis", Value.Duration_In_Millis);
      end if;
      if not Value.En_Queue_Time.Is_Null then
         Into.Write_Entity ("enQueueTime", Value.En_Queue_Time);
      end if;
      if not Value.End_Time.Is_Null then
         Into.Write_Entity ("endTime", Value.End_Time);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Pipeline.Is_Null then
         Into.Write_Entity ("pipeline", Value.Pipeline);
      end if;
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Run_Summary.Is_Null then
         Into.Write_Entity ("runSummary", Value.Run_Summary);
      end if;
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("startTime", Value.Start_Time);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Commit_Id.Is_Null then
         Into.Write_Entity ("commitId", Value.Commit_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineRunImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineRunImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Swagger.Streams.Deserialize (Object, "durationInMillis", Value.Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "enQueueTime", Value.En_Queue_Time);
      Swagger.Streams.Deserialize (Object, "endTime", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "pipeline", Value.Pipeline);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "runSummary", Value.Run_Summary);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "commitId", Value.Commit_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineRunImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineRunImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineRunNode_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Duration_In_Millis.Is_Null then
         Into.Write_Entity ("durationInMillis", Value.Duration_In_Millis);
      end if;
      Serialize (Into, "edges", Value.Edges);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("startTime", Value.Start_Time);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineRunNode_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineRunNode_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "durationInMillis", Value.Duration_In_Millis);
      Deserialize (Object, "edges", Value.Edges);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineRunNode_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineRunNode_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineRun_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "artifacts", Value.Artifacts);
      if not Value.Duration_In_Millis.Is_Null then
         Into.Write_Entity ("durationInMillis", Value.Duration_In_Millis);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.En_Queue_Time.Is_Null then
         Into.Write_Entity ("enQueueTime", Value.En_Queue_Time);
      end if;
      if not Value.End_Time.Is_Null then
         Into.Write_Entity ("endTime", Value.End_Time);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Pipeline.Is_Null then
         Into.Write_Entity ("pipeline", Value.Pipeline);
      end if;
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Run_Summary.Is_Null then
         Into.Write_Entity ("runSummary", Value.Run_Summary);
      end if;
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("startTime", Value.Start_Time);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Commit_Id.Is_Null then
         Into.Write_Entity ("commitId", Value.Commit_Id);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineRun_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineRun_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "artifacts", Value.Artifacts);
      Swagger.Streams.Deserialize (Object, "durationInMillis", Value.Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "enQueueTime", Value.En_Queue_Time);
      Swagger.Streams.Deserialize (Object, "endTime", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "pipeline", Value.Pipeline);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "runSummary", Value.Run_Summary);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "commitId", Value.Commit_Id);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineRun_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineRun_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineStepImpllinks_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "self", Value.Self);
      Serialize (Into, "actions", Value.Actions);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineStepImpllinks_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineStepImpllinks_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "self", Value.Self);
      Deserialize (Object, "actions", Value.Actions);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineStepImpllinks_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineStepImpllinks_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelinelatestRun_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "artifacts", Value.Artifacts);
      if not Value.Duration_In_Millis.Is_Null then
         Into.Write_Entity ("durationInMillis", Value.Duration_In_Millis);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.En_Queue_Time.Is_Null then
         Into.Write_Entity ("enQueueTime", Value.En_Queue_Time);
      end if;
      if not Value.End_Time.Is_Null then
         Into.Write_Entity ("endTime", Value.End_Time);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Pipeline.Is_Null then
         Into.Write_Entity ("pipeline", Value.Pipeline);
      end if;
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Run_Summary.Is_Null then
         Into.Write_Entity ("runSummary", Value.Run_Summary);
      end if;
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("startTime", Value.Start_Time);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      if not Value.Commit_Id.Is_Null then
         Into.Write_Entity ("commitId", Value.Commit_Id);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelinelatestRun_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelinelatestRun_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "artifacts", Value.Artifacts);
      Swagger.Streams.Deserialize (Object, "durationInMillis", Value.Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "enQueueTime", Value.En_Queue_Time);
      Swagger.Streams.Deserialize (Object, "endTime", Value.End_Time);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "pipeline", Value.Pipeline);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "runSummary", Value.Run_Summary);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
      Swagger.Streams.Deserialize (Object, "commitId", Value.Commit_Id);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelinelatestRun_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelinelatestRun_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Pipeline_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Full_Name.Is_Null then
         Into.Write_Entity ("fullName", Value.Full_Name);
      end if;
      if not Value.Weather_Score.Is_Null then
         Into.Write_Entity ("weatherScore", Value.Weather_Score);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      Serialize (Into, "latestRun", Value.Latest_Run);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Pipeline_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Pipeline_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "weatherScore", Value.Weather_Score);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Deserialize (Object, "latestRun", Value.Latest_Run);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Pipeline_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Pipeline_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QueueBlockedItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "actions", Value.Actions);
      if not Value.Blocked.Is_Null then
         Into.Write_Entity ("blocked", Value.Blocked);
      end if;
      if not Value.Buildable.Is_Null then
         Into.Write_Entity ("buildable", Value.Buildable);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.In_Queue_Since.Is_Null then
         Into.Write_Entity ("inQueueSince", Value.In_Queue_Since);
      end if;
      if not Value.Params.Is_Null then
         Into.Write_Entity ("params", Value.Params);
      end if;
      if not Value.Stuck.Is_Null then
         Into.Write_Entity ("stuck", Value.Stuck);
      end if;
      Serialize (Into, "task", Value.P_Task);
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Why.Is_Null then
         Into.Write_Entity ("why", Value.Why);
      end if;
      if not Value.Buildable_Start_Milliseconds.Is_Null then
         Into.Write_Entity ("buildableStartMilliseconds", Value.Buildable_Start_Milliseconds);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QueueBlockedItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QueueBlockedItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "actions", Value.Actions);
      Swagger.Streams.Deserialize (Object, "blocked", Value.Blocked);
      Swagger.Streams.Deserialize (Object, "buildable", Value.Buildable);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "inQueueSince", Value.In_Queue_Since);
      Swagger.Streams.Deserialize (Object, "params", Value.Params);
      Swagger.Streams.Deserialize (Object, "stuck", Value.Stuck);
      Deserialize (Object, "task", Value.P_Task);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "why", Value.Why);
      Swagger.Streams.Deserialize (Object, "buildableStartMilliseconds", Value.Buildable_Start_Milliseconds);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QueueBlockedItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QueueBlockedItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Queue_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "items", Value.Items);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Queue_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Queue_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "items", Value.Items);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Queue_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Queue_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.StringParameterDefinition_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "defaultParameterValue", Value.Default_Parameter_Value);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.P_Type.Is_Null then
         Into.Write_Entity ("type", Value.P_Type);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in StringParameterDefinition_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.StringParameterDefinition_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "defaultParameterValue", Value.Default_Parameter_Value);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "type", Value.P_Type);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out StringParameterDefinition_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.StringParameterDefinition_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ExtensionClassContainerImpl1_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      Serialize (Into, "map", Value.Map);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ExtensionClassContainerImpl1_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ExtensionClassContainerImpl1_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Deserialize (Object, "map", Value.Map);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ExtensionClassContainerImpl1_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ExtensionClassContainerImpl1_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FavoriteImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      Serialize (Into, "item", Value.Item);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FavoriteImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FavoriteImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Deserialize (Object, "item", Value.Item);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FavoriteImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FavoriteImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubRepository_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      if not Value.Default_Branch.Is_Null then
         Into.Write_Entity ("defaultBranch", Value.Default_Branch);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      Serialize (Into, "permissions", Value.Permissions);
      if not Value.P_Private.Is_Null then
         Into.Write_Entity ("private", Value.P_Private);
      end if;
      if not Value.Full_Name.Is_Null then
         Into.Write_Entity ("fullName", Value.Full_Name);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubRepository_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubRepository_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Swagger.Streams.Deserialize (Object, "defaultBranch", Value.Default_Branch);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Deserialize (Object, "permissions", Value.Permissions);
      Swagger.Streams.Deserialize (Object, "private", Value.P_Private);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubRepository_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubRepository_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubRepositories_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      Serialize (Into, "items", Value.Items);
      if not Value.Last_Page.Is_Null then
         Into.Write_Entity ("lastPage", Value.Last_Page);
      end if;
      if not Value.Next_Page.Is_Null then
         Into.Write_Entity ("nextPage", Value.Next_Page);
      end if;
      if not Value.Page_Size.Is_Null then
         Into.Write_Entity ("pageSize", Value.Page_Size);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubRepositories_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubRepositories_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Deserialize (Object, "items", Value.Items);
      Swagger.Streams.Deserialize (Object, "lastPage", Value.Last_Page);
      Swagger.Streams.Deserialize (Object, "nextPage", Value.Next_Page);
      Swagger.Streams.Deserialize (Object, "pageSize", Value.Page_Size);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubRepositories_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubRepositories_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.GithubRespositoryContainer_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      Serialize (Into, "repositories", Value.Repositories);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in GithubRespositoryContainer_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.GithubRespositoryContainer_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Deserialize (Object, "repositories", Value.Repositories);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out GithubRespositoryContainer_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.GithubRespositoryContainer_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.InputStepImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.Message.Is_Null then
         Into.Write_Entity ("message", Value.Message);
      end if;
      if not Value.Ok.Is_Null then
         Into.Write_Entity ("ok", Value.Ok);
      end if;
      Serialize (Into, "parameters", Value.Parameters);
      if not Value.Submitter.Is_Null then
         Into.Write_Entity ("submitter", Value.Submitter);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in InputStepImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.InputStepImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "message", Value.Message);
      Swagger.Streams.Deserialize (Object, "ok", Value.Ok);
      Deserialize (Object, "parameters", Value.Parameters);
      Swagger.Streams.Deserialize (Object, "submitter", Value.Submitter);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out InputStepImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.InputStepImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineBranchesitem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Weather_Score.Is_Null then
         Into.Write_Entity ("weatherScore", Value.Weather_Score);
      end if;
      Serialize (Into, "latestRun", Value.Latest_Run);
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      Serialize (Into, "pullRequest", Value.Pull_Request);
      if not Value.Total_Number_Of_Pull_Requests.Is_Null then
         Into.Write_Entity ("totalNumberOfPullRequests", Value.Total_Number_Of_Pull_Requests);
      end if;
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineBranchesitem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineBranchesitem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "weatherScore", Value.Weather_Score);
      Deserialize (Object, "latestRun", Value.Latest_Run);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Deserialize (Object, "pullRequest", Value.Pull_Request);
      Swagger.Streams.Deserialize (Object, "totalNumberOfPullRequests", Value.Total_Number_Of_Pull_Requests);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineBranchesitem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineBranchesitem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.PipelineStepImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "_links", Value.P__links);
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Duration_In_Millis.Is_Null then
         Into.Write_Entity ("durationInMillis", Value.Duration_In_Millis);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      Serialize (Into, "input", Value.Input);
      if not Value.Result.Is_Null then
         Into.Write_Entity ("result", Value.Result);
      end if;
      if not Value.Start_Time.Is_Null then
         Into.Write_Entity ("startTime", Value.Start_Time);
      end if;
      if not Value.State.Is_Null then
         Into.Write_Entity ("state", Value.State);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in PipelineStepImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.PipelineStepImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "_links", Value.P__links);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "durationInMillis", Value.Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Deserialize (Object, "input", Value.Input);
      Swagger.Streams.Deserialize (Object, "result", Value.Result);
      Swagger.Streams.Deserialize (Object, "startTime", Value.Start_Time);
      Swagger.Streams.Deserialize (Object, "state", Value.State);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out PipelineStepImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.PipelineStepImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.BranchImpl_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Estimated_Duration_In_Millis.Is_Null then
         Into.Write_Entity ("estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      end if;
      if not Value.Full_Display_Name.Is_Null then
         Into.Write_Entity ("fullDisplayName", Value.Full_Display_Name);
      end if;
      if not Value.Full_Name.Is_Null then
         Into.Write_Entity ("fullName", Value.Full_Name);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Organization.Is_Null then
         Into.Write_Entity ("organization", Value.Organization);
      end if;
      Serialize (Into, "parameters", Value.Parameters);
      Serialize (Into, "permissions", Value.Permissions);
      if not Value.Weather_Score.Is_Null then
         Into.Write_Entity ("weatherScore", Value.Weather_Score);
      end if;
      if not Value.Pull_Request.Is_Null then
         Into.Write_Entity ("pullRequest", Value.Pull_Request);
      end if;
      Serialize (Into, "_links", Value.P__links);
      Serialize (Into, "latestRun", Value.Latest_Run);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in BranchImpl_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.BranchImpl_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "estimatedDurationInMillis", Value.Estimated_Duration_In_Millis);
      Swagger.Streams.Deserialize (Object, "fullDisplayName", Value.Full_Display_Name);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "organization", Value.Organization);
      Deserialize (Object, "parameters", Value.Parameters);
      Deserialize (Object, "permissions", Value.Permissions);
      Swagger.Streams.Deserialize (Object, "weatherScore", Value.Weather_Score);
      Swagger.Streams.Deserialize (Object, "pullRequest", Value.Pull_Request);
      Deserialize (Object, "_links", Value.P__links);
      Deserialize (Object, "latestRun", Value.Latest_Run);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out BranchImpl_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.BranchImpl_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.FreeStyleProject_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Color.Is_Null then
         Into.Write_Entity ("color", Value.Color);
      end if;
      Serialize (Into, "actions", Value.Actions);
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      if not Value.Display_Name.Is_Null then
         Into.Write_Entity ("displayName", Value.Display_Name);
      end if;
      if not Value.Display_Name_Or_Null.Is_Null then
         Into.Write_Entity ("displayNameOrNull", Value.Display_Name_Or_Null);
      end if;
      if not Value.Full_Display_Name.Is_Null then
         Into.Write_Entity ("fullDisplayName", Value.Full_Display_Name);
      end if;
      if not Value.Full_Name.Is_Null then
         Into.Write_Entity ("fullName", Value.Full_Name);
      end if;
      if not Value.Buildable.Is_Null then
         Into.Write_Entity ("buildable", Value.Buildable);
      end if;
      Serialize (Into, "builds", Value.Builds);
      Serialize (Into, "firstBuild", Value.First_Build);
      Serialize (Into, "healthReport", Value.Health_Report);
      if not Value.In_Queue.Is_Null then
         Into.Write_Entity ("inQueue", Value.In_Queue);
      end if;
      if not Value.Keep_Dependencies.Is_Null then
         Into.Write_Entity ("keepDependencies", Value.Keep_Dependencies);
      end if;
      Serialize (Into, "lastBuild", Value.Last_Build);
      Serialize (Into, "lastCompletedBuild", Value.Last_Completed_Build);
      if not Value.Last_Failed_Build.Is_Null then
         Into.Write_Entity ("lastFailedBuild", Value.Last_Failed_Build);
      end if;
      Serialize (Into, "lastStableBuild", Value.Last_Stable_Build);
      Serialize (Into, "lastSuccessfulBuild", Value.Last_Successful_Build);
      if not Value.Last_Unstable_Build.Is_Null then
         Into.Write_Entity ("lastUnstableBuild", Value.Last_Unstable_Build);
      end if;
      if not Value.Last_Unsuccessful_Build.Is_Null then
         Into.Write_Entity ("lastUnsuccessfulBuild", Value.Last_Unsuccessful_Build);
      end if;
      if not Value.Next_Build_Number.Is_Null then
         Into.Write_Entity ("nextBuildNumber", Value.Next_Build_Number);
      end if;
      if not Value.Queue_Item.Is_Null then
         Into.Write_Entity ("queueItem", Value.Queue_Item);
      end if;
      if not Value.Concurrent_Build.Is_Null then
         Into.Write_Entity ("concurrentBuild", Value.Concurrent_Build);
      end if;
      Serialize (Into, "scm", Value.Scm);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in FreeStyleProject_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.FreeStyleProject_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "color", Value.Color);
      Deserialize (Object, "actions", Value.Actions);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Swagger.Streams.Deserialize (Object, "displayName", Value.Display_Name);
      Swagger.Streams.Deserialize (Object, "displayNameOrNull", Value.Display_Name_Or_Null);
      Swagger.Streams.Deserialize (Object, "fullDisplayName", Value.Full_Display_Name);
      Swagger.Streams.Deserialize (Object, "fullName", Value.Full_Name);
      Swagger.Streams.Deserialize (Object, "buildable", Value.Buildable);
      Deserialize (Object, "builds", Value.Builds);
      Deserialize (Object, "firstBuild", Value.First_Build);
      Deserialize (Object, "healthReport", Value.Health_Report);
      Swagger.Streams.Deserialize (Object, "inQueue", Value.In_Queue);
      Swagger.Streams.Deserialize (Object, "keepDependencies", Value.Keep_Dependencies);
      Deserialize (Object, "lastBuild", Value.Last_Build);
      Deserialize (Object, "lastCompletedBuild", Value.Last_Completed_Build);
      Swagger.Streams.Deserialize (Object, "lastFailedBuild", Value.Last_Failed_Build);
      Deserialize (Object, "lastStableBuild", Value.Last_Stable_Build);
      Deserialize (Object, "lastSuccessfulBuild", Value.Last_Successful_Build);
      Swagger.Streams.Deserialize (Object, "lastUnstableBuild", Value.Last_Unstable_Build);
      Swagger.Streams.Deserialize (Object, "lastUnsuccessfulBuild", Value.Last_Unsuccessful_Build);
      Swagger.Streams.Deserialize (Object, "nextBuildNumber", Value.Next_Build_Number);
      Swagger.Streams.Deserialize (Object, "queueItem", Value.Queue_Item);
      Swagger.Streams.Deserialize (Object, "concurrentBuild", Value.Concurrent_Build);
      Deserialize (Object, "scm", Value.Scm);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out FreeStyleProject_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.FreeStyleProject_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.ListView_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "jobs", Value.Jobs);
      if not Value.Name.Is_Null then
         Into.Write_Entity ("name", Value.Name);
      end if;
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in ListView_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.ListView_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "jobs", Value.Jobs);
      Swagger.Streams.Deserialize (Object, "name", Value.Name);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out ListView_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.ListView_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.QueueLeftItem_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "actions", Value.Actions);
      if not Value.Blocked.Is_Null then
         Into.Write_Entity ("blocked", Value.Blocked);
      end if;
      if not Value.Buildable.Is_Null then
         Into.Write_Entity ("buildable", Value.Buildable);
      end if;
      if not Value.Id.Is_Null then
         Into.Write_Entity ("id", Value.Id);
      end if;
      if not Value.In_Queue_Since.Is_Null then
         Into.Write_Entity ("inQueueSince", Value.In_Queue_Since);
      end if;
      if not Value.Params.Is_Null then
         Into.Write_Entity ("params", Value.Params);
      end if;
      if not Value.Stuck.Is_Null then
         Into.Write_Entity ("stuck", Value.Stuck);
      end if;
      Serialize (Into, "task", Value.P_Task);
      if not Value.Url.Is_Null then
         Into.Write_Entity ("url", Value.Url);
      end if;
      if not Value.Why.Is_Null then
         Into.Write_Entity ("why", Value.Why);
      end if;
      if not Value.Cancelled.Is_Null then
         Into.Write_Entity ("cancelled", Value.Cancelled);
      end if;
      Serialize (Into, "executable", Value.Executable);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in QueueLeftItem_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.QueueLeftItem_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "actions", Value.Actions);
      Swagger.Streams.Deserialize (Object, "blocked", Value.Blocked);
      Swagger.Streams.Deserialize (Object, "buildable", Value.Buildable);
      Swagger.Streams.Deserialize (Object, "id", Value.Id);
      Swagger.Streams.Deserialize (Object, "inQueueSince", Value.In_Queue_Since);
      Swagger.Streams.Deserialize (Object, "params", Value.Params);
      Swagger.Streams.Deserialize (Object, "stuck", Value.Stuck);
      Deserialize (Object, "task", Value.P_Task);
      Swagger.Streams.Deserialize (Object, "url", Value.Url);
      Swagger.Streams.Deserialize (Object, "why", Value.Why);
      Swagger.Streams.Deserialize (Object, "cancelled", Value.Cancelled);
      Deserialize (Object, "executable", Value.Executable);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out QueueLeftItem_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.QueueLeftItem_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.HudsonMasterComputermonitorData_Type) is
   begin
      Into.Start_Entity (Name);
      Serialize (Into, "hudson.node_monitors.SwapSpaceMonitor", Value.Hudson_Node_Monitors_Swap_Space_Monitor);
      Serialize (Into, "hudson.node_monitors.TemporarySpaceMonitor", Value.Hudson_Node_Monitors_Temporary_Space_Monitor);
      Serialize (Into, "hudson.node_monitors.DiskSpaceMonitor", Value.Hudson_Node_Monitors_Disk_Space_Monitor);
      if not Value.Hudson_Node_Monitors_Architecture_Monitor.Is_Null then
         Into.Write_Entity ("hudson.node_monitors.ArchitectureMonitor", Value.Hudson_Node_Monitors_Architecture_Monitor);
      end if;
      Serialize (Into, "hudson.node_monitors.ResponseTimeMonitor", Value.Hudson_Node_Monitors_Response_Time_Monitor);
      Serialize (Into, "hudson.node_monitors.ClockMonitor", Value.Hudson_Node_Monitors_Clock_Monitor);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in HudsonMasterComputermonitorData_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.HudsonMasterComputermonitorData_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Deserialize (Object, "hudson.node_monitors.SwapSpaceMonitor", Value.Hudson_Node_Monitors_Swap_Space_Monitor);
      Deserialize (Object, "hudson.node_monitors.TemporarySpaceMonitor", Value.Hudson_Node_Monitors_Temporary_Space_Monitor);
      Deserialize (Object, "hudson.node_monitors.DiskSpaceMonitor", Value.Hudson_Node_Monitors_Disk_Space_Monitor);
      Swagger.Streams.Deserialize (Object, "hudson.node_monitors.ArchitectureMonitor", Value.Hudson_Node_Monitors_Architecture_Monitor);
      Deserialize (Object, "hudson.node_monitors.ResponseTimeMonitor", Value.Hudson_Node_Monitors_Response_Time_Monitor);
      Deserialize (Object, "hudson.node_monitors.ClockMonitor", Value.Hudson_Node_Monitors_Clock_Monitor);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out HudsonMasterComputermonitorData_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.HudsonMasterComputermonitorData_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in .Models.Hudson_Type) is
   begin
      Into.Start_Entity (Name);
      if not Value.P__class.Is_Null then
         Into.Write_Entity ("_class", Value.P__class);
      end if;
      Serialize (Into, "assignedLabels", Value.Assigned_Labels);
      if not Value.Mode.Is_Null then
         Into.Write_Entity ("mode", Value.Mode);
      end if;
      if not Value.Node_Description.Is_Null then
         Into.Write_Entity ("nodeDescription", Value.Node_Description);
      end if;
      if not Value.Node_Name.Is_Null then
         Into.Write_Entity ("nodeName", Value.Node_Name);
      end if;
      if not Value.Num_Executors.Is_Null then
         Into.Write_Entity ("numExecutors", Value.Num_Executors);
      end if;
      if not Value.Description.Is_Null then
         Into.Write_Entity ("description", Value.Description);
      end if;
      Serialize (Into, "jobs", Value.Jobs);
      Serialize (Into, "primaryView", Value.Primary_View);
      if not Value.Quieting_Down.Is_Null then
         Into.Write_Entity ("quietingDown", Value.Quieting_Down);
      end if;
      if not Value.Slave_Agent_Port.Is_Null then
         Into.Write_Entity ("slaveAgentPort", Value.Slave_Agent_Port);
      end if;
      Serialize (Into, "unlabeledLoad", Value.Unlabeled_Load);
      if not Value.Use_Crumbs.Is_Null then
         Into.Write_Entity ("useCrumbs", Value.Use_Crumbs);
      end if;
      if not Value.Use_Security.Is_Null then
         Into.Write_Entity ("useSecurity", Value.Use_Security);
      end if;
      Serialize (Into, "views", Value.Views);
      Into.End_Entity (Name);
   end Serialize;

   procedure Serialize (Into  : in out Swagger.Streams.Output_Stream'Class;
                        Name  : in String;
                        Value : in Hudson_Type_Vectors.Vector) is
   begin
      Into.Start_Array (Name);
      for Item of Value loop
         Serialize (Into, "", Item);
      end loop;
      Into.End_Array (Name);
   end Serialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : out .Models.Hudson_Type) is
      Object : Swagger.Value_Type;
   begin
      Swagger.Streams.Deserialize (From, Name, Object);
      Swagger.Streams.Deserialize (Object, "_class", Value.P__class);
      Deserialize (Object, "assignedLabels", Value.Assigned_Labels);
      Swagger.Streams.Deserialize (Object, "mode", Value.Mode);
      Swagger.Streams.Deserialize (Object, "nodeDescription", Value.Node_Description);
      Swagger.Streams.Deserialize (Object, "nodeName", Value.Node_Name);
      Swagger.Streams.Deserialize (Object, "numExecutors", Value.Num_Executors);
      Swagger.Streams.Deserialize (Object, "description", Value.Description);
      Deserialize (Object, "jobs", Value.Jobs);
      Deserialize (Object, "primaryView", Value.Primary_View);
      Swagger.Streams.Deserialize (Object, "quietingDown", Value.Quieting_Down);
      Swagger.Streams.Deserialize (Object, "slaveAgentPort", Value.Slave_Agent_Port);
      Deserialize (Object, "unlabeledLoad", Value.Unlabeled_Load);
      Swagger.Streams.Deserialize (Object, "useCrumbs", Value.Use_Crumbs);
      Swagger.Streams.Deserialize (Object, "useSecurity", Value.Use_Security);
      Deserialize (Object, "views", Value.Views);
   end Deserialize;

   procedure Deserialize (From  : in Swagger.Value_Type;
                          Name  : in String;
                          Value : in out Hudson_Type_Vectors.Vector) is
      List : Swagger.Value_Array_Type;
      Item : .Models.Hudson_Type;
   begin
      Value.Clear;
      Swagger.Streams.Deserialize (From, Name, List);
      for Data of List loop
         Deserialize (Data, "", Item);
         Value.Append (Item);
      end loop;
   end Deserialize;


end .Models;
