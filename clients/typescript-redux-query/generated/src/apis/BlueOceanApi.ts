// tslint:disable
/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../runtime';
import {
    BranchImpl,
    BranchImplFromJSON,
    BranchImplToJSON,
    FavoriteImpl,
    FavoriteImplFromJSON,
    FavoriteImplToJSON,
    GithubOrganization,
    GithubOrganizationFromJSON,
    GithubOrganizationToJSON,
    GithubScm,
    GithubScmFromJSON,
    GithubScmToJSON,
    MultibranchPipeline,
    MultibranchPipelineFromJSON,
    MultibranchPipelineToJSON,
    Organisation,
    OrganisationFromJSON,
    OrganisationToJSON,
    Pipeline,
    PipelineFromJSON,
    PipelineToJSON,
    PipelineActivity,
    PipelineActivityFromJSON,
    PipelineActivityToJSON,
    PipelineFolderImpl,
    PipelineFolderImplFromJSON,
    PipelineFolderImplToJSON,
    PipelineImpl,
    PipelineImplFromJSON,
    PipelineImplToJSON,
    PipelineRun,
    PipelineRunFromJSON,
    PipelineRunToJSON,
    PipelineRunNode,
    PipelineRunNodeFromJSON,
    PipelineRunNodeToJSON,
    PipelineStepImpl,
    PipelineStepImplFromJSON,
    PipelineStepImplToJSON,
    QueueItemImpl,
    QueueItemImplFromJSON,
    QueueItemImplToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface DeletePipelineQueueItemRequest {
    organization: string;
    pipeline: string;
    queue: string;
}

export interface GetAuthenticatedUserRequest {
    organization: string;
}

export interface GetClassesRequest {
    _class: string;
}

export interface GetJsonWebKeyRequest {
    key: number;
}

export interface GetJsonWebTokenRequest {
    expiryTimeInMins?: number;
    maxExpiryTimeInMins?: number;
}

export interface GetOrganisationRequest {
    organization: string;
}

export interface GetPipelineRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineActivitiesRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineBranchRequest {
    organization: string;
    pipeline: string;
    branch: string;
}

export interface GetPipelineBranchRunRequest {
    organization: string;
    pipeline: string;
    branch: string;
    run: string;
}

export interface GetPipelineBranchesRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineFolderRequest {
    organization: string;
    folder: string;
}

export interface GetPipelineFolderPipelineRequest {
    organization: string;
    pipeline: string;
    folder: string;
}

export interface GetPipelineQueueRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface GetPipelineRunLogRequest {
    organization: string;
    pipeline: string;
    run: string;
    start?: number;
    download?: boolean;
}

export interface GetPipelineRunNodeRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
}

export interface GetPipelineRunNodeStepRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
    step: string;
}

export interface GetPipelineRunNodeStepLogRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
    step: string;
}

export interface GetPipelineRunNodeStepsRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
}

export interface GetPipelineRunNodesRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface GetPipelineRunsRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelinesRequest {
    organization: string;
}

export interface GetSCMRequest {
    organization: string;
    scm: string;
}

export interface GetSCMOrganisationRepositoriesRequest {
    organization: string;
    scm: string;
    scmOrganisation: string;
    credentialId?: string;
    pageSize?: number;
    pageNumber?: number;
}

export interface GetSCMOrganisationRepositoryRequest {
    organization: string;
    scm: string;
    scmOrganisation: string;
    repository: string;
    credentialId?: string;
}

export interface GetSCMOrganisationsRequest {
    organization: string;
    scm: string;
    credentialId?: string;
}

export interface GetUserRequest {
    organization: string;
    user: string;
}

export interface GetUserFavoritesRequest {
    user: string;
}

export interface GetUsersRequest {
    organization: string;
}

export interface PostPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface PostPipelineRunsRequest {
    organization: string;
    pipeline: string;
}

export interface PutPipelineFavoriteRequest {
    organization: string;
    pipeline: string;
    body: boolean;
}

export interface PutPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
    blocking?: string;
    timeOutInSecs?: number;
}

export interface SearchRequest {
    q: string;
}

export interface SearchClassesRequest {
    q: string;
}


/**
 * Delete queue item from an organization pipeline queue
 */
function deletePipelineQueueItemRaw<T>(requestParameters: DeletePipelineQueueItemRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling deletePipelineQueueItem.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling deletePipelineQueueItem.');
    }

    if (requestParameters.queue === null || requestParameters.queue === undefined) {
        throw new runtime.RequiredError('queue','Required parameter requestParameters.queue was null or undefined when calling deletePipelineQueueItem.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"queue"}}`, encodeURIComponent(String(requestParameters.queue))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Delete queue item from an organization pipeline queue
*/
export function deletePipelineQueueItem<T>(requestParameters: DeletePipelineQueueItemRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return deletePipelineQueueItemRaw(requestParameters, requestConfig);
}

/**
 * Retrieve authenticated user details for an organization
 */
function getAuthenticatedUserRaw<T>(requestParameters: GetAuthenticatedUserRequest, requestConfig: runtime.TypedQueryConfig<T, User> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getAuthenticatedUser.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/user/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve authenticated user details for an organization
*/
export function getAuthenticatedUser<T>(requestParameters: GetAuthenticatedUserRequest, requestConfig?: runtime.TypedQueryConfig<T, User>): QueryConfig<T> {
    return getAuthenticatedUserRaw(requestParameters, requestConfig);
}

/**
 * Get a list of class names supported by a given class
 */
function getClassesRaw<T>(requestParameters: GetClassesRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    if (requestParameters._class === null || requestParameters._class === undefined) {
        throw new runtime.RequiredError('_class','Required parameter requestParameters._class was null or undefined when calling getClasses.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/classes/{class}`.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters._class))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Get a list of class names supported by a given class
*/
export function getClasses<T>(requestParameters: GetClassesRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return getClassesRaw(requestParameters, requestConfig);
}

/**
 * Retrieve JSON Web Key
 */
function getJsonWebKeyRaw<T>(requestParameters: GetJsonWebKeyRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    if (requestParameters.key === null || requestParameters.key === undefined) {
        throw new runtime.RequiredError('key','Required parameter requestParameters.key was null or undefined when calling getJsonWebKey.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/jwt-auth/jwks/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters.key))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Retrieve JSON Web Key
*/
export function getJsonWebKey<T>(requestParameters: GetJsonWebKeyRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return getJsonWebKeyRaw(requestParameters, requestConfig);
}

/**
 * Retrieve JSON Web Token
 */
function getJsonWebTokenRaw<T>(requestParameters: GetJsonWebTokenRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.expiryTimeInMins !== undefined) {
        queryParameters['expiryTimeInMins'] = requestParameters.expiryTimeInMins;
    }


    if (requestParameters.maxExpiryTimeInMins !== undefined) {
        queryParameters['maxExpiryTimeInMins'] = requestParameters.maxExpiryTimeInMins;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/jwt-auth/token`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Retrieve JSON Web Token
*/
export function getJsonWebToken<T>(requestParameters: GetJsonWebTokenRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return getJsonWebTokenRaw(requestParameters, requestConfig);
}

/**
 * Retrieve organization details
 */
function getOrganisationRaw<T>(requestParameters: GetOrganisationRequest, requestConfig: runtime.TypedQueryConfig<T, Organisation> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getOrganisation.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OrganisationFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve organization details
*/
export function getOrganisation<T>(requestParameters: GetOrganisationRequest, requestConfig?: runtime.TypedQueryConfig<T, Organisation>): QueryConfig<T> {
    return getOrganisationRaw(requestParameters, requestConfig);
}

/**
 * Retrieve all organizations details
 */
function getOrganisationsRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Organisation>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OrganisationFromJSON), text);
    }

    return config;
}

/**
* Retrieve all organizations details
*/
export function getOrganisations<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Organisation>>): QueryConfig<T> {
    return getOrganisationsRaw( requestConfig);
}

/**
 * Retrieve pipeline details for an organization
 */
function getPipelineRaw<T>(requestParameters: GetPipelineRequest, requestConfig: runtime.TypedQueryConfig<T, Pipeline> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipeline.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipeline.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PipelineFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve pipeline details for an organization
*/
export function getPipeline<T>(requestParameters: GetPipelineRequest, requestConfig?: runtime.TypedQueryConfig<T, Pipeline>): QueryConfig<T> {
    return getPipelineRaw(requestParameters, requestConfig);
}

/**
 * Retrieve all activities details for an organization pipeline
 */
function getPipelineActivitiesRaw<T>(requestParameters: GetPipelineActivitiesRequest, requestConfig: runtime.TypedQueryConfig<T, Array<PipelineActivity>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineActivities.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineActivities.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PipelineActivityFromJSON), text);
    }

    return config;
}

/**
* Retrieve all activities details for an organization pipeline
*/
export function getPipelineActivities<T>(requestParameters: GetPipelineActivitiesRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<PipelineActivity>>): QueryConfig<T> {
    return getPipelineActivitiesRaw(requestParameters, requestConfig);
}

/**
 * Retrieve branch details for an organization pipeline
 */
function getPipelineBranchRaw<T>(requestParameters: GetPipelineBranchRequest, requestConfig: runtime.TypedQueryConfig<T, BranchImpl> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineBranch.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineBranch.');
    }

    if (requestParameters.branch === null || requestParameters.branch === undefined) {
        throw new runtime.RequiredError('branch','Required parameter requestParameters.branch was null or undefined when calling getPipelineBranch.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"branch"}}`, encodeURIComponent(String(requestParameters.branch))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(BranchImplFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve branch details for an organization pipeline
*/
export function getPipelineBranch<T>(requestParameters: GetPipelineBranchRequest, requestConfig?: runtime.TypedQueryConfig<T, BranchImpl>): QueryConfig<T> {
    return getPipelineBranchRaw(requestParameters, requestConfig);
}

/**
 * Retrieve branch run details for an organization pipeline
 */
function getPipelineBranchRunRaw<T>(requestParameters: GetPipelineBranchRunRequest, requestConfig: runtime.TypedQueryConfig<T, PipelineRun> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineBranchRun.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineBranchRun.');
    }

    if (requestParameters.branch === null || requestParameters.branch === undefined) {
        throw new runtime.RequiredError('branch','Required parameter requestParameters.branch was null or undefined when calling getPipelineBranchRun.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling getPipelineBranchRun.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"branch"}}`, encodeURIComponent(String(requestParameters.branch))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PipelineRunFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve branch run details for an organization pipeline
*/
export function getPipelineBranchRun<T>(requestParameters: GetPipelineBranchRunRequest, requestConfig?: runtime.TypedQueryConfig<T, PipelineRun>): QueryConfig<T> {
    return getPipelineBranchRunRaw(requestParameters, requestConfig);
}

/**
 * Retrieve all branches details for an organization pipeline
 */
function getPipelineBranchesRaw<T>(requestParameters: GetPipelineBranchesRequest, requestConfig: runtime.TypedQueryConfig<T, MultibranchPipeline> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineBranches.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineBranches.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(MultibranchPipelineFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve all branches details for an organization pipeline
*/
export function getPipelineBranches<T>(requestParameters: GetPipelineBranchesRequest, requestConfig?: runtime.TypedQueryConfig<T, MultibranchPipeline>): QueryConfig<T> {
    return getPipelineBranchesRaw(requestParameters, requestConfig);
}

/**
 * Retrieve pipeline folder for an organization
 */
function getPipelineFolderRaw<T>(requestParameters: GetPipelineFolderRequest, requestConfig: runtime.TypedQueryConfig<T, PipelineFolderImpl> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineFolder.');
    }

    if (requestParameters.folder === null || requestParameters.folder === undefined) {
        throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getPipelineFolder.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{folder}/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PipelineFolderImplFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve pipeline folder for an organization
*/
export function getPipelineFolder<T>(requestParameters: GetPipelineFolderRequest, requestConfig?: runtime.TypedQueryConfig<T, PipelineFolderImpl>): QueryConfig<T> {
    return getPipelineFolderRaw(requestParameters, requestConfig);
}

/**
 * Retrieve pipeline details for an organization folder
 */
function getPipelineFolderPipelineRaw<T>(requestParameters: GetPipelineFolderPipelineRequest, requestConfig: runtime.TypedQueryConfig<T, PipelineImpl> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineFolderPipeline.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineFolderPipeline.');
    }

    if (requestParameters.folder === null || requestParameters.folder === undefined) {
        throw new runtime.RequiredError('folder','Required parameter requestParameters.folder was null or undefined when calling getPipelineFolderPipeline.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters.folder))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PipelineImplFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve pipeline details for an organization folder
*/
export function getPipelineFolderPipeline<T>(requestParameters: GetPipelineFolderPipelineRequest, requestConfig?: runtime.TypedQueryConfig<T, PipelineImpl>): QueryConfig<T> {
    return getPipelineFolderPipelineRaw(requestParameters, requestConfig);
}

/**
 * Retrieve queue details for an organization pipeline
 */
function getPipelineQueueRaw<T>(requestParameters: GetPipelineQueueRequest, requestConfig: runtime.TypedQueryConfig<T, Array<QueueItemImpl>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineQueue.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineQueue.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(QueueItemImplFromJSON), text);
    }

    return config;
}

/**
* Retrieve queue details for an organization pipeline
*/
export function getPipelineQueue<T>(requestParameters: GetPipelineQueueRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<QueueItemImpl>>): QueryConfig<T> {
    return getPipelineQueueRaw(requestParameters, requestConfig);
}

/**
 * Retrieve run details for an organization pipeline
 */
function getPipelineRunRaw<T>(requestParameters: GetPipelineRunRequest, requestConfig: runtime.TypedQueryConfig<T, PipelineRun> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineRun.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineRun.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling getPipelineRun.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PipelineRunFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve run details for an organization pipeline
*/
export function getPipelineRun<T>(requestParameters: GetPipelineRunRequest, requestConfig?: runtime.TypedQueryConfig<T, PipelineRun>): QueryConfig<T> {
    return getPipelineRunRaw(requestParameters, requestConfig);
}

/**
 * Get log for a pipeline run
 */
function getPipelineRunLogRaw<T>(requestParameters: GetPipelineRunLogRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineRunLog.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineRunLog.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling getPipelineRunLog.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.start !== undefined) {
        queryParameters['start'] = requestParameters.start;
    }


    if (requestParameters.download !== undefined) {
        queryParameters['download'] = requestParameters.download;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Get log for a pipeline run
*/
export function getPipelineRunLog<T>(requestParameters: GetPipelineRunLogRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return getPipelineRunLogRaw(requestParameters, requestConfig);
}

/**
 * Retrieve run node details for an organization pipeline
 */
function getPipelineRunNodeRaw<T>(requestParameters: GetPipelineRunNodeRequest, requestConfig: runtime.TypedQueryConfig<T, PipelineRunNode> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineRunNode.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineRunNode.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling getPipelineRunNode.');
    }

    if (requestParameters.node === null || requestParameters.node === undefined) {
        throw new runtime.RequiredError('node','Required parameter requestParameters.node was null or undefined when calling getPipelineRunNode.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters.node))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PipelineRunNodeFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve run node details for an organization pipeline
*/
export function getPipelineRunNode<T>(requestParameters: GetPipelineRunNodeRequest, requestConfig?: runtime.TypedQueryConfig<T, PipelineRunNode>): QueryConfig<T> {
    return getPipelineRunNodeRaw(requestParameters, requestConfig);
}

/**
 * Retrieve run node details for an organization pipeline
 */
function getPipelineRunNodeStepRaw<T>(requestParameters: GetPipelineRunNodeStepRequest, requestConfig: runtime.TypedQueryConfig<T, PipelineStepImpl> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineRunNodeStep.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineRunNodeStep.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling getPipelineRunNodeStep.');
    }

    if (requestParameters.node === null || requestParameters.node === undefined) {
        throw new runtime.RequiredError('node','Required parameter requestParameters.node was null or undefined when calling getPipelineRunNodeStep.');
    }

    if (requestParameters.step === null || requestParameters.step === undefined) {
        throw new runtime.RequiredError('step','Required parameter requestParameters.step was null or undefined when calling getPipelineRunNodeStep.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters.node))).replace(`{${"step"}}`, encodeURIComponent(String(requestParameters.step))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PipelineStepImplFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve run node details for an organization pipeline
*/
export function getPipelineRunNodeStep<T>(requestParameters: GetPipelineRunNodeStepRequest, requestConfig?: runtime.TypedQueryConfig<T, PipelineStepImpl>): QueryConfig<T> {
    return getPipelineRunNodeStepRaw(requestParameters, requestConfig);
}

/**
 * Get log for a pipeline run node step
 */
function getPipelineRunNodeStepLogRaw<T>(requestParameters: GetPipelineRunNodeStepLogRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineRunNodeStepLog.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineRunNodeStepLog.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling getPipelineRunNodeStepLog.');
    }

    if (requestParameters.node === null || requestParameters.node === undefined) {
        throw new runtime.RequiredError('node','Required parameter requestParameters.node was null or undefined when calling getPipelineRunNodeStepLog.');
    }

    if (requestParameters.step === null || requestParameters.step === undefined) {
        throw new runtime.RequiredError('step','Required parameter requestParameters.step was null or undefined when calling getPipelineRunNodeStepLog.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters.node))).replace(`{${"step"}}`, encodeURIComponent(String(requestParameters.step))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Get log for a pipeline run node step
*/
export function getPipelineRunNodeStepLog<T>(requestParameters: GetPipelineRunNodeStepLogRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return getPipelineRunNodeStepLogRaw(requestParameters, requestConfig);
}

/**
 * Retrieve run node steps details for an organization pipeline
 */
function getPipelineRunNodeStepsRaw<T>(requestParameters: GetPipelineRunNodeStepsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<PipelineStepImpl>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineRunNodeSteps.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineRunNodeSteps.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling getPipelineRunNodeSteps.');
    }

    if (requestParameters.node === null || requestParameters.node === undefined) {
        throw new runtime.RequiredError('node','Required parameter requestParameters.node was null or undefined when calling getPipelineRunNodeSteps.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters.node))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PipelineStepImplFromJSON), text);
    }

    return config;
}

/**
* Retrieve run node steps details for an organization pipeline
*/
export function getPipelineRunNodeSteps<T>(requestParameters: GetPipelineRunNodeStepsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<PipelineStepImpl>>): QueryConfig<T> {
    return getPipelineRunNodeStepsRaw(requestParameters, requestConfig);
}

/**
 * Retrieve run nodes details for an organization pipeline
 */
function getPipelineRunNodesRaw<T>(requestParameters: GetPipelineRunNodesRequest, requestConfig: runtime.TypedQueryConfig<T, Array<PipelineRunNode>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineRunNodes.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineRunNodes.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling getPipelineRunNodes.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PipelineRunNodeFromJSON), text);
    }

    return config;
}

/**
* Retrieve run nodes details for an organization pipeline
*/
export function getPipelineRunNodes<T>(requestParameters: GetPipelineRunNodesRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<PipelineRunNode>>): QueryConfig<T> {
    return getPipelineRunNodesRaw(requestParameters, requestConfig);
}

/**
 * Retrieve all runs details for an organization pipeline
 */
function getPipelineRunsRaw<T>(requestParameters: GetPipelineRunsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<PipelineRun>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelineRuns.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling getPipelineRuns.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PipelineRunFromJSON), text);
    }

    return config;
}

/**
* Retrieve all runs details for an organization pipeline
*/
export function getPipelineRuns<T>(requestParameters: GetPipelineRunsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<PipelineRun>>): QueryConfig<T> {
    return getPipelineRunsRaw(requestParameters, requestConfig);
}

/**
 * Retrieve all pipelines details for an organization
 */
function getPipelinesRaw<T>(requestParameters: GetPipelinesRequest, requestConfig: runtime.TypedQueryConfig<T, Array<Pipeline>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getPipelines.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(PipelineFromJSON), text);
    }

    return config;
}

/**
* Retrieve all pipelines details for an organization
*/
export function getPipelines<T>(requestParameters: GetPipelinesRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<Pipeline>>): QueryConfig<T> {
    return getPipelinesRaw(requestParameters, requestConfig);
}

/**
 * Retrieve SCM details for an organization
 */
function getSCMRaw<T>(requestParameters: GetSCMRequest, requestConfig: runtime.TypedQueryConfig<T, GithubScm> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getSCM.');
    }

    if (requestParameters.scm === null || requestParameters.scm === undefined) {
        throw new runtime.RequiredError('scm','Required parameter requestParameters.scm was null or undefined when calling getSCM.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/scm/{scm}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"scm"}}`, encodeURIComponent(String(requestParameters.scm))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(GithubScmFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve SCM details for an organization
*/
export function getSCM<T>(requestParameters: GetSCMRequest, requestConfig?: runtime.TypedQueryConfig<T, GithubScm>): QueryConfig<T> {
    return getSCMRaw(requestParameters, requestConfig);
}

/**
 * Retrieve SCM organization repositories details for an organization
 */
function getSCMOrganisationRepositoriesRaw<T>(requestParameters: GetSCMOrganisationRepositoriesRequest, requestConfig: runtime.TypedQueryConfig<T, Array<GithubOrganization>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getSCMOrganisationRepositories.');
    }

    if (requestParameters.scm === null || requestParameters.scm === undefined) {
        throw new runtime.RequiredError('scm','Required parameter requestParameters.scm was null or undefined when calling getSCMOrganisationRepositories.');
    }

    if (requestParameters.scmOrganisation === null || requestParameters.scmOrganisation === undefined) {
        throw new runtime.RequiredError('scmOrganisation','Required parameter requestParameters.scmOrganisation was null or undefined when calling getSCMOrganisationRepositories.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.credentialId !== undefined) {
        queryParameters['credentialId'] = requestParameters.credentialId;
    }


    if (requestParameters.pageSize !== undefined) {
        queryParameters['pageSize'] = requestParameters.pageSize;
    }


    if (requestParameters.pageNumber !== undefined) {
        queryParameters['pageNumber'] = requestParameters.pageNumber;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"scm"}}`, encodeURIComponent(String(requestParameters.scm))).replace(`{${"scmOrganisation"}}`, encodeURIComponent(String(requestParameters.scmOrganisation))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(GithubOrganizationFromJSON), text);
    }

    return config;
}

/**
* Retrieve SCM organization repositories details for an organization
*/
export function getSCMOrganisationRepositories<T>(requestParameters: GetSCMOrganisationRepositoriesRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<GithubOrganization>>): QueryConfig<T> {
    return getSCMOrganisationRepositoriesRaw(requestParameters, requestConfig);
}

/**
 * Retrieve SCM organization repository details for an organization
 */
function getSCMOrganisationRepositoryRaw<T>(requestParameters: GetSCMOrganisationRepositoryRequest, requestConfig: runtime.TypedQueryConfig<T, Array<GithubOrganization>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getSCMOrganisationRepository.');
    }

    if (requestParameters.scm === null || requestParameters.scm === undefined) {
        throw new runtime.RequiredError('scm','Required parameter requestParameters.scm was null or undefined when calling getSCMOrganisationRepository.');
    }

    if (requestParameters.scmOrganisation === null || requestParameters.scmOrganisation === undefined) {
        throw new runtime.RequiredError('scmOrganisation','Required parameter requestParameters.scmOrganisation was null or undefined when calling getSCMOrganisationRepository.');
    }

    if (requestParameters.repository === null || requestParameters.repository === undefined) {
        throw new runtime.RequiredError('repository','Required parameter requestParameters.repository was null or undefined when calling getSCMOrganisationRepository.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.credentialId !== undefined) {
        queryParameters['credentialId'] = requestParameters.credentialId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"scm"}}`, encodeURIComponent(String(requestParameters.scm))).replace(`{${"scmOrganisation"}}`, encodeURIComponent(String(requestParameters.scmOrganisation))).replace(`{${"repository"}}`, encodeURIComponent(String(requestParameters.repository))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(GithubOrganizationFromJSON), text);
    }

    return config;
}

/**
* Retrieve SCM organization repository details for an organization
*/
export function getSCMOrganisationRepository<T>(requestParameters: GetSCMOrganisationRepositoryRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<GithubOrganization>>): QueryConfig<T> {
    return getSCMOrganisationRepositoryRaw(requestParameters, requestConfig);
}

/**
 * Retrieve SCM organizations details for an organization
 */
function getSCMOrganisationsRaw<T>(requestParameters: GetSCMOrganisationsRequest, requestConfig: runtime.TypedQueryConfig<T, Array<GithubOrganization>> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getSCMOrganisations.');
    }

    if (requestParameters.scm === null || requestParameters.scm === undefined) {
        throw new runtime.RequiredError('scm','Required parameter requestParameters.scm was null or undefined when calling getSCMOrganisations.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.credentialId !== undefined) {
        queryParameters['credentialId'] = requestParameters.credentialId;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/scm/{scm}/organizations`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"scm"}}`, encodeURIComponent(String(requestParameters.scm))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(GithubOrganizationFromJSON), text);
    }

    return config;
}

/**
* Retrieve SCM organizations details for an organization
*/
export function getSCMOrganisations<T>(requestParameters: GetSCMOrganisationsRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<GithubOrganization>>): QueryConfig<T> {
    return getSCMOrganisationsRaw(requestParameters, requestConfig);
}

/**
 * Retrieve user details for an organization
 */
function getUserRaw<T>(requestParameters: GetUserRequest, requestConfig: runtime.TypedQueryConfig<T, User> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getUser.');
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
        throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling getUser.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/users/{user}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve user details for an organization
*/
export function getUser<T>(requestParameters: GetUserRequest, requestConfig?: runtime.TypedQueryConfig<T, User>): QueryConfig<T> {
    return getUserRaw(requestParameters, requestConfig);
}

/**
 * Retrieve user favorites details for an organization
 */
function getUserFavoritesRaw<T>(requestParameters: GetUserFavoritesRequest, requestConfig: runtime.TypedQueryConfig<T, Array<FavoriteImpl>> = {}): QueryConfig<T> {
    if (requestParameters.user === null || requestParameters.user === undefined) {
        throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling getUserFavorites.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/users/{user}/favorites`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters.user))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(FavoriteImplFromJSON), text);
    }

    return config;
}

/**
* Retrieve user favorites details for an organization
*/
export function getUserFavorites<T>(requestParameters: GetUserFavoritesRequest, requestConfig?: runtime.TypedQueryConfig<T, Array<FavoriteImpl>>): QueryConfig<T> {
    return getUserFavoritesRaw(requestParameters, requestConfig);
}

/**
 * Retrieve users details for an organization
 */
function getUsersRaw<T>(requestParameters: GetUsersRequest, requestConfig: runtime.TypedQueryConfig<T, User> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling getUsers.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/users/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserFromJSON(body), text);
    }

    return config;
}

/**
* Retrieve users details for an organization
*/
export function getUsers<T>(requestParameters: GetUsersRequest, requestConfig?: runtime.TypedQueryConfig<T, User>): QueryConfig<T> {
    return getUsersRaw(requestParameters, requestConfig);
}

/**
 * Replay an organization pipeline run
 */
function postPipelineRunRaw<T>(requestParameters: PostPipelineRunRequest, requestConfig: runtime.TypedQueryConfig<T, QueueItemImpl> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling postPipelineRun.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling postPipelineRun.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling postPipelineRun.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(QueueItemImplFromJSON(body), text);
    }

    return config;
}

/**
* Replay an organization pipeline run
*/
export function postPipelineRun<T>(requestParameters: PostPipelineRunRequest, requestConfig?: runtime.TypedQueryConfig<T, QueueItemImpl>): QueryConfig<T> {
    return postPipelineRunRaw(requestParameters, requestConfig);
}

/**
 * Start a build for an organization pipeline
 */
function postPipelineRunsRaw<T>(requestParameters: PostPipelineRunsRequest, requestConfig: runtime.TypedQueryConfig<T, QueueItemImpl> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling postPipelineRuns.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling postPipelineRuns.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(QueueItemImplFromJSON(body), text);
    }

    return config;
}

/**
* Start a build for an organization pipeline
*/
export function postPipelineRuns<T>(requestParameters: PostPipelineRunsRequest, requestConfig?: runtime.TypedQueryConfig<T, QueueItemImpl>): QueryConfig<T> {
    return postPipelineRunsRaw(requestParameters, requestConfig);
}

/**
 * Favorite/unfavorite a pipeline
 */
function putPipelineFavoriteRaw<T>(requestParameters: PutPipelineFavoriteRequest, requestConfig: runtime.TypedQueryConfig<T, FavoriteImpl> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling putPipelineFavorite.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling putPipelineFavorite.');
    }

    if (requestParameters.body === null || requestParameters.body === undefined) {
        throw new runtime.RequiredError('body','Required parameter requestParameters.body was null or undefined when calling putPipelineFavorite.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || requestParameters.body as any,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(FavoriteImplFromJSON(body), text);
    }

    return config;
}

/**
* Favorite/unfavorite a pipeline
*/
export function putPipelineFavorite<T>(requestParameters: PutPipelineFavoriteRequest, requestConfig?: runtime.TypedQueryConfig<T, FavoriteImpl>): QueryConfig<T> {
    return putPipelineFavoriteRaw(requestParameters, requestConfig);
}

/**
 * Stop a build of an organization pipeline
 */
function putPipelineRunRaw<T>(requestParameters: PutPipelineRunRequest, requestConfig: runtime.TypedQueryConfig<T, PipelineRun> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling putPipelineRun.');
    }

    if (requestParameters.pipeline === null || requestParameters.pipeline === undefined) {
        throw new runtime.RequiredError('pipeline','Required parameter requestParameters.pipeline was null or undefined when calling putPipelineRun.');
    }

    if (requestParameters.run === null || requestParameters.run === undefined) {
        throw new runtime.RequiredError('run','Required parameter requestParameters.run was null or undefined when calling putPipelineRun.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.blocking !== undefined) {
        queryParameters['blocking'] = requestParameters.blocking;
    }


    if (requestParameters.timeOutInSecs !== undefined) {
        queryParameters['timeOutInSecs'] = requestParameters.timeOutInSecs;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters.organization))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters.pipeline))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters.run))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(PipelineRunFromJSON(body), text);
    }

    return config;
}

/**
* Stop a build of an organization pipeline
*/
export function putPipelineRun<T>(requestParameters: PutPipelineRunRequest, requestConfig?: runtime.TypedQueryConfig<T, PipelineRun>): QueryConfig<T> {
    return putPipelineRunRaw(requestParameters, requestConfig);
}

/**
 * Search for any resource details
 */
function searchRaw<T>(requestParameters: SearchRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    if (requestParameters.q === null || requestParameters.q === undefined) {
        throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling search.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/search/`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Search for any resource details
*/
export function search<T>(requestParameters: SearchRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return searchRaw(requestParameters, requestConfig);
}

/**
 * Get classes details
 */
function searchClassesRaw<T>(requestParameters: SearchClassesRequest, requestConfig: runtime.TypedQueryConfig<T, string> = {}): QueryConfig<T> {
    if (requestParameters.q === null || requestParameters.q === undefined) {
        throw new runtime.RequiredError('q','Required parameter requestParameters.q was null or undefined when calling searchClasses.');
    }

    let queryParameters = null;

    queryParameters = {};


    if (requestParameters.q !== undefined) {
        queryParameters['q'] = requestParameters.q;
    }

    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    meta.authType = ['basic'];
    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/blue/rest/classes/`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        throw "OH NO";
    }

    return config;
}

/**
* Get classes details
*/
export function searchClasses<T>(requestParameters: SearchClassesRequest, requestConfig?: runtime.TypedQueryConfig<T, string>): QueryConfig<T> {
    return searchClassesRaw(requestParameters, requestConfig);
}

