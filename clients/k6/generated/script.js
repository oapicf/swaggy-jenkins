/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * Generator version: 7.12.0
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "/";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.
let jenkinsCrumb = "TODO_EDIT_THE_JENKINS-CRUMB";
let contentType = "TODO_EDIT_THE_CONTENT-TYPE";

export default function() {
    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineQueue
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/queue`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved queue details": (r) => r.status === 200
            });
        }
    });

    group("/job/{name}/build", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let json = 'TODO_EDIT_THE_JSON'; // specify value as there is no example value for this parameter in OpenAPI spec
        let token = 'TODO_EDIT_THE_TOKEN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: postJobBuild
        {
            let url = BASE_URL + `/job/${name}/build?json=${json}&token=${token}`;
            let params = {
                headers: {
                    "Jenkins-Crumb": `${jenkinsCrumb}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully built the job (backward compatibility for older versions of Jenkins)": (r) => r.status === 200
            });
            check(request, {
                "Successfully built the job": (r) => r.status === 201
            });
        }
    });

    group("/job/{name}/doDelete", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: postJobDelete
        {
            let url = BASE_URL + `/job/${name}/doDelete`;
            let params = {
                headers: {
                    "Jenkins-Crumb": `${jenkinsCrumb}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully deleted the job": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineActivities
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/activities`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved all activities details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let node = 'TODO_EDIT_THE_NODE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec
        let step = 'TODO_EDIT_THE_STEP'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineRunNodeStep
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes/${node}/steps/${step}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved run node step details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/", () => {
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelines
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved pipelines details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/scm/{scm}", () => {
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let scm = 'TODO_EDIT_THE_SCM'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getSCM
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/scm/${scm}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved SCM details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let node = 'TODO_EDIT_THE_NODE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineRunNodeSteps
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes/${node}/steps`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved run node steps details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/scm/{scm}/organizations", () => {
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let credentialId = 'TODO_EDIT_THE_CREDENTIALID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let scm = 'TODO_EDIT_THE_SCM'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getSCMOrganisations
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/scm/${scm}/organizations?credentialId=${credentialId}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved SCM organizations details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories", () => {
        let pageNumber = 'TODO_EDIT_THE_PAGENUMBER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let credentialId = 'TODO_EDIT_THE_CREDENTIALID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let pageSize = 'TODO_EDIT_THE_PAGESIZE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let scmOrganisation = 'TODO_EDIT_THE_SCMORGANISATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let scm = 'TODO_EDIT_THE_SCM'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getSCMOrganisationRepositories
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/scm/${scm}/organizations/${scmOrganisation}/repositories?credentialId=${credentialId}&pageSize=${pageSize}&pageNumber=${pageNumber}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved SCM organization repositories details": (r) => r.status === 200
            });
        }
    });

    group("/createItem", () => {
        let mode = 'TODO_EDIT_THE_MODE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let from = 'TODO_EDIT_THE_FROM'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: postCreateItem
        {
            let url = BASE_URL + `/createItem?name=${name}&from=${from}&mode=${mode}`;
            let params = {
                headers: {
                    "Content-Type": "application/json", "Jenkins-Crumb": `${jenkinsCrumb}`, "Content-Type": `${contentType}`, "Accept": "*/*"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully created a new job": (r) => r.status === 200
            });
        }
    });

    group("/job/{name}/lastBuild/api/json", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getJobLastBuild
        {
            let url = BASE_URL + `/job/${name}/lastBuild/api/json`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved job's last build details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/users/{user}", () => {
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let user = 'TODO_EDIT_THE_USER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getUser
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/users/${user}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved users details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: putPipelineFavorite
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/favorite`;
            let params = {
                headers: {
                    "Content-Type": "application/json", "Accept": "application/json"
                }
            };
            let request = http.put(url, params);

            check(request, {
                "Successfully favorited/unfavorited a pipeline": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/classes/", () => {
        let q = 'TODO_EDIT_THE_Q'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: searchClasses
        {
            let url = BASE_URL + `/blue/rest/classes/?q=${q}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved search result": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineRun
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved run details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/classes/{class}", () => {
        let class = 'TODO_EDIT_THE_CLASS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getClasses
        {
            let url = BASE_URL + `/blue/rest/classes/${class}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved class names": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let blocking = 'TODO_EDIT_THE_BLOCKING'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec
        let timeOutInSecs = 'TODO_EDIT_THE_TIMEOUTINSECS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: putPipelineRun
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/stop?blocking=${blocking}&timeOutInSecs=${timeOutInSecs}`;
            let request = http.put(url);

            check(request, {
                "Successfully stopped a build": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/users/", () => {
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getUsers
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/users/`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved users details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{folder}/", () => {
        let folder = 'TODO_EDIT_THE_FOLDER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineFolder
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${folder}/`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved folder details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineRuns
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved runs details": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: postPipelineRuns
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs`;
            let request = http.post(url);

            check(request, {
                "Successfully started a build": (r) => r.status === 200
            });
        }
    });

    group("/crumbIssuer/api/json", () => {

        // Request No. 1: getCrumb
        {
            let url = BASE_URL + `/crumbIssuer/api/json`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved CSRF protection token": (r) => r.status === 200
            });
        }
    });

    group("/createView", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: postCreateView
        {
            let url = BASE_URL + `/createView?name=${name}`;
            let params = {
                headers: {
                    "Content-Type": "application/json", "Jenkins-Crumb": `${jenkinsCrumb}`, "Content-Type": `${contentType}`, "Accept": "*/*"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully created the view": (r) => r.status === 200
            });
        }
    });

    group("/jwt-auth/token", () => {
        let maxExpiryTimeInMins = 'TODO_EDIT_THE_MAXEXPIRYTIMEINMINS'; // specify value as there is no example value for this parameter in OpenAPI spec
        let expiryTimeInMins = 'TODO_EDIT_THE_EXPIRYTIMEINMINS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getJsonWebToken
        {
            let url = BASE_URL + `/jwt-auth/token?expiryTimeInMins=${expiryTimeInMins}&maxExpiryTimeInMins=${maxExpiryTimeInMins}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved JWT token": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/user/", () => {
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getAuthenticatedUser
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/user/`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved authenticated user details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}", () => {
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let credentialId = 'TODO_EDIT_THE_CREDENTIALID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let scmOrganisation = 'TODO_EDIT_THE_SCMORGANISATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let scm = 'TODO_EDIT_THE_SCM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let repository = 'TODO_EDIT_THE_REPOSITORY'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getSCMOrganisationRepository
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/scm/${scm}/organizations/${scmOrganisation}/repositories/${repository}?credentialId=${credentialId}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved SCM organizations details": (r) => r.status === 200
            });
        }
    });

    group("/job/{name}/enable", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: postJobEnable
        {
            let url = BASE_URL + `/job/${name}/enable`;
            let params = {
                headers: {
                    "Jenkins-Crumb": `${jenkinsCrumb}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully enabled the job": (r) => r.status === 200
            });
        }
    });

    group("/jwt-auth/jwks/{key}", () => {
        let key = 'TODO_EDIT_THE_KEY'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getJsonWebKey
        {
            let url = BASE_URL + `/jwt-auth/jwks/${key}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved JWT token": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let download = 'TODO_EDIT_THE_DOWNLOAD'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let start = 'TODO_EDIT_THE_START'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineRunLog
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/log?start=${start}&download=${download}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved pipeline run log": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/users/{user}/favorites", () => {
        let user = 'TODO_EDIT_THE_USER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getUserFavorites
        {
            let url = BASE_URL + `/blue/rest/users/${user}/favorites`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved users favorites details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/search/", () => {
        let q = 'TODO_EDIT_THE_Q'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: search
        {
            let url = BASE_URL + `/blue/rest/search/?q=${q}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved search result": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipeline
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved pipeline details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let node = 'TODO_EDIT_THE_NODE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineRunNode
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes/${node}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved run node details": (r) => r.status === 200
            });
        }
    });

    group("/job/{name}/api/json", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getJob
        {
            let url = BASE_URL + `/job/${name}/api/json`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved job details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/", () => {

        // Request No. 1: getOrganisations
        {
            let url = BASE_URL + `/blue/rest/organizations/`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved pipelines details": (r) => r.status === 200
            });
        }
    });

    group("/job/{name}/disable", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: postJobDisable
        {
            let url = BASE_URL + `/job/${name}/disable`;
            let params = {
                headers: {
                    "Jenkins-Crumb": `${jenkinsCrumb}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully disabled the job": (r) => r.status === 200
            });
        }
    });

    group("/view/{name}/config.xml", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getViewConfig
        {
            let url = BASE_URL + `/view/${name}/config.xml`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved view configuration in config.xml format": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: postViewConfig
        {
            let url = BASE_URL + `/view/${name}/config.xml`;
            let params = {
                headers: {
                    "Content-Type": "application/json", "Jenkins-Crumb": `${jenkinsCrumb}`, "Accept": "*/*"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully updated view configuration": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineRunNodes
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved run nodes details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let node = 'TODO_EDIT_THE_NODE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec
        let step = 'TODO_EDIT_THE_STEP'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineRunNodeStepLog
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes/${node}/steps/${step}/log`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved pipeline run node step log": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec
        let branch = 'TODO_EDIT_THE_BRANCH'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineBranchRun
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/branches/${branch}/runs/${run}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved run details": (r) => r.status === 200
            });
        }
    });

    group("/queue/api/json", () => {

        // Request No. 1: getQueue
        {
            let url = BASE_URL + `/queue/api/json`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved queue details": (r) => r.status === 200
            });
        }
    });

    group("/view/{name}/api/json", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getView
        {
            let url = BASE_URL + `/view/${name}/api/json`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved view details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let run = 'TODO_EDIT_THE_RUN'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: postPipelineRun
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/replay`;
            let request = http.post(url);

            check(request, {
                "Successfully replayed a pipeline run": (r) => r.status === 200
            });
        }
    });

    group("/queue/item/{number}/api/json", () => {
        let number = 'TODO_EDIT_THE_NUMBER'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getQueueItem
        {
            let url = BASE_URL + `/queue/item/${number}/api/json`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved queued item details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let branch = 'TODO_EDIT_THE_BRANCH'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineBranch
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/branches/${branch}/`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved branch details": (r) => r.status === 200
            });
        }
    });

    group("/computer/api/json", () => {
        let depth = 'TODO_EDIT_THE_DEPTH'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getComputer
        {
            let url = BASE_URL + `/computer/api/json?depth=${depth}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved computer details": (r) => r.status === 200
            });
        }
    });

    group("/job/{name}/lastBuild/stop", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: postJobLastBuildStop
        {
            let url = BASE_URL + `/job/${name}/lastBuild/stop`;
            let params = {
                headers: {
                    "Jenkins-Crumb": `${jenkinsCrumb}`, "Accept": "application/json"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully stopped the job": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let folder = 'TODO_EDIT_THE_FOLDER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineFolderPipeline
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${folder}/pipelines/${pipeline}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved pipeline details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}", () => {
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getOrganisation
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved pipeline details": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let queue = 'TODO_EDIT_THE_QUEUE'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: deletePipelineQueueItem
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/queue/${queue}`;
            let request = http.del(url);

            check(request, {
                "Successfully deleted queue item": (r) => r.status === 200
            });
        }
    });

    group("/job/{name}/config.xml", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getJobConfig
        {
            let url = BASE_URL + `/job/${name}/config.xml`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved job configuration in config.xml format": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: postJobConfig
        {
            let url = BASE_URL + `/job/${name}/config.xml`;
            let params = {
                headers: {
                    "Content-Type": "application/json", "Jenkins-Crumb": `${jenkinsCrumb}`, "Accept": "*/*"
                }
            };
            let request = http.post(url, params);

            check(request, {
                "Successfully retrieved job configuration in config.xml format": (r) => r.status === 200
            });
        }
    });

    group("/job/{name}/{number}/logText/progressiveText", () => {
        let number = 'TODO_EDIT_THE_NUMBER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let start = 'TODO_EDIT_THE_START'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getJobProgressiveText
        {
            let url = BASE_URL + `/job/${name}/${number}/logText/progressiveText?start=${start}`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved job's build progressive text output": (r) => r.status === 200
            });
        }
    });

    group("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches", () => {
        let pipeline = 'TODO_EDIT_THE_PIPELINE'; // specify value as there is no example value for this parameter in OpenAPI spec
        let organization = 'TODO_EDIT_THE_ORGANIZATION'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1: getPipelineBranches
        {
            let url = BASE_URL + `/blue/rest/organizations/${organization}/pipelines/${pipeline}/branches`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved all branches details": (r) => r.status === 200
            });
        }
    });

    group("/api/json", () => {

        // Request No. 1: getJenkins
        {
            let url = BASE_URL + `/api/json`;
            let request = http.get(url);

            check(request, {
                "Successfully retrieved Jenkins details": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2: headJenkins
        {
            let url = BASE_URL + `/api/json`;
            let request = http.head(url);

            check(request, {
                "Successfully retrieved Jenkins headers": (r) => r.status === 200
            });
        }
    });

}
