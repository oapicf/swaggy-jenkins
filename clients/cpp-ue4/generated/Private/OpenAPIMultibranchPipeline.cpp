/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIMultibranchPipeline.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIMultibranchPipeline::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (DisplayName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("displayName")); WriteJsonValue(Writer, DisplayName.GetValue());
	}
	if (EstimatedDurationInMillis.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("estimatedDurationInMillis")); WriteJsonValue(Writer, EstimatedDurationInMillis.GetValue());
	}
	if (LatestRun.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("latestRun")); WriteJsonValue(Writer, LatestRun.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Organization.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("organization")); WriteJsonValue(Writer, Organization.GetValue());
	}
	if (WeatherScore.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("weatherScore")); WriteJsonValue(Writer, WeatherScore.GetValue());
	}
	if (BranchNames.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("branchNames")); WriteJsonValue(Writer, BranchNames.GetValue());
	}
	if (NumberOfFailingBranches.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("numberOfFailingBranches")); WriteJsonValue(Writer, NumberOfFailingBranches.GetValue());
	}
	if (NumberOfFailingPullRequests.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("numberOfFailingPullRequests")); WriteJsonValue(Writer, NumberOfFailingPullRequests.GetValue());
	}
	if (NumberOfSuccessfulBranches.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("numberOfSuccessfulBranches")); WriteJsonValue(Writer, NumberOfSuccessfulBranches.GetValue());
	}
	if (NumberOfSuccessfulPullRequests.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("numberOfSuccessfulPullRequests")); WriteJsonValue(Writer, NumberOfSuccessfulPullRequests.GetValue());
	}
	if (TotalNumberOfBranches.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("totalNumberOfBranches")); WriteJsonValue(Writer, TotalNumberOfBranches.GetValue());
	}
	if (TotalNumberOfPullRequests.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("totalNumberOfPullRequests")); WriteJsonValue(Writer, TotalNumberOfPullRequests.GetValue());
	}
	if (_Class.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_class")); WriteJsonValue(Writer, _Class.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIMultibranchPipeline::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("displayName"), DisplayName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("estimatedDurationInMillis"), EstimatedDurationInMillis);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("latestRun"), LatestRun);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("organization"), Organization);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("weatherScore"), WeatherScore);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("branchNames"), BranchNames);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("numberOfFailingBranches"), NumberOfFailingBranches);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("numberOfFailingPullRequests"), NumberOfFailingPullRequests);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("numberOfSuccessfulBranches"), NumberOfSuccessfulBranches);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("numberOfSuccessfulPullRequests"), NumberOfSuccessfulPullRequests);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("totalNumberOfBranches"), TotalNumberOfBranches);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("totalNumberOfPullRequests"), TotalNumberOfPullRequests);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_class"), _Class);

	return ParseSuccess;
}

}
