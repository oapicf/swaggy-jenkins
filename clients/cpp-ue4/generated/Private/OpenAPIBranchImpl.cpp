/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIBranchImpl.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIBranchImpl::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (_Class.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_class")); WriteJsonValue(Writer, _Class.GetValue());
	}
	if (DisplayName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("displayName")); WriteJsonValue(Writer, DisplayName.GetValue());
	}
	if (EstimatedDurationInMillis.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("estimatedDurationInMillis")); WriteJsonValue(Writer, EstimatedDurationInMillis.GetValue());
	}
	if (FullDisplayName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fullDisplayName")); WriteJsonValue(Writer, FullDisplayName.GetValue());
	}
	if (FullName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fullName")); WriteJsonValue(Writer, FullName.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Organization.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("organization")); WriteJsonValue(Writer, Organization.GetValue());
	}
	if (Parameters.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("parameters")); WriteJsonValue(Writer, Parameters.GetValue());
	}
	if (Permissions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("permissions")); WriteJsonValue(Writer, Permissions.GetValue());
	}
	if (WeatherScore.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("weatherScore")); WriteJsonValue(Writer, WeatherScore.GetValue());
	}
	if (PullRequest.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("pullRequest")); WriteJsonValue(Writer, PullRequest.GetValue());
	}
	if (Links.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_links")); WriteJsonValue(Writer, Links.GetValue());
	}
	if (LatestRun.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("latestRun")); WriteJsonValue(Writer, LatestRun.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIBranchImpl::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_class"), _Class);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("displayName"), DisplayName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("estimatedDurationInMillis"), EstimatedDurationInMillis);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fullDisplayName"), FullDisplayName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fullName"), FullName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("organization"), Organization);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("parameters"), Parameters);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("permissions"), Permissions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("weatherScore"), WeatherScore);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("pullRequest"), PullRequest);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_links"), Links);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("latestRun"), LatestRun);

	return ParseSuccess;
}

}
