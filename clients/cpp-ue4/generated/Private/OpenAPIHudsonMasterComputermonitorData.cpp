/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIHudsonMasterComputermonitorData.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIHudsonMasterComputermonitorData::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (HudsonNodeMonitorsSwapSpaceMonitor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hudson.node_monitors.SwapSpaceMonitor")); WriteJsonValue(Writer, HudsonNodeMonitorsSwapSpaceMonitor.GetValue());
	}
	if (HudsonNodeMonitorsTemporarySpaceMonitor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hudson.node_monitors.TemporarySpaceMonitor")); WriteJsonValue(Writer, HudsonNodeMonitorsTemporarySpaceMonitor.GetValue());
	}
	if (HudsonNodeMonitorsDiskSpaceMonitor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hudson.node_monitors.DiskSpaceMonitor")); WriteJsonValue(Writer, HudsonNodeMonitorsDiskSpaceMonitor.GetValue());
	}
	if (HudsonNodeMonitorsArchitectureMonitor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hudson.node_monitors.ArchitectureMonitor")); WriteJsonValue(Writer, HudsonNodeMonitorsArchitectureMonitor.GetValue());
	}
	if (HudsonNodeMonitorsResponseTimeMonitor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hudson.node_monitors.ResponseTimeMonitor")); WriteJsonValue(Writer, HudsonNodeMonitorsResponseTimeMonitor.GetValue());
	}
	if (HudsonNodeMonitorsClockMonitor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("hudson.node_monitors.ClockMonitor")); WriteJsonValue(Writer, HudsonNodeMonitorsClockMonitor.GetValue());
	}
	if (_Class.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_class")); WriteJsonValue(Writer, _Class.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIHudsonMasterComputermonitorData::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hudson.node_monitors.SwapSpaceMonitor"), HudsonNodeMonitorsSwapSpaceMonitor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hudson.node_monitors.TemporarySpaceMonitor"), HudsonNodeMonitorsTemporarySpaceMonitor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hudson.node_monitors.DiskSpaceMonitor"), HudsonNodeMonitorsDiskSpaceMonitor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hudson.node_monitors.ArchitectureMonitor"), HudsonNodeMonitorsArchitectureMonitor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hudson.node_monitors.ResponseTimeMonitor"), HudsonNodeMonitorsResponseTimeMonitor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("hudson.node_monitors.ClockMonitor"), HudsonNodeMonitorsClockMonitor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_class"), _Class);

	return ParseSuccess;
}

}
