/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIHudsonMasterComputer.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIHudsonMasterComputer::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (_Class.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_class")); WriteJsonValue(Writer, _Class.GetValue());
	}
	if (DisplayName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("displayName")); WriteJsonValue(Writer, DisplayName.GetValue());
	}
	if (Executors.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("executors")); WriteJsonValue(Writer, Executors.GetValue());
	}
	if (Icon.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("icon")); WriteJsonValue(Writer, Icon.GetValue());
	}
	if (IconClassName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("iconClassName")); WriteJsonValue(Writer, IconClassName.GetValue());
	}
	if (Idle.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("idle")); WriteJsonValue(Writer, Idle.GetValue());
	}
	if (JnlpAgent.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("jnlpAgent")); WriteJsonValue(Writer, JnlpAgent.GetValue());
	}
	if (LaunchSupported.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("launchSupported")); WriteJsonValue(Writer, LaunchSupported.GetValue());
	}
	if (LoadStatistics.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("loadStatistics")); WriteJsonValue(Writer, LoadStatistics.GetValue());
	}
	if (ManualLaunchAllowed.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("manualLaunchAllowed")); WriteJsonValue(Writer, ManualLaunchAllowed.GetValue());
	}
	if (MonitorData.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("monitorData")); WriteJsonValue(Writer, MonitorData.GetValue());
	}
	if (NumExecutors.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("numExecutors")); WriteJsonValue(Writer, NumExecutors.GetValue());
	}
	if (Offline.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("offline")); WriteJsonValue(Writer, Offline.GetValue());
	}
	if (OfflineCause.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("offlineCause")); WriteJsonValue(Writer, OfflineCause.GetValue());
	}
	if (OfflineCauseReason.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("offlineCauseReason")); WriteJsonValue(Writer, OfflineCauseReason.GetValue());
	}
	if (TemporarilyOffline.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("temporarilyOffline")); WriteJsonValue(Writer, TemporarilyOffline.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIHudsonMasterComputer::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_class"), _Class);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("displayName"), DisplayName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("executors"), Executors);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("icon"), Icon);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("iconClassName"), IconClassName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("idle"), Idle);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("jnlpAgent"), JnlpAgent);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("launchSupported"), LaunchSupported);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("loadStatistics"), LoadStatistics);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("manualLaunchAllowed"), ManualLaunchAllowed);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("monitorData"), MonitorData);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("numExecutors"), NumExecutors);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("offline"), Offline);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("offlineCause"), OfflineCause);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("offlineCauseReason"), OfflineCauseReason);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("temporarilyOffline"), TemporarilyOffline);

	return ParseSuccess;
}

}
