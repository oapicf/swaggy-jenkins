/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIRemoteAccessApiOperations.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace OpenAPI
{

FString OpenAPIRemoteAccessApi::GetComputerRequest::ComputePath() const
{
	FString Path(TEXT("/computer/api/json"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("depth=")) + ToUrlString(Depth));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIRemoteAccessApi::GetComputerRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetComputerResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved computer details"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetComputerResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::GetJenkinsRequest::ComputePath() const
{
	FString Path(TEXT("/api/json"));
	return Path;
}

void OpenAPIRemoteAccessApi::GetJenkinsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetJenkinsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved Jenkins details"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetJenkinsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::GetJobRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/api/json"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::GetJobRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetJobResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved job details"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetJobResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::GetJobConfigRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/config.xml"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::GetJobConfigRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("text/xml") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetJobConfigResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved job configuration in config.xml format"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetJobConfigResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::GetJobLastBuildRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/lastBuild/api/json"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::GetJobLastBuildRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetJobLastBuildResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved job&#39;s last build details"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetJobLastBuildResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::GetJobProgressiveTextRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) },
	{ TEXT("number"), FStringFormatArg(ToUrlString(Number)) } };

	FString Path = FString::Format(TEXT("/job/{name}/{number}/logText/progressiveText"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("start=")) + ToUrlString(Start));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIRemoteAccessApi::GetJobProgressiveTextRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetJobProgressiveTextResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved job&#39;s build progressive text output"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetJobProgressiveTextResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::GetQueueRequest::ComputePath() const
{
	FString Path(TEXT("/queue/api/json"));
	return Path;
}

void OpenAPIRemoteAccessApi::GetQueueRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetQueueResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved queue details"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetQueueResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::GetQueueItemRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("number"), FStringFormatArg(ToUrlString(Number)) } };

	FString Path = FString::Format(TEXT("/queue/item/{number}/api/json"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::GetQueueItemRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetQueueItemResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved queued item details"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetQueueItemResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::GetViewRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/view/{name}/api/json"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::GetViewRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetViewResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved view details"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("View cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetViewResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::GetViewConfigRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/view/{name}/config.xml"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::GetViewConfigRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = { TEXT("text/xml") };

	HttpRequest->SetVerb(TEXT("GET"));

}

void OpenAPIRemoteAccessApi::GetViewConfigResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved view configuration in config.xml format"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("View cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::GetViewConfigResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Content);
}

FString OpenAPIRemoteAccessApi::HeadJenkinsRequest::ComputePath() const
{
	FString Path(TEXT("/api/json"));
	return Path;
}

void OpenAPIRemoteAccessApi::HeadJenkinsRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("HEAD"));

}

void OpenAPIRemoteAccessApi::HeadJenkinsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved Jenkins headers"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::HeadJenkinsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostCreateItemRequest::ComputePath() const
{
	FString Path(TEXT("/createItem"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("name=")) + ToUrlString(Name));
	if(From.IsSet())
	{
		QueryParams.Add(FString(TEXT("from=")) + ToUrlString(From.GetValue()));
	}
	if(Mode.IsSet())
	{
		QueryParams.Add(FString(TEXT("mode=")) + ToUrlString(Mode.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIRemoteAccessApi::PostCreateItemRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("*/*") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}
	if (ContentType.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Content-Type"), ContentType.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (Body.IsSet())
		{
			WriteJsonValue(Writer, Body.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostCreateItemResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully created a new job"));
		break;
	case 400:
		SetResponseString(TEXT("An error has occurred - error message is embedded inside the HTML response"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostCreateItemResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostCreateViewRequest::ComputePath() const
{
	FString Path(TEXT("/createView"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("name=")) + ToUrlString(Name));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIRemoteAccessApi::PostCreateViewRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("*/*") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}
	if (ContentType.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Content-Type"), ContentType.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		if (Body.IsSet())
		{
			WriteJsonValue(Writer, Body.GetValue());
		}
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostCreateViewResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully created the view"));
		break;
	case 400:
		SetResponseString(TEXT("An error has occurred - error message is embedded inside the HTML response"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostCreateViewResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostJobBuildRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/build"), PathParams);

	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("json=")) + ToUrlString(Json));
	if(Token.IsSet())
	{
		QueryParams.Add(FString(TEXT("token=")) + ToUrlString(Token.GetValue()));
	}
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void OpenAPIRemoteAccessApi::PostJobBuildRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostJobBuildResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully built the job (backward compatibility for older versions of Jenkins)"));
		break;
	case 201:
		SetResponseString(TEXT("Successfully built the job"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostJobBuildResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostJobConfigRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/config.xml"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::PostJobConfigRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("*/*") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, Body);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostJobConfigResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully retrieved job configuration in config.xml format"));
		break;
	case 400:
		SetResponseString(TEXT("An error has occurred - error message is embedded inside the HTML response"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostJobConfigResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostJobDeleteRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/doDelete"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::PostJobDeleteRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostJobDeleteResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully deleted the job"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostJobDeleteResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostJobDisableRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/disable"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::PostJobDisableRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostJobDisableResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully disabled the job"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostJobDisableResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostJobEnableRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/enable"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::PostJobEnableRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostJobEnableResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully enabled the job"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostJobEnableResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostJobLastBuildStopRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/job/{name}/lastBuild/stop"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::PostJobLastBuildStopRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = {  };
	//static const TArray<FString> Produces = {  };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostJobLastBuildStopResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully stopped the job"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("Job cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostJobLastBuildStopResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

FString OpenAPIRemoteAccessApi::PostViewConfigRequest::ComputePath() const
{
	TMap<FString, FStringFormatArg> PathParams = { 
	{ TEXT("name"), FStringFormatArg(ToUrlString(Name)) } };

	FString Path = FString::Format(TEXT("/view/{name}/config.xml"), PathParams);

	return Path;
}

void OpenAPIRemoteAccessApi::PostViewConfigRequest::SetupHttpRequest(const FHttpRequestRef& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json") };
	//static const TArray<FString> Produces = { TEXT("*/*") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Header parameters
	if (JenkinsCrumb.IsSet())
	{
		HttpRequest->SetHeader(TEXT("Jenkins-Crumb"), JenkinsCrumb.GetValue());
	}

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		WriteJsonValue(Writer, Body);
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogOpenAPI, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void OpenAPIRemoteAccessApi::PostViewConfigResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 200:
		SetResponseString(TEXT("Successfully updated view configuration"));
		break;
	case 400:
		SetResponseString(TEXT("An error has occurred - error message is embedded inside the HTML response"));
		break;
	case 401:
		SetResponseString(TEXT("Authentication failed - incorrect username and/or password"));
		break;
	case 403:
		SetResponseString(TEXT("Jenkins requires authentication - please set username and password"));
		break;
	case 404:
		SetResponseString(TEXT("View cannot be found on Jenkins instance"));
		break;
	}
}

bool OpenAPIRemoteAccessApi::PostViewConfigResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
