/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGithubContent.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIGithubContent::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Sha.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("sha")); WriteJsonValue(Writer, Sha.GetValue());
	}
	if (_Class.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_class")); WriteJsonValue(Writer, _Class.GetValue());
	}
	if (Repo.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("repo")); WriteJsonValue(Writer, Repo.GetValue());
	}
	if (Size.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("size")); WriteJsonValue(Writer, Size.GetValue());
	}
	if (Owner.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("owner")); WriteJsonValue(Writer, Owner.GetValue());
	}
	if (Path.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("path")); WriteJsonValue(Writer, Path.GetValue());
	}
	if (Base64Data.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("base64Data")); WriteJsonValue(Writer, Base64Data.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIGithubContent::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("sha"), Sha);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_class"), _Class);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("repo"), Repo);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("size"), Size);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("owner"), Owner);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("path"), Path);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("base64Data"), Base64Data);

	return ParseSuccess;
}

}
