/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIGithubRepository.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIGithubRepository::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (_Class.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_class")); WriteJsonValue(Writer, _Class.GetValue());
	}
	if (Links.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_links")); WriteJsonValue(Writer, Links.GetValue());
	}
	if (DefaultBranch.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("defaultBranch")); WriteJsonValue(Writer, DefaultBranch.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Name.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("name")); WriteJsonValue(Writer, Name.GetValue());
	}
	if (Permissions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("permissions")); WriteJsonValue(Writer, Permissions.GetValue());
	}
	if (_Private.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("private")); WriteJsonValue(Writer, _Private.GetValue());
	}
	if (FullName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fullName")); WriteJsonValue(Writer, FullName.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIGithubRepository::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_class"), _Class);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_links"), Links);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("defaultBranch"), DefaultBranch);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("name"), Name);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("permissions"), Permissions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("private"), _Private);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fullName"), FullName);

	return ParseSuccess;
}

}
