/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIFreeStyleBuild.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIFreeStyleBuild::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (_Class.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_class")); WriteJsonValue(Writer, _Class.GetValue());
	}
	if (Number.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("number")); WriteJsonValue(Writer, Number.GetValue());
	}
	if (Url.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("url")); WriteJsonValue(Writer, Url.GetValue());
	}
	if (Actions.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("actions")); WriteJsonValue(Writer, Actions.GetValue());
	}
	if (Building.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("building")); WriteJsonValue(Writer, Building.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (DisplayName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("displayName")); WriteJsonValue(Writer, DisplayName.GetValue());
	}
	if (Duration.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("duration")); WriteJsonValue(Writer, Duration.GetValue());
	}
	if (EstimatedDuration.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("estimatedDuration")); WriteJsonValue(Writer, EstimatedDuration.GetValue());
	}
	if (Executor.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("executor")); WriteJsonValue(Writer, Executor.GetValue());
	}
	if (FullDisplayName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("fullDisplayName")); WriteJsonValue(Writer, FullDisplayName.GetValue());
	}
	if (Id.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("id")); WriteJsonValue(Writer, Id.GetValue());
	}
	if (KeepLog.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("keepLog")); WriteJsonValue(Writer, KeepLog.GetValue());
	}
	if (QueueId.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("queueId")); WriteJsonValue(Writer, QueueId.GetValue());
	}
	if (Result.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("result")); WriteJsonValue(Writer, Result.GetValue());
	}
	if (Timestamp.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("timestamp")); WriteJsonValue(Writer, Timestamp.GetValue());
	}
	if (BuiltOn.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("builtOn")); WriteJsonValue(Writer, BuiltOn.GetValue());
	}
	if (ChangeSet.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("changeSet")); WriteJsonValue(Writer, ChangeSet.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIFreeStyleBuild::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_class"), _Class);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("number"), Number);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("url"), Url);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("actions"), Actions);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("building"), Building);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("displayName"), DisplayName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("duration"), Duration);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("estimatedDuration"), EstimatedDuration);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("executor"), Executor);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("fullDisplayName"), FullDisplayName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("id"), Id);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("keepLog"), KeepLog);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("queueId"), QueueId);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("result"), Result);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("timestamp"), Timestamp);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("builtOn"), BuiltOn);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("changeSet"), ChangeSet);

	return ParseSuccess;
}

}
