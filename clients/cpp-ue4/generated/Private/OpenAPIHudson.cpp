/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIHudson.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI
{

void OpenAPIHudson::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	if (_Class.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("_class")); WriteJsonValue(Writer, _Class.GetValue());
	}
	if (AssignedLabels.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("assignedLabels")); WriteJsonValue(Writer, AssignedLabels.GetValue());
	}
	if (Mode.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("mode")); WriteJsonValue(Writer, Mode.GetValue());
	}
	if (NodeDescription.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("nodeDescription")); WriteJsonValue(Writer, NodeDescription.GetValue());
	}
	if (NodeName.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("nodeName")); WriteJsonValue(Writer, NodeName.GetValue());
	}
	if (NumExecutors.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("numExecutors")); WriteJsonValue(Writer, NumExecutors.GetValue());
	}
	if (Description.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("description")); WriteJsonValue(Writer, Description.GetValue());
	}
	if (Jobs.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("jobs")); WriteJsonValue(Writer, Jobs.GetValue());
	}
	if (PrimaryView.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("primaryView")); WriteJsonValue(Writer, PrimaryView.GetValue());
	}
	if (QuietingDown.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("quietingDown")); WriteJsonValue(Writer, QuietingDown.GetValue());
	}
	if (SlaveAgentPort.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("slaveAgentPort")); WriteJsonValue(Writer, SlaveAgentPort.GetValue());
	}
	if (UnlabeledLoad.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("unlabeledLoad")); WriteJsonValue(Writer, UnlabeledLoad.GetValue());
	}
	if (UseCrumbs.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("useCrumbs")); WriteJsonValue(Writer, UseCrumbs.GetValue());
	}
	if (UseSecurity.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("useSecurity")); WriteJsonValue(Writer, UseSecurity.GetValue());
	}
	if (Views.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("views")); WriteJsonValue(Writer, Views.GetValue());
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIHudson::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	const TSharedPtr<FJsonObject>* Object;
	if (!JsonValue->TryGetObject(Object))
		return false;

	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(*Object, TEXT("_class"), _Class);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("assignedLabels"), AssignedLabels);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("mode"), Mode);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("nodeDescription"), NodeDescription);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("nodeName"), NodeName);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("numExecutors"), NumExecutors);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("description"), Description);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("jobs"), Jobs);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("primaryView"), PrimaryView);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("quietingDown"), QuietingDown);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("slaveAgentPort"), SlaveAgentPort);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("unlabeledLoad"), UnlabeledLoad);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("useCrumbs"), UseCrumbs);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("useSecurity"), UseSecurity);
	ParseSuccess &= TryGetJsonValue(*Object, TEXT("views"), Views);

	return ParseSuccess;
}

}
