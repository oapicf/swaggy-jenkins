=begin comment

Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

The version of the OpenAPI document: 2.0.1-pre.0
Contact: blah+oapicf@cliffano.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::BlueOceanApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# delete_pipeline_queue_item
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $queue Name of the queue item (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'queue' => {
        data_type => 'string',
        description => 'Name of the queue item',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'delete_pipeline_queue_item' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub delete_pipeline_queue_item {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling delete_pipeline_queue_item");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling delete_pipeline_queue_item");
    }

    # verify the required parameter 'queue' is set
    unless (exists $args{'queue'}) {
      croak("Missing the required parameter 'queue' when calling delete_pipeline_queue_item");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'queue'}) {
        my $_base_variable = "{" . "queue" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'queue'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_authenticated_user
#
# 
#
# @param string $organization Name of the organization (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_authenticated_user' } = {
        summary => '',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_authenticated_user {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_authenticated_user");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/user/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# get_classes
#
# 
#
# @param string $class Name of the class (required)
{
    my $params = {
    'class' => {
        data_type => 'string',
        description => 'Name of the class',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_classes' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_classes {
    my ($self, %args) = @_;

    # verify the required parameter 'class' is set
    unless (exists $args{'class'}) {
      croak("Missing the required parameter 'class' when calling get_classes");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/classes/{class}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'class'}) {
        my $_base_variable = "{" . "class" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_json_web_key
#
# 
#
# @param int $key Key ID received as part of JWT header field kid (required)
{
    my $params = {
    'key' => {
        data_type => 'int',
        description => 'Key ID received as part of JWT header field kid',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_json_web_key' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_json_web_key {
    my ($self, %args) = @_;

    # verify the required parameter 'key' is set
    unless (exists $args{'key'}) {
      croak("Missing the required parameter 'key' when calling get_json_web_key");
    }

    # parse inputs
    my $_resource_path = '/jwt-auth/jwks/{key}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'key'}) {
        my $_base_variable = "{" . "key" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'key'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_json_web_token
#
# 
#
# @param int $expiry_time_in_mins Token expiry time in minutes, default: 30 minutes (optional)
# @param int $max_expiry_time_in_mins Maximum token expiry time in minutes, default: 480 minutes (optional)
{
    my $params = {
    'expiry_time_in_mins' => {
        data_type => 'int',
        description => 'Token expiry time in minutes, default: 30 minutes',
        required => '0',
    },
    'max_expiry_time_in_mins' => {
        data_type => 'int',
        description => 'Maximum token expiry time in minutes, default: 480 minutes',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_json_web_token' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_json_web_token {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/jwt-auth/token';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'expiry_time_in_mins'}) {
        $query_params->{'expiryTimeInMins'} = $self->{api_client}->to_query_value($args{'expiry_time_in_mins'});
    }

    # query params
    if ( exists $args{'max_expiry_time_in_mins'}) {
        $query_params->{'maxExpiryTimeInMins'} = $self->{api_client}->to_query_value($args{'max_expiry_time_in_mins'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_organisation
#
# 
#
# @param string $organization Name of the organization (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_organisation' } = {
        summary => '',
        params => $params,
        returns => 'Organisation',
        };
}
# @return Organisation
#
sub get_organisation {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_organisation");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Organisation', $response);
    return $_response_object;
}

#
# get_organisations
#
# 
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_organisations' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[Organisation]',
        };
}
# @return ARRAY[Organisation]
#
sub get_organisations {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Organisation]', $response);
    return $_response_object;
}

#
# get_pipeline
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline' } = {
        summary => '',
        params => $params,
        returns => 'Pipeline',
        };
}
# @return Pipeline
#
sub get_pipeline {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Pipeline', $response);
    return $_response_object;
}

#
# get_pipeline_activities
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_activities' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[PipelineActivity]',
        };
}
# @return ARRAY[PipelineActivity]
#
sub get_pipeline_activities {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_activities");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_activities");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[PipelineActivity]', $response);
    return $_response_object;
}

#
# get_pipeline_branch
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $branch Name of the branch (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'branch' => {
        data_type => 'string',
        description => 'Name of the branch',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_branch' } = {
        summary => '',
        params => $params,
        returns => 'BranchImpl',
        };
}
# @return BranchImpl
#
sub get_pipeline_branch {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_branch");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_branch");
    }

    # verify the required parameter 'branch' is set
    unless (exists $args{'branch'}) {
      croak("Missing the required parameter 'branch' when calling get_pipeline_branch");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'branch'}) {
        my $_base_variable = "{" . "branch" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'branch'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('BranchImpl', $response);
    return $_response_object;
}

#
# get_pipeline_branch_run
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $branch Name of the branch (required)
# @param string $run Name of the run (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'branch' => {
        data_type => 'string',
        description => 'Name of the branch',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_branch_run' } = {
        summary => '',
        params => $params,
        returns => 'PipelineRun',
        };
}
# @return PipelineRun
#
sub get_pipeline_branch_run {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_branch_run");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_branch_run");
    }

    # verify the required parameter 'branch' is set
    unless (exists $args{'branch'}) {
      croak("Missing the required parameter 'branch' when calling get_pipeline_branch_run");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling get_pipeline_branch_run");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'branch'}) {
        my $_base_variable = "{" . "branch" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'branch'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineRun', $response);
    return $_response_object;
}

#
# get_pipeline_branches
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_branches' } = {
        summary => '',
        params => $params,
        returns => 'MultibranchPipeline',
        };
}
# @return MultibranchPipeline
#
sub get_pipeline_branches {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_branches");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_branches");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('MultibranchPipeline', $response);
    return $_response_object;
}

#
# get_pipeline_folder
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $folder Name of the folder (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'folder' => {
        data_type => 'string',
        description => 'Name of the folder',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_folder' } = {
        summary => '',
        params => $params,
        returns => 'PipelineFolderImpl',
        };
}
# @return PipelineFolderImpl
#
sub get_pipeline_folder {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_folder");
    }

    # verify the required parameter 'folder' is set
    unless (exists $args{'folder'}) {
      croak("Missing the required parameter 'folder' when calling get_pipeline_folder");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{folder}/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'folder'}) {
        my $_base_variable = "{" . "folder" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'folder'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineFolderImpl', $response);
    return $_response_object;
}

#
# get_pipeline_folder_pipeline
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $folder Name of the folder (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'folder' => {
        data_type => 'string',
        description => 'Name of the folder',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_folder_pipeline' } = {
        summary => '',
        params => $params,
        returns => 'PipelineImpl',
        };
}
# @return PipelineImpl
#
sub get_pipeline_folder_pipeline {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_folder_pipeline");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_folder_pipeline");
    }

    # verify the required parameter 'folder' is set
    unless (exists $args{'folder'}) {
      croak("Missing the required parameter 'folder' when calling get_pipeline_folder_pipeline");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'folder'}) {
        my $_base_variable = "{" . "folder" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'folder'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineImpl', $response);
    return $_response_object;
}

#
# get_pipeline_queue
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_queue' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[QueueItemImpl]',
        };
}
# @return ARRAY[QueueItemImpl]
#
sub get_pipeline_queue {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_queue");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_queue");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[QueueItemImpl]', $response);
    return $_response_object;
}

#
# get_pipeline_run
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_run' } = {
        summary => '',
        params => $params,
        returns => 'PipelineRun',
        };
}
# @return PipelineRun
#
sub get_pipeline_run {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_run");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_run");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling get_pipeline_run");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineRun', $response);
    return $_response_object;
}

#
# get_pipeline_run_log
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
# @param int $start Start position of the log (optional)
# @param boolean $download Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    'start' => {
        data_type => 'int',
        description => 'Start position of the log',
        required => '0',
    },
    'download' => {
        data_type => 'boolean',
        description => 'Set to true in order to download the file, otherwise it&#39;s passed as a response body',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_run_log' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_pipeline_run_log {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_run_log");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_run_log");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling get_pipeline_run_log");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # query params
    if ( exists $args{'download'}) {
        $query_params->{'download'} = $self->{api_client}->to_query_value($args{'download'});
    }

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_pipeline_run_node
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
# @param string $node Name of the node (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    'node' => {
        data_type => 'string',
        description => 'Name of the node',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_run_node' } = {
        summary => '',
        params => $params,
        returns => 'PipelineRunNode',
        };
}
# @return PipelineRunNode
#
sub get_pipeline_run_node {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_run_node");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_run_node");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling get_pipeline_run_node");
    }

    # verify the required parameter 'node' is set
    unless (exists $args{'node'}) {
      croak("Missing the required parameter 'node' when calling get_pipeline_run_node");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'node'}) {
        my $_base_variable = "{" . "node" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'node'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineRunNode', $response);
    return $_response_object;
}

#
# get_pipeline_run_node_step
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
# @param string $node Name of the node (required)
# @param string $step Name of the step (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    'node' => {
        data_type => 'string',
        description => 'Name of the node',
        required => '1',
    },
    'step' => {
        data_type => 'string',
        description => 'Name of the step',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_run_node_step' } = {
        summary => '',
        params => $params,
        returns => 'PipelineStepImpl',
        };
}
# @return PipelineStepImpl
#
sub get_pipeline_run_node_step {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_run_node_step");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_run_node_step");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling get_pipeline_run_node_step");
    }

    # verify the required parameter 'node' is set
    unless (exists $args{'node'}) {
      croak("Missing the required parameter 'node' when calling get_pipeline_run_node_step");
    }

    # verify the required parameter 'step' is set
    unless (exists $args{'step'}) {
      croak("Missing the required parameter 'step' when calling get_pipeline_run_node_step");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'node'}) {
        my $_base_variable = "{" . "node" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'node'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'step'}) {
        my $_base_variable = "{" . "step" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'step'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineStepImpl', $response);
    return $_response_object;
}

#
# get_pipeline_run_node_step_log
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
# @param string $node Name of the node (required)
# @param string $step Name of the step (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    'node' => {
        data_type => 'string',
        description => 'Name of the node',
        required => '1',
    },
    'step' => {
        data_type => 'string',
        description => 'Name of the step',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_run_node_step_log' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_pipeline_run_node_step_log {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_run_node_step_log");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_run_node_step_log");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling get_pipeline_run_node_step_log");
    }

    # verify the required parameter 'node' is set
    unless (exists $args{'node'}) {
      croak("Missing the required parameter 'node' when calling get_pipeline_run_node_step_log");
    }

    # verify the required parameter 'step' is set
    unless (exists $args{'step'}) {
      croak("Missing the required parameter 'step' when calling get_pipeline_run_node_step_log");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'node'}) {
        my $_base_variable = "{" . "node" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'node'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'step'}) {
        my $_base_variable = "{" . "step" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'step'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_pipeline_run_node_steps
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
# @param string $node Name of the node (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    'node' => {
        data_type => 'string',
        description => 'Name of the node',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_run_node_steps' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[PipelineStepImpl]',
        };
}
# @return ARRAY[PipelineStepImpl]
#
sub get_pipeline_run_node_steps {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_run_node_steps");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_run_node_steps");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling get_pipeline_run_node_steps");
    }

    # verify the required parameter 'node' is set
    unless (exists $args{'node'}) {
      croak("Missing the required parameter 'node' when calling get_pipeline_run_node_steps");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'node'}) {
        my $_base_variable = "{" . "node" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'node'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[PipelineStepImpl]', $response);
    return $_response_object;
}

#
# get_pipeline_run_nodes
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_run_nodes' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[PipelineRunNode]',
        };
}
# @return ARRAY[PipelineRunNode]
#
sub get_pipeline_run_nodes {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_run_nodes");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_run_nodes");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling get_pipeline_run_nodes");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[PipelineRunNode]', $response);
    return $_response_object;
}

#
# get_pipeline_runs
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_runs' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[PipelineRun]',
        };
}
# @return ARRAY[PipelineRun]
#
sub get_pipeline_runs {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipeline_runs");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_runs");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[PipelineRun]', $response);
    return $_response_object;
}

#
# get_pipelines
#
# 
#
# @param string $organization Name of the organization (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipelines' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[Pipeline]',
        };
}
# @return ARRAY[Pipeline]
#
sub get_pipelines {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_pipelines");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[Pipeline]', $response);
    return $_response_object;
}

#
# get_scm
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $scm Name of SCM (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'scm' => {
        data_type => 'string',
        description => 'Name of SCM',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_scm' } = {
        summary => '',
        params => $params,
        returns => 'GithubScm',
        };
}
# @return GithubScm
#
sub get_scm {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_scm");
    }

    # verify the required parameter 'scm' is set
    unless (exists $args{'scm'}) {
      croak("Missing the required parameter 'scm' when calling get_scm");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/scm/{scm}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scm'}) {
        my $_base_variable = "{" . "scm" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scm'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GithubScm', $response);
    return $_response_object;
}

#
# get_scm_organisation_repositories
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $scm Name of SCM (required)
# @param string $scm_organisation Name of the SCM organization (required)
# @param string $credential_id Credential ID (optional)
# @param int $page_size Number of items in a page (optional)
# @param int $page_number Page number (optional)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'scm' => {
        data_type => 'string',
        description => 'Name of SCM',
        required => '1',
    },
    'scm_organisation' => {
        data_type => 'string',
        description => 'Name of the SCM organization',
        required => '1',
    },
    'credential_id' => {
        data_type => 'string',
        description => 'Credential ID',
        required => '0',
    },
    'page_size' => {
        data_type => 'int',
        description => 'Number of items in a page',
        required => '0',
    },
    'page_number' => {
        data_type => 'int',
        description => 'Page number',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_scm_organisation_repositories' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[GithubOrganization]',
        };
}
# @return ARRAY[GithubOrganization]
#
sub get_scm_organisation_repositories {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_scm_organisation_repositories");
    }

    # verify the required parameter 'scm' is set
    unless (exists $args{'scm'}) {
      croak("Missing the required parameter 'scm' when calling get_scm_organisation_repositories");
    }

    # verify the required parameter 'scm_organisation' is set
    unless (exists $args{'scm_organisation'}) {
      croak("Missing the required parameter 'scm_organisation' when calling get_scm_organisation_repositories");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'credential_id'}) {
        $query_params->{'credentialId'} = $self->{api_client}->to_query_value($args{'credential_id'});
    }

    # query params
    if ( exists $args{'page_size'}) {
        $query_params->{'pageSize'} = $self->{api_client}->to_query_value($args{'page_size'});
    }

    # query params
    if ( exists $args{'page_number'}) {
        $query_params->{'pageNumber'} = $self->{api_client}->to_query_value($args{'page_number'});
    }

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scm'}) {
        my $_base_variable = "{" . "scm" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scm'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scm_organisation'}) {
        my $_base_variable = "{" . "scmOrganisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scm_organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GithubOrganization]', $response);
    return $_response_object;
}

#
# get_scm_organisation_repository
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $scm Name of SCM (required)
# @param string $scm_organisation Name of the SCM organization (required)
# @param string $repository Name of the SCM repository (required)
# @param string $credential_id Credential ID (optional)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'scm' => {
        data_type => 'string',
        description => 'Name of SCM',
        required => '1',
    },
    'scm_organisation' => {
        data_type => 'string',
        description => 'Name of the SCM organization',
        required => '1',
    },
    'repository' => {
        data_type => 'string',
        description => 'Name of the SCM repository',
        required => '1',
    },
    'credential_id' => {
        data_type => 'string',
        description => 'Credential ID',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_scm_organisation_repository' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[GithubOrganization]',
        };
}
# @return ARRAY[GithubOrganization]
#
sub get_scm_organisation_repository {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_scm_organisation_repository");
    }

    # verify the required parameter 'scm' is set
    unless (exists $args{'scm'}) {
      croak("Missing the required parameter 'scm' when calling get_scm_organisation_repository");
    }

    # verify the required parameter 'scm_organisation' is set
    unless (exists $args{'scm_organisation'}) {
      croak("Missing the required parameter 'scm_organisation' when calling get_scm_organisation_repository");
    }

    # verify the required parameter 'repository' is set
    unless (exists $args{'repository'}) {
      croak("Missing the required parameter 'repository' when calling get_scm_organisation_repository");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'credential_id'}) {
        $query_params->{'credentialId'} = $self->{api_client}->to_query_value($args{'credential_id'});
    }

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scm'}) {
        my $_base_variable = "{" . "scm" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scm'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scm_organisation'}) {
        my $_base_variable = "{" . "scmOrganisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scm_organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'repository'}) {
        my $_base_variable = "{" . "repository" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'repository'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GithubOrganization]', $response);
    return $_response_object;
}

#
# get_scm_organisations
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $scm Name of SCM (required)
# @param string $credential_id Credential ID (optional)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'scm' => {
        data_type => 'string',
        description => 'Name of SCM',
        required => '1',
    },
    'credential_id' => {
        data_type => 'string',
        description => 'Credential ID',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_scm_organisations' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[GithubOrganization]',
        };
}
# @return ARRAY[GithubOrganization]
#
sub get_scm_organisations {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_scm_organisations");
    }

    # verify the required parameter 'scm' is set
    unless (exists $args{'scm'}) {
      croak("Missing the required parameter 'scm' when calling get_scm_organisations");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'credential_id'}) {
        $query_params->{'credentialId'} = $self->{api_client}->to_query_value($args{'credential_id'});
    }

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'scm'}) {
        my $_base_variable = "{" . "scm" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'scm'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[GithubOrganization]', $response);
    return $_response_object;
}

#
# get_user
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $user Name of the user (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'Name of the user',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user' } = {
        summary => '',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_user {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_user");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling get_user");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/users/{user}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'user'}) {
        my $_base_variable = "{" . "user" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# get_user_favorites
#
# 
#
# @param string $user Name of the user (required)
{
    my $params = {
    'user' => {
        data_type => 'string',
        description => 'Name of the user',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user_favorites' } = {
        summary => '',
        params => $params,
        returns => 'ARRAY[FavoriteImpl]',
        };
}
# @return ARRAY[FavoriteImpl]
#
sub get_user_favorites {
    my ($self, %args) = @_;

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling get_user_favorites");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/users/{user}/favorites';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'user'}) {
        my $_base_variable = "{" . "user" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[FavoriteImpl]', $response);
    return $_response_object;
}

#
# get_users
#
# 
#
# @param string $organization Name of the organization (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_users' } = {
        summary => '',
        params => $params,
        returns => 'User',
        };
}
# @return User
#
sub get_users {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling get_users");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/users/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('User', $response);
    return $_response_object;
}

#
# post_pipeline_run
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_pipeline_run' } = {
        summary => '',
        params => $params,
        returns => 'QueueItemImpl',
        };
}
# @return QueueItemImpl
#
sub post_pipeline_run {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling post_pipeline_run");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling post_pipeline_run");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling post_pipeline_run");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QueueItemImpl', $response);
    return $_response_object;
}

#
# post_pipeline_runs
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_pipeline_runs' } = {
        summary => '',
        params => $params,
        returns => 'QueueItemImpl',
        };
}
# @return QueueItemImpl
#
sub post_pipeline_runs {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling post_pipeline_runs");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling post_pipeline_runs");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('QueueItemImpl', $response);
    return $_response_object;
}

#
# put_pipeline_favorite
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param boolean $body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite (required)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'body' => {
        data_type => 'boolean',
        description => 'Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'put_pipeline_favorite' } = {
        summary => '',
        params => $params,
        returns => 'FavoriteImpl',
        };
}
# @return FavoriteImpl
#
sub put_pipeline_favorite {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling put_pipeline_favorite");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling put_pipeline_favorite");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling put_pipeline_favorite");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FavoriteImpl', $response);
    return $_response_object;
}

#
# put_pipeline_run
#
# 
#
# @param string $organization Name of the organization (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $run Name of the run (required)
# @param string $blocking Set to true to make blocking stop, default: false (optional)
# @param int $time_out_in_secs Timeout in seconds, default: 10 seconds (optional)
{
    my $params = {
    'organization' => {
        data_type => 'string',
        description => 'Name of the organization',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'run' => {
        data_type => 'string',
        description => 'Name of the run',
        required => '1',
    },
    'blocking' => {
        data_type => 'string',
        description => 'Set to true to make blocking stop, default: false',
        required => '0',
    },
    'time_out_in_secs' => {
        data_type => 'int',
        description => 'Timeout in seconds, default: 10 seconds',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'put_pipeline_run' } = {
        summary => '',
        params => $params,
        returns => 'PipelineRun',
        };
}
# @return PipelineRun
#
sub put_pipeline_run {
    my ($self, %args) = @_;

    # verify the required parameter 'organization' is set
    unless (exists $args{'organization'}) {
      croak("Missing the required parameter 'organization' when calling put_pipeline_run");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling put_pipeline_run");
    }

    # verify the required parameter 'run' is set
    unless (exists $args{'run'}) {
      croak("Missing the required parameter 'run' when calling put_pipeline_run");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop';

    my $_method = 'PUT';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'blocking'}) {
        $query_params->{'blocking'} = $self->{api_client}->to_query_value($args{'blocking'});
    }

    # query params
    if ( exists $args{'time_out_in_secs'}) {
        $query_params->{'timeOutInSecs'} = $self->{api_client}->to_query_value($args{'time_out_in_secs'});
    }

    # path params
    if ( exists $args{'organization'}) {
        my $_base_variable = "{" . "organization" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organization'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'run'}) {
        my $_base_variable = "{" . "run" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'run'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('PipelineRun', $response);
    return $_response_object;
}

#
# search
#
# 
#
# @param string $q Query string (required)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Query string',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'search' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub search {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling search");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/search/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# search_classes
#
# 
#
# @param string $q Query string containing an array of class names (required)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Query string containing an array of class names',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_classes' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub search_classes {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling search_classes");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/classes/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
