=begin comment

Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

The version of the OpenAPI document: 2.0.1-pre.0
Contact: blah+oapicf@cliffano.com
Generated by: https://openapi-generator.tech

=end comment

=cut

#
# NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
# Do not edit the class manually.
# Ref: https://openapi-generator.tech
#
package WWW::OpenAPIClient::RemoteAccessApi;

require 5.6.0;
use strict;
use warnings;
use utf8;
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::OpenAPIClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::OpenAPIClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::OpenAPIClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# get_computer
#
# 
#
# @param int $depth Recursion depth in response model (required)
{
    my $params = {
    'depth' => {
        data_type => 'int',
        description => 'Recursion depth in response model',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_computer' } = {
        summary => '',
        params => $params,
        returns => 'ComputerSet',
        };
}
# @return ComputerSet
#
sub get_computer {
    my ($self, %args) = @_;

    # verify the required parameter 'depth' is set
    unless (exists $args{'depth'}) {
      croak("Missing the required parameter 'depth' when calling get_computer");
    }

    # parse inputs
    my $_resource_path = '/computer/api/json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'depth'}) {
        $query_params->{'depth'} = $self->{api_client}->to_query_value($args{'depth'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ComputerSet', $response);
    return $_response_object;
}

#
# get_jenkins
#
# 
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_jenkins' } = {
        summary => '',
        params => $params,
        returns => 'Hudson',
        };
}
# @return Hudson
#
sub get_jenkins {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Hudson', $response);
    return $_response_object;
}

#
# get_job
#
# 
#
# @param string $name Name of the job (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_job' } = {
        summary => '',
        params => $params,
        returns => 'FreeStyleProject',
        };
}
# @return FreeStyleProject
#
sub get_job {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_job");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/api/json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FreeStyleProject', $response);
    return $_response_object;
}

#
# get_job_config
#
# 
#
# @param string $name Name of the job (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_job_config' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_job_config {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_job_config");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/config.xml';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_job_last_build
#
# 
#
# @param string $name Name of the job (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_job_last_build' } = {
        summary => '',
        params => $params,
        returns => 'FreeStyleBuild',
        };
}
# @return FreeStyleBuild
#
sub get_job_last_build {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_job_last_build");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/lastBuild/api/json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('FreeStyleBuild', $response);
    return $_response_object;
}

#
# get_job_progressive_text
#
# 
#
# @param string $name Name of the job (required)
# @param string $number Build number (required)
# @param string $start Starting point of progressive text output (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    'number' => {
        data_type => 'string',
        description => 'Build number',
        required => '1',
    },
    'start' => {
        data_type => 'string',
        description => 'Starting point of progressive text output',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_job_progressive_text' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub get_job_progressive_text {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_job_progressive_text");
    }

    # verify the required parameter 'number' is set
    unless (exists $args{'number'}) {
      croak("Missing the required parameter 'number' when calling get_job_progressive_text");
    }

    # verify the required parameter 'start' is set
    unless (exists $args{'start'}) {
      croak("Missing the required parameter 'start' when calling get_job_progressive_text");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/{number}/logText/progressiveText';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'start'}) {
        $query_params->{'start'} = $self->{api_client}->to_query_value($args{'start'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'number'}) {
        my $_base_variable = "{" . "number" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'number'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# get_queue
#
# 
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_queue' } = {
        summary => '',
        params => $params,
        returns => 'Queue',
        };
}
# @return Queue
#
sub get_queue {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/queue/api/json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Queue', $response);
    return $_response_object;
}

#
# get_queue_item
#
# 
#
# @param string $number Queue number (required)
{
    my $params = {
    'number' => {
        data_type => 'string',
        description => 'Queue number',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_queue_item' } = {
        summary => '',
        params => $params,
        returns => 'Queue',
        };
}
# @return Queue
#
sub get_queue_item {
    my ($self, %args) = @_;

    # verify the required parameter 'number' is set
    unless (exists $args{'number'}) {
      croak("Missing the required parameter 'number' when calling get_queue_item");
    }

    # parse inputs
    my $_resource_path = '/queue/item/{number}/api/json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'number'}) {
        my $_base_variable = "{" . "number" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'number'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('Queue', $response);
    return $_response_object;
}

#
# get_view
#
# 
#
# @param string $name Name of the view (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the view',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_view' } = {
        summary => '',
        params => $params,
        returns => 'ListView',
        };
}
# @return ListView
#
sub get_view {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_view");
    }

    # parse inputs
    my $_resource_path = '/view/{name}/api/json';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ListView', $response);
    return $_response_object;
}

#
# get_view_config
#
# 
#
# @param string $name Name of the view (required)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the view',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_view_config' } = {
        summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_view_config {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling get_view_config");
    }

    # parse inputs
    my $_resource_path = '/view/{name}/config.xml';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('text/xml');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# head_jenkins
#
# 
#
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'head_jenkins' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub head_jenkins {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/api/json';

    my $_method = 'HEAD';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_create_item
#
# 
#
# @param string $name Name of the new job (required)
# @param string $from Existing job to copy from (optional)
# @param string $mode Set to &#39;copy&#39; for copying an existing job (optional)
# @param string $jenkins_crumb CSRF protection token (optional)
# @param string $content_type Content type header application/xml (optional)
# @param string $body Job configuration in config.xml format (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the new job',
        required => '1',
    },
    'from' => {
        data_type => 'string',
        description => 'Existing job to copy from',
        required => '0',
    },
    'mode' => {
        data_type => 'string',
        description => 'Set to &#39;copy&#39; for copying an existing job',
        required => '0',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Content type header application/xml',
        required => '0',
    },
    'body' => {
        data_type => 'string',
        description => 'Job configuration in config.xml format',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_create_item' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_create_item {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_create_item");
    }

    # parse inputs
    my $_resource_path = '/createItem';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # query params
    if ( exists $args{'from'}) {
        $query_params->{'from'} = $self->{api_client}->to_query_value($args{'from'});
    }

    # query params
    if ( exists $args{'mode'}) {
        $query_params->{'mode'} = $self->{api_client}->to_query_value($args{'mode'});
    }

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_create_view
#
# 
#
# @param string $name Name of the new view (required)
# @param string $jenkins_crumb CSRF protection token (optional)
# @param string $content_type Content type header application/xml (optional)
# @param string $body View configuration in config.xml format (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the new view',
        required => '1',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    'content_type' => {
        data_type => 'string',
        description => 'Content type header application/xml',
        required => '0',
    },
    'body' => {
        data_type => 'string',
        description => 'View configuration in config.xml format',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_create_view' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_create_view {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_create_view");
    }

    # parse inputs
    my $_resource_path = '/createView';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # query params
    if ( exists $args{'name'}) {
        $query_params->{'name'} = $self->{api_client}->to_query_value($args{'name'});
    }

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # header params
    if ( exists $args{'content_type'}) {
        $header_params->{'Content-Type'} = $self->{api_client}->to_header_value($args{'content_type'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_job_build
#
# 
#
# @param string $name Name of the job (required)
# @param string $json  (required)
# @param string $token  (optional)
# @param string $jenkins_crumb CSRF protection token (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    'json' => {
        data_type => 'string',
        description => '',
        required => '1',
    },
    'token' => {
        data_type => 'string',
        description => '',
        required => '0',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_job_build' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_job_build {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_job_build");
    }

    # verify the required parameter 'json' is set
    unless (exists $args{'json'}) {
      croak("Missing the required parameter 'json' when calling post_job_build");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/build';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'json'}) {
        $query_params->{'json'} = $self->{api_client}->to_query_value($args{'json'});
    }

    # query params
    if ( exists $args{'token'}) {
        $query_params->{'token'} = $self->{api_client}->to_query_value($args{'token'});
    }

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_job_config
#
# 
#
# @param string $name Name of the job (required)
# @param string $body Job configuration in config.xml format (required)
# @param string $jenkins_crumb CSRF protection token (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    'body' => {
        data_type => 'string',
        description => 'Job configuration in config.xml format',
        required => '1',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_job_config' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_job_config {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_job_config");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling post_job_config");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/config.xml';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_job_delete
#
# 
#
# @param string $name Name of the job (required)
# @param string $jenkins_crumb CSRF protection token (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_job_delete' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_job_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_job_delete");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/doDelete';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_job_disable
#
# 
#
# @param string $name Name of the job (required)
# @param string $jenkins_crumb CSRF protection token (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_job_disable' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_job_disable {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_job_disable");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/disable';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_job_enable
#
# 
#
# @param string $name Name of the job (required)
# @param string $jenkins_crumb CSRF protection token (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_job_enable' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_job_enable {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_job_enable");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/enable';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_job_last_build_stop
#
# 
#
# @param string $name Name of the job (required)
# @param string $jenkins_crumb CSRF protection token (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the job',
        required => '1',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_job_last_build_stop' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_job_last_build_stop {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_job_last_build_stop");
    }

    # parse inputs
    my $_resource_path = '/job/{name}/lastBuild/stop';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# post_view_config
#
# 
#
# @param string $name Name of the view (required)
# @param string $body View configuration in config.xml format (required)
# @param string $jenkins_crumb CSRF protection token (optional)
{
    my $params = {
    'name' => {
        data_type => 'string',
        description => 'Name of the view',
        required => '1',
    },
    'body' => {
        data_type => 'string',
        description => 'View configuration in config.xml format',
        required => '1',
    },
    'jenkins_crumb' => {
        data_type => 'string',
        description => 'CSRF protection token',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'post_view_config' } = {
        summary => '',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub post_view_config {
    my ($self, %args) = @_;

    # verify the required parameter 'name' is set
    unless (exists $args{'name'}) {
      croak("Missing the required parameter 'name' when calling post_view_config");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling post_view_config");
    }

    # parse inputs
    my $_resource_path = '/view/{name}/config.xml';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('*/*');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # header params
    if ( exists $args{'jenkins_crumb'}) {
        $header_params->{'Jenkins-Crumb'} = $self->{api_client}->to_header_value($args{'jenkins_crumb'});
    }

    # path params
    if ( exists $args{'name'}) {
        my $_base_variable = "{" . "name" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'name'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(jenkins_auth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
