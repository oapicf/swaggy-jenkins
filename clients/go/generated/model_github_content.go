/*
Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

API version: 2.0.1-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the GithubContent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GithubContent{}

// GithubContent struct for GithubContent
type GithubContent struct {
	Name *string `json:"name,omitempty"`
	Sha *string `json:"sha,omitempty"`
	Class *string `json:"_class,omitempty"`
	Repo *string `json:"repo,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Owner *string `json:"owner,omitempty"`
	Path *string `json:"path,omitempty"`
	Base64Data *string `json:"base64Data,omitempty"`
}

// NewGithubContent instantiates a new GithubContent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGithubContent() *GithubContent {
	this := GithubContent{}
	return &this
}

// NewGithubContentWithDefaults instantiates a new GithubContent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGithubContentWithDefaults() *GithubContent {
	this := GithubContent{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GithubContent) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubContent) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GithubContent) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GithubContent) SetName(v string) {
	o.Name = &v
}

// GetSha returns the Sha field value if set, zero value otherwise.
func (o *GithubContent) GetSha() string {
	if o == nil || IsNil(o.Sha) {
		var ret string
		return ret
	}
	return *o.Sha
}

// GetShaOk returns a tuple with the Sha field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubContent) GetShaOk() (*string, bool) {
	if o == nil || IsNil(o.Sha) {
		return nil, false
	}
	return o.Sha, true
}

// HasSha returns a boolean if a field has been set.
func (o *GithubContent) HasSha() bool {
	if o != nil && !IsNil(o.Sha) {
		return true
	}

	return false
}

// SetSha gets a reference to the given string and assigns it to the Sha field.
func (o *GithubContent) SetSha(v string) {
	o.Sha = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *GithubContent) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubContent) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *GithubContent) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *GithubContent) SetClass(v string) {
	o.Class = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *GithubContent) GetRepo() string {
	if o == nil || IsNil(o.Repo) {
		var ret string
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubContent) GetRepoOk() (*string, bool) {
	if o == nil || IsNil(o.Repo) {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *GithubContent) HasRepo() bool {
	if o != nil && !IsNil(o.Repo) {
		return true
	}

	return false
}

// SetRepo gets a reference to the given string and assigns it to the Repo field.
func (o *GithubContent) SetRepo(v string) {
	o.Repo = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *GithubContent) GetSize() int32 {
	if o == nil || IsNil(o.Size) {
		var ret int32
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubContent) GetSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.Size) {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *GithubContent) HasSize() bool {
	if o != nil && !IsNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given int32 and assigns it to the Size field.
func (o *GithubContent) SetSize(v int32) {
	o.Size = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *GithubContent) GetOwner() string {
	if o == nil || IsNil(o.Owner) {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubContent) GetOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.Owner) {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *GithubContent) HasOwner() bool {
	if o != nil && !IsNil(o.Owner) {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *GithubContent) SetOwner(v string) {
	o.Owner = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *GithubContent) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubContent) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *GithubContent) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *GithubContent) SetPath(v string) {
	o.Path = &v
}

// GetBase64Data returns the Base64Data field value if set, zero value otherwise.
func (o *GithubContent) GetBase64Data() string {
	if o == nil || IsNil(o.Base64Data) {
		var ret string
		return ret
	}
	return *o.Base64Data
}

// GetBase64DataOk returns a tuple with the Base64Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GithubContent) GetBase64DataOk() (*string, bool) {
	if o == nil || IsNil(o.Base64Data) {
		return nil, false
	}
	return o.Base64Data, true
}

// HasBase64Data returns a boolean if a field has been set.
func (o *GithubContent) HasBase64Data() bool {
	if o != nil && !IsNil(o.Base64Data) {
		return true
	}

	return false
}

// SetBase64Data gets a reference to the given string and assigns it to the Base64Data field.
func (o *GithubContent) SetBase64Data(v string) {
	o.Base64Data = &v
}

func (o GithubContent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GithubContent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Sha) {
		toSerialize["sha"] = o.Sha
	}
	if !IsNil(o.Class) {
		toSerialize["_class"] = o.Class
	}
	if !IsNil(o.Repo) {
		toSerialize["repo"] = o.Repo
	}
	if !IsNil(o.Size) {
		toSerialize["size"] = o.Size
	}
	if !IsNil(o.Owner) {
		toSerialize["owner"] = o.Owner
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Base64Data) {
		toSerialize["base64Data"] = o.Base64Data
	}
	return toSerialize, nil
}

type NullableGithubContent struct {
	value *GithubContent
	isSet bool
}

func (v NullableGithubContent) Get() *GithubContent {
	return v.value
}

func (v *NullableGithubContent) Set(val *GithubContent) {
	v.value = val
	v.isSet = true
}

func (v NullableGithubContent) IsSet() bool {
	return v.isSet
}

func (v *NullableGithubContent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGithubContent(val *GithubContent) *NullableGithubContent {
	return &NullableGithubContent{value: val, isSet: true}
}

func (v NullableGithubContent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGithubContent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


