/*
Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

API version: 2.0.1-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BranchImplpermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BranchImplpermissions{}

// BranchImplpermissions struct for BranchImplpermissions
type BranchImplpermissions struct {
	Create *bool `json:"create,omitempty"`
	Read *bool `json:"read,omitempty"`
	Start *bool `json:"start,omitempty"`
	Stop *bool `json:"stop,omitempty"`
	Class *string `json:"_class,omitempty"`
}

// NewBranchImplpermissions instantiates a new BranchImplpermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBranchImplpermissions() *BranchImplpermissions {
	this := BranchImplpermissions{}
	return &this
}

// NewBranchImplpermissionsWithDefaults instantiates a new BranchImplpermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBranchImplpermissionsWithDefaults() *BranchImplpermissions {
	this := BranchImplpermissions{}
	return &this
}

// GetCreate returns the Create field value if set, zero value otherwise.
func (o *BranchImplpermissions) GetCreate() bool {
	if o == nil || IsNil(o.Create) {
		var ret bool
		return ret
	}
	return *o.Create
}

// GetCreateOk returns a tuple with the Create field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchImplpermissions) GetCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.Create) {
		return nil, false
	}
	return o.Create, true
}

// HasCreate returns a boolean if a field has been set.
func (o *BranchImplpermissions) HasCreate() bool {
	if o != nil && !IsNil(o.Create) {
		return true
	}

	return false
}

// SetCreate gets a reference to the given bool and assigns it to the Create field.
func (o *BranchImplpermissions) SetCreate(v bool) {
	o.Create = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *BranchImplpermissions) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchImplpermissions) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *BranchImplpermissions) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *BranchImplpermissions) SetRead(v bool) {
	o.Read = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *BranchImplpermissions) GetStart() bool {
	if o == nil || IsNil(o.Start) {
		var ret bool
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchImplpermissions) GetStartOk() (*bool, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *BranchImplpermissions) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given bool and assigns it to the Start field.
func (o *BranchImplpermissions) SetStart(v bool) {
	o.Start = &v
}

// GetStop returns the Stop field value if set, zero value otherwise.
func (o *BranchImplpermissions) GetStop() bool {
	if o == nil || IsNil(o.Stop) {
		var ret bool
		return ret
	}
	return *o.Stop
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchImplpermissions) GetStopOk() (*bool, bool) {
	if o == nil || IsNil(o.Stop) {
		return nil, false
	}
	return o.Stop, true
}

// HasStop returns a boolean if a field has been set.
func (o *BranchImplpermissions) HasStop() bool {
	if o != nil && !IsNil(o.Stop) {
		return true
	}

	return false
}

// SetStop gets a reference to the given bool and assigns it to the Stop field.
func (o *BranchImplpermissions) SetStop(v bool) {
	o.Stop = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *BranchImplpermissions) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BranchImplpermissions) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *BranchImplpermissions) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *BranchImplpermissions) SetClass(v string) {
	o.Class = &v
}

func (o BranchImplpermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BranchImplpermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Create) {
		toSerialize["create"] = o.Create
	}
	if !IsNil(o.Read) {
		toSerialize["read"] = o.Read
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Stop) {
		toSerialize["stop"] = o.Stop
	}
	if !IsNil(o.Class) {
		toSerialize["_class"] = o.Class
	}
	return toSerialize, nil
}

type NullableBranchImplpermissions struct {
	value *BranchImplpermissions
	isSet bool
}

func (v NullableBranchImplpermissions) Get() *BranchImplpermissions {
	return v.value
}

func (v *NullableBranchImplpermissions) Set(val *BranchImplpermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableBranchImplpermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableBranchImplpermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBranchImplpermissions(val *BranchImplpermissions) *NullableBranchImplpermissions {
	return &NullableBranchImplpermissions{value: val, isSet: true}
}

func (v NullableBranchImplpermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBranchImplpermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


