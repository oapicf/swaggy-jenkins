/*
Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

API version: 2.0.1-pre.0
Contact: blah+oapicf@cliffano.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExtensionClassImpl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtensionClassImpl{}

// ExtensionClassImpl struct for ExtensionClassImpl
type ExtensionClassImpl struct {
	Class *string `json:"_class,omitempty"`
	Links *ExtensionClassImpllinks `json:"_links,omitempty"`
	Classes []string `json:"classes,omitempty"`
}

// NewExtensionClassImpl instantiates a new ExtensionClassImpl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtensionClassImpl() *ExtensionClassImpl {
	this := ExtensionClassImpl{}
	return &this
}

// NewExtensionClassImplWithDefaults instantiates a new ExtensionClassImpl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtensionClassImplWithDefaults() *ExtensionClassImpl {
	this := ExtensionClassImpl{}
	return &this
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *ExtensionClassImpl) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionClassImpl) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *ExtensionClassImpl) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *ExtensionClassImpl) SetClass(v string) {
	o.Class = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *ExtensionClassImpl) GetLinks() ExtensionClassImpllinks {
	if o == nil || IsNil(o.Links) {
		var ret ExtensionClassImpllinks
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionClassImpl) GetLinksOk() (*ExtensionClassImpllinks, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *ExtensionClassImpl) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given ExtensionClassImpllinks and assigns it to the Links field.
func (o *ExtensionClassImpl) SetLinks(v ExtensionClassImpllinks) {
	o.Links = &v
}

// GetClasses returns the Classes field value if set, zero value otherwise.
func (o *ExtensionClassImpl) GetClasses() []string {
	if o == nil || IsNil(o.Classes) {
		var ret []string
		return ret
	}
	return o.Classes
}

// GetClassesOk returns a tuple with the Classes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExtensionClassImpl) GetClassesOk() ([]string, bool) {
	if o == nil || IsNil(o.Classes) {
		return nil, false
	}
	return o.Classes, true
}

// HasClasses returns a boolean if a field has been set.
func (o *ExtensionClassImpl) HasClasses() bool {
	if o != nil && !IsNil(o.Classes) {
		return true
	}

	return false
}

// SetClasses gets a reference to the given []string and assigns it to the Classes field.
func (o *ExtensionClassImpl) SetClasses(v []string) {
	o.Classes = v
}

func (o ExtensionClassImpl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtensionClassImpl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Class) {
		toSerialize["_class"] = o.Class
	}
	if !IsNil(o.Links) {
		toSerialize["_links"] = o.Links
	}
	if !IsNil(o.Classes) {
		toSerialize["classes"] = o.Classes
	}
	return toSerialize, nil
}

type NullableExtensionClassImpl struct {
	value *ExtensionClassImpl
	isSet bool
}

func (v NullableExtensionClassImpl) Get() *ExtensionClassImpl {
	return v.value
}

func (v *NullableExtensionClassImpl) Set(val *ExtensionClassImpl) {
	v.value = val
	v.isSet = true
}

func (v NullableExtensionClassImpl) IsSet() bool {
	return v.isSet
}

func (v *NullableExtensionClassImpl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtensionClassImpl(val *ExtensionClassImpl) *NullableExtensionClassImpl {
	return &NullableExtensionClassImpl{value: val, isSet: true}
}

func (v NullableExtensionClassImpl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtensionClassImpl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


