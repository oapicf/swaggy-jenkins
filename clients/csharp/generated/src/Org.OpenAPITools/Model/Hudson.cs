// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Hudson
    /// </summary>
    public partial class Hudson : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Hudson" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="assignedLabels">assignedLabels</param>
        /// <param name="mode">mode</param>
        /// <param name="nodeDescription">nodeDescription</param>
        /// <param name="nodeName">nodeName</param>
        /// <param name="numExecutors">numExecutors</param>
        /// <param name="description">description</param>
        /// <param name="jobs">jobs</param>
        /// <param name="primaryView">primaryView</param>
        /// <param name="quietingDown">quietingDown</param>
        /// <param name="slaveAgentPort">slaveAgentPort</param>
        /// <param name="unlabeledLoad">unlabeledLoad</param>
        /// <param name="useCrumbs">useCrumbs</param>
        /// <param name="useSecurity">useSecurity</param>
        /// <param name="views">views</param>
        [JsonConstructor]
        public Hudson(Option<string?> @class = default, Option<List<HudsonassignedLabels>?> assignedLabels = default, Option<string?> mode = default, Option<string?> nodeDescription = default, Option<string?> nodeName = default, Option<int?> numExecutors = default, Option<string?> description = default, Option<List<FreeStyleProject>?> jobs = default, Option<AllView?> primaryView = default, Option<bool?> quietingDown = default, Option<int?> slaveAgentPort = default, Option<UnlabeledLoadStatistics?> unlabeledLoad = default, Option<bool?> useCrumbs = default, Option<bool?> useSecurity = default, Option<List<AllView>?> views = default)
        {
            ClassOption = @class;
            AssignedLabelsOption = assignedLabels;
            ModeOption = mode;
            NodeDescriptionOption = nodeDescription;
            NodeNameOption = nodeName;
            NumExecutorsOption = numExecutors;
            DescriptionOption = description;
            JobsOption = jobs;
            PrimaryViewOption = primaryView;
            QuietingDownOption = quietingDown;
            SlaveAgentPortOption = slaveAgentPort;
            UnlabeledLoadOption = unlabeledLoad;
            UseCrumbsOption = useCrumbs;
            UseSecurityOption = useSecurity;
            ViewsOption = views;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of AssignedLabels
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<HudsonassignedLabels>?> AssignedLabelsOption { get; private set; }

        /// <summary>
        /// Gets or Sets AssignedLabels
        /// </summary>
        [JsonPropertyName("assignedLabels")]
        public List<HudsonassignedLabels>? AssignedLabels { get { return this.AssignedLabelsOption; } set { this.AssignedLabelsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Mode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ModeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [JsonPropertyName("mode")]
        public string? Mode { get { return this.ModeOption; } set { this.ModeOption = new(value); } }

        /// <summary>
        /// Used to track the state of NodeDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NodeDescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets NodeDescription
        /// </summary>
        [JsonPropertyName("nodeDescription")]
        public string? NodeDescription { get { return this.NodeDescriptionOption; } set { this.NodeDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of NodeName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NodeNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets NodeName
        /// </summary>
        [JsonPropertyName("nodeName")]
        public string? NodeName { get { return this.NodeNameOption; } set { this.NodeNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumExecutors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumExecutorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumExecutors
        /// </summary>
        [JsonPropertyName("numExecutors")]
        public int? NumExecutors { get { return this.NumExecutorsOption; } set { this.NumExecutorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Jobs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FreeStyleProject>?> JobsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Jobs
        /// </summary>
        [JsonPropertyName("jobs")]
        public List<FreeStyleProject>? Jobs { get { return this.JobsOption; } set { this.JobsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PrimaryView
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<AllView?> PrimaryViewOption { get; private set; }

        /// <summary>
        /// Gets or Sets PrimaryView
        /// </summary>
        [JsonPropertyName("primaryView")]
        public AllView? PrimaryView { get { return this.PrimaryViewOption; } set { this.PrimaryViewOption = new(value); } }

        /// <summary>
        /// Used to track the state of QuietingDown
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> QuietingDownOption { get; private set; }

        /// <summary>
        /// Gets or Sets QuietingDown
        /// </summary>
        [JsonPropertyName("quietingDown")]
        public bool? QuietingDown { get { return this.QuietingDownOption; } set { this.QuietingDownOption = new(value); } }

        /// <summary>
        /// Used to track the state of SlaveAgentPort
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> SlaveAgentPortOption { get; private set; }

        /// <summary>
        /// Gets or Sets SlaveAgentPort
        /// </summary>
        [JsonPropertyName("slaveAgentPort")]
        public int? SlaveAgentPort { get { return this.SlaveAgentPortOption; } set { this.SlaveAgentPortOption = new(value); } }

        /// <summary>
        /// Used to track the state of UnlabeledLoad
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<UnlabeledLoadStatistics?> UnlabeledLoadOption { get; private set; }

        /// <summary>
        /// Gets or Sets UnlabeledLoad
        /// </summary>
        [JsonPropertyName("unlabeledLoad")]
        public UnlabeledLoadStatistics? UnlabeledLoad { get { return this.UnlabeledLoadOption; } set { this.UnlabeledLoadOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseCrumbs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseCrumbsOption { get; private set; }

        /// <summary>
        /// Gets or Sets UseCrumbs
        /// </summary>
        [JsonPropertyName("useCrumbs")]
        public bool? UseCrumbs { get { return this.UseCrumbsOption; } set { this.UseCrumbsOption = new(value); } }

        /// <summary>
        /// Used to track the state of UseSecurity
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> UseSecurityOption { get; private set; }

        /// <summary>
        /// Gets or Sets UseSecurity
        /// </summary>
        [JsonPropertyName("useSecurity")]
        public bool? UseSecurity { get { return this.UseSecurityOption; } set { this.UseSecurityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Views
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AllView>?> ViewsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Views
        /// </summary>
        [JsonPropertyName("views")]
        public List<AllView>? Views { get { return this.ViewsOption; } set { this.ViewsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Hudson {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  AssignedLabels: ").Append(AssignedLabels).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  NodeDescription: ").Append(NodeDescription).Append("\n");
            sb.Append("  NodeName: ").Append(NodeName).Append("\n");
            sb.Append("  NumExecutors: ").Append(NumExecutors).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Jobs: ").Append(Jobs).Append("\n");
            sb.Append("  PrimaryView: ").Append(PrimaryView).Append("\n");
            sb.Append("  QuietingDown: ").Append(QuietingDown).Append("\n");
            sb.Append("  SlaveAgentPort: ").Append(SlaveAgentPort).Append("\n");
            sb.Append("  UnlabeledLoad: ").Append(UnlabeledLoad).Append("\n");
            sb.Append("  UseCrumbs: ").Append(UseCrumbs).Append("\n");
            sb.Append("  UseSecurity: ").Append(UseSecurity).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Hudson" />
    /// </summary>
    public class HudsonJsonConverter : JsonConverter<Hudson>
    {
        /// <summary>
        /// Deserializes json to <see cref="Hudson" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Hudson Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<List<HudsonassignedLabels>?> assignedLabels = default;
            Option<string?> mode = default;
            Option<string?> nodeDescription = default;
            Option<string?> nodeName = default;
            Option<int?> numExecutors = default;
            Option<string?> description = default;
            Option<List<FreeStyleProject>?> jobs = default;
            Option<AllView?> primaryView = default;
            Option<bool?> quietingDown = default;
            Option<int?> slaveAgentPort = default;
            Option<UnlabeledLoadStatistics?> unlabeledLoad = default;
            Option<bool?> useCrumbs = default;
            Option<bool?> useSecurity = default;
            Option<List<AllView>?> views = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "assignedLabels":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                assignedLabels = new Option<List<HudsonassignedLabels>?>(JsonSerializer.Deserialize<List<HudsonassignedLabels>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "mode":
                            mode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nodeDescription":
                            nodeDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nodeName":
                            nodeName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "numExecutors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numExecutors = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "jobs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                jobs = new Option<List<FreeStyleProject>?>(JsonSerializer.Deserialize<List<FreeStyleProject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "primaryView":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                primaryView = new Option<AllView?>(JsonSerializer.Deserialize<AllView>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "quietingDown":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                quietingDown = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "slaveAgentPort":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                slaveAgentPort = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "unlabeledLoad":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                unlabeledLoad = new Option<UnlabeledLoadStatistics?>(JsonSerializer.Deserialize<UnlabeledLoadStatistics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "useCrumbs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useCrumbs = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "useSecurity":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                useSecurity = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "views":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                views = new Option<List<AllView>?>(JsonSerializer.Deserialize<List<AllView>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class Hudson.");

            if (assignedLabels.IsSet && assignedLabels.Value == null)
                throw new ArgumentNullException(nameof(assignedLabels), "Property is not nullable for class Hudson.");

            if (mode.IsSet && mode.Value == null)
                throw new ArgumentNullException(nameof(mode), "Property is not nullable for class Hudson.");

            if (nodeDescription.IsSet && nodeDescription.Value == null)
                throw new ArgumentNullException(nameof(nodeDescription), "Property is not nullable for class Hudson.");

            if (nodeName.IsSet && nodeName.Value == null)
                throw new ArgumentNullException(nameof(nodeName), "Property is not nullable for class Hudson.");

            if (numExecutors.IsSet && numExecutors.Value == null)
                throw new ArgumentNullException(nameof(numExecutors), "Property is not nullable for class Hudson.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Hudson.");

            if (jobs.IsSet && jobs.Value == null)
                throw new ArgumentNullException(nameof(jobs), "Property is not nullable for class Hudson.");

            if (primaryView.IsSet && primaryView.Value == null)
                throw new ArgumentNullException(nameof(primaryView), "Property is not nullable for class Hudson.");

            if (quietingDown.IsSet && quietingDown.Value == null)
                throw new ArgumentNullException(nameof(quietingDown), "Property is not nullable for class Hudson.");

            if (slaveAgentPort.IsSet && slaveAgentPort.Value == null)
                throw new ArgumentNullException(nameof(slaveAgentPort), "Property is not nullable for class Hudson.");

            if (unlabeledLoad.IsSet && unlabeledLoad.Value == null)
                throw new ArgumentNullException(nameof(unlabeledLoad), "Property is not nullable for class Hudson.");

            if (useCrumbs.IsSet && useCrumbs.Value == null)
                throw new ArgumentNullException(nameof(useCrumbs), "Property is not nullable for class Hudson.");

            if (useSecurity.IsSet && useSecurity.Value == null)
                throw new ArgumentNullException(nameof(useSecurity), "Property is not nullable for class Hudson.");

            if (views.IsSet && views.Value == null)
                throw new ArgumentNullException(nameof(views), "Property is not nullable for class Hudson.");

            return new Hudson(varClass, assignedLabels, mode, nodeDescription, nodeName, numExecutors, description, jobs, primaryView, quietingDown, slaveAgentPort, unlabeledLoad, useCrumbs, useSecurity, views);
        }

        /// <summary>
        /// Serializes a <see cref="Hudson" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hudson"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Hudson hudson, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, hudson, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Hudson" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hudson"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Hudson hudson, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hudson.ClassOption.IsSet && hudson.Class == null)
                throw new ArgumentNullException(nameof(hudson.Class), "Property is required for class Hudson.");

            if (hudson.AssignedLabelsOption.IsSet && hudson.AssignedLabels == null)
                throw new ArgumentNullException(nameof(hudson.AssignedLabels), "Property is required for class Hudson.");

            if (hudson.ModeOption.IsSet && hudson.Mode == null)
                throw new ArgumentNullException(nameof(hudson.Mode), "Property is required for class Hudson.");

            if (hudson.NodeDescriptionOption.IsSet && hudson.NodeDescription == null)
                throw new ArgumentNullException(nameof(hudson.NodeDescription), "Property is required for class Hudson.");

            if (hudson.NodeNameOption.IsSet && hudson.NodeName == null)
                throw new ArgumentNullException(nameof(hudson.NodeName), "Property is required for class Hudson.");

            if (hudson.DescriptionOption.IsSet && hudson.Description == null)
                throw new ArgumentNullException(nameof(hudson.Description), "Property is required for class Hudson.");

            if (hudson.JobsOption.IsSet && hudson.Jobs == null)
                throw new ArgumentNullException(nameof(hudson.Jobs), "Property is required for class Hudson.");

            if (hudson.PrimaryViewOption.IsSet && hudson.PrimaryView == null)
                throw new ArgumentNullException(nameof(hudson.PrimaryView), "Property is required for class Hudson.");

            if (hudson.UnlabeledLoadOption.IsSet && hudson.UnlabeledLoad == null)
                throw new ArgumentNullException(nameof(hudson.UnlabeledLoad), "Property is required for class Hudson.");

            if (hudson.ViewsOption.IsSet && hudson.Views == null)
                throw new ArgumentNullException(nameof(hudson.Views), "Property is required for class Hudson.");

            if (hudson.ClassOption.IsSet)
                writer.WriteString("_class", hudson.Class);

            if (hudson.AssignedLabelsOption.IsSet)
            {
                writer.WritePropertyName("assignedLabels");
                JsonSerializer.Serialize(writer, hudson.AssignedLabels, jsonSerializerOptions);
            }
            if (hudson.ModeOption.IsSet)
                writer.WriteString("mode", hudson.Mode);

            if (hudson.NodeDescriptionOption.IsSet)
                writer.WriteString("nodeDescription", hudson.NodeDescription);

            if (hudson.NodeNameOption.IsSet)
                writer.WriteString("nodeName", hudson.NodeName);

            if (hudson.NumExecutorsOption.IsSet)
                writer.WriteNumber("numExecutors", hudson.NumExecutorsOption.Value!.Value);

            if (hudson.DescriptionOption.IsSet)
                writer.WriteString("description", hudson.Description);

            if (hudson.JobsOption.IsSet)
            {
                writer.WritePropertyName("jobs");
                JsonSerializer.Serialize(writer, hudson.Jobs, jsonSerializerOptions);
            }
            if (hudson.PrimaryViewOption.IsSet)
            {
                writer.WritePropertyName("primaryView");
                JsonSerializer.Serialize(writer, hudson.PrimaryView, jsonSerializerOptions);
            }
            if (hudson.QuietingDownOption.IsSet)
                writer.WriteBoolean("quietingDown", hudson.QuietingDownOption.Value!.Value);

            if (hudson.SlaveAgentPortOption.IsSet)
                writer.WriteNumber("slaveAgentPort", hudson.SlaveAgentPortOption.Value!.Value);

            if (hudson.UnlabeledLoadOption.IsSet)
            {
                writer.WritePropertyName("unlabeledLoad");
                JsonSerializer.Serialize(writer, hudson.UnlabeledLoad, jsonSerializerOptions);
            }
            if (hudson.UseCrumbsOption.IsSet)
                writer.WriteBoolean("useCrumbs", hudson.UseCrumbsOption.Value!.Value);

            if (hudson.UseSecurityOption.IsSet)
                writer.WriteBoolean("useSecurity", hudson.UseSecurityOption.Value!.Value);

            if (hudson.ViewsOption.IsSet)
            {
                writer.WritePropertyName("views");
                JsonSerializer.Serialize(writer, hudson.Views, jsonSerializerOptions);
            }
        }
    }
}
