// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PipelineFolderImpl
    /// </summary>
    public partial class PipelineFolderImpl : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineFolderImpl" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="displayName">displayName</param>
        /// <param name="fullName">fullName</param>
        /// <param name="name">name</param>
        /// <param name="organization">organization</param>
        /// <param name="numberOfFolders">numberOfFolders</param>
        /// <param name="numberOfPipelines">numberOfPipelines</param>
        [JsonConstructor]
        public PipelineFolderImpl(Option<string?> @class = default, Option<string?> displayName = default, Option<string?> fullName = default, Option<string?> name = default, Option<string?> organization = default, Option<int?> numberOfFolders = default, Option<int?> numberOfPipelines = default)
        {
            ClassOption = @class;
            DisplayNameOption = displayName;
            FullNameOption = fullName;
            NameOption = name;
            OrganizationOption = organization;
            NumberOfFoldersOption = numberOfFolders;
            NumberOfPipelinesOption = numberOfPipelines;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [JsonPropertyName("fullName")]
        public string? FullName { get { return this.FullNameOption; } set { this.FullNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Organization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [JsonPropertyName("organization")]
        public string? Organization { get { return this.OrganizationOption; } set { this.OrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfFolders
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOfFoldersOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumberOfFolders
        /// </summary>
        [JsonPropertyName("numberOfFolders")]
        public int? NumberOfFolders { get { return this.NumberOfFoldersOption; } set { this.NumberOfFoldersOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfPipelines
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOfPipelinesOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumberOfPipelines
        /// </summary>
        [JsonPropertyName("numberOfPipelines")]
        public int? NumberOfPipelines { get { return this.NumberOfPipelinesOption; } set { this.NumberOfPipelinesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineFolderImpl {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  NumberOfFolders: ").Append(NumberOfFolders).Append("\n");
            sb.Append("  NumberOfPipelines: ").Append(NumberOfPipelines).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PipelineFolderImpl" />
    /// </summary>
    public class PipelineFolderImplJsonConverter : JsonConverter<PipelineFolderImpl>
    {
        /// <summary>
        /// Deserializes json to <see cref="PipelineFolderImpl" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PipelineFolderImpl Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<string?> displayName = default;
            Option<string?> fullName = default;
            Option<string?> name = default;
            Option<string?> organization = default;
            Option<int?> numberOfFolders = default;
            Option<int?> numberOfPipelines = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fullName":
                            fullName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organization":
                            organization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "numberOfFolders":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberOfFolders = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "numberOfPipelines":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberOfPipelines = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class PipelineFolderImpl.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class PipelineFolderImpl.");

            if (fullName.IsSet && fullName.Value == null)
                throw new ArgumentNullException(nameof(fullName), "Property is not nullable for class PipelineFolderImpl.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class PipelineFolderImpl.");

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization), "Property is not nullable for class PipelineFolderImpl.");

            if (numberOfFolders.IsSet && numberOfFolders.Value == null)
                throw new ArgumentNullException(nameof(numberOfFolders), "Property is not nullable for class PipelineFolderImpl.");

            if (numberOfPipelines.IsSet && numberOfPipelines.Value == null)
                throw new ArgumentNullException(nameof(numberOfPipelines), "Property is not nullable for class PipelineFolderImpl.");

            return new PipelineFolderImpl(varClass, displayName, fullName, name, organization, numberOfFolders, numberOfPipelines);
        }

        /// <summary>
        /// Serializes a <see cref="PipelineFolderImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineFolderImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PipelineFolderImpl pipelineFolderImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pipelineFolderImpl, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PipelineFolderImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineFolderImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PipelineFolderImpl pipelineFolderImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pipelineFolderImpl.ClassOption.IsSet && pipelineFolderImpl.Class == null)
                throw new ArgumentNullException(nameof(pipelineFolderImpl.Class), "Property is required for class PipelineFolderImpl.");

            if (pipelineFolderImpl.DisplayNameOption.IsSet && pipelineFolderImpl.DisplayName == null)
                throw new ArgumentNullException(nameof(pipelineFolderImpl.DisplayName), "Property is required for class PipelineFolderImpl.");

            if (pipelineFolderImpl.FullNameOption.IsSet && pipelineFolderImpl.FullName == null)
                throw new ArgumentNullException(nameof(pipelineFolderImpl.FullName), "Property is required for class PipelineFolderImpl.");

            if (pipelineFolderImpl.NameOption.IsSet && pipelineFolderImpl.Name == null)
                throw new ArgumentNullException(nameof(pipelineFolderImpl.Name), "Property is required for class PipelineFolderImpl.");

            if (pipelineFolderImpl.OrganizationOption.IsSet && pipelineFolderImpl.Organization == null)
                throw new ArgumentNullException(nameof(pipelineFolderImpl.Organization), "Property is required for class PipelineFolderImpl.");

            if (pipelineFolderImpl.ClassOption.IsSet)
                writer.WriteString("_class", pipelineFolderImpl.Class);

            if (pipelineFolderImpl.DisplayNameOption.IsSet)
                writer.WriteString("displayName", pipelineFolderImpl.DisplayName);

            if (pipelineFolderImpl.FullNameOption.IsSet)
                writer.WriteString("fullName", pipelineFolderImpl.FullName);

            if (pipelineFolderImpl.NameOption.IsSet)
                writer.WriteString("name", pipelineFolderImpl.Name);

            if (pipelineFolderImpl.OrganizationOption.IsSet)
                writer.WriteString("organization", pipelineFolderImpl.Organization);

            if (pipelineFolderImpl.NumberOfFoldersOption.IsSet)
                writer.WriteNumber("numberOfFolders", pipelineFolderImpl.NumberOfFoldersOption.Value!.Value);

            if (pipelineFolderImpl.NumberOfPipelinesOption.IsSet)
                writer.WriteNumber("numberOfPipelines", pipelineFolderImpl.NumberOfPipelinesOption.Value!.Value);
        }
    }
}
