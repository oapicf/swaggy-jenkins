// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HudsonMasterComputermonitorData
    /// </summary>
    public partial class HudsonMasterComputermonitorData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonMasterComputermonitorData" /> class.
        /// </summary>
        /// <param name="hudsonNodeMonitorsSwapSpaceMonitor">hudsonNodeMonitorsSwapSpaceMonitor</param>
        /// <param name="hudsonNodeMonitorsTemporarySpaceMonitor">hudsonNodeMonitorsTemporarySpaceMonitor</param>
        /// <param name="hudsonNodeMonitorsDiskSpaceMonitor">hudsonNodeMonitorsDiskSpaceMonitor</param>
        /// <param name="hudsonNodeMonitorsArchitectureMonitor">hudsonNodeMonitorsArchitectureMonitor</param>
        /// <param name="hudsonNodeMonitorsResponseTimeMonitor">hudsonNodeMonitorsResponseTimeMonitor</param>
        /// <param name="hudsonNodeMonitorsClockMonitor">hudsonNodeMonitorsClockMonitor</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public HudsonMasterComputermonitorData(Option<SwapSpaceMonitorMemoryUsage2?> hudsonNodeMonitorsSwapSpaceMonitor = default, Option<DiskSpaceMonitorDescriptorDiskSpace?> hudsonNodeMonitorsTemporarySpaceMonitor = default, Option<DiskSpaceMonitorDescriptorDiskSpace?> hudsonNodeMonitorsDiskSpaceMonitor = default, Option<string?> hudsonNodeMonitorsArchitectureMonitor = default, Option<ResponseTimeMonitorData?> hudsonNodeMonitorsResponseTimeMonitor = default, Option<ClockDifference?> hudsonNodeMonitorsClockMonitor = default, Option<string?> @class = default)
        {
            HudsonNodeMonitorsSwapSpaceMonitorOption = hudsonNodeMonitorsSwapSpaceMonitor;
            HudsonNodeMonitorsTemporarySpaceMonitorOption = hudsonNodeMonitorsTemporarySpaceMonitor;
            HudsonNodeMonitorsDiskSpaceMonitorOption = hudsonNodeMonitorsDiskSpaceMonitor;
            HudsonNodeMonitorsArchitectureMonitorOption = hudsonNodeMonitorsArchitectureMonitor;
            HudsonNodeMonitorsResponseTimeMonitorOption = hudsonNodeMonitorsResponseTimeMonitor;
            HudsonNodeMonitorsClockMonitorOption = hudsonNodeMonitorsClockMonitor;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of HudsonNodeMonitorsSwapSpaceMonitor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SwapSpaceMonitorMemoryUsage2?> HudsonNodeMonitorsSwapSpaceMonitorOption { get; private set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsSwapSpaceMonitor
        /// </summary>
        [JsonPropertyName("hudson.node_monitors.SwapSpaceMonitor")]
        public SwapSpaceMonitorMemoryUsage2? HudsonNodeMonitorsSwapSpaceMonitor { get { return this.HudsonNodeMonitorsSwapSpaceMonitorOption; } set { this.HudsonNodeMonitorsSwapSpaceMonitorOption = new(value); } }

        /// <summary>
        /// Used to track the state of HudsonNodeMonitorsTemporarySpaceMonitor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DiskSpaceMonitorDescriptorDiskSpace?> HudsonNodeMonitorsTemporarySpaceMonitorOption { get; private set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsTemporarySpaceMonitor
        /// </summary>
        [JsonPropertyName("hudson.node_monitors.TemporarySpaceMonitor")]
        public DiskSpaceMonitorDescriptorDiskSpace? HudsonNodeMonitorsTemporarySpaceMonitor { get { return this.HudsonNodeMonitorsTemporarySpaceMonitorOption; } set { this.HudsonNodeMonitorsTemporarySpaceMonitorOption = new(value); } }

        /// <summary>
        /// Used to track the state of HudsonNodeMonitorsDiskSpaceMonitor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DiskSpaceMonitorDescriptorDiskSpace?> HudsonNodeMonitorsDiskSpaceMonitorOption { get; private set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsDiskSpaceMonitor
        /// </summary>
        [JsonPropertyName("hudson.node_monitors.DiskSpaceMonitor")]
        public DiskSpaceMonitorDescriptorDiskSpace? HudsonNodeMonitorsDiskSpaceMonitor { get { return this.HudsonNodeMonitorsDiskSpaceMonitorOption; } set { this.HudsonNodeMonitorsDiskSpaceMonitorOption = new(value); } }

        /// <summary>
        /// Used to track the state of HudsonNodeMonitorsArchitectureMonitor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HudsonNodeMonitorsArchitectureMonitorOption { get; private set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsArchitectureMonitor
        /// </summary>
        [JsonPropertyName("hudson.node_monitors.ArchitectureMonitor")]
        public string? HudsonNodeMonitorsArchitectureMonitor { get { return this.HudsonNodeMonitorsArchitectureMonitorOption; } set { this.HudsonNodeMonitorsArchitectureMonitorOption = new(value); } }

        /// <summary>
        /// Used to track the state of HudsonNodeMonitorsResponseTimeMonitor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ResponseTimeMonitorData?> HudsonNodeMonitorsResponseTimeMonitorOption { get; private set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsResponseTimeMonitor
        /// </summary>
        [JsonPropertyName("hudson.node_monitors.ResponseTimeMonitor")]
        public ResponseTimeMonitorData? HudsonNodeMonitorsResponseTimeMonitor { get { return this.HudsonNodeMonitorsResponseTimeMonitorOption; } set { this.HudsonNodeMonitorsResponseTimeMonitorOption = new(value); } }

        /// <summary>
        /// Used to track the state of HudsonNodeMonitorsClockMonitor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ClockDifference?> HudsonNodeMonitorsClockMonitorOption { get; private set; }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsClockMonitor
        /// </summary>
        [JsonPropertyName("hudson.node_monitors.ClockMonitor")]
        public ClockDifference? HudsonNodeMonitorsClockMonitor { get { return this.HudsonNodeMonitorsClockMonitorOption; } set { this.HudsonNodeMonitorsClockMonitorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HudsonMasterComputermonitorData {\n");
            sb.Append("  HudsonNodeMonitorsSwapSpaceMonitor: ").Append(HudsonNodeMonitorsSwapSpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsTemporarySpaceMonitor: ").Append(HudsonNodeMonitorsTemporarySpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsDiskSpaceMonitor: ").Append(HudsonNodeMonitorsDiskSpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsArchitectureMonitor: ").Append(HudsonNodeMonitorsArchitectureMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsResponseTimeMonitor: ").Append(HudsonNodeMonitorsResponseTimeMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsClockMonitor: ").Append(HudsonNodeMonitorsClockMonitor).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HudsonMasterComputermonitorData" />
    /// </summary>
    public class HudsonMasterComputermonitorDataJsonConverter : JsonConverter<HudsonMasterComputermonitorData>
    {
        /// <summary>
        /// Deserializes json to <see cref="HudsonMasterComputermonitorData" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HudsonMasterComputermonitorData Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<SwapSpaceMonitorMemoryUsage2?> hudsonNodeMonitorsSwapSpaceMonitor = default;
            Option<DiskSpaceMonitorDescriptorDiskSpace?> hudsonNodeMonitorsTemporarySpaceMonitor = default;
            Option<DiskSpaceMonitorDescriptorDiskSpace?> hudsonNodeMonitorsDiskSpaceMonitor = default;
            Option<string?> hudsonNodeMonitorsArchitectureMonitor = default;
            Option<ResponseTimeMonitorData?> hudsonNodeMonitorsResponseTimeMonitor = default;
            Option<ClockDifference?> hudsonNodeMonitorsClockMonitor = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "hudson.node_monitors.SwapSpaceMonitor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hudsonNodeMonitorsSwapSpaceMonitor = new Option<SwapSpaceMonitorMemoryUsage2?>(JsonSerializer.Deserialize<SwapSpaceMonitorMemoryUsage2>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hudson.node_monitors.TemporarySpaceMonitor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hudsonNodeMonitorsTemporarySpaceMonitor = new Option<DiskSpaceMonitorDescriptorDiskSpace?>(JsonSerializer.Deserialize<DiskSpaceMonitorDescriptorDiskSpace>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hudson.node_monitors.DiskSpaceMonitor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hudsonNodeMonitorsDiskSpaceMonitor = new Option<DiskSpaceMonitorDescriptorDiskSpace?>(JsonSerializer.Deserialize<DiskSpaceMonitorDescriptorDiskSpace>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hudson.node_monitors.ArchitectureMonitor":
                            hudsonNodeMonitorsArchitectureMonitor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "hudson.node_monitors.ResponseTimeMonitor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hudsonNodeMonitorsResponseTimeMonitor = new Option<ResponseTimeMonitorData?>(JsonSerializer.Deserialize<ResponseTimeMonitorData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "hudson.node_monitors.ClockMonitor":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                hudsonNodeMonitorsClockMonitor = new Option<ClockDifference?>(JsonSerializer.Deserialize<ClockDifference>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (hudsonNodeMonitorsSwapSpaceMonitor.IsSet && hudsonNodeMonitorsSwapSpaceMonitor.Value == null)
                throw new ArgumentNullException(nameof(hudsonNodeMonitorsSwapSpaceMonitor), "Property is not nullable for class HudsonMasterComputermonitorData.");

            if (hudsonNodeMonitorsTemporarySpaceMonitor.IsSet && hudsonNodeMonitorsTemporarySpaceMonitor.Value == null)
                throw new ArgumentNullException(nameof(hudsonNodeMonitorsTemporarySpaceMonitor), "Property is not nullable for class HudsonMasterComputermonitorData.");

            if (hudsonNodeMonitorsDiskSpaceMonitor.IsSet && hudsonNodeMonitorsDiskSpaceMonitor.Value == null)
                throw new ArgumentNullException(nameof(hudsonNodeMonitorsDiskSpaceMonitor), "Property is not nullable for class HudsonMasterComputermonitorData.");

            if (hudsonNodeMonitorsArchitectureMonitor.IsSet && hudsonNodeMonitorsArchitectureMonitor.Value == null)
                throw new ArgumentNullException(nameof(hudsonNodeMonitorsArchitectureMonitor), "Property is not nullable for class HudsonMasterComputermonitorData.");

            if (hudsonNodeMonitorsResponseTimeMonitor.IsSet && hudsonNodeMonitorsResponseTimeMonitor.Value == null)
                throw new ArgumentNullException(nameof(hudsonNodeMonitorsResponseTimeMonitor), "Property is not nullable for class HudsonMasterComputermonitorData.");

            if (hudsonNodeMonitorsClockMonitor.IsSet && hudsonNodeMonitorsClockMonitor.Value == null)
                throw new ArgumentNullException(nameof(hudsonNodeMonitorsClockMonitor), "Property is not nullable for class HudsonMasterComputermonitorData.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class HudsonMasterComputermonitorData.");

            return new HudsonMasterComputermonitorData(hudsonNodeMonitorsSwapSpaceMonitor, hudsonNodeMonitorsTemporarySpaceMonitor, hudsonNodeMonitorsDiskSpaceMonitor, hudsonNodeMonitorsArchitectureMonitor, hudsonNodeMonitorsResponseTimeMonitor, hudsonNodeMonitorsClockMonitor, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="HudsonMasterComputermonitorData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hudsonMasterComputermonitorData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HudsonMasterComputermonitorData hudsonMasterComputermonitorData, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, hudsonMasterComputermonitorData, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HudsonMasterComputermonitorData" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hudsonMasterComputermonitorData"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HudsonMasterComputermonitorData hudsonMasterComputermonitorData, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsSwapSpaceMonitorOption.IsSet && hudsonMasterComputermonitorData.HudsonNodeMonitorsSwapSpaceMonitor == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputermonitorData.HudsonNodeMonitorsSwapSpaceMonitor), "Property is required for class HudsonMasterComputermonitorData.");

            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsTemporarySpaceMonitorOption.IsSet && hudsonMasterComputermonitorData.HudsonNodeMonitorsTemporarySpaceMonitor == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputermonitorData.HudsonNodeMonitorsTemporarySpaceMonitor), "Property is required for class HudsonMasterComputermonitorData.");

            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsDiskSpaceMonitorOption.IsSet && hudsonMasterComputermonitorData.HudsonNodeMonitorsDiskSpaceMonitor == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputermonitorData.HudsonNodeMonitorsDiskSpaceMonitor), "Property is required for class HudsonMasterComputermonitorData.");

            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsArchitectureMonitorOption.IsSet && hudsonMasterComputermonitorData.HudsonNodeMonitorsArchitectureMonitor == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputermonitorData.HudsonNodeMonitorsArchitectureMonitor), "Property is required for class HudsonMasterComputermonitorData.");

            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsResponseTimeMonitorOption.IsSet && hudsonMasterComputermonitorData.HudsonNodeMonitorsResponseTimeMonitor == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputermonitorData.HudsonNodeMonitorsResponseTimeMonitor), "Property is required for class HudsonMasterComputermonitorData.");

            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsClockMonitorOption.IsSet && hudsonMasterComputermonitorData.HudsonNodeMonitorsClockMonitor == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputermonitorData.HudsonNodeMonitorsClockMonitor), "Property is required for class HudsonMasterComputermonitorData.");

            if (hudsonMasterComputermonitorData.ClassOption.IsSet && hudsonMasterComputermonitorData.Class == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputermonitorData.Class), "Property is required for class HudsonMasterComputermonitorData.");

            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsSwapSpaceMonitorOption.IsSet)
            {
                writer.WritePropertyName("hudson.node_monitors.SwapSpaceMonitor");
                JsonSerializer.Serialize(writer, hudsonMasterComputermonitorData.HudsonNodeMonitorsSwapSpaceMonitor, jsonSerializerOptions);
            }
            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsTemporarySpaceMonitorOption.IsSet)
            {
                writer.WritePropertyName("hudson.node_monitors.TemporarySpaceMonitor");
                JsonSerializer.Serialize(writer, hudsonMasterComputermonitorData.HudsonNodeMonitorsTemporarySpaceMonitor, jsonSerializerOptions);
            }
            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsDiskSpaceMonitorOption.IsSet)
            {
                writer.WritePropertyName("hudson.node_monitors.DiskSpaceMonitor");
                JsonSerializer.Serialize(writer, hudsonMasterComputermonitorData.HudsonNodeMonitorsDiskSpaceMonitor, jsonSerializerOptions);
            }
            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsArchitectureMonitorOption.IsSet)
                writer.WriteString("hudson.node_monitors.ArchitectureMonitor", hudsonMasterComputermonitorData.HudsonNodeMonitorsArchitectureMonitor);

            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsResponseTimeMonitorOption.IsSet)
            {
                writer.WritePropertyName("hudson.node_monitors.ResponseTimeMonitor");
                JsonSerializer.Serialize(writer, hudsonMasterComputermonitorData.HudsonNodeMonitorsResponseTimeMonitor, jsonSerializerOptions);
            }
            if (hudsonMasterComputermonitorData.HudsonNodeMonitorsClockMonitorOption.IsSet)
            {
                writer.WritePropertyName("hudson.node_monitors.ClockMonitor");
                JsonSerializer.Serialize(writer, hudsonMasterComputermonitorData.HudsonNodeMonitorsClockMonitor, jsonSerializerOptions);
            }
            if (hudsonMasterComputermonitorData.ClassOption.IsSet)
                writer.WriteString("_class", hudsonMasterComputermonitorData.Class);
        }
    }
}
