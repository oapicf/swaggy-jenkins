// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FreeStyleProject
    /// </summary>
    public partial class FreeStyleProject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FreeStyleProject" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="name">name</param>
        /// <param name="url">url</param>
        /// <param name="color">color</param>
        /// <param name="actions">actions</param>
        /// <param name="description">description</param>
        /// <param name="displayName">displayName</param>
        /// <param name="displayNameOrNull">displayNameOrNull</param>
        /// <param name="fullDisplayName">fullDisplayName</param>
        /// <param name="fullName">fullName</param>
        /// <param name="buildable">buildable</param>
        /// <param name="builds">builds</param>
        /// <param name="firstBuild">firstBuild</param>
        /// <param name="healthReport">healthReport</param>
        /// <param name="inQueue">inQueue</param>
        /// <param name="keepDependencies">keepDependencies</param>
        /// <param name="lastBuild">lastBuild</param>
        /// <param name="lastCompletedBuild">lastCompletedBuild</param>
        /// <param name="lastFailedBuild">lastFailedBuild</param>
        /// <param name="lastStableBuild">lastStableBuild</param>
        /// <param name="lastSuccessfulBuild">lastSuccessfulBuild</param>
        /// <param name="lastUnstableBuild">lastUnstableBuild</param>
        /// <param name="lastUnsuccessfulBuild">lastUnsuccessfulBuild</param>
        /// <param name="nextBuildNumber">nextBuildNumber</param>
        /// <param name="queueItem">queueItem</param>
        /// <param name="concurrentBuild">concurrentBuild</param>
        /// <param name="scm">scm</param>
        [JsonConstructor]
        public FreeStyleProject(Option<string?> @class = default, Option<string?> name = default, Option<string?> url = default, Option<string?> color = default, Option<List<FreeStyleProjectactions>?> actions = default, Option<string?> description = default, Option<string?> displayName = default, Option<string?> displayNameOrNull = default, Option<string?> fullDisplayName = default, Option<string?> fullName = default, Option<bool?> buildable = default, Option<List<FreeStyleBuild>?> builds = default, Option<FreeStyleBuild?> firstBuild = default, Option<List<FreeStyleProjecthealthReport>?> healthReport = default, Option<bool?> inQueue = default, Option<bool?> keepDependencies = default, Option<FreeStyleBuild?> lastBuild = default, Option<FreeStyleBuild?> lastCompletedBuild = default, Option<string?> lastFailedBuild = default, Option<FreeStyleBuild?> lastStableBuild = default, Option<FreeStyleBuild?> lastSuccessfulBuild = default, Option<string?> lastUnstableBuild = default, Option<string?> lastUnsuccessfulBuild = default, Option<int?> nextBuildNumber = default, Option<string?> queueItem = default, Option<bool?> concurrentBuild = default, Option<NullSCM?> scm = default)
        {
            ClassOption = @class;
            NameOption = name;
            UrlOption = url;
            ColorOption = color;
            ActionsOption = actions;
            DescriptionOption = description;
            DisplayNameOption = displayName;
            DisplayNameOrNullOption = displayNameOrNull;
            FullDisplayNameOption = fullDisplayName;
            FullNameOption = fullName;
            BuildableOption = buildable;
            BuildsOption = builds;
            FirstBuildOption = firstBuild;
            HealthReportOption = healthReport;
            InQueueOption = inQueue;
            KeepDependenciesOption = keepDependencies;
            LastBuildOption = lastBuild;
            LastCompletedBuildOption = lastCompletedBuild;
            LastFailedBuildOption = lastFailedBuild;
            LastStableBuildOption = lastStableBuild;
            LastSuccessfulBuildOption = lastSuccessfulBuild;
            LastUnstableBuildOption = lastUnstableBuild;
            LastUnsuccessfulBuildOption = lastUnsuccessfulBuild;
            NextBuildNumberOption = nextBuildNumber;
            QueueItemOption = queueItem;
            ConcurrentBuildOption = concurrentBuild;
            ScmOption = scm;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Color
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ColorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [JsonPropertyName("color")]
        public string? Color { get { return this.ColorOption; } set { this.ColorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FreeStyleProjectactions>?> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [JsonPropertyName("actions")]
        public List<FreeStyleProjectactions>? Actions { get { return this.ActionsOption; } set { this.ActionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayNameOrNull
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOrNullOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayNameOrNull
        /// </summary>
        [JsonPropertyName("displayNameOrNull")]
        public string? DisplayNameOrNull { get { return this.DisplayNameOrNullOption; } set { this.DisplayNameOrNullOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullDisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullDisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullDisplayName
        /// </summary>
        [JsonPropertyName("fullDisplayName")]
        public string? FullDisplayName { get { return this.FullDisplayNameOption; } set { this.FullDisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [JsonPropertyName("fullName")]
        public string? FullName { get { return this.FullNameOption; } set { this.FullNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Buildable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BuildableOption { get; private set; }

        /// <summary>
        /// Gets or Sets Buildable
        /// </summary>
        [JsonPropertyName("buildable")]
        public bool? Buildable { get { return this.BuildableOption; } set { this.BuildableOption = new(value); } }

        /// <summary>
        /// Used to track the state of Builds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FreeStyleBuild>?> BuildsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Builds
        /// </summary>
        [JsonPropertyName("builds")]
        public List<FreeStyleBuild>? Builds { get { return this.BuildsOption; } set { this.BuildsOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FreeStyleBuild?> FirstBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstBuild
        /// </summary>
        [JsonPropertyName("firstBuild")]
        public FreeStyleBuild? FirstBuild { get { return this.FirstBuildOption; } set { this.FirstBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of HealthReport
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FreeStyleProjecthealthReport>?> HealthReportOption { get; private set; }

        /// <summary>
        /// Gets or Sets HealthReport
        /// </summary>
        [JsonPropertyName("healthReport")]
        public List<FreeStyleProjecthealthReport>? HealthReport { get { return this.HealthReportOption; } set { this.HealthReportOption = new(value); } }

        /// <summary>
        /// Used to track the state of InQueue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> InQueueOption { get; private set; }

        /// <summary>
        /// Gets or Sets InQueue
        /// </summary>
        [JsonPropertyName("inQueue")]
        public bool? InQueue { get { return this.InQueueOption; } set { this.InQueueOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeepDependencies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> KeepDependenciesOption { get; private set; }

        /// <summary>
        /// Gets or Sets KeepDependencies
        /// </summary>
        [JsonPropertyName("keepDependencies")]
        public bool? KeepDependencies { get { return this.KeepDependenciesOption; } set { this.KeepDependenciesOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FreeStyleBuild?> LastBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastBuild
        /// </summary>
        [JsonPropertyName("lastBuild")]
        public FreeStyleBuild? LastBuild { get { return this.LastBuildOption; } set { this.LastBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastCompletedBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FreeStyleBuild?> LastCompletedBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastCompletedBuild
        /// </summary>
        [JsonPropertyName("lastCompletedBuild")]
        public FreeStyleBuild? LastCompletedBuild { get { return this.LastCompletedBuildOption; } set { this.LastCompletedBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastFailedBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastFailedBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastFailedBuild
        /// </summary>
        [JsonPropertyName("lastFailedBuild")]
        public string? LastFailedBuild { get { return this.LastFailedBuildOption; } set { this.LastFailedBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastStableBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FreeStyleBuild?> LastStableBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastStableBuild
        /// </summary>
        [JsonPropertyName("lastStableBuild")]
        public FreeStyleBuild? LastStableBuild { get { return this.LastStableBuildOption; } set { this.LastStableBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastSuccessfulBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FreeStyleBuild?> LastSuccessfulBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastSuccessfulBuild
        /// </summary>
        [JsonPropertyName("lastSuccessfulBuild")]
        public FreeStyleBuild? LastSuccessfulBuild { get { return this.LastSuccessfulBuildOption; } set { this.LastSuccessfulBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUnstableBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUnstableBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastUnstableBuild
        /// </summary>
        [JsonPropertyName("lastUnstableBuild")]
        public string? LastUnstableBuild { get { return this.LastUnstableBuildOption; } set { this.LastUnstableBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastUnsuccessfulBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastUnsuccessfulBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastUnsuccessfulBuild
        /// </summary>
        [JsonPropertyName("lastUnsuccessfulBuild")]
        public string? LastUnsuccessfulBuild { get { return this.LastUnsuccessfulBuildOption; } set { this.LastUnsuccessfulBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of NextBuildNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NextBuildNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets NextBuildNumber
        /// </summary>
        [JsonPropertyName("nextBuildNumber")]
        public int? NextBuildNumber { get { return this.NextBuildNumberOption; } set { this.NextBuildNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueueItem
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueueItemOption { get; private set; }

        /// <summary>
        /// Gets or Sets QueueItem
        /// </summary>
        [JsonPropertyName("queueItem")]
        public string? QueueItem { get { return this.QueueItemOption; } set { this.QueueItemOption = new(value); } }

        /// <summary>
        /// Used to track the state of ConcurrentBuild
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ConcurrentBuildOption { get; private set; }

        /// <summary>
        /// Gets or Sets ConcurrentBuild
        /// </summary>
        [JsonPropertyName("concurrentBuild")]
        public bool? ConcurrentBuild { get { return this.ConcurrentBuildOption; } set { this.ConcurrentBuildOption = new(value); } }

        /// <summary>
        /// Used to track the state of Scm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<NullSCM?> ScmOption { get; private set; }

        /// <summary>
        /// Gets or Sets Scm
        /// </summary>
        [JsonPropertyName("scm")]
        public NullSCM? Scm { get { return this.ScmOption; } set { this.ScmOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FreeStyleProject {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayNameOrNull: ").Append(DisplayNameOrNull).Append("\n");
            sb.Append("  FullDisplayName: ").Append(FullDisplayName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Buildable: ").Append(Buildable).Append("\n");
            sb.Append("  Builds: ").Append(Builds).Append("\n");
            sb.Append("  FirstBuild: ").Append(FirstBuild).Append("\n");
            sb.Append("  HealthReport: ").Append(HealthReport).Append("\n");
            sb.Append("  InQueue: ").Append(InQueue).Append("\n");
            sb.Append("  KeepDependencies: ").Append(KeepDependencies).Append("\n");
            sb.Append("  LastBuild: ").Append(LastBuild).Append("\n");
            sb.Append("  LastCompletedBuild: ").Append(LastCompletedBuild).Append("\n");
            sb.Append("  LastFailedBuild: ").Append(LastFailedBuild).Append("\n");
            sb.Append("  LastStableBuild: ").Append(LastStableBuild).Append("\n");
            sb.Append("  LastSuccessfulBuild: ").Append(LastSuccessfulBuild).Append("\n");
            sb.Append("  LastUnstableBuild: ").Append(LastUnstableBuild).Append("\n");
            sb.Append("  LastUnsuccessfulBuild: ").Append(LastUnsuccessfulBuild).Append("\n");
            sb.Append("  NextBuildNumber: ").Append(NextBuildNumber).Append("\n");
            sb.Append("  QueueItem: ").Append(QueueItem).Append("\n");
            sb.Append("  ConcurrentBuild: ").Append(ConcurrentBuild).Append("\n");
            sb.Append("  Scm: ").Append(Scm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FreeStyleProject" />
    /// </summary>
    public class FreeStyleProjectJsonConverter : JsonConverter<FreeStyleProject>
    {
        /// <summary>
        /// Deserializes json to <see cref="FreeStyleProject" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FreeStyleProject Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<string?> name = default;
            Option<string?> url = default;
            Option<string?> color = default;
            Option<List<FreeStyleProjectactions>?> actions = default;
            Option<string?> description = default;
            Option<string?> displayName = default;
            Option<string?> displayNameOrNull = default;
            Option<string?> fullDisplayName = default;
            Option<string?> fullName = default;
            Option<bool?> buildable = default;
            Option<List<FreeStyleBuild>?> builds = default;
            Option<FreeStyleBuild?> firstBuild = default;
            Option<List<FreeStyleProjecthealthReport>?> healthReport = default;
            Option<bool?> inQueue = default;
            Option<bool?> keepDependencies = default;
            Option<FreeStyleBuild?> lastBuild = default;
            Option<FreeStyleBuild?> lastCompletedBuild = default;
            Option<string?> lastFailedBuild = default;
            Option<FreeStyleBuild?> lastStableBuild = default;
            Option<FreeStyleBuild?> lastSuccessfulBuild = default;
            Option<string?> lastUnstableBuild = default;
            Option<string?> lastUnsuccessfulBuild = default;
            Option<int?> nextBuildNumber = default;
            Option<string?> queueItem = default;
            Option<bool?> concurrentBuild = default;
            Option<NullSCM?> scm = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "color":
                            color = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "actions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actions = new Option<List<FreeStyleProjectactions>?>(JsonSerializer.Deserialize<List<FreeStyleProjectactions>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "displayNameOrNull":
                            displayNameOrNull = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fullDisplayName":
                            fullDisplayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fullName":
                            fullName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "buildable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                buildable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "builds":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                builds = new Option<List<FreeStyleBuild>?>(JsonSerializer.Deserialize<List<FreeStyleBuild>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "firstBuild":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                firstBuild = new Option<FreeStyleBuild?>(JsonSerializer.Deserialize<FreeStyleBuild>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "healthReport":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                healthReport = new Option<List<FreeStyleProjecthealthReport>?>(JsonSerializer.Deserialize<List<FreeStyleProjecthealthReport>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "inQueue":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inQueue = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "keepDependencies":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                keepDependencies = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "lastBuild":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastBuild = new Option<FreeStyleBuild?>(JsonSerializer.Deserialize<FreeStyleBuild>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lastCompletedBuild":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastCompletedBuild = new Option<FreeStyleBuild?>(JsonSerializer.Deserialize<FreeStyleBuild>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lastFailedBuild":
                            lastFailedBuild = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastStableBuild":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastStableBuild = new Option<FreeStyleBuild?>(JsonSerializer.Deserialize<FreeStyleBuild>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lastSuccessfulBuild":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastSuccessfulBuild = new Option<FreeStyleBuild?>(JsonSerializer.Deserialize<FreeStyleBuild>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lastUnstableBuild":
                            lastUnstableBuild = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "lastUnsuccessfulBuild":
                            lastUnsuccessfulBuild = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "nextBuildNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nextBuildNumber = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "queueItem":
                            queueItem = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "concurrentBuild":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                concurrentBuild = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "scm":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scm = new Option<NullSCM?>(JsonSerializer.Deserialize<NullSCM>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class FreeStyleProject.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class FreeStyleProject.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class FreeStyleProject.");

            if (color.IsSet && color.Value == null)
                throw new ArgumentNullException(nameof(color), "Property is not nullable for class FreeStyleProject.");

            if (actions.IsSet && actions.Value == null)
                throw new ArgumentNullException(nameof(actions), "Property is not nullable for class FreeStyleProject.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class FreeStyleProject.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class FreeStyleProject.");

            if (displayNameOrNull.IsSet && displayNameOrNull.Value == null)
                throw new ArgumentNullException(nameof(displayNameOrNull), "Property is not nullable for class FreeStyleProject.");

            if (fullDisplayName.IsSet && fullDisplayName.Value == null)
                throw new ArgumentNullException(nameof(fullDisplayName), "Property is not nullable for class FreeStyleProject.");

            if (fullName.IsSet && fullName.Value == null)
                throw new ArgumentNullException(nameof(fullName), "Property is not nullable for class FreeStyleProject.");

            if (buildable.IsSet && buildable.Value == null)
                throw new ArgumentNullException(nameof(buildable), "Property is not nullable for class FreeStyleProject.");

            if (builds.IsSet && builds.Value == null)
                throw new ArgumentNullException(nameof(builds), "Property is not nullable for class FreeStyleProject.");

            if (firstBuild.IsSet && firstBuild.Value == null)
                throw new ArgumentNullException(nameof(firstBuild), "Property is not nullable for class FreeStyleProject.");

            if (healthReport.IsSet && healthReport.Value == null)
                throw new ArgumentNullException(nameof(healthReport), "Property is not nullable for class FreeStyleProject.");

            if (inQueue.IsSet && inQueue.Value == null)
                throw new ArgumentNullException(nameof(inQueue), "Property is not nullable for class FreeStyleProject.");

            if (keepDependencies.IsSet && keepDependencies.Value == null)
                throw new ArgumentNullException(nameof(keepDependencies), "Property is not nullable for class FreeStyleProject.");

            if (lastBuild.IsSet && lastBuild.Value == null)
                throw new ArgumentNullException(nameof(lastBuild), "Property is not nullable for class FreeStyleProject.");

            if (lastCompletedBuild.IsSet && lastCompletedBuild.Value == null)
                throw new ArgumentNullException(nameof(lastCompletedBuild), "Property is not nullable for class FreeStyleProject.");

            if (lastFailedBuild.IsSet && lastFailedBuild.Value == null)
                throw new ArgumentNullException(nameof(lastFailedBuild), "Property is not nullable for class FreeStyleProject.");

            if (lastStableBuild.IsSet && lastStableBuild.Value == null)
                throw new ArgumentNullException(nameof(lastStableBuild), "Property is not nullable for class FreeStyleProject.");

            if (lastSuccessfulBuild.IsSet && lastSuccessfulBuild.Value == null)
                throw new ArgumentNullException(nameof(lastSuccessfulBuild), "Property is not nullable for class FreeStyleProject.");

            if (lastUnstableBuild.IsSet && lastUnstableBuild.Value == null)
                throw new ArgumentNullException(nameof(lastUnstableBuild), "Property is not nullable for class FreeStyleProject.");

            if (lastUnsuccessfulBuild.IsSet && lastUnsuccessfulBuild.Value == null)
                throw new ArgumentNullException(nameof(lastUnsuccessfulBuild), "Property is not nullable for class FreeStyleProject.");

            if (nextBuildNumber.IsSet && nextBuildNumber.Value == null)
                throw new ArgumentNullException(nameof(nextBuildNumber), "Property is not nullable for class FreeStyleProject.");

            if (queueItem.IsSet && queueItem.Value == null)
                throw new ArgumentNullException(nameof(queueItem), "Property is not nullable for class FreeStyleProject.");

            if (concurrentBuild.IsSet && concurrentBuild.Value == null)
                throw new ArgumentNullException(nameof(concurrentBuild), "Property is not nullable for class FreeStyleProject.");

            if (scm.IsSet && scm.Value == null)
                throw new ArgumentNullException(nameof(scm), "Property is not nullable for class FreeStyleProject.");

            return new FreeStyleProject(varClass, name, url, color, actions, description, displayName, displayNameOrNull, fullDisplayName, fullName, buildable, builds, firstBuild, healthReport, inQueue, keepDependencies, lastBuild, lastCompletedBuild, lastFailedBuild, lastStableBuild, lastSuccessfulBuild, lastUnstableBuild, lastUnsuccessfulBuild, nextBuildNumber, queueItem, concurrentBuild, scm);
        }

        /// <summary>
        /// Serializes a <see cref="FreeStyleProject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="freeStyleProject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FreeStyleProject freeStyleProject, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, freeStyleProject, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FreeStyleProject" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="freeStyleProject"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FreeStyleProject freeStyleProject, JsonSerializerOptions jsonSerializerOptions)
        {
            if (freeStyleProject.ClassOption.IsSet && freeStyleProject.Class == null)
                throw new ArgumentNullException(nameof(freeStyleProject.Class), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.NameOption.IsSet && freeStyleProject.Name == null)
                throw new ArgumentNullException(nameof(freeStyleProject.Name), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.UrlOption.IsSet && freeStyleProject.Url == null)
                throw new ArgumentNullException(nameof(freeStyleProject.Url), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.ColorOption.IsSet && freeStyleProject.Color == null)
                throw new ArgumentNullException(nameof(freeStyleProject.Color), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.ActionsOption.IsSet && freeStyleProject.Actions == null)
                throw new ArgumentNullException(nameof(freeStyleProject.Actions), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.DescriptionOption.IsSet && freeStyleProject.Description == null)
                throw new ArgumentNullException(nameof(freeStyleProject.Description), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.DisplayNameOption.IsSet && freeStyleProject.DisplayName == null)
                throw new ArgumentNullException(nameof(freeStyleProject.DisplayName), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.DisplayNameOrNullOption.IsSet && freeStyleProject.DisplayNameOrNull == null)
                throw new ArgumentNullException(nameof(freeStyleProject.DisplayNameOrNull), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.FullDisplayNameOption.IsSet && freeStyleProject.FullDisplayName == null)
                throw new ArgumentNullException(nameof(freeStyleProject.FullDisplayName), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.FullNameOption.IsSet && freeStyleProject.FullName == null)
                throw new ArgumentNullException(nameof(freeStyleProject.FullName), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.BuildsOption.IsSet && freeStyleProject.Builds == null)
                throw new ArgumentNullException(nameof(freeStyleProject.Builds), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.FirstBuildOption.IsSet && freeStyleProject.FirstBuild == null)
                throw new ArgumentNullException(nameof(freeStyleProject.FirstBuild), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.HealthReportOption.IsSet && freeStyleProject.HealthReport == null)
                throw new ArgumentNullException(nameof(freeStyleProject.HealthReport), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.LastBuildOption.IsSet && freeStyleProject.LastBuild == null)
                throw new ArgumentNullException(nameof(freeStyleProject.LastBuild), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.LastCompletedBuildOption.IsSet && freeStyleProject.LastCompletedBuild == null)
                throw new ArgumentNullException(nameof(freeStyleProject.LastCompletedBuild), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.LastFailedBuildOption.IsSet && freeStyleProject.LastFailedBuild == null)
                throw new ArgumentNullException(nameof(freeStyleProject.LastFailedBuild), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.LastStableBuildOption.IsSet && freeStyleProject.LastStableBuild == null)
                throw new ArgumentNullException(nameof(freeStyleProject.LastStableBuild), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.LastSuccessfulBuildOption.IsSet && freeStyleProject.LastSuccessfulBuild == null)
                throw new ArgumentNullException(nameof(freeStyleProject.LastSuccessfulBuild), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.LastUnstableBuildOption.IsSet && freeStyleProject.LastUnstableBuild == null)
                throw new ArgumentNullException(nameof(freeStyleProject.LastUnstableBuild), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.LastUnsuccessfulBuildOption.IsSet && freeStyleProject.LastUnsuccessfulBuild == null)
                throw new ArgumentNullException(nameof(freeStyleProject.LastUnsuccessfulBuild), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.QueueItemOption.IsSet && freeStyleProject.QueueItem == null)
                throw new ArgumentNullException(nameof(freeStyleProject.QueueItem), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.ScmOption.IsSet && freeStyleProject.Scm == null)
                throw new ArgumentNullException(nameof(freeStyleProject.Scm), "Property is required for class FreeStyleProject.");

            if (freeStyleProject.ClassOption.IsSet)
                writer.WriteString("_class", freeStyleProject.Class);

            if (freeStyleProject.NameOption.IsSet)
                writer.WriteString("name", freeStyleProject.Name);

            if (freeStyleProject.UrlOption.IsSet)
                writer.WriteString("url", freeStyleProject.Url);

            if (freeStyleProject.ColorOption.IsSet)
                writer.WriteString("color", freeStyleProject.Color);

            if (freeStyleProject.ActionsOption.IsSet)
            {
                writer.WritePropertyName("actions");
                JsonSerializer.Serialize(writer, freeStyleProject.Actions, jsonSerializerOptions);
            }
            if (freeStyleProject.DescriptionOption.IsSet)
                writer.WriteString("description", freeStyleProject.Description);

            if (freeStyleProject.DisplayNameOption.IsSet)
                writer.WriteString("displayName", freeStyleProject.DisplayName);

            if (freeStyleProject.DisplayNameOrNullOption.IsSet)
                writer.WriteString("displayNameOrNull", freeStyleProject.DisplayNameOrNull);

            if (freeStyleProject.FullDisplayNameOption.IsSet)
                writer.WriteString("fullDisplayName", freeStyleProject.FullDisplayName);

            if (freeStyleProject.FullNameOption.IsSet)
                writer.WriteString("fullName", freeStyleProject.FullName);

            if (freeStyleProject.BuildableOption.IsSet)
                writer.WriteBoolean("buildable", freeStyleProject.BuildableOption.Value!.Value);

            if (freeStyleProject.BuildsOption.IsSet)
            {
                writer.WritePropertyName("builds");
                JsonSerializer.Serialize(writer, freeStyleProject.Builds, jsonSerializerOptions);
            }
            if (freeStyleProject.FirstBuildOption.IsSet)
            {
                writer.WritePropertyName("firstBuild");
                JsonSerializer.Serialize(writer, freeStyleProject.FirstBuild, jsonSerializerOptions);
            }
            if (freeStyleProject.HealthReportOption.IsSet)
            {
                writer.WritePropertyName("healthReport");
                JsonSerializer.Serialize(writer, freeStyleProject.HealthReport, jsonSerializerOptions);
            }
            if (freeStyleProject.InQueueOption.IsSet)
                writer.WriteBoolean("inQueue", freeStyleProject.InQueueOption.Value!.Value);

            if (freeStyleProject.KeepDependenciesOption.IsSet)
                writer.WriteBoolean("keepDependencies", freeStyleProject.KeepDependenciesOption.Value!.Value);

            if (freeStyleProject.LastBuildOption.IsSet)
            {
                writer.WritePropertyName("lastBuild");
                JsonSerializer.Serialize(writer, freeStyleProject.LastBuild, jsonSerializerOptions);
            }
            if (freeStyleProject.LastCompletedBuildOption.IsSet)
            {
                writer.WritePropertyName("lastCompletedBuild");
                JsonSerializer.Serialize(writer, freeStyleProject.LastCompletedBuild, jsonSerializerOptions);
            }
            if (freeStyleProject.LastFailedBuildOption.IsSet)
                writer.WriteString("lastFailedBuild", freeStyleProject.LastFailedBuild);

            if (freeStyleProject.LastStableBuildOption.IsSet)
            {
                writer.WritePropertyName("lastStableBuild");
                JsonSerializer.Serialize(writer, freeStyleProject.LastStableBuild, jsonSerializerOptions);
            }
            if (freeStyleProject.LastSuccessfulBuildOption.IsSet)
            {
                writer.WritePropertyName("lastSuccessfulBuild");
                JsonSerializer.Serialize(writer, freeStyleProject.LastSuccessfulBuild, jsonSerializerOptions);
            }
            if (freeStyleProject.LastUnstableBuildOption.IsSet)
                writer.WriteString("lastUnstableBuild", freeStyleProject.LastUnstableBuild);

            if (freeStyleProject.LastUnsuccessfulBuildOption.IsSet)
                writer.WriteString("lastUnsuccessfulBuild", freeStyleProject.LastUnsuccessfulBuild);

            if (freeStyleProject.NextBuildNumberOption.IsSet)
                writer.WriteNumber("nextBuildNumber", freeStyleProject.NextBuildNumberOption.Value!.Value);

            if (freeStyleProject.QueueItemOption.IsSet)
                writer.WriteString("queueItem", freeStyleProject.QueueItem);

            if (freeStyleProject.ConcurrentBuildOption.IsSet)
                writer.WriteBoolean("concurrentBuild", freeStyleProject.ConcurrentBuildOption.Value!.Value);

            if (freeStyleProject.ScmOption.IsSet)
            {
                writer.WritePropertyName("scm");
                JsonSerializer.Serialize(writer, freeStyleProject.Scm, jsonSerializerOptions);
            }
        }
    }
}
