// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CauseUserIdCause
    /// </summary>
    public partial class CauseUserIdCause : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CauseUserIdCause" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="shortDescription">shortDescription</param>
        /// <param name="userId">userId</param>
        /// <param name="userName">userName</param>
        [JsonConstructor]
        public CauseUserIdCause(Option<string?> @class = default, Option<string?> shortDescription = default, Option<string?> userId = default, Option<string?> userName = default)
        {
            ClassOption = @class;
            ShortDescriptionOption = shortDescription;
            UserIdOption = userId;
            UserNameOption = userName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of ShortDescription
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ShortDescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets ShortDescription
        /// </summary>
        [JsonPropertyName("shortDescription")]
        public string? ShortDescription { get { return this.ShortDescriptionOption; } set { this.ShortDescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [JsonPropertyName("userId")]
        public string? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserName
        /// </summary>
        [JsonPropertyName("userName")]
        public string? UserName { get { return this.UserNameOption; } set { this.UserNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CauseUserIdCause {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CauseUserIdCause" />
    /// </summary>
    public class CauseUserIdCauseJsonConverter : JsonConverter<CauseUserIdCause>
    {
        /// <summary>
        /// Deserializes json to <see cref="CauseUserIdCause" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CauseUserIdCause Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<string?> shortDescription = default;
            Option<string?> userId = default;
            Option<string?> userName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "shortDescription":
                            shortDescription = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "userName":
                            userName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class CauseUserIdCause.");

            if (shortDescription.IsSet && shortDescription.Value == null)
                throw new ArgumentNullException(nameof(shortDescription), "Property is not nullable for class CauseUserIdCause.");

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class CauseUserIdCause.");

            if (userName.IsSet && userName.Value == null)
                throw new ArgumentNullException(nameof(userName), "Property is not nullable for class CauseUserIdCause.");

            return new CauseUserIdCause(varClass, shortDescription, userId, userName);
        }

        /// <summary>
        /// Serializes a <see cref="CauseUserIdCause" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="causeUserIdCause"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CauseUserIdCause causeUserIdCause, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, causeUserIdCause, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CauseUserIdCause" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="causeUserIdCause"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, CauseUserIdCause causeUserIdCause, JsonSerializerOptions jsonSerializerOptions)
        {
            if (causeUserIdCause.ClassOption.IsSet && causeUserIdCause.Class == null)
                throw new ArgumentNullException(nameof(causeUserIdCause.Class), "Property is required for class CauseUserIdCause.");

            if (causeUserIdCause.ShortDescriptionOption.IsSet && causeUserIdCause.ShortDescription == null)
                throw new ArgumentNullException(nameof(causeUserIdCause.ShortDescription), "Property is required for class CauseUserIdCause.");

            if (causeUserIdCause.UserIdOption.IsSet && causeUserIdCause.UserId == null)
                throw new ArgumentNullException(nameof(causeUserIdCause.UserId), "Property is required for class CauseUserIdCause.");

            if (causeUserIdCause.UserNameOption.IsSet && causeUserIdCause.UserName == null)
                throw new ArgumentNullException(nameof(causeUserIdCause.UserName), "Property is required for class CauseUserIdCause.");

            if (causeUserIdCause.ClassOption.IsSet)
                writer.WriteString("_class", causeUserIdCause.Class);

            if (causeUserIdCause.ShortDescriptionOption.IsSet)
                writer.WriteString("shortDescription", causeUserIdCause.ShortDescription);

            if (causeUserIdCause.UserIdOption.IsSet)
                writer.WriteString("userId", causeUserIdCause.UserId);

            if (causeUserIdCause.UserNameOption.IsSet)
                writer.WriteString("userName", causeUserIdCause.UserName);
        }
    }
}
