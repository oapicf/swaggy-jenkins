// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PipelineRunNode
    /// </summary>
    public partial class PipelineRunNode : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineRunNode" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="displayName">displayName</param>
        /// <param name="durationInMillis">durationInMillis</param>
        /// <param name="edges">edges</param>
        /// <param name="id">id</param>
        /// <param name="result">result</param>
        /// <param name="startTime">startTime</param>
        /// <param name="state">state</param>
        [JsonConstructor]
        public PipelineRunNode(Option<string?> @class = default, Option<string?> displayName = default, Option<int?> durationInMillis = default, Option<List<PipelineRunNodeedges>?> edges = default, Option<string?> id = default, Option<string?> result = default, Option<string?> startTime = default, Option<string?> state = default)
        {
            ClassOption = @class;
            DisplayNameOption = displayName;
            DurationInMillisOption = durationInMillis;
            EdgesOption = edges;
            IdOption = id;
            ResultOption = result;
            StartTimeOption = startTime;
            StateOption = state;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of DurationInMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationInMillisOption { get; private set; }

        /// <summary>
        /// Gets or Sets DurationInMillis
        /// </summary>
        [JsonPropertyName("durationInMillis")]
        public int? DurationInMillis { get { return this.DurationInMillisOption; } set { this.DurationInMillisOption = new(value); } }

        /// <summary>
        /// Used to track the state of Edges
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PipelineRunNodeedges>?> EdgesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Edges
        /// </summary>
        [JsonPropertyName("edges")]
        public List<PipelineRunNodeedges>? Edges { get { return this.EdgesOption; } set { this.EdgesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Result
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("result")]
        public string? Result { get { return this.ResultOption; } set { this.ResultOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StartTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string? StartTime { get { return this.StartTimeOption; } set { this.StartTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineRunNode {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DurationInMillis: ").Append(DurationInMillis).Append("\n");
            sb.Append("  Edges: ").Append(Edges).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PipelineRunNode" />
    /// </summary>
    public class PipelineRunNodeJsonConverter : JsonConverter<PipelineRunNode>
    {
        /// <summary>
        /// Deserializes json to <see cref="PipelineRunNode" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PipelineRunNode Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<string?> displayName = default;
            Option<int?> durationInMillis = default;
            Option<List<PipelineRunNodeedges>?> edges = default;
            Option<string?> id = default;
            Option<string?> result = default;
            Option<string?> startTime = default;
            Option<string?> state = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "durationInMillis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                durationInMillis = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "edges":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                edges = new Option<List<PipelineRunNodeedges>?>(JsonSerializer.Deserialize<List<PipelineRunNodeedges>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "result":
                            result = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "startTime":
                            startTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class PipelineRunNode.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class PipelineRunNode.");

            if (durationInMillis.IsSet && durationInMillis.Value == null)
                throw new ArgumentNullException(nameof(durationInMillis), "Property is not nullable for class PipelineRunNode.");

            if (edges.IsSet && edges.Value == null)
                throw new ArgumentNullException(nameof(edges), "Property is not nullable for class PipelineRunNode.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PipelineRunNode.");

            if (result.IsSet && result.Value == null)
                throw new ArgumentNullException(nameof(result), "Property is not nullable for class PipelineRunNode.");

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class PipelineRunNode.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class PipelineRunNode.");

            return new PipelineRunNode(varClass, displayName, durationInMillis, edges, id, result, startTime, state);
        }

        /// <summary>
        /// Serializes a <see cref="PipelineRunNode" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineRunNode"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PipelineRunNode pipelineRunNode, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pipelineRunNode, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PipelineRunNode" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineRunNode"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PipelineRunNode pipelineRunNode, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pipelineRunNode.ClassOption.IsSet && pipelineRunNode.Class == null)
                throw new ArgumentNullException(nameof(pipelineRunNode.Class), "Property is required for class PipelineRunNode.");

            if (pipelineRunNode.DisplayNameOption.IsSet && pipelineRunNode.DisplayName == null)
                throw new ArgumentNullException(nameof(pipelineRunNode.DisplayName), "Property is required for class PipelineRunNode.");

            if (pipelineRunNode.EdgesOption.IsSet && pipelineRunNode.Edges == null)
                throw new ArgumentNullException(nameof(pipelineRunNode.Edges), "Property is required for class PipelineRunNode.");

            if (pipelineRunNode.IdOption.IsSet && pipelineRunNode.Id == null)
                throw new ArgumentNullException(nameof(pipelineRunNode.Id), "Property is required for class PipelineRunNode.");

            if (pipelineRunNode.ResultOption.IsSet && pipelineRunNode.Result == null)
                throw new ArgumentNullException(nameof(pipelineRunNode.Result), "Property is required for class PipelineRunNode.");

            if (pipelineRunNode.StartTimeOption.IsSet && pipelineRunNode.StartTime == null)
                throw new ArgumentNullException(nameof(pipelineRunNode.StartTime), "Property is required for class PipelineRunNode.");

            if (pipelineRunNode.StateOption.IsSet && pipelineRunNode.State == null)
                throw new ArgumentNullException(nameof(pipelineRunNode.State), "Property is required for class PipelineRunNode.");

            if (pipelineRunNode.ClassOption.IsSet)
                writer.WriteString("_class", pipelineRunNode.Class);

            if (pipelineRunNode.DisplayNameOption.IsSet)
                writer.WriteString("displayName", pipelineRunNode.DisplayName);

            if (pipelineRunNode.DurationInMillisOption.IsSet)
                writer.WriteNumber("durationInMillis", pipelineRunNode.DurationInMillisOption.Value!.Value);

            if (pipelineRunNode.EdgesOption.IsSet)
            {
                writer.WritePropertyName("edges");
                JsonSerializer.Serialize(writer, pipelineRunNode.Edges, jsonSerializerOptions);
            }
            if (pipelineRunNode.IdOption.IsSet)
                writer.WriteString("id", pipelineRunNode.Id);

            if (pipelineRunNode.ResultOption.IsSet)
                writer.WriteString("result", pipelineRunNode.Result);

            if (pipelineRunNode.StartTimeOption.IsSet)
                writer.WriteString("startTime", pipelineRunNode.StartTime);

            if (pipelineRunNode.StateOption.IsSet)
                writer.WriteString("state", pipelineRunNode.State);
        }
    }
}
