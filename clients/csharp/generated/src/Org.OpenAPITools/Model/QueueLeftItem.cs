// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QueueLeftItem
    /// </summary>
    public partial class QueueLeftItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueLeftItem" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="actions">actions</param>
        /// <param name="blocked">blocked</param>
        /// <param name="buildable">buildable</param>
        /// <param name="id">id</param>
        /// <param name="inQueueSince">inQueueSince</param>
        /// <param name="params">params</param>
        /// <param name="stuck">stuck</param>
        /// <param name="task">task</param>
        /// <param name="url">url</param>
        /// <param name="why">why</param>
        /// <param name="cancelled">cancelled</param>
        /// <param name="executable">executable</param>
        [JsonConstructor]
        public QueueLeftItem(Option<string?> @class = default, Option<List<CauseAction>?> actions = default, Option<bool?> blocked = default, Option<bool?> buildable = default, Option<int?> id = default, Option<int?> inQueueSince = default, Option<string?> @params = default, Option<bool?> stuck = default, Option<FreeStyleProject?> task = default, Option<string?> url = default, Option<string?> why = default, Option<bool?> cancelled = default, Option<FreeStyleBuild?> executable = default)
        {
            ClassOption = @class;
            ActionsOption = actions;
            BlockedOption = blocked;
            BuildableOption = buildable;
            IdOption = id;
            InQueueSinceOption = inQueueSince;
            ParamsOption = @params;
            StuckOption = stuck;
            TaskOption = task;
            UrlOption = url;
            WhyOption = why;
            CancelledOption = cancelled;
            ExecutableOption = executable;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CauseAction>?> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [JsonPropertyName("actions")]
        public List<CauseAction>? Actions { get { return this.ActionsOption; } set { this.ActionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Blocked
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BlockedOption { get; private set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [JsonPropertyName("blocked")]
        public bool? Blocked { get { return this.BlockedOption; } set { this.BlockedOption = new(value); } }

        /// <summary>
        /// Used to track the state of Buildable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BuildableOption { get; private set; }

        /// <summary>
        /// Gets or Sets Buildable
        /// </summary>
        [JsonPropertyName("buildable")]
        public bool? Buildable { get { return this.BuildableOption; } set { this.BuildableOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of InQueueSince
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> InQueueSinceOption { get; private set; }

        /// <summary>
        /// Gets or Sets InQueueSince
        /// </summary>
        [JsonPropertyName("inQueueSince")]
        public int? InQueueSince { get { return this.InQueueSinceOption; } set { this.InQueueSinceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Params
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParamsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [JsonPropertyName("params")]
        public string? Params { get { return this.ParamsOption; } set { this.ParamsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stuck
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StuckOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stuck
        /// </summary>
        [JsonPropertyName("stuck")]
        public bool? Stuck { get { return this.StuckOption; } set { this.StuckOption = new(value); } }

        /// <summary>
        /// Used to track the state of Task
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FreeStyleProject?> TaskOption { get; private set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [JsonPropertyName("task")]
        public FreeStyleProject? Task { get { return this.TaskOption; } set { this.TaskOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Why
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WhyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Why
        /// </summary>
        [JsonPropertyName("why")]
        public string? Why { get { return this.WhyOption; } set { this.WhyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cancelled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CancelledOption { get; private set; }

        /// <summary>
        /// Gets or Sets Cancelled
        /// </summary>
        [JsonPropertyName("cancelled")]
        public bool? Cancelled { get { return this.CancelledOption; } set { this.CancelledOption = new(value); } }

        /// <summary>
        /// Used to track the state of Executable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FreeStyleBuild?> ExecutableOption { get; private set; }

        /// <summary>
        /// Gets or Sets Executable
        /// </summary>
        [JsonPropertyName("executable")]
        public FreeStyleBuild? Executable { get { return this.ExecutableOption; } set { this.ExecutableOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueLeftItem {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Buildable: ").Append(Buildable).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InQueueSince: ").Append(InQueueSince).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Stuck: ").Append(Stuck).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Why: ").Append(Why).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("  Executable: ").Append(Executable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QueueLeftItem" />
    /// </summary>
    public class QueueLeftItemJsonConverter : JsonConverter<QueueLeftItem>
    {
        /// <summary>
        /// Deserializes json to <see cref="QueueLeftItem" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QueueLeftItem Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<List<CauseAction>?> actions = default;
            Option<bool?> blocked = default;
            Option<bool?> buildable = default;
            Option<int?> id = default;
            Option<int?> inQueueSince = default;
            Option<string?> varParams = default;
            Option<bool?> stuck = default;
            Option<FreeStyleProject?> task = default;
            Option<string?> url = default;
            Option<string?> why = default;
            Option<bool?> cancelled = default;
            Option<FreeStyleBuild?> executable = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "actions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actions = new Option<List<CauseAction>?>(JsonSerializer.Deserialize<List<CauseAction>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "blocked":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                blocked = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "buildable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                buildable = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "inQueueSince":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                inQueueSince = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "params":
                            varParams = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stuck":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stuck = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "task":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                task = new Option<FreeStyleProject?>(JsonSerializer.Deserialize<FreeStyleProject>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "why":
                            why = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "cancelled":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cancelled = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "executable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                executable = new Option<FreeStyleBuild?>(JsonSerializer.Deserialize<FreeStyleBuild>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class QueueLeftItem.");

            if (actions.IsSet && actions.Value == null)
                throw new ArgumentNullException(nameof(actions), "Property is not nullable for class QueueLeftItem.");

            if (blocked.IsSet && blocked.Value == null)
                throw new ArgumentNullException(nameof(blocked), "Property is not nullable for class QueueLeftItem.");

            if (buildable.IsSet && buildable.Value == null)
                throw new ArgumentNullException(nameof(buildable), "Property is not nullable for class QueueLeftItem.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class QueueLeftItem.");

            if (inQueueSince.IsSet && inQueueSince.Value == null)
                throw new ArgumentNullException(nameof(inQueueSince), "Property is not nullable for class QueueLeftItem.");

            if (varParams.IsSet && varParams.Value == null)
                throw new ArgumentNullException(nameof(varParams), "Property is not nullable for class QueueLeftItem.");

            if (stuck.IsSet && stuck.Value == null)
                throw new ArgumentNullException(nameof(stuck), "Property is not nullable for class QueueLeftItem.");

            if (task.IsSet && task.Value == null)
                throw new ArgumentNullException(nameof(task), "Property is not nullable for class QueueLeftItem.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class QueueLeftItem.");

            if (why.IsSet && why.Value == null)
                throw new ArgumentNullException(nameof(why), "Property is not nullable for class QueueLeftItem.");

            if (cancelled.IsSet && cancelled.Value == null)
                throw new ArgumentNullException(nameof(cancelled), "Property is not nullable for class QueueLeftItem.");

            if (executable.IsSet && executable.Value == null)
                throw new ArgumentNullException(nameof(executable), "Property is not nullable for class QueueLeftItem.");

            return new QueueLeftItem(varClass, actions, blocked, buildable, id, inQueueSince, varParams, stuck, task, url, why, cancelled, executable);
        }

        /// <summary>
        /// Serializes a <see cref="QueueLeftItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queueLeftItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QueueLeftItem queueLeftItem, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, queueLeftItem, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QueueLeftItem" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queueLeftItem"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QueueLeftItem queueLeftItem, JsonSerializerOptions jsonSerializerOptions)
        {
            if (queueLeftItem.ClassOption.IsSet && queueLeftItem.Class == null)
                throw new ArgumentNullException(nameof(queueLeftItem.Class), "Property is required for class QueueLeftItem.");

            if (queueLeftItem.ActionsOption.IsSet && queueLeftItem.Actions == null)
                throw new ArgumentNullException(nameof(queueLeftItem.Actions), "Property is required for class QueueLeftItem.");

            if (queueLeftItem.ParamsOption.IsSet && queueLeftItem.Params == null)
                throw new ArgumentNullException(nameof(queueLeftItem.Params), "Property is required for class QueueLeftItem.");

            if (queueLeftItem.TaskOption.IsSet && queueLeftItem.Task == null)
                throw new ArgumentNullException(nameof(queueLeftItem.Task), "Property is required for class QueueLeftItem.");

            if (queueLeftItem.UrlOption.IsSet && queueLeftItem.Url == null)
                throw new ArgumentNullException(nameof(queueLeftItem.Url), "Property is required for class QueueLeftItem.");

            if (queueLeftItem.WhyOption.IsSet && queueLeftItem.Why == null)
                throw new ArgumentNullException(nameof(queueLeftItem.Why), "Property is required for class QueueLeftItem.");

            if (queueLeftItem.ExecutableOption.IsSet && queueLeftItem.Executable == null)
                throw new ArgumentNullException(nameof(queueLeftItem.Executable), "Property is required for class QueueLeftItem.");

            if (queueLeftItem.ClassOption.IsSet)
                writer.WriteString("_class", queueLeftItem.Class);

            if (queueLeftItem.ActionsOption.IsSet)
            {
                writer.WritePropertyName("actions");
                JsonSerializer.Serialize(writer, queueLeftItem.Actions, jsonSerializerOptions);
            }
            if (queueLeftItem.BlockedOption.IsSet)
                writer.WriteBoolean("blocked", queueLeftItem.BlockedOption.Value!.Value);

            if (queueLeftItem.BuildableOption.IsSet)
                writer.WriteBoolean("buildable", queueLeftItem.BuildableOption.Value!.Value);

            if (queueLeftItem.IdOption.IsSet)
                writer.WriteNumber("id", queueLeftItem.IdOption.Value!.Value);

            if (queueLeftItem.InQueueSinceOption.IsSet)
                writer.WriteNumber("inQueueSince", queueLeftItem.InQueueSinceOption.Value!.Value);

            if (queueLeftItem.ParamsOption.IsSet)
                writer.WriteString("params", queueLeftItem.Params);

            if (queueLeftItem.StuckOption.IsSet)
                writer.WriteBoolean("stuck", queueLeftItem.StuckOption.Value!.Value);

            if (queueLeftItem.TaskOption.IsSet)
            {
                writer.WritePropertyName("task");
                JsonSerializer.Serialize(writer, queueLeftItem.Task, jsonSerializerOptions);
            }
            if (queueLeftItem.UrlOption.IsSet)
                writer.WriteString("url", queueLeftItem.Url);

            if (queueLeftItem.WhyOption.IsSet)
                writer.WriteString("why", queueLeftItem.Why);

            if (queueLeftItem.CancelledOption.IsSet)
                writer.WriteBoolean("cancelled", queueLeftItem.CancelledOption.Value!.Value);

            if (queueLeftItem.ExecutableOption.IsSet)
            {
                writer.WritePropertyName("executable");
                JsonSerializer.Serialize(writer, queueLeftItem.Executable, jsonSerializerOptions);
            }
        }
    }
}
