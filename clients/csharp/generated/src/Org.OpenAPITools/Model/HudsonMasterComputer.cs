/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HudsonMasterComputer
    /// </summary>
    [DataContract(Name = "HudsonMasterComputer")]
    public partial class HudsonMasterComputer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonMasterComputer" /> class.
        /// </summary>
        /// <param name="varClass">varClass.</param>
        /// <param name="displayName">displayName.</param>
        /// <param name="executors">executors.</param>
        /// <param name="icon">icon.</param>
        /// <param name="iconClassName">iconClassName.</param>
        /// <param name="idle">idle.</param>
        /// <param name="jnlpAgent">jnlpAgent.</param>
        /// <param name="launchSupported">launchSupported.</param>
        /// <param name="loadStatistics">loadStatistics.</param>
        /// <param name="manualLaunchAllowed">manualLaunchAllowed.</param>
        /// <param name="monitorData">monitorData.</param>
        /// <param name="numExecutors">numExecutors.</param>
        /// <param name="offline">offline.</param>
        /// <param name="offlineCause">offlineCause.</param>
        /// <param name="offlineCauseReason">offlineCauseReason.</param>
        /// <param name="temporarilyOffline">temporarilyOffline.</param>
        public HudsonMasterComputer(string varClass = default(string), string displayName = default(string), List<HudsonMasterComputerexecutors> executors = default(List<HudsonMasterComputerexecutors>), string icon = default(string), string iconClassName = default(string), bool idle = default(bool), bool jnlpAgent = default(bool), bool launchSupported = default(bool), Label1 loadStatistics = default(Label1), bool manualLaunchAllowed = default(bool), HudsonMasterComputermonitorData monitorData = default(HudsonMasterComputermonitorData), int numExecutors = default(int), bool offline = default(bool), string offlineCause = default(string), string offlineCauseReason = default(string), bool temporarilyOffline = default(bool))
        {
            this.VarClass = varClass;
            this.DisplayName = displayName;
            this.Executors = executors;
            this.Icon = icon;
            this.IconClassName = iconClassName;
            this.Idle = idle;
            this.JnlpAgent = jnlpAgent;
            this.LaunchSupported = launchSupported;
            this.LoadStatistics = loadStatistics;
            this.ManualLaunchAllowed = manualLaunchAllowed;
            this.MonitorData = monitorData;
            this.NumExecutors = numExecutors;
            this.Offline = offline;
            this.OfflineCause = offlineCause;
            this.OfflineCauseReason = offlineCauseReason;
            this.TemporarilyOffline = temporarilyOffline;
        }

        /// <summary>
        /// Gets or Sets VarClass
        /// </summary>
        [DataMember(Name = "_class", EmitDefaultValue = false)]
        public string VarClass { get; set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name = "displayName", EmitDefaultValue = false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Gets or Sets Executors
        /// </summary>
        [DataMember(Name = "executors", EmitDefaultValue = false)]
        public List<HudsonMasterComputerexecutors> Executors { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets IconClassName
        /// </summary>
        [DataMember(Name = "iconClassName", EmitDefaultValue = false)]
        public string IconClassName { get; set; }

        /// <summary>
        /// Gets or Sets Idle
        /// </summary>
        [DataMember(Name = "idle", EmitDefaultValue = true)]
        public bool Idle { get; set; }

        /// <summary>
        /// Gets or Sets JnlpAgent
        /// </summary>
        [DataMember(Name = "jnlpAgent", EmitDefaultValue = true)]
        public bool JnlpAgent { get; set; }

        /// <summary>
        /// Gets or Sets LaunchSupported
        /// </summary>
        [DataMember(Name = "launchSupported", EmitDefaultValue = true)]
        public bool LaunchSupported { get; set; }

        /// <summary>
        /// Gets or Sets LoadStatistics
        /// </summary>
        [DataMember(Name = "loadStatistics", EmitDefaultValue = false)]
        public Label1 LoadStatistics { get; set; }

        /// <summary>
        /// Gets or Sets ManualLaunchAllowed
        /// </summary>
        [DataMember(Name = "manualLaunchAllowed", EmitDefaultValue = true)]
        public bool ManualLaunchAllowed { get; set; }

        /// <summary>
        /// Gets or Sets MonitorData
        /// </summary>
        [DataMember(Name = "monitorData", EmitDefaultValue = false)]
        public HudsonMasterComputermonitorData MonitorData { get; set; }

        /// <summary>
        /// Gets or Sets NumExecutors
        /// </summary>
        [DataMember(Name = "numExecutors", EmitDefaultValue = false)]
        public int NumExecutors { get; set; }

        /// <summary>
        /// Gets or Sets Offline
        /// </summary>
        [DataMember(Name = "offline", EmitDefaultValue = true)]
        public bool Offline { get; set; }

        /// <summary>
        /// Gets or Sets OfflineCause
        /// </summary>
        [DataMember(Name = "offlineCause", EmitDefaultValue = false)]
        public string OfflineCause { get; set; }

        /// <summary>
        /// Gets or Sets OfflineCauseReason
        /// </summary>
        [DataMember(Name = "offlineCauseReason", EmitDefaultValue = false)]
        public string OfflineCauseReason { get; set; }

        /// <summary>
        /// Gets or Sets TemporarilyOffline
        /// </summary>
        [DataMember(Name = "temporarilyOffline", EmitDefaultValue = true)]
        public bool TemporarilyOffline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HudsonMasterComputer {\n");
            sb.Append("  VarClass: ").Append(VarClass).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Executors: ").Append(Executors).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IconClassName: ").Append(IconClassName).Append("\n");
            sb.Append("  Idle: ").Append(Idle).Append("\n");
            sb.Append("  JnlpAgent: ").Append(JnlpAgent).Append("\n");
            sb.Append("  LaunchSupported: ").Append(LaunchSupported).Append("\n");
            sb.Append("  LoadStatistics: ").Append(LoadStatistics).Append("\n");
            sb.Append("  ManualLaunchAllowed: ").Append(ManualLaunchAllowed).Append("\n");
            sb.Append("  MonitorData: ").Append(MonitorData).Append("\n");
            sb.Append("  NumExecutors: ").Append(NumExecutors).Append("\n");
            sb.Append("  Offline: ").Append(Offline).Append("\n");
            sb.Append("  OfflineCause: ").Append(OfflineCause).Append("\n");
            sb.Append("  OfflineCauseReason: ").Append(OfflineCauseReason).Append("\n");
            sb.Append("  TemporarilyOffline: ").Append(TemporarilyOffline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
