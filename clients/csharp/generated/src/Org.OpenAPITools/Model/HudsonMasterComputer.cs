// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HudsonMasterComputer
    /// </summary>
    public partial class HudsonMasterComputer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonMasterComputer" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="displayName">displayName</param>
        /// <param name="executors">executors</param>
        /// <param name="icon">icon</param>
        /// <param name="iconClassName">iconClassName</param>
        /// <param name="idle">idle</param>
        /// <param name="jnlpAgent">jnlpAgent</param>
        /// <param name="launchSupported">launchSupported</param>
        /// <param name="loadStatistics">loadStatistics</param>
        /// <param name="manualLaunchAllowed">manualLaunchAllowed</param>
        /// <param name="monitorData">monitorData</param>
        /// <param name="numExecutors">numExecutors</param>
        /// <param name="offline">offline</param>
        /// <param name="offlineCause">offlineCause</param>
        /// <param name="offlineCauseReason">offlineCauseReason</param>
        /// <param name="temporarilyOffline">temporarilyOffline</param>
        [JsonConstructor]
        public HudsonMasterComputer(Option<string?> @class = default, Option<string?> displayName = default, Option<List<HudsonMasterComputerexecutors>?> executors = default, Option<string?> icon = default, Option<string?> iconClassName = default, Option<bool?> idle = default, Option<bool?> jnlpAgent = default, Option<bool?> launchSupported = default, Option<Label1?> loadStatistics = default, Option<bool?> manualLaunchAllowed = default, Option<HudsonMasterComputermonitorData?> monitorData = default, Option<int?> numExecutors = default, Option<bool?> offline = default, Option<string?> offlineCause = default, Option<string?> offlineCauseReason = default, Option<bool?> temporarilyOffline = default)
        {
            ClassOption = @class;
            DisplayNameOption = displayName;
            ExecutorsOption = executors;
            IconOption = icon;
            IconClassNameOption = iconClassName;
            IdleOption = idle;
            JnlpAgentOption = jnlpAgent;
            LaunchSupportedOption = launchSupported;
            LoadStatisticsOption = loadStatistics;
            ManualLaunchAllowedOption = manualLaunchAllowed;
            MonitorDataOption = monitorData;
            NumExecutorsOption = numExecutors;
            OfflineOption = offline;
            OfflineCauseOption = offlineCause;
            OfflineCauseReasonOption = offlineCauseReason;
            TemporarilyOfflineOption = temporarilyOffline;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Executors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<HudsonMasterComputerexecutors>?> ExecutorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Executors
        /// </summary>
        [JsonPropertyName("executors")]
        public List<HudsonMasterComputerexecutors>? Executors { get { return this.ExecutorsOption; } set { this.ExecutorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Icon
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IconOption { get; private set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [JsonPropertyName("icon")]
        public string? Icon { get { return this.IconOption; } set { this.IconOption = new(value); } }

        /// <summary>
        /// Used to track the state of IconClassName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IconClassNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets IconClassName
        /// </summary>
        [JsonPropertyName("iconClassName")]
        public string? IconClassName { get { return this.IconClassNameOption; } set { this.IconClassNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Idle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IdleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Idle
        /// </summary>
        [JsonPropertyName("idle")]
        public bool? Idle { get { return this.IdleOption; } set { this.IdleOption = new(value); } }

        /// <summary>
        /// Used to track the state of JnlpAgent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> JnlpAgentOption { get; private set; }

        /// <summary>
        /// Gets or Sets JnlpAgent
        /// </summary>
        [JsonPropertyName("jnlpAgent")]
        public bool? JnlpAgent { get { return this.JnlpAgentOption; } set { this.JnlpAgentOption = new(value); } }

        /// <summary>
        /// Used to track the state of LaunchSupported
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LaunchSupportedOption { get; private set; }

        /// <summary>
        /// Gets or Sets LaunchSupported
        /// </summary>
        [JsonPropertyName("launchSupported")]
        public bool? LaunchSupported { get { return this.LaunchSupportedOption; } set { this.LaunchSupportedOption = new(value); } }

        /// <summary>
        /// Used to track the state of LoadStatistics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Label1?> LoadStatisticsOption { get; private set; }

        /// <summary>
        /// Gets or Sets LoadStatistics
        /// </summary>
        [JsonPropertyName("loadStatistics")]
        public Label1? LoadStatistics { get { return this.LoadStatisticsOption; } set { this.LoadStatisticsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ManualLaunchAllowed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ManualLaunchAllowedOption { get; private set; }

        /// <summary>
        /// Gets or Sets ManualLaunchAllowed
        /// </summary>
        [JsonPropertyName("manualLaunchAllowed")]
        public bool? ManualLaunchAllowed { get { return this.ManualLaunchAllowedOption; } set { this.ManualLaunchAllowedOption = new(value); } }

        /// <summary>
        /// Used to track the state of MonitorData
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HudsonMasterComputermonitorData?> MonitorDataOption { get; private set; }

        /// <summary>
        /// Gets or Sets MonitorData
        /// </summary>
        [JsonPropertyName("monitorData")]
        public HudsonMasterComputermonitorData? MonitorData { get { return this.MonitorDataOption; } set { this.MonitorDataOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumExecutors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumExecutorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumExecutors
        /// </summary>
        [JsonPropertyName("numExecutors")]
        public int? NumExecutors { get { return this.NumExecutorsOption; } set { this.NumExecutorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Offline
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> OfflineOption { get; private set; }

        /// <summary>
        /// Gets or Sets Offline
        /// </summary>
        [JsonPropertyName("offline")]
        public bool? Offline { get { return this.OfflineOption; } set { this.OfflineOption = new(value); } }

        /// <summary>
        /// Used to track the state of OfflineCause
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OfflineCauseOption { get; private set; }

        /// <summary>
        /// Gets or Sets OfflineCause
        /// </summary>
        [JsonPropertyName("offlineCause")]
        public string? OfflineCause { get { return this.OfflineCauseOption; } set { this.OfflineCauseOption = new(value); } }

        /// <summary>
        /// Used to track the state of OfflineCauseReason
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OfflineCauseReasonOption { get; private set; }

        /// <summary>
        /// Gets or Sets OfflineCauseReason
        /// </summary>
        [JsonPropertyName("offlineCauseReason")]
        public string? OfflineCauseReason { get { return this.OfflineCauseReasonOption; } set { this.OfflineCauseReasonOption = new(value); } }

        /// <summary>
        /// Used to track the state of TemporarilyOffline
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> TemporarilyOfflineOption { get; private set; }

        /// <summary>
        /// Gets or Sets TemporarilyOffline
        /// </summary>
        [JsonPropertyName("temporarilyOffline")]
        public bool? TemporarilyOffline { get { return this.TemporarilyOfflineOption; } set { this.TemporarilyOfflineOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HudsonMasterComputer {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Executors: ").Append(Executors).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IconClassName: ").Append(IconClassName).Append("\n");
            sb.Append("  Idle: ").Append(Idle).Append("\n");
            sb.Append("  JnlpAgent: ").Append(JnlpAgent).Append("\n");
            sb.Append("  LaunchSupported: ").Append(LaunchSupported).Append("\n");
            sb.Append("  LoadStatistics: ").Append(LoadStatistics).Append("\n");
            sb.Append("  ManualLaunchAllowed: ").Append(ManualLaunchAllowed).Append("\n");
            sb.Append("  MonitorData: ").Append(MonitorData).Append("\n");
            sb.Append("  NumExecutors: ").Append(NumExecutors).Append("\n");
            sb.Append("  Offline: ").Append(Offline).Append("\n");
            sb.Append("  OfflineCause: ").Append(OfflineCause).Append("\n");
            sb.Append("  OfflineCauseReason: ").Append(OfflineCauseReason).Append("\n");
            sb.Append("  TemporarilyOffline: ").Append(TemporarilyOffline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HudsonMasterComputer" />
    /// </summary>
    public class HudsonMasterComputerJsonConverter : JsonConverter<HudsonMasterComputer>
    {
        /// <summary>
        /// Deserializes json to <see cref="HudsonMasterComputer" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HudsonMasterComputer Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<string?> displayName = default;
            Option<List<HudsonMasterComputerexecutors>?> executors = default;
            Option<string?> icon = default;
            Option<string?> iconClassName = default;
            Option<bool?> idle = default;
            Option<bool?> jnlpAgent = default;
            Option<bool?> launchSupported = default;
            Option<Label1?> loadStatistics = default;
            Option<bool?> manualLaunchAllowed = default;
            Option<HudsonMasterComputermonitorData?> monitorData = default;
            Option<int?> numExecutors = default;
            Option<bool?> offline = default;
            Option<string?> offlineCause = default;
            Option<string?> offlineCauseReason = default;
            Option<bool?> temporarilyOffline = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "executors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                executors = new Option<List<HudsonMasterComputerexecutors>?>(JsonSerializer.Deserialize<List<HudsonMasterComputerexecutors>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "icon":
                            icon = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "iconClassName":
                            iconClassName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "idle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                idle = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "jnlpAgent":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                jnlpAgent = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "launchSupported":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                launchSupported = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "loadStatistics":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                loadStatistics = new Option<Label1?>(JsonSerializer.Deserialize<Label1>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "manualLaunchAllowed":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                manualLaunchAllowed = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "monitorData":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                monitorData = new Option<HudsonMasterComputermonitorData?>(JsonSerializer.Deserialize<HudsonMasterComputermonitorData>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "numExecutors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numExecutors = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "offline":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                offline = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "offlineCause":
                            offlineCause = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "offlineCauseReason":
                            offlineCauseReason = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "temporarilyOffline":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                temporarilyOffline = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class HudsonMasterComputer.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class HudsonMasterComputer.");

            if (executors.IsSet && executors.Value == null)
                throw new ArgumentNullException(nameof(executors), "Property is not nullable for class HudsonMasterComputer.");

            if (icon.IsSet && icon.Value == null)
                throw new ArgumentNullException(nameof(icon), "Property is not nullable for class HudsonMasterComputer.");

            if (iconClassName.IsSet && iconClassName.Value == null)
                throw new ArgumentNullException(nameof(iconClassName), "Property is not nullable for class HudsonMasterComputer.");

            if (idle.IsSet && idle.Value == null)
                throw new ArgumentNullException(nameof(idle), "Property is not nullable for class HudsonMasterComputer.");

            if (jnlpAgent.IsSet && jnlpAgent.Value == null)
                throw new ArgumentNullException(nameof(jnlpAgent), "Property is not nullable for class HudsonMasterComputer.");

            if (launchSupported.IsSet && launchSupported.Value == null)
                throw new ArgumentNullException(nameof(launchSupported), "Property is not nullable for class HudsonMasterComputer.");

            if (loadStatistics.IsSet && loadStatistics.Value == null)
                throw new ArgumentNullException(nameof(loadStatistics), "Property is not nullable for class HudsonMasterComputer.");

            if (manualLaunchAllowed.IsSet && manualLaunchAllowed.Value == null)
                throw new ArgumentNullException(nameof(manualLaunchAllowed), "Property is not nullable for class HudsonMasterComputer.");

            if (monitorData.IsSet && monitorData.Value == null)
                throw new ArgumentNullException(nameof(monitorData), "Property is not nullable for class HudsonMasterComputer.");

            if (numExecutors.IsSet && numExecutors.Value == null)
                throw new ArgumentNullException(nameof(numExecutors), "Property is not nullable for class HudsonMasterComputer.");

            if (offline.IsSet && offline.Value == null)
                throw new ArgumentNullException(nameof(offline), "Property is not nullable for class HudsonMasterComputer.");

            if (offlineCause.IsSet && offlineCause.Value == null)
                throw new ArgumentNullException(nameof(offlineCause), "Property is not nullable for class HudsonMasterComputer.");

            if (offlineCauseReason.IsSet && offlineCauseReason.Value == null)
                throw new ArgumentNullException(nameof(offlineCauseReason), "Property is not nullable for class HudsonMasterComputer.");

            if (temporarilyOffline.IsSet && temporarilyOffline.Value == null)
                throw new ArgumentNullException(nameof(temporarilyOffline), "Property is not nullable for class HudsonMasterComputer.");

            return new HudsonMasterComputer(varClass, displayName, executors, icon, iconClassName, idle, jnlpAgent, launchSupported, loadStatistics, manualLaunchAllowed, monitorData, numExecutors, offline, offlineCause, offlineCauseReason, temporarilyOffline);
        }

        /// <summary>
        /// Serializes a <see cref="HudsonMasterComputer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hudsonMasterComputer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HudsonMasterComputer hudsonMasterComputer, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, hudsonMasterComputer, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HudsonMasterComputer" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hudsonMasterComputer"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HudsonMasterComputer hudsonMasterComputer, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hudsonMasterComputer.ClassOption.IsSet && hudsonMasterComputer.Class == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.Class), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.DisplayNameOption.IsSet && hudsonMasterComputer.DisplayName == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.DisplayName), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.ExecutorsOption.IsSet && hudsonMasterComputer.Executors == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.Executors), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.IconOption.IsSet && hudsonMasterComputer.Icon == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.Icon), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.IconClassNameOption.IsSet && hudsonMasterComputer.IconClassName == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.IconClassName), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.LoadStatisticsOption.IsSet && hudsonMasterComputer.LoadStatistics == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.LoadStatistics), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.MonitorDataOption.IsSet && hudsonMasterComputer.MonitorData == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.MonitorData), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.OfflineCauseOption.IsSet && hudsonMasterComputer.OfflineCause == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.OfflineCause), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.OfflineCauseReasonOption.IsSet && hudsonMasterComputer.OfflineCauseReason == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputer.OfflineCauseReason), "Property is required for class HudsonMasterComputer.");

            if (hudsonMasterComputer.ClassOption.IsSet)
                writer.WriteString("_class", hudsonMasterComputer.Class);

            if (hudsonMasterComputer.DisplayNameOption.IsSet)
                writer.WriteString("displayName", hudsonMasterComputer.DisplayName);

            if (hudsonMasterComputer.ExecutorsOption.IsSet)
            {
                writer.WritePropertyName("executors");
                JsonSerializer.Serialize(writer, hudsonMasterComputer.Executors, jsonSerializerOptions);
            }
            if (hudsonMasterComputer.IconOption.IsSet)
                writer.WriteString("icon", hudsonMasterComputer.Icon);

            if (hudsonMasterComputer.IconClassNameOption.IsSet)
                writer.WriteString("iconClassName", hudsonMasterComputer.IconClassName);

            if (hudsonMasterComputer.IdleOption.IsSet)
                writer.WriteBoolean("idle", hudsonMasterComputer.IdleOption.Value!.Value);

            if (hudsonMasterComputer.JnlpAgentOption.IsSet)
                writer.WriteBoolean("jnlpAgent", hudsonMasterComputer.JnlpAgentOption.Value!.Value);

            if (hudsonMasterComputer.LaunchSupportedOption.IsSet)
                writer.WriteBoolean("launchSupported", hudsonMasterComputer.LaunchSupportedOption.Value!.Value);

            if (hudsonMasterComputer.LoadStatisticsOption.IsSet)
            {
                writer.WritePropertyName("loadStatistics");
                JsonSerializer.Serialize(writer, hudsonMasterComputer.LoadStatistics, jsonSerializerOptions);
            }
            if (hudsonMasterComputer.ManualLaunchAllowedOption.IsSet)
                writer.WriteBoolean("manualLaunchAllowed", hudsonMasterComputer.ManualLaunchAllowedOption.Value!.Value);

            if (hudsonMasterComputer.MonitorDataOption.IsSet)
            {
                writer.WritePropertyName("monitorData");
                JsonSerializer.Serialize(writer, hudsonMasterComputer.MonitorData, jsonSerializerOptions);
            }
            if (hudsonMasterComputer.NumExecutorsOption.IsSet)
                writer.WriteNumber("numExecutors", hudsonMasterComputer.NumExecutorsOption.Value!.Value);

            if (hudsonMasterComputer.OfflineOption.IsSet)
                writer.WriteBoolean("offline", hudsonMasterComputer.OfflineOption.Value!.Value);

            if (hudsonMasterComputer.OfflineCauseOption.IsSet)
                writer.WriteString("offlineCause", hudsonMasterComputer.OfflineCause);

            if (hudsonMasterComputer.OfflineCauseReasonOption.IsSet)
                writer.WriteString("offlineCauseReason", hudsonMasterComputer.OfflineCauseReason);

            if (hudsonMasterComputer.TemporarilyOfflineOption.IsSet)
                writer.WriteBoolean("temporarilyOffline", hudsonMasterComputer.TemporarilyOfflineOption.Value!.Value);
        }
    }
}
