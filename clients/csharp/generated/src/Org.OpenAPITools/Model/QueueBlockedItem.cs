/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QueueBlockedItem
    /// </summary>
    [DataContract(Name = "QueueBlockedItem")]
    public partial class QueueBlockedItem : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueBlockedItem" /> class.
        /// </summary>
        /// <param name="varClass">varClass.</param>
        /// <param name="actions">actions.</param>
        /// <param name="blocked">blocked.</param>
        /// <param name="buildable">buildable.</param>
        /// <param name="id">id.</param>
        /// <param name="inQueueSince">inQueueSince.</param>
        /// <param name="varParams">varParams.</param>
        /// <param name="stuck">stuck.</param>
        /// <param name="task">task.</param>
        /// <param name="url">url.</param>
        /// <param name="why">why.</param>
        /// <param name="buildableStartMilliseconds">buildableStartMilliseconds.</param>
        public QueueBlockedItem(string varClass = default(string), List<CauseAction> actions = default(List<CauseAction>), bool blocked = default(bool), bool buildable = default(bool), int id = default(int), int inQueueSince = default(int), string varParams = default(string), bool stuck = default(bool), FreeStyleProject task = default(FreeStyleProject), string url = default(string), string why = default(string), int buildableStartMilliseconds = default(int))
        {
            this.VarClass = varClass;
            this.Actions = actions;
            this.Blocked = blocked;
            this.Buildable = buildable;
            this.Id = id;
            this.InQueueSince = inQueueSince;
            this.VarParams = varParams;
            this.Stuck = stuck;
            this.Task = task;
            this.Url = url;
            this.Why = why;
            this.BuildableStartMilliseconds = buildableStartMilliseconds;
        }

        /// <summary>
        /// Gets or Sets VarClass
        /// </summary>
        [DataMember(Name = "_class", EmitDefaultValue = false)]
        public string VarClass { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = false)]
        public List<CauseAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [DataMember(Name = "blocked", EmitDefaultValue = true)]
        public bool Blocked { get; set; }

        /// <summary>
        /// Gets or Sets Buildable
        /// </summary>
        [DataMember(Name = "buildable", EmitDefaultValue = true)]
        public bool Buildable { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets InQueueSince
        /// </summary>
        [DataMember(Name = "inQueueSince", EmitDefaultValue = false)]
        public int InQueueSince { get; set; }

        /// <summary>
        /// Gets or Sets VarParams
        /// </summary>
        [DataMember(Name = "params", EmitDefaultValue = false)]
        public string VarParams { get; set; }

        /// <summary>
        /// Gets or Sets Stuck
        /// </summary>
        [DataMember(Name = "stuck", EmitDefaultValue = true)]
        public bool Stuck { get; set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name = "task", EmitDefaultValue = false)]
        public FreeStyleProject Task { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Why
        /// </summary>
        [DataMember(Name = "why", EmitDefaultValue = false)]
        public string Why { get; set; }

        /// <summary>
        /// Gets or Sets BuildableStartMilliseconds
        /// </summary>
        [DataMember(Name = "buildableStartMilliseconds", EmitDefaultValue = false)]
        public int BuildableStartMilliseconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueBlockedItem {\n");
            sb.Append("  VarClass: ").Append(VarClass).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Buildable: ").Append(Buildable).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InQueueSince: ").Append(InQueueSince).Append("\n");
            sb.Append("  VarParams: ").Append(VarParams).Append("\n");
            sb.Append("  Stuck: ").Append(Stuck).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Why: ").Append(Why).Append("\n");
            sb.Append("  BuildableStartMilliseconds: ").Append(BuildableStartMilliseconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
