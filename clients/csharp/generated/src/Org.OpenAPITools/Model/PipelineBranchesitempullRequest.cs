// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PipelineBranchesitempullRequest
    /// </summary>
    public partial class PipelineBranchesitempullRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineBranchesitempullRequest" /> class.
        /// </summary>
        /// <param name="links">links</param>
        /// <param name="author">author</param>
        /// <param name="id">id</param>
        /// <param name="title">title</param>
        /// <param name="url">url</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public PipelineBranchesitempullRequest(Option<PipelineBranchesitempullRequestlinks?> links = default, Option<string?> author = default, Option<string?> id = default, Option<string?> title = default, Option<string?> url = default, Option<string?> @class = default)
        {
            LinksOption = links;
            AuthorOption = author;
            IdOption = id;
            TitleOption = title;
            UrlOption = url;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Links
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PipelineBranchesitempullRequestlinks?> LinksOption { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [JsonPropertyName("_links")]
        public PipelineBranchesitempullRequestlinks? Links { get { return this.LinksOption; } set { this.LinksOption = new(value); } }

        /// <summary>
        /// Used to track the state of Author
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AuthorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [JsonPropertyName("author")]
        public string? Author { get { return this.AuthorOption; } set { this.AuthorOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineBranchesitempullRequest {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PipelineBranchesitempullRequest" />
    /// </summary>
    public class PipelineBranchesitempullRequestJsonConverter : JsonConverter<PipelineBranchesitempullRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="PipelineBranchesitempullRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PipelineBranchesitempullRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<PipelineBranchesitempullRequestlinks?> links = default;
            Option<string?> author = default;
            Option<string?> id = default;
            Option<string?> title = default;
            Option<string?> url = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_links":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                links = new Option<PipelineBranchesitempullRequestlinks?>(JsonSerializer.Deserialize<PipelineBranchesitempullRequestlinks>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "author":
                            author = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (links.IsSet && links.Value == null)
                throw new ArgumentNullException(nameof(links), "Property is not nullable for class PipelineBranchesitempullRequest.");

            if (author.IsSet && author.Value == null)
                throw new ArgumentNullException(nameof(author), "Property is not nullable for class PipelineBranchesitempullRequest.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PipelineBranchesitempullRequest.");

            if (title.IsSet && title.Value == null)
                throw new ArgumentNullException(nameof(title), "Property is not nullable for class PipelineBranchesitempullRequest.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class PipelineBranchesitempullRequest.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class PipelineBranchesitempullRequest.");

            return new PipelineBranchesitempullRequest(links, author, id, title, url, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="PipelineBranchesitempullRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineBranchesitempullRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PipelineBranchesitempullRequest pipelineBranchesitempullRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pipelineBranchesitempullRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PipelineBranchesitempullRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineBranchesitempullRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PipelineBranchesitempullRequest pipelineBranchesitempullRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pipelineBranchesitempullRequest.LinksOption.IsSet && pipelineBranchesitempullRequest.Links == null)
                throw new ArgumentNullException(nameof(pipelineBranchesitempullRequest.Links), "Property is required for class PipelineBranchesitempullRequest.");

            if (pipelineBranchesitempullRequest.AuthorOption.IsSet && pipelineBranchesitempullRequest.Author == null)
                throw new ArgumentNullException(nameof(pipelineBranchesitempullRequest.Author), "Property is required for class PipelineBranchesitempullRequest.");

            if (pipelineBranchesitempullRequest.IdOption.IsSet && pipelineBranchesitempullRequest.Id == null)
                throw new ArgumentNullException(nameof(pipelineBranchesitempullRequest.Id), "Property is required for class PipelineBranchesitempullRequest.");

            if (pipelineBranchesitempullRequest.TitleOption.IsSet && pipelineBranchesitempullRequest.Title == null)
                throw new ArgumentNullException(nameof(pipelineBranchesitempullRequest.Title), "Property is required for class PipelineBranchesitempullRequest.");

            if (pipelineBranchesitempullRequest.UrlOption.IsSet && pipelineBranchesitempullRequest.Url == null)
                throw new ArgumentNullException(nameof(pipelineBranchesitempullRequest.Url), "Property is required for class PipelineBranchesitempullRequest.");

            if (pipelineBranchesitempullRequest.ClassOption.IsSet && pipelineBranchesitempullRequest.Class == null)
                throw new ArgumentNullException(nameof(pipelineBranchesitempullRequest.Class), "Property is required for class PipelineBranchesitempullRequest.");

            if (pipelineBranchesitempullRequest.LinksOption.IsSet)
            {
                writer.WritePropertyName("_links");
                JsonSerializer.Serialize(writer, pipelineBranchesitempullRequest.Links, jsonSerializerOptions);
            }
            if (pipelineBranchesitempullRequest.AuthorOption.IsSet)
                writer.WriteString("author", pipelineBranchesitempullRequest.Author);

            if (pipelineBranchesitempullRequest.IdOption.IsSet)
                writer.WriteString("id", pipelineBranchesitempullRequest.Id);

            if (pipelineBranchesitempullRequest.TitleOption.IsSet)
                writer.WriteString("title", pipelineBranchesitempullRequest.Title);

            if (pipelineBranchesitempullRequest.UrlOption.IsSet)
                writer.WriteString("url", pipelineBranchesitempullRequest.Url);

            if (pipelineBranchesitempullRequest.ClassOption.IsSet)
                writer.WriteString("_class", pipelineBranchesitempullRequest.Class);
        }
    }
}
