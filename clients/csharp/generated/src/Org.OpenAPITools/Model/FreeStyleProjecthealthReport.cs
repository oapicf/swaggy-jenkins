// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FreeStyleProjecthealthReport
    /// </summary>
    public partial class FreeStyleProjecthealthReport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FreeStyleProjecthealthReport" /> class.
        /// </summary>
        /// <param name="description">description</param>
        /// <param name="iconClassName">iconClassName</param>
        /// <param name="iconUrl">iconUrl</param>
        /// <param name="score">score</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public FreeStyleProjecthealthReport(Option<string?> description = default, Option<string?> iconClassName = default, Option<string?> iconUrl = default, Option<int?> score = default, Option<string?> @class = default)
        {
            DescriptionOption = description;
            IconClassNameOption = iconClassName;
            IconUrlOption = iconUrl;
            ScoreOption = score;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of IconClassName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IconClassNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets IconClassName
        /// </summary>
        [JsonPropertyName("iconClassName")]
        public string? IconClassName { get { return this.IconClassNameOption; } set { this.IconClassNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of IconUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IconUrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets IconUrl
        /// </summary>
        [JsonPropertyName("iconUrl")]
        public string? IconUrl { get { return this.IconUrlOption; } set { this.IconUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Score
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ScoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [JsonPropertyName("score")]
        public int? Score { get { return this.ScoreOption; } set { this.ScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FreeStyleProjecthealthReport {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IconClassName: ").Append(IconClassName).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FreeStyleProjecthealthReport" />
    /// </summary>
    public class FreeStyleProjecthealthReportJsonConverter : JsonConverter<FreeStyleProjecthealthReport>
    {
        /// <summary>
        /// Deserializes json to <see cref="FreeStyleProjecthealthReport" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FreeStyleProjecthealthReport Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> description = default;
            Option<string?> iconClassName = default;
            Option<string?> iconUrl = default;
            Option<int?> score = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "iconClassName":
                            iconClassName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "iconUrl":
                            iconUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "score":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                score = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class FreeStyleProjecthealthReport.");

            if (iconClassName.IsSet && iconClassName.Value == null)
                throw new ArgumentNullException(nameof(iconClassName), "Property is not nullable for class FreeStyleProjecthealthReport.");

            if (iconUrl.IsSet && iconUrl.Value == null)
                throw new ArgumentNullException(nameof(iconUrl), "Property is not nullable for class FreeStyleProjecthealthReport.");

            if (score.IsSet && score.Value == null)
                throw new ArgumentNullException(nameof(score), "Property is not nullable for class FreeStyleProjecthealthReport.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class FreeStyleProjecthealthReport.");

            return new FreeStyleProjecthealthReport(description, iconClassName, iconUrl, score, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="FreeStyleProjecthealthReport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="freeStyleProjecthealthReport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FreeStyleProjecthealthReport freeStyleProjecthealthReport, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, freeStyleProjecthealthReport, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FreeStyleProjecthealthReport" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="freeStyleProjecthealthReport"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FreeStyleProjecthealthReport freeStyleProjecthealthReport, JsonSerializerOptions jsonSerializerOptions)
        {
            if (freeStyleProjecthealthReport.DescriptionOption.IsSet && freeStyleProjecthealthReport.Description == null)
                throw new ArgumentNullException(nameof(freeStyleProjecthealthReport.Description), "Property is required for class FreeStyleProjecthealthReport.");

            if (freeStyleProjecthealthReport.IconClassNameOption.IsSet && freeStyleProjecthealthReport.IconClassName == null)
                throw new ArgumentNullException(nameof(freeStyleProjecthealthReport.IconClassName), "Property is required for class FreeStyleProjecthealthReport.");

            if (freeStyleProjecthealthReport.IconUrlOption.IsSet && freeStyleProjecthealthReport.IconUrl == null)
                throw new ArgumentNullException(nameof(freeStyleProjecthealthReport.IconUrl), "Property is required for class FreeStyleProjecthealthReport.");

            if (freeStyleProjecthealthReport.ClassOption.IsSet && freeStyleProjecthealthReport.Class == null)
                throw new ArgumentNullException(nameof(freeStyleProjecthealthReport.Class), "Property is required for class FreeStyleProjecthealthReport.");

            if (freeStyleProjecthealthReport.DescriptionOption.IsSet)
                writer.WriteString("description", freeStyleProjecthealthReport.Description);

            if (freeStyleProjecthealthReport.IconClassNameOption.IsSet)
                writer.WriteString("iconClassName", freeStyleProjecthealthReport.IconClassName);

            if (freeStyleProjecthealthReport.IconUrlOption.IsSet)
                writer.WriteString("iconUrl", freeStyleProjecthealthReport.IconUrl);

            if (freeStyleProjecthealthReport.ScoreOption.IsSet)
                writer.WriteNumber("score", freeStyleProjecthealthReport.ScoreOption.Value!.Value);

            if (freeStyleProjecthealthReport.ClassOption.IsSet)
                writer.WriteString("_class", freeStyleProjecthealthReport.Class);
        }
    }
}
