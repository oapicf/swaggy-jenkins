// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FreeStyleBuild
    /// </summary>
    public partial class FreeStyleBuild : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FreeStyleBuild" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="number">number</param>
        /// <param name="url">url</param>
        /// <param name="actions">actions</param>
        /// <param name="building">building</param>
        /// <param name="description">description</param>
        /// <param name="displayName">displayName</param>
        /// <param name="duration">duration</param>
        /// <param name="estimatedDuration">estimatedDuration</param>
        /// <param name="executor">executor</param>
        /// <param name="fullDisplayName">fullDisplayName</param>
        /// <param name="id">id</param>
        /// <param name="keepLog">keepLog</param>
        /// <param name="queueId">queueId</param>
        /// <param name="result">result</param>
        /// <param name="timestamp">timestamp</param>
        /// <param name="builtOn">builtOn</param>
        /// <param name="changeSet">changeSet</param>
        [JsonConstructor]
        public FreeStyleBuild(Option<string?> @class = default, Option<int?> number = default, Option<string?> url = default, Option<List<CauseAction>?> actions = default, Option<bool?> building = default, Option<string?> description = default, Option<string?> displayName = default, Option<int?> duration = default, Option<int?> estimatedDuration = default, Option<string?> executor = default, Option<string?> fullDisplayName = default, Option<string?> id = default, Option<bool?> keepLog = default, Option<int?> queueId = default, Option<string?> result = default, Option<int?> timestamp = default, Option<string?> builtOn = default, Option<EmptyChangeLogSet?> changeSet = default)
        {
            ClassOption = @class;
            NumberOption = number;
            UrlOption = url;
            ActionsOption = actions;
            BuildingOption = building;
            DescriptionOption = description;
            DisplayNameOption = displayName;
            DurationOption = duration;
            EstimatedDurationOption = estimatedDuration;
            ExecutorOption = executor;
            FullDisplayNameOption = fullDisplayName;
            IdOption = id;
            KeepLogOption = keepLog;
            QueueIdOption = queueId;
            ResultOption = result;
            TimestampOption = timestamp;
            BuiltOnOption = builtOn;
            ChangeSetOption = changeSet;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<CauseAction>?> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [JsonPropertyName("actions")]
        public List<CauseAction>? Actions { get { return this.ActionsOption; } set { this.ActionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Building
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BuildingOption { get; private set; }

        /// <summary>
        /// Gets or Sets Building
        /// </summary>
        [JsonPropertyName("building")]
        public bool? Building { get { return this.BuildingOption; } set { this.BuildingOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [JsonPropertyName("duration")]
        public int? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of EstimatedDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EstimatedDurationOption { get; private set; }

        /// <summary>
        /// Gets or Sets EstimatedDuration
        /// </summary>
        [JsonPropertyName("estimatedDuration")]
        public int? EstimatedDuration { get { return this.EstimatedDurationOption; } set { this.EstimatedDurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Executor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExecutorOption { get; private set; }

        /// <summary>
        /// Gets or Sets Executor
        /// </summary>
        [JsonPropertyName("executor")]
        public string? Executor { get { return this.ExecutorOption; } set { this.ExecutorOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullDisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullDisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullDisplayName
        /// </summary>
        [JsonPropertyName("fullDisplayName")]
        public string? FullDisplayName { get { return this.FullDisplayNameOption; } set { this.FullDisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of KeepLog
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> KeepLogOption { get; private set; }

        /// <summary>
        /// Gets or Sets KeepLog
        /// </summary>
        [JsonPropertyName("keepLog")]
        public bool? KeepLog { get { return this.KeepLogOption; } set { this.KeepLogOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueueId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> QueueIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [JsonPropertyName("queueId")]
        public int? QueueId { get { return this.QueueIdOption; } set { this.QueueIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Result
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("result")]
        public string? Result { get { return this.ResultOption; } set { this.ResultOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimestampOption { get; private set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [JsonPropertyName("timestamp")]
        public int? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of BuiltOn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuiltOnOption { get; private set; }

        /// <summary>
        /// Gets or Sets BuiltOn
        /// </summary>
        [JsonPropertyName("builtOn")]
        public string? BuiltOn { get { return this.BuiltOnOption; } set { this.BuiltOnOption = new(value); } }

        /// <summary>
        /// Used to track the state of ChangeSet
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<EmptyChangeLogSet?> ChangeSetOption { get; private set; }

        /// <summary>
        /// Gets or Sets ChangeSet
        /// </summary>
        [JsonPropertyName("changeSet")]
        public EmptyChangeLogSet? ChangeSet { get { return this.ChangeSetOption; } set { this.ChangeSetOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FreeStyleBuild {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EstimatedDuration: ").Append(EstimatedDuration).Append("\n");
            sb.Append("  Executor: ").Append(Executor).Append("\n");
            sb.Append("  FullDisplayName: ").Append(FullDisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeepLog: ").Append(KeepLog).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  BuiltOn: ").Append(BuiltOn).Append("\n");
            sb.Append("  ChangeSet: ").Append(ChangeSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="FreeStyleBuild" />
    /// </summary>
    public class FreeStyleBuildJsonConverter : JsonConverter<FreeStyleBuild>
    {
        /// <summary>
        /// Deserializes json to <see cref="FreeStyleBuild" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override FreeStyleBuild Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<int?> number = default;
            Option<string?> url = default;
            Option<List<CauseAction>?> actions = default;
            Option<bool?> building = default;
            Option<string?> description = default;
            Option<string?> displayName = default;
            Option<int?> duration = default;
            Option<int?> estimatedDuration = default;
            Option<string?> executor = default;
            Option<string?> fullDisplayName = default;
            Option<string?> id = default;
            Option<bool?> keepLog = default;
            Option<int?> queueId = default;
            Option<string?> result = default;
            Option<int?> timestamp = default;
            Option<string?> builtOn = default;
            Option<EmptyChangeLogSet?> changeSet = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "actions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actions = new Option<List<CauseAction>?>(JsonSerializer.Deserialize<List<CauseAction>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "building":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                building = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "duration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                duration = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "estimatedDuration":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                estimatedDuration = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "executor":
                            executor = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fullDisplayName":
                            fullDisplayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "keepLog":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                keepLog = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "queueId":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                queueId = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "result":
                            result = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timestamp":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                timestamp = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "builtOn":
                            builtOn = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "changeSet":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                changeSet = new Option<EmptyChangeLogSet?>(JsonSerializer.Deserialize<EmptyChangeLogSet>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class FreeStyleBuild.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class FreeStyleBuild.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class FreeStyleBuild.");

            if (actions.IsSet && actions.Value == null)
                throw new ArgumentNullException(nameof(actions), "Property is not nullable for class FreeStyleBuild.");

            if (building.IsSet && building.Value == null)
                throw new ArgumentNullException(nameof(building), "Property is not nullable for class FreeStyleBuild.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class FreeStyleBuild.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class FreeStyleBuild.");

            if (duration.IsSet && duration.Value == null)
                throw new ArgumentNullException(nameof(duration), "Property is not nullable for class FreeStyleBuild.");

            if (estimatedDuration.IsSet && estimatedDuration.Value == null)
                throw new ArgumentNullException(nameof(estimatedDuration), "Property is not nullable for class FreeStyleBuild.");

            if (executor.IsSet && executor.Value == null)
                throw new ArgumentNullException(nameof(executor), "Property is not nullable for class FreeStyleBuild.");

            if (fullDisplayName.IsSet && fullDisplayName.Value == null)
                throw new ArgumentNullException(nameof(fullDisplayName), "Property is not nullable for class FreeStyleBuild.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class FreeStyleBuild.");

            if (keepLog.IsSet && keepLog.Value == null)
                throw new ArgumentNullException(nameof(keepLog), "Property is not nullable for class FreeStyleBuild.");

            if (queueId.IsSet && queueId.Value == null)
                throw new ArgumentNullException(nameof(queueId), "Property is not nullable for class FreeStyleBuild.");

            if (result.IsSet && result.Value == null)
                throw new ArgumentNullException(nameof(result), "Property is not nullable for class FreeStyleBuild.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class FreeStyleBuild.");

            if (builtOn.IsSet && builtOn.Value == null)
                throw new ArgumentNullException(nameof(builtOn), "Property is not nullable for class FreeStyleBuild.");

            if (changeSet.IsSet && changeSet.Value == null)
                throw new ArgumentNullException(nameof(changeSet), "Property is not nullable for class FreeStyleBuild.");

            return new FreeStyleBuild(varClass, number, url, actions, building, description, displayName, duration, estimatedDuration, executor, fullDisplayName, id, keepLog, queueId, result, timestamp, builtOn, changeSet);
        }

        /// <summary>
        /// Serializes a <see cref="FreeStyleBuild" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="freeStyleBuild"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, FreeStyleBuild freeStyleBuild, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, freeStyleBuild, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="FreeStyleBuild" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="freeStyleBuild"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, FreeStyleBuild freeStyleBuild, JsonSerializerOptions jsonSerializerOptions)
        {
            if (freeStyleBuild.ClassOption.IsSet && freeStyleBuild.Class == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.Class), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.UrlOption.IsSet && freeStyleBuild.Url == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.Url), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.ActionsOption.IsSet && freeStyleBuild.Actions == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.Actions), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.DescriptionOption.IsSet && freeStyleBuild.Description == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.Description), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.DisplayNameOption.IsSet && freeStyleBuild.DisplayName == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.DisplayName), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.ExecutorOption.IsSet && freeStyleBuild.Executor == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.Executor), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.FullDisplayNameOption.IsSet && freeStyleBuild.FullDisplayName == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.FullDisplayName), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.IdOption.IsSet && freeStyleBuild.Id == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.Id), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.ResultOption.IsSet && freeStyleBuild.Result == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.Result), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.BuiltOnOption.IsSet && freeStyleBuild.BuiltOn == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.BuiltOn), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.ChangeSetOption.IsSet && freeStyleBuild.ChangeSet == null)
                throw new ArgumentNullException(nameof(freeStyleBuild.ChangeSet), "Property is required for class FreeStyleBuild.");

            if (freeStyleBuild.ClassOption.IsSet)
                writer.WriteString("_class", freeStyleBuild.Class);

            if (freeStyleBuild.NumberOption.IsSet)
                writer.WriteNumber("number", freeStyleBuild.NumberOption.Value!.Value);

            if (freeStyleBuild.UrlOption.IsSet)
                writer.WriteString("url", freeStyleBuild.Url);

            if (freeStyleBuild.ActionsOption.IsSet)
            {
                writer.WritePropertyName("actions");
                JsonSerializer.Serialize(writer, freeStyleBuild.Actions, jsonSerializerOptions);
            }
            if (freeStyleBuild.BuildingOption.IsSet)
                writer.WriteBoolean("building", freeStyleBuild.BuildingOption.Value!.Value);

            if (freeStyleBuild.DescriptionOption.IsSet)
                writer.WriteString("description", freeStyleBuild.Description);

            if (freeStyleBuild.DisplayNameOption.IsSet)
                writer.WriteString("displayName", freeStyleBuild.DisplayName);

            if (freeStyleBuild.DurationOption.IsSet)
                writer.WriteNumber("duration", freeStyleBuild.DurationOption.Value!.Value);

            if (freeStyleBuild.EstimatedDurationOption.IsSet)
                writer.WriteNumber("estimatedDuration", freeStyleBuild.EstimatedDurationOption.Value!.Value);

            if (freeStyleBuild.ExecutorOption.IsSet)
                writer.WriteString("executor", freeStyleBuild.Executor);

            if (freeStyleBuild.FullDisplayNameOption.IsSet)
                writer.WriteString("fullDisplayName", freeStyleBuild.FullDisplayName);

            if (freeStyleBuild.IdOption.IsSet)
                writer.WriteString("id", freeStyleBuild.Id);

            if (freeStyleBuild.KeepLogOption.IsSet)
                writer.WriteBoolean("keepLog", freeStyleBuild.KeepLogOption.Value!.Value);

            if (freeStyleBuild.QueueIdOption.IsSet)
                writer.WriteNumber("queueId", freeStyleBuild.QueueIdOption.Value!.Value);

            if (freeStyleBuild.ResultOption.IsSet)
                writer.WriteString("result", freeStyleBuild.Result);

            if (freeStyleBuild.TimestampOption.IsSet)
                writer.WriteNumber("timestamp", freeStyleBuild.TimestampOption.Value!.Value);

            if (freeStyleBuild.BuiltOnOption.IsSet)
                writer.WriteString("builtOn", freeStyleBuild.BuiltOn);

            if (freeStyleBuild.ChangeSetOption.IsSet)
            {
                writer.WritePropertyName("changeSet");
                JsonSerializer.Serialize(writer, freeStyleBuild.ChangeSet, jsonSerializerOptions);
            }
        }
    }
}
