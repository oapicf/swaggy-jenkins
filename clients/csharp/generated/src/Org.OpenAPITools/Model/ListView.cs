// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ListView
    /// </summary>
    public partial class ListView : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListView" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="description">description</param>
        /// <param name="jobs">jobs</param>
        /// <param name="name">name</param>
        /// <param name="url">url</param>
        [JsonConstructor]
        public ListView(Option<string?> @class = default, Option<string?> description = default, Option<List<FreeStyleProject>?> jobs = default, Option<string?> name = default, Option<string?> url = default)
        {
            ClassOption = @class;
            DescriptionOption = description;
            JobsOption = jobs;
            NameOption = name;
            UrlOption = url;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Jobs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<FreeStyleProject>?> JobsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Jobs
        /// </summary>
        [JsonPropertyName("jobs")]
        public List<FreeStyleProject>? Jobs { get { return this.JobsOption; } set { this.JobsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Url
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UrlOption { get; private set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [JsonPropertyName("url")]
        public string? Url { get { return this.UrlOption; } set { this.UrlOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListView {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Jobs: ").Append(Jobs).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ListView" />
    /// </summary>
    public class ListViewJsonConverter : JsonConverter<ListView>
    {
        /// <summary>
        /// Deserializes json to <see cref="ListView" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ListView Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<string?> description = default;
            Option<List<FreeStyleProject>?> jobs = default;
            Option<string?> name = default;
            Option<string?> url = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "jobs":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                jobs = new Option<List<FreeStyleProject>?>(JsonSerializer.Deserialize<List<FreeStyleProject>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "url":
                            url = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class ListView.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class ListView.");

            if (jobs.IsSet && jobs.Value == null)
                throw new ArgumentNullException(nameof(jobs), "Property is not nullable for class ListView.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ListView.");

            if (url.IsSet && url.Value == null)
                throw new ArgumentNullException(nameof(url), "Property is not nullable for class ListView.");

            return new ListView(varClass, description, jobs, name, url);
        }

        /// <summary>
        /// Serializes a <see cref="ListView" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listView"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ListView listView, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, listView, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ListView" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="listView"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ListView listView, JsonSerializerOptions jsonSerializerOptions)
        {
            if (listView.ClassOption.IsSet && listView.Class == null)
                throw new ArgumentNullException(nameof(listView.Class), "Property is required for class ListView.");

            if (listView.DescriptionOption.IsSet && listView.Description == null)
                throw new ArgumentNullException(nameof(listView.Description), "Property is required for class ListView.");

            if (listView.JobsOption.IsSet && listView.Jobs == null)
                throw new ArgumentNullException(nameof(listView.Jobs), "Property is required for class ListView.");

            if (listView.NameOption.IsSet && listView.Name == null)
                throw new ArgumentNullException(nameof(listView.Name), "Property is required for class ListView.");

            if (listView.UrlOption.IsSet && listView.Url == null)
                throw new ArgumentNullException(nameof(listView.Url), "Property is required for class ListView.");

            if (listView.ClassOption.IsSet)
                writer.WriteString("_class", listView.Class);

            if (listView.DescriptionOption.IsSet)
                writer.WriteString("description", listView.Description);

            if (listView.JobsOption.IsSet)
            {
                writer.WritePropertyName("jobs");
                JsonSerializer.Serialize(writer, listView.Jobs, jsonSerializerOptions);
            }
            if (listView.NameOption.IsSet)
                writer.WriteString("name", listView.Name);

            if (listView.UrlOption.IsSet)
                writer.WriteString("url", listView.Url);
        }
    }
}
