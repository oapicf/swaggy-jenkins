// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// QueueItemImpl
    /// </summary>
    public partial class QueueItemImpl : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueItemImpl" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="expectedBuildNumber">expectedBuildNumber</param>
        /// <param name="id">id</param>
        /// <param name="pipeline">pipeline</param>
        /// <param name="queuedTime">queuedTime</param>
        [JsonConstructor]
        public QueueItemImpl(Option<string?> @class = default, Option<int?> expectedBuildNumber = default, Option<string?> id = default, Option<string?> pipeline = default, Option<int?> queuedTime = default)
        {
            ClassOption = @class;
            ExpectedBuildNumberOption = expectedBuildNumber;
            IdOption = id;
            PipelineOption = pipeline;
            QueuedTimeOption = queuedTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpectedBuildNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ExpectedBuildNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExpectedBuildNumber
        /// </summary>
        [JsonPropertyName("expectedBuildNumber")]
        public int? ExpectedBuildNumber { get { return this.ExpectedBuildNumberOption; } set { this.ExpectedBuildNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pipeline
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PipelineOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pipeline
        /// </summary>
        [JsonPropertyName("pipeline")]
        public string? Pipeline { get { return this.PipelineOption; } set { this.PipelineOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueuedTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> QueuedTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets QueuedTime
        /// </summary>
        [JsonPropertyName("queuedTime")]
        public int? QueuedTime { get { return this.QueuedTimeOption; } set { this.QueuedTimeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class QueueItemImpl {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  ExpectedBuildNumber: ").Append(ExpectedBuildNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Pipeline: ").Append(Pipeline).Append("\n");
            sb.Append("  QueuedTime: ").Append(QueuedTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="QueueItemImpl" />
    /// </summary>
    public class QueueItemImplJsonConverter : JsonConverter<QueueItemImpl>
    {
        /// <summary>
        /// Deserializes json to <see cref="QueueItemImpl" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override QueueItemImpl Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<int?> expectedBuildNumber = default;
            Option<string?> id = default;
            Option<string?> pipeline = default;
            Option<int?> queuedTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expectedBuildNumber":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                expectedBuildNumber = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pipeline":
                            pipeline = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "queuedTime":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                queuedTime = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class QueueItemImpl.");

            if (expectedBuildNumber.IsSet && expectedBuildNumber.Value == null)
                throw new ArgumentNullException(nameof(expectedBuildNumber), "Property is not nullable for class QueueItemImpl.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class QueueItemImpl.");

            if (pipeline.IsSet && pipeline.Value == null)
                throw new ArgumentNullException(nameof(pipeline), "Property is not nullable for class QueueItemImpl.");

            if (queuedTime.IsSet && queuedTime.Value == null)
                throw new ArgumentNullException(nameof(queuedTime), "Property is not nullable for class QueueItemImpl.");

            return new QueueItemImpl(varClass, expectedBuildNumber, id, pipeline, queuedTime);
        }

        /// <summary>
        /// Serializes a <see cref="QueueItemImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queueItemImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, QueueItemImpl queueItemImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, queueItemImpl, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="QueueItemImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="queueItemImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, QueueItemImpl queueItemImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            if (queueItemImpl.ClassOption.IsSet && queueItemImpl.Class == null)
                throw new ArgumentNullException(nameof(queueItemImpl.Class), "Property is required for class QueueItemImpl.");

            if (queueItemImpl.IdOption.IsSet && queueItemImpl.Id == null)
                throw new ArgumentNullException(nameof(queueItemImpl.Id), "Property is required for class QueueItemImpl.");

            if (queueItemImpl.PipelineOption.IsSet && queueItemImpl.Pipeline == null)
                throw new ArgumentNullException(nameof(queueItemImpl.Pipeline), "Property is required for class QueueItemImpl.");

            if (queueItemImpl.ClassOption.IsSet)
                writer.WriteString("_class", queueItemImpl.Class);

            if (queueItemImpl.ExpectedBuildNumberOption.IsSet)
                writer.WriteNumber("expectedBuildNumber", queueItemImpl.ExpectedBuildNumberOption.Value!.Value);

            if (queueItemImpl.IdOption.IsSet)
                writer.WriteString("id", queueItemImpl.Id);

            if (queueItemImpl.PipelineOption.IsSet)
                writer.WriteString("pipeline", queueItemImpl.Pipeline);

            if (queueItemImpl.QueuedTimeOption.IsSet)
                writer.WriteNumber("queuedTime", queueItemImpl.QueuedTimeOption.Value!.Value);
        }
    }
}
