/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SwapSpaceMonitorMemoryUsage2
    /// </summary>
    [DataContract(Name = "SwapSpaceMonitorMemoryUsage2")]
    public partial class SwapSpaceMonitorMemoryUsage2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SwapSpaceMonitorMemoryUsage2" /> class.
        /// </summary>
        /// <param name="varClass">varClass.</param>
        /// <param name="availablePhysicalMemory">availablePhysicalMemory.</param>
        /// <param name="availableSwapSpace">availableSwapSpace.</param>
        /// <param name="totalPhysicalMemory">totalPhysicalMemory.</param>
        /// <param name="totalSwapSpace">totalSwapSpace.</param>
        public SwapSpaceMonitorMemoryUsage2(string varClass = default(string), int availablePhysicalMemory = default(int), int availableSwapSpace = default(int), int totalPhysicalMemory = default(int), int totalSwapSpace = default(int))
        {
            this.VarClass = varClass;
            this.AvailablePhysicalMemory = availablePhysicalMemory;
            this.AvailableSwapSpace = availableSwapSpace;
            this.TotalPhysicalMemory = totalPhysicalMemory;
            this.TotalSwapSpace = totalSwapSpace;
        }

        /// <summary>
        /// Gets or Sets VarClass
        /// </summary>
        [DataMember(Name = "_class", EmitDefaultValue = false)]
        public string VarClass { get; set; }

        /// <summary>
        /// Gets or Sets AvailablePhysicalMemory
        /// </summary>
        [DataMember(Name = "availablePhysicalMemory", EmitDefaultValue = false)]
        public int AvailablePhysicalMemory { get; set; }

        /// <summary>
        /// Gets or Sets AvailableSwapSpace
        /// </summary>
        [DataMember(Name = "availableSwapSpace", EmitDefaultValue = false)]
        public int AvailableSwapSpace { get; set; }

        /// <summary>
        /// Gets or Sets TotalPhysicalMemory
        /// </summary>
        [DataMember(Name = "totalPhysicalMemory", EmitDefaultValue = false)]
        public int TotalPhysicalMemory { get; set; }

        /// <summary>
        /// Gets or Sets TotalSwapSpace
        /// </summary>
        [DataMember(Name = "totalSwapSpace", EmitDefaultValue = false)]
        public int TotalSwapSpace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SwapSpaceMonitorMemoryUsage2 {\n");
            sb.Append("  VarClass: ").Append(VarClass).Append("\n");
            sb.Append("  AvailablePhysicalMemory: ").Append(AvailablePhysicalMemory).Append("\n");
            sb.Append("  AvailableSwapSpace: ").Append(AvailableSwapSpace).Append("\n");
            sb.Append("  TotalPhysicalMemory: ").Append(TotalPhysicalMemory).Append("\n");
            sb.Append("  TotalSwapSpace: ").Append(TotalSwapSpace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
