// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ComputerSet
    /// </summary>
    public partial class ComputerSet : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ComputerSet" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="busyExecutors">busyExecutors</param>
        /// <param name="computer">computer</param>
        /// <param name="displayName">displayName</param>
        /// <param name="totalExecutors">totalExecutors</param>
        [JsonConstructor]
        public ComputerSet(Option<string?> @class = default, Option<int?> busyExecutors = default, Option<List<HudsonMasterComputer>?> computer = default, Option<string?> displayName = default, Option<int?> totalExecutors = default)
        {
            ClassOption = @class;
            BusyExecutorsOption = busyExecutors;
            ComputerOption = computer;
            DisplayNameOption = displayName;
            TotalExecutorsOption = totalExecutors;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of BusyExecutors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BusyExecutorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets BusyExecutors
        /// </summary>
        [JsonPropertyName("busyExecutors")]
        public int? BusyExecutors { get { return this.BusyExecutorsOption; } set { this.BusyExecutorsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Computer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<HudsonMasterComputer>?> ComputerOption { get; private set; }

        /// <summary>
        /// Gets or Sets Computer
        /// </summary>
        [JsonPropertyName("computer")]
        public List<HudsonMasterComputer>? Computer { get { return this.ComputerOption; } set { this.ComputerOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalExecutors
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalExecutorsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalExecutors
        /// </summary>
        [JsonPropertyName("totalExecutors")]
        public int? TotalExecutors { get { return this.TotalExecutorsOption; } set { this.TotalExecutorsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ComputerSet {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  BusyExecutors: ").Append(BusyExecutors).Append("\n");
            sb.Append("  Computer: ").Append(Computer).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  TotalExecutors: ").Append(TotalExecutors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ComputerSet" />
    /// </summary>
    public class ComputerSetJsonConverter : JsonConverter<ComputerSet>
    {
        /// <summary>
        /// Deserializes json to <see cref="ComputerSet" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ComputerSet Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<int?> busyExecutors = default;
            Option<List<HudsonMasterComputer>?> computer = default;
            Option<string?> displayName = default;
            Option<int?> totalExecutors = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "busyExecutors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                busyExecutors = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "computer":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                computer = new Option<List<HudsonMasterComputer>?>(JsonSerializer.Deserialize<List<HudsonMasterComputer>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "totalExecutors":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalExecutors = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class ComputerSet.");

            if (busyExecutors.IsSet && busyExecutors.Value == null)
                throw new ArgumentNullException(nameof(busyExecutors), "Property is not nullable for class ComputerSet.");

            if (computer.IsSet && computer.Value == null)
                throw new ArgumentNullException(nameof(computer), "Property is not nullable for class ComputerSet.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class ComputerSet.");

            if (totalExecutors.IsSet && totalExecutors.Value == null)
                throw new ArgumentNullException(nameof(totalExecutors), "Property is not nullable for class ComputerSet.");

            return new ComputerSet(varClass, busyExecutors, computer, displayName, totalExecutors);
        }

        /// <summary>
        /// Serializes a <see cref="ComputerSet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="computerSet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ComputerSet computerSet, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, computerSet, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ComputerSet" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="computerSet"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ComputerSet computerSet, JsonSerializerOptions jsonSerializerOptions)
        {
            if (computerSet.ClassOption.IsSet && computerSet.Class == null)
                throw new ArgumentNullException(nameof(computerSet.Class), "Property is required for class ComputerSet.");

            if (computerSet.ComputerOption.IsSet && computerSet.Computer == null)
                throw new ArgumentNullException(nameof(computerSet.Computer), "Property is required for class ComputerSet.");

            if (computerSet.DisplayNameOption.IsSet && computerSet.DisplayName == null)
                throw new ArgumentNullException(nameof(computerSet.DisplayName), "Property is required for class ComputerSet.");

            if (computerSet.ClassOption.IsSet)
                writer.WriteString("_class", computerSet.Class);

            if (computerSet.BusyExecutorsOption.IsSet)
                writer.WriteNumber("busyExecutors", computerSet.BusyExecutorsOption.Value!.Value);

            if (computerSet.ComputerOption.IsSet)
            {
                writer.WritePropertyName("computer");
                JsonSerializer.Serialize(writer, computerSet.Computer, jsonSerializerOptions);
            }
            if (computerSet.DisplayNameOption.IsSet)
                writer.WriteString("displayName", computerSet.DisplayName);

            if (computerSet.TotalExecutorsOption.IsSet)
                writer.WriteNumber("totalExecutors", computerSet.TotalExecutorsOption.Value!.Value);
        }
    }
}
