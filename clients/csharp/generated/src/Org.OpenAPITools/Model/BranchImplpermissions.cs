// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BranchImplpermissions
    /// </summary>
    public partial class BranchImplpermissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BranchImplpermissions" /> class.
        /// </summary>
        /// <param name="create">create</param>
        /// <param name="read">read</param>
        /// <param name="start">start</param>
        /// <param name="stop">stop</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public BranchImplpermissions(Option<bool?> create = default, Option<bool?> read = default, Option<bool?> start = default, Option<bool?> stop = default, Option<string?> @class = default)
        {
            CreateOption = create;
            ReadOption = read;
            StartOption = start;
            StopOption = stop;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Create
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CreateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Create
        /// </summary>
        [JsonPropertyName("create")]
        public bool? Create { get { return this.CreateOption; } set { this.CreateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Read
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReadOption { get; private set; }

        /// <summary>
        /// Gets or Sets Read
        /// </summary>
        [JsonPropertyName("read")]
        public bool? Read { get { return this.ReadOption; } set { this.ReadOption = new(value); } }

        /// <summary>
        /// Used to track the state of Start
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StartOption { get; private set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [JsonPropertyName("start")]
        public bool? Start { get { return this.StartOption; } set { this.StartOption = new(value); } }

        /// <summary>
        /// Used to track the state of Stop
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> StopOption { get; private set; }

        /// <summary>
        /// Gets or Sets Stop
        /// </summary>
        [JsonPropertyName("stop")]
        public bool? Stop { get { return this.StopOption; } set { this.StopOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BranchImplpermissions {\n");
            sb.Append("  Create: ").Append(Create).Append("\n");
            sb.Append("  Read: ").Append(Read).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BranchImplpermissions" />
    /// </summary>
    public class BranchImplpermissionsJsonConverter : JsonConverter<BranchImplpermissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="BranchImplpermissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BranchImplpermissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> create = default;
            Option<bool?> read = default;
            Option<bool?> start = default;
            Option<bool?> stop = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "create":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                create = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "read":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                read = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "start":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                start = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "stop":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                stop = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (create.IsSet && create.Value == null)
                throw new ArgumentNullException(nameof(create), "Property is not nullable for class BranchImplpermissions.");

            if (read.IsSet && read.Value == null)
                throw new ArgumentNullException(nameof(read), "Property is not nullable for class BranchImplpermissions.");

            if (start.IsSet && start.Value == null)
                throw new ArgumentNullException(nameof(start), "Property is not nullable for class BranchImplpermissions.");

            if (stop.IsSet && stop.Value == null)
                throw new ArgumentNullException(nameof(stop), "Property is not nullable for class BranchImplpermissions.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class BranchImplpermissions.");

            return new BranchImplpermissions(create, read, start, stop, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="BranchImplpermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="branchImplpermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BranchImplpermissions branchImplpermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, branchImplpermissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BranchImplpermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="branchImplpermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BranchImplpermissions branchImplpermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (branchImplpermissions.ClassOption.IsSet && branchImplpermissions.Class == null)
                throw new ArgumentNullException(nameof(branchImplpermissions.Class), "Property is required for class BranchImplpermissions.");

            if (branchImplpermissions.CreateOption.IsSet)
                writer.WriteBoolean("create", branchImplpermissions.CreateOption.Value!.Value);

            if (branchImplpermissions.ReadOption.IsSet)
                writer.WriteBoolean("read", branchImplpermissions.ReadOption.Value!.Value);

            if (branchImplpermissions.StartOption.IsSet)
                writer.WriteBoolean("start", branchImplpermissions.StartOption.Value!.Value);

            if (branchImplpermissions.StopOption.IsSet)
                writer.WriteBoolean("stop", branchImplpermissions.StopOption.Value!.Value);

            if (branchImplpermissions.ClassOption.IsSet)
                writer.WriteString("_class", branchImplpermissions.Class);
        }
    }
}
