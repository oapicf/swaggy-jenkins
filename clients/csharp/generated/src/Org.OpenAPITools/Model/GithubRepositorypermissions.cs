// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GithubRepositorypermissions
    /// </summary>
    public partial class GithubRepositorypermissions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GithubRepositorypermissions" /> class.
        /// </summary>
        /// <param name="admin">admin</param>
        /// <param name="push">push</param>
        /// <param name="pull">pull</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public GithubRepositorypermissions(Option<bool?> admin = default, Option<bool?> push = default, Option<bool?> pull = default, Option<string?> @class = default)
        {
            AdminOption = admin;
            PushOption = push;
            PullOption = pull;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Admin
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AdminOption { get; private set; }

        /// <summary>
        /// Gets or Sets Admin
        /// </summary>
        [JsonPropertyName("admin")]
        public bool? Admin { get { return this.AdminOption; } set { this.AdminOption = new(value); } }

        /// <summary>
        /// Used to track the state of Push
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PushOption { get; private set; }

        /// <summary>
        /// Gets or Sets Push
        /// </summary>
        [JsonPropertyName("push")]
        public bool? Push { get { return this.PushOption; } set { this.PushOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pull
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PullOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pull
        /// </summary>
        [JsonPropertyName("pull")]
        public bool? Pull { get { return this.PullOption; } set { this.PullOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GithubRepositorypermissions {\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  Push: ").Append(Push).Append("\n");
            sb.Append("  Pull: ").Append(Pull).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GithubRepositorypermissions" />
    /// </summary>
    public class GithubRepositorypermissionsJsonConverter : JsonConverter<GithubRepositorypermissions>
    {
        /// <summary>
        /// Deserializes json to <see cref="GithubRepositorypermissions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GithubRepositorypermissions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> admin = default;
            Option<bool?> push = default;
            Option<bool?> pull = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "admin":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                admin = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "push":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                push = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "pull":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pull = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (admin.IsSet && admin.Value == null)
                throw new ArgumentNullException(nameof(admin), "Property is not nullable for class GithubRepositorypermissions.");

            if (push.IsSet && push.Value == null)
                throw new ArgumentNullException(nameof(push), "Property is not nullable for class GithubRepositorypermissions.");

            if (pull.IsSet && pull.Value == null)
                throw new ArgumentNullException(nameof(pull), "Property is not nullable for class GithubRepositorypermissions.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class GithubRepositorypermissions.");

            return new GithubRepositorypermissions(admin, push, pull, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="GithubRepositorypermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="githubRepositorypermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GithubRepositorypermissions githubRepositorypermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, githubRepositorypermissions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GithubRepositorypermissions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="githubRepositorypermissions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GithubRepositorypermissions githubRepositorypermissions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (githubRepositorypermissions.ClassOption.IsSet && githubRepositorypermissions.Class == null)
                throw new ArgumentNullException(nameof(githubRepositorypermissions.Class), "Property is required for class GithubRepositorypermissions.");

            if (githubRepositorypermissions.AdminOption.IsSet)
                writer.WriteBoolean("admin", githubRepositorypermissions.AdminOption.Value!.Value);

            if (githubRepositorypermissions.PushOption.IsSet)
                writer.WriteBoolean("push", githubRepositorypermissions.PushOption.Value!.Value);

            if (githubRepositorypermissions.PullOption.IsSet)
                writer.WriteBoolean("pull", githubRepositorypermissions.PullOption.Value!.Value);

            if (githubRepositorypermissions.ClassOption.IsSet)
                writer.WriteString("_class", githubRepositorypermissions.Class);
        }
    }
}
