// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BranchImpl
    /// </summary>
    public partial class BranchImpl : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BranchImpl" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="displayName">displayName</param>
        /// <param name="estimatedDurationInMillis">estimatedDurationInMillis</param>
        /// <param name="fullDisplayName">fullDisplayName</param>
        /// <param name="fullName">fullName</param>
        /// <param name="name">name</param>
        /// <param name="organization">organization</param>
        /// <param name="parameters">parameters</param>
        /// <param name="permissions">permissions</param>
        /// <param name="weatherScore">weatherScore</param>
        /// <param name="pullRequest">pullRequest</param>
        /// <param name="links">links</param>
        /// <param name="latestRun">latestRun</param>
        [JsonConstructor]
        public BranchImpl(Option<string?> @class = default, Option<string?> displayName = default, Option<int?> estimatedDurationInMillis = default, Option<string?> fullDisplayName = default, Option<string?> fullName = default, Option<string?> name = default, Option<string?> organization = default, Option<List<StringParameterDefinition>?> parameters = default, Option<BranchImplpermissions?> permissions = default, Option<int?> weatherScore = default, Option<string?> pullRequest = default, Option<BranchImpllinks?> links = default, Option<PipelineRunImpl?> latestRun = default)
        {
            ClassOption = @class;
            DisplayNameOption = displayName;
            EstimatedDurationInMillisOption = estimatedDurationInMillis;
            FullDisplayNameOption = fullDisplayName;
            FullNameOption = fullName;
            NameOption = name;
            OrganizationOption = organization;
            ParametersOption = parameters;
            PermissionsOption = permissions;
            WeatherScoreOption = weatherScore;
            PullRequestOption = pullRequest;
            LinksOption = links;
            LatestRunOption = latestRun;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of EstimatedDurationInMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EstimatedDurationInMillisOption { get; private set; }

        /// <summary>
        /// Gets or Sets EstimatedDurationInMillis
        /// </summary>
        [JsonPropertyName("estimatedDurationInMillis")]
        public int? EstimatedDurationInMillis { get { return this.EstimatedDurationInMillisOption; } set { this.EstimatedDurationInMillisOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullDisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullDisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullDisplayName
        /// </summary>
        [JsonPropertyName("fullDisplayName")]
        public string? FullDisplayName { get { return this.FullDisplayNameOption; } set { this.FullDisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [JsonPropertyName("fullName")]
        public string? FullName { get { return this.FullNameOption; } set { this.FullNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Organization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [JsonPropertyName("organization")]
        public string? Organization { get { return this.OrganizationOption; } set { this.OrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parameters
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<StringParameterDefinition>?> ParametersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [JsonPropertyName("parameters")]
        public List<StringParameterDefinition>? Parameters { get { return this.ParametersOption; } set { this.ParametersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BranchImplpermissions?> PermissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonPropertyName("permissions")]
        public BranchImplpermissions? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of WeatherScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WeatherScoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets WeatherScore
        /// </summary>
        [JsonPropertyName("weatherScore")]
        public int? WeatherScore { get { return this.WeatherScoreOption; } set { this.WeatherScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of PullRequest
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PullRequestOption { get; private set; }

        /// <summary>
        /// Gets or Sets PullRequest
        /// </summary>
        [JsonPropertyName("pullRequest")]
        public string? PullRequest { get { return this.PullRequestOption; } set { this.PullRequestOption = new(value); } }

        /// <summary>
        /// Used to track the state of Links
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BranchImpllinks?> LinksOption { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [JsonPropertyName("_links")]
        public BranchImpllinks? Links { get { return this.LinksOption; } set { this.LinksOption = new(value); } }

        /// <summary>
        /// Used to track the state of LatestRun
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PipelineRunImpl?> LatestRunOption { get; private set; }

        /// <summary>
        /// Gets or Sets LatestRun
        /// </summary>
        [JsonPropertyName("latestRun")]
        public PipelineRunImpl? LatestRun { get { return this.LatestRunOption; } set { this.LatestRunOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BranchImpl {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EstimatedDurationInMillis: ").Append(EstimatedDurationInMillis).Append("\n");
            sb.Append("  FullDisplayName: ").Append(FullDisplayName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  WeatherScore: ").Append(WeatherScore).Append("\n");
            sb.Append("  PullRequest: ").Append(PullRequest).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  LatestRun: ").Append(LatestRun).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BranchImpl" />
    /// </summary>
    public class BranchImplJsonConverter : JsonConverter<BranchImpl>
    {
        /// <summary>
        /// Deserializes json to <see cref="BranchImpl" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BranchImpl Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<string?> displayName = default;
            Option<int?> estimatedDurationInMillis = default;
            Option<string?> fullDisplayName = default;
            Option<string?> fullName = default;
            Option<string?> name = default;
            Option<string?> organization = default;
            Option<List<StringParameterDefinition>?> parameters = default;
            Option<BranchImplpermissions?> permissions = default;
            Option<int?> weatherScore = default;
            Option<string?> pullRequest = default;
            Option<BranchImpllinks?> links = default;
            Option<PipelineRunImpl?> latestRun = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "estimatedDurationInMillis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                estimatedDurationInMillis = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "fullDisplayName":
                            fullDisplayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "fullName":
                            fullName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organization":
                            organization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parameters":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parameters = new Option<List<StringParameterDefinition>?>(JsonSerializer.Deserialize<List<StringParameterDefinition>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "permissions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissions = new Option<BranchImplpermissions?>(JsonSerializer.Deserialize<BranchImplpermissions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "weatherScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weatherScore = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "pullRequest":
                            pullRequest = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_links":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                links = new Option<BranchImpllinks?>(JsonSerializer.Deserialize<BranchImpllinks>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "latestRun":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                latestRun = new Option<PipelineRunImpl?>(JsonSerializer.Deserialize<PipelineRunImpl>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class BranchImpl.");

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class BranchImpl.");

            if (estimatedDurationInMillis.IsSet && estimatedDurationInMillis.Value == null)
                throw new ArgumentNullException(nameof(estimatedDurationInMillis), "Property is not nullable for class BranchImpl.");

            if (fullDisplayName.IsSet && fullDisplayName.Value == null)
                throw new ArgumentNullException(nameof(fullDisplayName), "Property is not nullable for class BranchImpl.");

            if (fullName.IsSet && fullName.Value == null)
                throw new ArgumentNullException(nameof(fullName), "Property is not nullable for class BranchImpl.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class BranchImpl.");

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization), "Property is not nullable for class BranchImpl.");

            if (parameters.IsSet && parameters.Value == null)
                throw new ArgumentNullException(nameof(parameters), "Property is not nullable for class BranchImpl.");

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions), "Property is not nullable for class BranchImpl.");

            if (weatherScore.IsSet && weatherScore.Value == null)
                throw new ArgumentNullException(nameof(weatherScore), "Property is not nullable for class BranchImpl.");

            if (pullRequest.IsSet && pullRequest.Value == null)
                throw new ArgumentNullException(nameof(pullRequest), "Property is not nullable for class BranchImpl.");

            if (links.IsSet && links.Value == null)
                throw new ArgumentNullException(nameof(links), "Property is not nullable for class BranchImpl.");

            if (latestRun.IsSet && latestRun.Value == null)
                throw new ArgumentNullException(nameof(latestRun), "Property is not nullable for class BranchImpl.");

            return new BranchImpl(varClass, displayName, estimatedDurationInMillis, fullDisplayName, fullName, name, organization, parameters, permissions, weatherScore, pullRequest, links, latestRun);
        }

        /// <summary>
        /// Serializes a <see cref="BranchImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="branchImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BranchImpl branchImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, branchImpl, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BranchImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="branchImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BranchImpl branchImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            if (branchImpl.ClassOption.IsSet && branchImpl.Class == null)
                throw new ArgumentNullException(nameof(branchImpl.Class), "Property is required for class BranchImpl.");

            if (branchImpl.DisplayNameOption.IsSet && branchImpl.DisplayName == null)
                throw new ArgumentNullException(nameof(branchImpl.DisplayName), "Property is required for class BranchImpl.");

            if (branchImpl.FullDisplayNameOption.IsSet && branchImpl.FullDisplayName == null)
                throw new ArgumentNullException(nameof(branchImpl.FullDisplayName), "Property is required for class BranchImpl.");

            if (branchImpl.FullNameOption.IsSet && branchImpl.FullName == null)
                throw new ArgumentNullException(nameof(branchImpl.FullName), "Property is required for class BranchImpl.");

            if (branchImpl.NameOption.IsSet && branchImpl.Name == null)
                throw new ArgumentNullException(nameof(branchImpl.Name), "Property is required for class BranchImpl.");

            if (branchImpl.OrganizationOption.IsSet && branchImpl.Organization == null)
                throw new ArgumentNullException(nameof(branchImpl.Organization), "Property is required for class BranchImpl.");

            if (branchImpl.ParametersOption.IsSet && branchImpl.Parameters == null)
                throw new ArgumentNullException(nameof(branchImpl.Parameters), "Property is required for class BranchImpl.");

            if (branchImpl.PermissionsOption.IsSet && branchImpl.Permissions == null)
                throw new ArgumentNullException(nameof(branchImpl.Permissions), "Property is required for class BranchImpl.");

            if (branchImpl.PullRequestOption.IsSet && branchImpl.PullRequest == null)
                throw new ArgumentNullException(nameof(branchImpl.PullRequest), "Property is required for class BranchImpl.");

            if (branchImpl.LinksOption.IsSet && branchImpl.Links == null)
                throw new ArgumentNullException(nameof(branchImpl.Links), "Property is required for class BranchImpl.");

            if (branchImpl.LatestRunOption.IsSet && branchImpl.LatestRun == null)
                throw new ArgumentNullException(nameof(branchImpl.LatestRun), "Property is required for class BranchImpl.");

            if (branchImpl.ClassOption.IsSet)
                writer.WriteString("_class", branchImpl.Class);

            if (branchImpl.DisplayNameOption.IsSet)
                writer.WriteString("displayName", branchImpl.DisplayName);

            if (branchImpl.EstimatedDurationInMillisOption.IsSet)
                writer.WriteNumber("estimatedDurationInMillis", branchImpl.EstimatedDurationInMillisOption.Value!.Value);

            if (branchImpl.FullDisplayNameOption.IsSet)
                writer.WriteString("fullDisplayName", branchImpl.FullDisplayName);

            if (branchImpl.FullNameOption.IsSet)
                writer.WriteString("fullName", branchImpl.FullName);

            if (branchImpl.NameOption.IsSet)
                writer.WriteString("name", branchImpl.Name);

            if (branchImpl.OrganizationOption.IsSet)
                writer.WriteString("organization", branchImpl.Organization);

            if (branchImpl.ParametersOption.IsSet)
            {
                writer.WritePropertyName("parameters");
                JsonSerializer.Serialize(writer, branchImpl.Parameters, jsonSerializerOptions);
            }
            if (branchImpl.PermissionsOption.IsSet)
            {
                writer.WritePropertyName("permissions");
                JsonSerializer.Serialize(writer, branchImpl.Permissions, jsonSerializerOptions);
            }
            if (branchImpl.WeatherScoreOption.IsSet)
                writer.WriteNumber("weatherScore", branchImpl.WeatherScoreOption.Value!.Value);

            if (branchImpl.PullRequestOption.IsSet)
                writer.WriteString("pullRequest", branchImpl.PullRequest);

            if (branchImpl.LinksOption.IsSet)
            {
                writer.WritePropertyName("_links");
                JsonSerializer.Serialize(writer, branchImpl.Links, jsonSerializerOptions);
            }
            if (branchImpl.LatestRunOption.IsSet)
            {
                writer.WritePropertyName("latestRun");
                JsonSerializer.Serialize(writer, branchImpl.LatestRun, jsonSerializerOptions);
            }
        }
    }
}
