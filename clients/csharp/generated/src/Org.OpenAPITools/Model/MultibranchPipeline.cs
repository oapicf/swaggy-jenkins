// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// MultibranchPipeline
    /// </summary>
    public partial class MultibranchPipeline : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MultibranchPipeline" /> class.
        /// </summary>
        /// <param name="displayName">displayName</param>
        /// <param name="estimatedDurationInMillis">estimatedDurationInMillis</param>
        /// <param name="latestRun">latestRun</param>
        /// <param name="name">name</param>
        /// <param name="organization">organization</param>
        /// <param name="weatherScore">weatherScore</param>
        /// <param name="branchNames">branchNames</param>
        /// <param name="numberOfFailingBranches">numberOfFailingBranches</param>
        /// <param name="numberOfFailingPullRequests">numberOfFailingPullRequests</param>
        /// <param name="numberOfSuccessfulBranches">numberOfSuccessfulBranches</param>
        /// <param name="numberOfSuccessfulPullRequests">numberOfSuccessfulPullRequests</param>
        /// <param name="totalNumberOfBranches">totalNumberOfBranches</param>
        /// <param name="totalNumberOfPullRequests">totalNumberOfPullRequests</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public MultibranchPipeline(Option<string?> displayName = default, Option<int?> estimatedDurationInMillis = default, Option<string?> latestRun = default, Option<string?> name = default, Option<string?> organization = default, Option<int?> weatherScore = default, Option<List<string>?> branchNames = default, Option<int?> numberOfFailingBranches = default, Option<int?> numberOfFailingPullRequests = default, Option<int?> numberOfSuccessfulBranches = default, Option<int?> numberOfSuccessfulPullRequests = default, Option<int?> totalNumberOfBranches = default, Option<int?> totalNumberOfPullRequests = default, Option<string?> @class = default)
        {
            DisplayNameOption = displayName;
            EstimatedDurationInMillisOption = estimatedDurationInMillis;
            LatestRunOption = latestRun;
            NameOption = name;
            OrganizationOption = organization;
            WeatherScoreOption = weatherScore;
            BranchNamesOption = branchNames;
            NumberOfFailingBranchesOption = numberOfFailingBranches;
            NumberOfFailingPullRequestsOption = numberOfFailingPullRequests;
            NumberOfSuccessfulBranchesOption = numberOfSuccessfulBranches;
            NumberOfSuccessfulPullRequestsOption = numberOfSuccessfulPullRequests;
            TotalNumberOfBranchesOption = totalNumberOfBranches;
            TotalNumberOfPullRequestsOption = totalNumberOfPullRequests;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DisplayName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DisplayNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [JsonPropertyName("displayName")]
        public string? DisplayName { get { return this.DisplayNameOption; } set { this.DisplayNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of EstimatedDurationInMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EstimatedDurationInMillisOption { get; private set; }

        /// <summary>
        /// Gets or Sets EstimatedDurationInMillis
        /// </summary>
        [JsonPropertyName("estimatedDurationInMillis")]
        public int? EstimatedDurationInMillis { get { return this.EstimatedDurationInMillisOption; } set { this.EstimatedDurationInMillisOption = new(value); } }

        /// <summary>
        /// Used to track the state of LatestRun
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LatestRunOption { get; private set; }

        /// <summary>
        /// Gets or Sets LatestRun
        /// </summary>
        [JsonPropertyName("latestRun")]
        public string? LatestRun { get { return this.LatestRunOption; } set { this.LatestRunOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Organization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [JsonPropertyName("organization")]
        public string? Organization { get { return this.OrganizationOption; } set { this.OrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of WeatherScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WeatherScoreOption { get; private set; }

        /// <summary>
        /// Gets or Sets WeatherScore
        /// </summary>
        [JsonPropertyName("weatherScore")]
        public int? WeatherScore { get { return this.WeatherScoreOption; } set { this.WeatherScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of BranchNames
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> BranchNamesOption { get; private set; }

        /// <summary>
        /// Gets or Sets BranchNames
        /// </summary>
        [JsonPropertyName("branchNames")]
        public List<string>? BranchNames { get { return this.BranchNamesOption; } set { this.BranchNamesOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfFailingBranches
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOfFailingBranchesOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumberOfFailingBranches
        /// </summary>
        [JsonPropertyName("numberOfFailingBranches")]
        public int? NumberOfFailingBranches { get { return this.NumberOfFailingBranchesOption; } set { this.NumberOfFailingBranchesOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfFailingPullRequests
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOfFailingPullRequestsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumberOfFailingPullRequests
        /// </summary>
        [JsonPropertyName("numberOfFailingPullRequests")]
        public int? NumberOfFailingPullRequests { get { return this.NumberOfFailingPullRequestsOption; } set { this.NumberOfFailingPullRequestsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfSuccessfulBranches
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOfSuccessfulBranchesOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumberOfSuccessfulBranches
        /// </summary>
        [JsonPropertyName("numberOfSuccessfulBranches")]
        public int? NumberOfSuccessfulBranches { get { return this.NumberOfSuccessfulBranchesOption; } set { this.NumberOfSuccessfulBranchesOption = new(value); } }

        /// <summary>
        /// Used to track the state of NumberOfSuccessfulPullRequests
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOfSuccessfulPullRequestsOption { get; private set; }

        /// <summary>
        /// Gets or Sets NumberOfSuccessfulPullRequests
        /// </summary>
        [JsonPropertyName("numberOfSuccessfulPullRequests")]
        public int? NumberOfSuccessfulPullRequests { get { return this.NumberOfSuccessfulPullRequestsOption; } set { this.NumberOfSuccessfulPullRequestsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalNumberOfBranches
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalNumberOfBranchesOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalNumberOfBranches
        /// </summary>
        [JsonPropertyName("totalNumberOfBranches")]
        public int? TotalNumberOfBranches { get { return this.TotalNumberOfBranchesOption; } set { this.TotalNumberOfBranchesOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalNumberOfPullRequests
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalNumberOfPullRequestsOption { get; private set; }

        /// <summary>
        /// Gets or Sets TotalNumberOfPullRequests
        /// </summary>
        [JsonPropertyName("totalNumberOfPullRequests")]
        public int? TotalNumberOfPullRequests { get { return this.TotalNumberOfPullRequestsOption; } set { this.TotalNumberOfPullRequestsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MultibranchPipeline {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EstimatedDurationInMillis: ").Append(EstimatedDurationInMillis).Append("\n");
            sb.Append("  LatestRun: ").Append(LatestRun).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  WeatherScore: ").Append(WeatherScore).Append("\n");
            sb.Append("  BranchNames: ").Append(BranchNames).Append("\n");
            sb.Append("  NumberOfFailingBranches: ").Append(NumberOfFailingBranches).Append("\n");
            sb.Append("  NumberOfFailingPullRequests: ").Append(NumberOfFailingPullRequests).Append("\n");
            sb.Append("  NumberOfSuccessfulBranches: ").Append(NumberOfSuccessfulBranches).Append("\n");
            sb.Append("  NumberOfSuccessfulPullRequests: ").Append(NumberOfSuccessfulPullRequests).Append("\n");
            sb.Append("  TotalNumberOfBranches: ").Append(TotalNumberOfBranches).Append("\n");
            sb.Append("  TotalNumberOfPullRequests: ").Append(TotalNumberOfPullRequests).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="MultibranchPipeline" />
    /// </summary>
    public class MultibranchPipelineJsonConverter : JsonConverter<MultibranchPipeline>
    {
        /// <summary>
        /// Deserializes json to <see cref="MultibranchPipeline" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override MultibranchPipeline Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> displayName = default;
            Option<int?> estimatedDurationInMillis = default;
            Option<string?> latestRun = default;
            Option<string?> name = default;
            Option<string?> organization = default;
            Option<int?> weatherScore = default;
            Option<List<string>?> branchNames = default;
            Option<int?> numberOfFailingBranches = default;
            Option<int?> numberOfFailingPullRequests = default;
            Option<int?> numberOfSuccessfulBranches = default;
            Option<int?> numberOfSuccessfulPullRequests = default;
            Option<int?> totalNumberOfBranches = default;
            Option<int?> totalNumberOfPullRequests = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "displayName":
                            displayName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "estimatedDurationInMillis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                estimatedDurationInMillis = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "latestRun":
                            latestRun = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organization":
                            organization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "weatherScore":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                weatherScore = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "branchNames":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                branchNames = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "numberOfFailingBranches":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberOfFailingBranches = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "numberOfFailingPullRequests":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberOfFailingPullRequests = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "numberOfSuccessfulBranches":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberOfSuccessfulBranches = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "numberOfSuccessfulPullRequests":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                numberOfSuccessfulPullRequests = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "totalNumberOfBranches":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalNumberOfBranches = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "totalNumberOfPullRequests":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                totalNumberOfPullRequests = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName), "Property is not nullable for class MultibranchPipeline.");

            if (estimatedDurationInMillis.IsSet && estimatedDurationInMillis.Value == null)
                throw new ArgumentNullException(nameof(estimatedDurationInMillis), "Property is not nullable for class MultibranchPipeline.");

            if (latestRun.IsSet && latestRun.Value == null)
                throw new ArgumentNullException(nameof(latestRun), "Property is not nullable for class MultibranchPipeline.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class MultibranchPipeline.");

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization), "Property is not nullable for class MultibranchPipeline.");

            if (weatherScore.IsSet && weatherScore.Value == null)
                throw new ArgumentNullException(nameof(weatherScore), "Property is not nullable for class MultibranchPipeline.");

            if (branchNames.IsSet && branchNames.Value == null)
                throw new ArgumentNullException(nameof(branchNames), "Property is not nullable for class MultibranchPipeline.");

            if (numberOfFailingBranches.IsSet && numberOfFailingBranches.Value == null)
                throw new ArgumentNullException(nameof(numberOfFailingBranches), "Property is not nullable for class MultibranchPipeline.");

            if (numberOfFailingPullRequests.IsSet && numberOfFailingPullRequests.Value == null)
                throw new ArgumentNullException(nameof(numberOfFailingPullRequests), "Property is not nullable for class MultibranchPipeline.");

            if (numberOfSuccessfulBranches.IsSet && numberOfSuccessfulBranches.Value == null)
                throw new ArgumentNullException(nameof(numberOfSuccessfulBranches), "Property is not nullable for class MultibranchPipeline.");

            if (numberOfSuccessfulPullRequests.IsSet && numberOfSuccessfulPullRequests.Value == null)
                throw new ArgumentNullException(nameof(numberOfSuccessfulPullRequests), "Property is not nullable for class MultibranchPipeline.");

            if (totalNumberOfBranches.IsSet && totalNumberOfBranches.Value == null)
                throw new ArgumentNullException(nameof(totalNumberOfBranches), "Property is not nullable for class MultibranchPipeline.");

            if (totalNumberOfPullRequests.IsSet && totalNumberOfPullRequests.Value == null)
                throw new ArgumentNullException(nameof(totalNumberOfPullRequests), "Property is not nullable for class MultibranchPipeline.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class MultibranchPipeline.");

            return new MultibranchPipeline(displayName, estimatedDurationInMillis, latestRun, name, organization, weatherScore, branchNames, numberOfFailingBranches, numberOfFailingPullRequests, numberOfSuccessfulBranches, numberOfSuccessfulPullRequests, totalNumberOfBranches, totalNumberOfPullRequests, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="MultibranchPipeline" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="multibranchPipeline"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, MultibranchPipeline multibranchPipeline, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, multibranchPipeline, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="MultibranchPipeline" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="multibranchPipeline"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, MultibranchPipeline multibranchPipeline, JsonSerializerOptions jsonSerializerOptions)
        {
            if (multibranchPipeline.DisplayNameOption.IsSet && multibranchPipeline.DisplayName == null)
                throw new ArgumentNullException(nameof(multibranchPipeline.DisplayName), "Property is required for class MultibranchPipeline.");

            if (multibranchPipeline.LatestRunOption.IsSet && multibranchPipeline.LatestRun == null)
                throw new ArgumentNullException(nameof(multibranchPipeline.LatestRun), "Property is required for class MultibranchPipeline.");

            if (multibranchPipeline.NameOption.IsSet && multibranchPipeline.Name == null)
                throw new ArgumentNullException(nameof(multibranchPipeline.Name), "Property is required for class MultibranchPipeline.");

            if (multibranchPipeline.OrganizationOption.IsSet && multibranchPipeline.Organization == null)
                throw new ArgumentNullException(nameof(multibranchPipeline.Organization), "Property is required for class MultibranchPipeline.");

            if (multibranchPipeline.BranchNamesOption.IsSet && multibranchPipeline.BranchNames == null)
                throw new ArgumentNullException(nameof(multibranchPipeline.BranchNames), "Property is required for class MultibranchPipeline.");

            if (multibranchPipeline.ClassOption.IsSet && multibranchPipeline.Class == null)
                throw new ArgumentNullException(nameof(multibranchPipeline.Class), "Property is required for class MultibranchPipeline.");

            if (multibranchPipeline.DisplayNameOption.IsSet)
                writer.WriteString("displayName", multibranchPipeline.DisplayName);

            if (multibranchPipeline.EstimatedDurationInMillisOption.IsSet)
                writer.WriteNumber("estimatedDurationInMillis", multibranchPipeline.EstimatedDurationInMillisOption.Value!.Value);

            if (multibranchPipeline.LatestRunOption.IsSet)
                writer.WriteString("latestRun", multibranchPipeline.LatestRun);

            if (multibranchPipeline.NameOption.IsSet)
                writer.WriteString("name", multibranchPipeline.Name);

            if (multibranchPipeline.OrganizationOption.IsSet)
                writer.WriteString("organization", multibranchPipeline.Organization);

            if (multibranchPipeline.WeatherScoreOption.IsSet)
                writer.WriteNumber("weatherScore", multibranchPipeline.WeatherScoreOption.Value!.Value);

            if (multibranchPipeline.BranchNamesOption.IsSet)
            {
                writer.WritePropertyName("branchNames");
                JsonSerializer.Serialize(writer, multibranchPipeline.BranchNames, jsonSerializerOptions);
            }
            if (multibranchPipeline.NumberOfFailingBranchesOption.IsSet)
                writer.WriteNumber("numberOfFailingBranches", multibranchPipeline.NumberOfFailingBranchesOption.Value!.Value);

            if (multibranchPipeline.NumberOfFailingPullRequestsOption.IsSet)
                writer.WriteNumber("numberOfFailingPullRequests", multibranchPipeline.NumberOfFailingPullRequestsOption.Value!.Value);

            if (multibranchPipeline.NumberOfSuccessfulBranchesOption.IsSet)
                writer.WriteNumber("numberOfSuccessfulBranches", multibranchPipeline.NumberOfSuccessfulBranchesOption.Value!.Value);

            if (multibranchPipeline.NumberOfSuccessfulPullRequestsOption.IsSet)
                writer.WriteNumber("numberOfSuccessfulPullRequests", multibranchPipeline.NumberOfSuccessfulPullRequestsOption.Value!.Value);

            if (multibranchPipeline.TotalNumberOfBranchesOption.IsSet)
                writer.WriteNumber("totalNumberOfBranches", multibranchPipeline.TotalNumberOfBranchesOption.Value!.Value);

            if (multibranchPipeline.TotalNumberOfPullRequestsOption.IsSet)
                writer.WriteNumber("totalNumberOfPullRequests", multibranchPipeline.TotalNumberOfPullRequestsOption.Value!.Value);

            if (multibranchPipeline.ClassOption.IsSet)
                writer.WriteString("_class", multibranchPipeline.Class);
        }
    }
}
