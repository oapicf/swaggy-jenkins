// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PipelineRunImpllinks
    /// </summary>
    public partial class PipelineRunImpllinks : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineRunImpllinks" /> class.
        /// </summary>
        /// <param name="nodes">nodes</param>
        /// <param name="log">log</param>
        /// <param name="self">self</param>
        /// <param name="actions">actions</param>
        /// <param name="steps">steps</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public PipelineRunImpllinks(Option<Link?> nodes = default, Option<Link?> log = default, Option<Link?> self = default, Option<Link?> actions = default, Option<Link?> steps = default, Option<string?> @class = default)
        {
            NodesOption = nodes;
            LogOption = log;
            SelfOption = self;
            ActionsOption = actions;
            StepsOption = steps;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Nodes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> NodesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Nodes
        /// </summary>
        [JsonPropertyName("nodes")]
        public Link? Nodes { get { return this.NodesOption; } set { this.NodesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Log
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> LogOption { get; private set; }

        /// <summary>
        /// Gets or Sets Log
        /// </summary>
        [JsonPropertyName("log")]
        public Link? Log { get { return this.LogOption; } set { this.LogOption = new(value); } }

        /// <summary>
        /// Used to track the state of Self
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> SelfOption { get; private set; }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [JsonPropertyName("self")]
        public Link? Self { get { return this.SelfOption; } set { this.SelfOption = new(value); } }

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [JsonPropertyName("actions")]
        public Link? Actions { get { return this.ActionsOption; } set { this.ActionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Steps
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Link?> StepsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [JsonPropertyName("steps")]
        public Link? Steps { get { return this.StepsOption; } set { this.StepsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineRunImpllinks {\n");
            sb.Append("  Nodes: ").Append(Nodes).Append("\n");
            sb.Append("  Log: ").Append(Log).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PipelineRunImpllinks" />
    /// </summary>
    public class PipelineRunImpllinksJsonConverter : JsonConverter<PipelineRunImpllinks>
    {
        /// <summary>
        /// Deserializes json to <see cref="PipelineRunImpllinks" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PipelineRunImpllinks Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Link?> nodes = default;
            Option<Link?> log = default;
            Option<Link?> self = default;
            Option<Link?> actions = default;
            Option<Link?> steps = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "nodes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nodes = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "log":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                log = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "self":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                self = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "actions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                actions = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "steps":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                steps = new Option<Link?>(JsonSerializer.Deserialize<Link>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (nodes.IsSet && nodes.Value == null)
                throw new ArgumentNullException(nameof(nodes), "Property is not nullable for class PipelineRunImpllinks.");

            if (log.IsSet && log.Value == null)
                throw new ArgumentNullException(nameof(log), "Property is not nullable for class PipelineRunImpllinks.");

            if (self.IsSet && self.Value == null)
                throw new ArgumentNullException(nameof(self), "Property is not nullable for class PipelineRunImpllinks.");

            if (actions.IsSet && actions.Value == null)
                throw new ArgumentNullException(nameof(actions), "Property is not nullable for class PipelineRunImpllinks.");

            if (steps.IsSet && steps.Value == null)
                throw new ArgumentNullException(nameof(steps), "Property is not nullable for class PipelineRunImpllinks.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class PipelineRunImpllinks.");

            return new PipelineRunImpllinks(nodes, log, self, actions, steps, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="PipelineRunImpllinks" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineRunImpllinks"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PipelineRunImpllinks pipelineRunImpllinks, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pipelineRunImpllinks, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PipelineRunImpllinks" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineRunImpllinks"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PipelineRunImpllinks pipelineRunImpllinks, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pipelineRunImpllinks.NodesOption.IsSet && pipelineRunImpllinks.Nodes == null)
                throw new ArgumentNullException(nameof(pipelineRunImpllinks.Nodes), "Property is required for class PipelineRunImpllinks.");

            if (pipelineRunImpllinks.LogOption.IsSet && pipelineRunImpllinks.Log == null)
                throw new ArgumentNullException(nameof(pipelineRunImpllinks.Log), "Property is required for class PipelineRunImpllinks.");

            if (pipelineRunImpllinks.SelfOption.IsSet && pipelineRunImpllinks.Self == null)
                throw new ArgumentNullException(nameof(pipelineRunImpllinks.Self), "Property is required for class PipelineRunImpllinks.");

            if (pipelineRunImpllinks.ActionsOption.IsSet && pipelineRunImpllinks.Actions == null)
                throw new ArgumentNullException(nameof(pipelineRunImpllinks.Actions), "Property is required for class PipelineRunImpllinks.");

            if (pipelineRunImpllinks.StepsOption.IsSet && pipelineRunImpllinks.Steps == null)
                throw new ArgumentNullException(nameof(pipelineRunImpllinks.Steps), "Property is required for class PipelineRunImpllinks.");

            if (pipelineRunImpllinks.ClassOption.IsSet && pipelineRunImpllinks.Class == null)
                throw new ArgumentNullException(nameof(pipelineRunImpllinks.Class), "Property is required for class PipelineRunImpllinks.");

            if (pipelineRunImpllinks.NodesOption.IsSet)
            {
                writer.WritePropertyName("nodes");
                JsonSerializer.Serialize(writer, pipelineRunImpllinks.Nodes, jsonSerializerOptions);
            }
            if (pipelineRunImpllinks.LogOption.IsSet)
            {
                writer.WritePropertyName("log");
                JsonSerializer.Serialize(writer, pipelineRunImpllinks.Log, jsonSerializerOptions);
            }
            if (pipelineRunImpllinks.SelfOption.IsSet)
            {
                writer.WritePropertyName("self");
                JsonSerializer.Serialize(writer, pipelineRunImpllinks.Self, jsonSerializerOptions);
            }
            if (pipelineRunImpllinks.ActionsOption.IsSet)
            {
                writer.WritePropertyName("actions");
                JsonSerializer.Serialize(writer, pipelineRunImpllinks.Actions, jsonSerializerOptions);
            }
            if (pipelineRunImpllinks.StepsOption.IsSet)
            {
                writer.WritePropertyName("steps");
                JsonSerializer.Serialize(writer, pipelineRunImpllinks.Steps, jsonSerializerOptions);
            }
            if (pipelineRunImpllinks.ClassOption.IsSet)
                writer.WriteString("_class", pipelineRunImpllinks.Class);
        }
    }
}
