// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// HudsonMasterComputerexecutors
    /// </summary>
    public partial class HudsonMasterComputerexecutors : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonMasterComputerexecutors" /> class.
        /// </summary>
        /// <param name="currentExecutable">currentExecutable</param>
        /// <param name="idle">idle</param>
        /// <param name="likelyStuck">likelyStuck</param>
        /// <param name="number">number</param>
        /// <param name="progress">progress</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public HudsonMasterComputerexecutors(Option<FreeStyleBuild?> currentExecutable = default, Option<bool?> idle = default, Option<bool?> likelyStuck = default, Option<int?> number = default, Option<int?> progress = default, Option<string?> @class = default)
        {
            CurrentExecutableOption = currentExecutable;
            IdleOption = idle;
            LikelyStuckOption = likelyStuck;
            NumberOption = number;
            ProgressOption = progress;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CurrentExecutable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FreeStyleBuild?> CurrentExecutableOption { get; private set; }

        /// <summary>
        /// Gets or Sets CurrentExecutable
        /// </summary>
        [JsonPropertyName("currentExecutable")]
        public FreeStyleBuild? CurrentExecutable { get { return this.CurrentExecutableOption; } set { this.CurrentExecutableOption = new(value); } }

        /// <summary>
        /// Used to track the state of Idle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IdleOption { get; private set; }

        /// <summary>
        /// Gets or Sets Idle
        /// </summary>
        [JsonPropertyName("idle")]
        public bool? Idle { get { return this.IdleOption; } set { this.IdleOption = new(value); } }

        /// <summary>
        /// Used to track the state of LikelyStuck
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> LikelyStuckOption { get; private set; }

        /// <summary>
        /// Gets or Sets LikelyStuck
        /// </summary>
        [JsonPropertyName("likelyStuck")]
        public bool? LikelyStuck { get { return this.LikelyStuckOption; } set { this.LikelyStuckOption = new(value); } }

        /// <summary>
        /// Used to track the state of Number
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [JsonPropertyName("number")]
        public int? Number { get { return this.NumberOption; } set { this.NumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of Progress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ProgressOption { get; private set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [JsonPropertyName("progress")]
        public int? Progress { get { return this.ProgressOption; } set { this.ProgressOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HudsonMasterComputerexecutors {\n");
            sb.Append("  CurrentExecutable: ").Append(CurrentExecutable).Append("\n");
            sb.Append("  Idle: ").Append(Idle).Append("\n");
            sb.Append("  LikelyStuck: ").Append(LikelyStuck).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="HudsonMasterComputerexecutors" />
    /// </summary>
    public class HudsonMasterComputerexecutorsJsonConverter : JsonConverter<HudsonMasterComputerexecutors>
    {
        /// <summary>
        /// Deserializes json to <see cref="HudsonMasterComputerexecutors" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override HudsonMasterComputerexecutors Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<FreeStyleBuild?> currentExecutable = default;
            Option<bool?> idle = default;
            Option<bool?> likelyStuck = default;
            Option<int?> number = default;
            Option<int?> progress = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "currentExecutable":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                currentExecutable = new Option<FreeStyleBuild?>(JsonSerializer.Deserialize<FreeStyleBuild>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "idle":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                idle = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "likelyStuck":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                likelyStuck = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "number":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                number = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "progress":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                progress = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (currentExecutable.IsSet && currentExecutable.Value == null)
                throw new ArgumentNullException(nameof(currentExecutable), "Property is not nullable for class HudsonMasterComputerexecutors.");

            if (idle.IsSet && idle.Value == null)
                throw new ArgumentNullException(nameof(idle), "Property is not nullable for class HudsonMasterComputerexecutors.");

            if (likelyStuck.IsSet && likelyStuck.Value == null)
                throw new ArgumentNullException(nameof(likelyStuck), "Property is not nullable for class HudsonMasterComputerexecutors.");

            if (number.IsSet && number.Value == null)
                throw new ArgumentNullException(nameof(number), "Property is not nullable for class HudsonMasterComputerexecutors.");

            if (progress.IsSet && progress.Value == null)
                throw new ArgumentNullException(nameof(progress), "Property is not nullable for class HudsonMasterComputerexecutors.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class HudsonMasterComputerexecutors.");

            return new HudsonMasterComputerexecutors(currentExecutable, idle, likelyStuck, number, progress, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="HudsonMasterComputerexecutors" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hudsonMasterComputerexecutors"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, HudsonMasterComputerexecutors hudsonMasterComputerexecutors, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, hudsonMasterComputerexecutors, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="HudsonMasterComputerexecutors" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="hudsonMasterComputerexecutors"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, HudsonMasterComputerexecutors hudsonMasterComputerexecutors, JsonSerializerOptions jsonSerializerOptions)
        {
            if (hudsonMasterComputerexecutors.CurrentExecutableOption.IsSet && hudsonMasterComputerexecutors.CurrentExecutable == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputerexecutors.CurrentExecutable), "Property is required for class HudsonMasterComputerexecutors.");

            if (hudsonMasterComputerexecutors.ClassOption.IsSet && hudsonMasterComputerexecutors.Class == null)
                throw new ArgumentNullException(nameof(hudsonMasterComputerexecutors.Class), "Property is required for class HudsonMasterComputerexecutors.");

            if (hudsonMasterComputerexecutors.CurrentExecutableOption.IsSet)
            {
                writer.WritePropertyName("currentExecutable");
                JsonSerializer.Serialize(writer, hudsonMasterComputerexecutors.CurrentExecutable, jsonSerializerOptions);
            }
            if (hudsonMasterComputerexecutors.IdleOption.IsSet)
                writer.WriteBoolean("idle", hudsonMasterComputerexecutors.IdleOption.Value!.Value);

            if (hudsonMasterComputerexecutors.LikelyStuckOption.IsSet)
                writer.WriteBoolean("likelyStuck", hudsonMasterComputerexecutors.LikelyStuckOption.Value!.Value);

            if (hudsonMasterComputerexecutors.NumberOption.IsSet)
                writer.WriteNumber("number", hudsonMasterComputerexecutors.NumberOption.Value!.Value);

            if (hudsonMasterComputerexecutors.ProgressOption.IsSet)
                writer.WriteNumber("progress", hudsonMasterComputerexecutors.ProgressOption.Value!.Value);

            if (hudsonMasterComputerexecutors.ClassOption.IsSet)
                writer.WriteString("_class", hudsonMasterComputerexecutors.Class);
        }
    }
}
