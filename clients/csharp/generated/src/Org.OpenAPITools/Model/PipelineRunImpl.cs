// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PipelineRunImpl
    /// </summary>
    public partial class PipelineRunImpl : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PipelineRunImpl" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="links">links</param>
        /// <param name="durationInMillis">durationInMillis</param>
        /// <param name="enQueueTime">enQueueTime</param>
        /// <param name="endTime">endTime</param>
        /// <param name="estimatedDurationInMillis">estimatedDurationInMillis</param>
        /// <param name="id">id</param>
        /// <param name="organization">organization</param>
        /// <param name="pipeline">pipeline</param>
        /// <param name="result">result</param>
        /// <param name="runSummary">runSummary</param>
        /// <param name="startTime">startTime</param>
        /// <param name="state">state</param>
        /// <param name="type">type</param>
        /// <param name="commitId">commitId</param>
        [JsonConstructor]
        public PipelineRunImpl(Option<string?> @class = default, Option<PipelineRunImpllinks?> links = default, Option<int?> durationInMillis = default, Option<string?> enQueueTime = default, Option<string?> endTime = default, Option<int?> estimatedDurationInMillis = default, Option<string?> id = default, Option<string?> organization = default, Option<string?> pipeline = default, Option<string?> result = default, Option<string?> runSummary = default, Option<string?> startTime = default, Option<string?> state = default, Option<string?> type = default, Option<string?> commitId = default)
        {
            ClassOption = @class;
            LinksOption = links;
            DurationInMillisOption = durationInMillis;
            EnQueueTimeOption = enQueueTime;
            EndTimeOption = endTime;
            EstimatedDurationInMillisOption = estimatedDurationInMillis;
            IdOption = id;
            OrganizationOption = organization;
            PipelineOption = pipeline;
            ResultOption = result;
            RunSummaryOption = runSummary;
            StartTimeOption = startTime;
            StateOption = state;
            TypeOption = type;
            CommitIdOption = commitId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Links
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PipelineRunImpllinks?> LinksOption { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [JsonPropertyName("_links")]
        public PipelineRunImpllinks? Links { get { return this.LinksOption; } set { this.LinksOption = new(value); } }

        /// <summary>
        /// Used to track the state of DurationInMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> DurationInMillisOption { get; private set; }

        /// <summary>
        /// Gets or Sets DurationInMillis
        /// </summary>
        [JsonPropertyName("durationInMillis")]
        public int? DurationInMillis { get { return this.DurationInMillisOption; } set { this.DurationInMillisOption = new(value); } }

        /// <summary>
        /// Used to track the state of EnQueueTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EnQueueTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EnQueueTime
        /// </summary>
        [JsonPropertyName("enQueueTime")]
        public string? EnQueueTime { get { return this.EnQueueTimeOption; } set { this.EnQueueTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of EndTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EndTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public string? EndTime { get { return this.EndTimeOption; } set { this.EndTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of EstimatedDurationInMillis
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> EstimatedDurationInMillisOption { get; private set; }

        /// <summary>
        /// Gets or Sets EstimatedDurationInMillis
        /// </summary>
        [JsonPropertyName("estimatedDurationInMillis")]
        public int? EstimatedDurationInMillis { get { return this.EstimatedDurationInMillisOption; } set { this.EstimatedDurationInMillisOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Organization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Organization
        /// </summary>
        [JsonPropertyName("organization")]
        public string? Organization { get { return this.OrganizationOption; } set { this.OrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pipeline
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PipelineOption { get; private set; }

        /// <summary>
        /// Gets or Sets Pipeline
        /// </summary>
        [JsonPropertyName("pipeline")]
        public string? Pipeline { get { return this.PipelineOption; } set { this.PipelineOption = new(value); } }

        /// <summary>
        /// Used to track the state of Result
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResultOption { get; private set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [JsonPropertyName("result")]
        public string? Result { get { return this.ResultOption; } set { this.ResultOption = new(value); } }

        /// <summary>
        /// Used to track the state of RunSummary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RunSummaryOption { get; private set; }

        /// <summary>
        /// Gets or Sets RunSummary
        /// </summary>
        [JsonPropertyName("runSummary")]
        public string? RunSummary { get { return this.RunSummaryOption; } set { this.RunSummaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of StartTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StartTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string? StartTime { get { return this.StartTimeOption; } set { this.StartTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TypeOption { get; private set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public string? Type { get { return this.TypeOption; } set { this.TypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of CommitId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CommitIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets CommitId
        /// </summary>
        [JsonPropertyName("commitId")]
        public string? CommitId { get { return this.CommitIdOption; } set { this.CommitIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PipelineRunImpl {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  DurationInMillis: ").Append(DurationInMillis).Append("\n");
            sb.Append("  EnQueueTime: ").Append(EnQueueTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  EstimatedDurationInMillis: ").Append(EstimatedDurationInMillis).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Pipeline: ").Append(Pipeline).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  RunSummary: ").Append(RunSummary).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  CommitId: ").Append(CommitId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PipelineRunImpl" />
    /// </summary>
    public class PipelineRunImplJsonConverter : JsonConverter<PipelineRunImpl>
    {
        /// <summary>
        /// Deserializes json to <see cref="PipelineRunImpl" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PipelineRunImpl Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<PipelineRunImpllinks?> links = default;
            Option<int?> durationInMillis = default;
            Option<string?> enQueueTime = default;
            Option<string?> endTime = default;
            Option<int?> estimatedDurationInMillis = default;
            Option<string?> id = default;
            Option<string?> organization = default;
            Option<string?> pipeline = default;
            Option<string?> result = default;
            Option<string?> runSummary = default;
            Option<string?> startTime = default;
            Option<string?> state = default;
            Option<string?> type = default;
            Option<string?> commitId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_links":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                links = new Option<PipelineRunImpllinks?>(JsonSerializer.Deserialize<PipelineRunImpllinks>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "durationInMillis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                durationInMillis = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "enQueueTime":
                            enQueueTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "endTime":
                            endTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "estimatedDurationInMillis":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                estimatedDurationInMillis = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "organization":
                            organization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "pipeline":
                            pipeline = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "result":
                            result = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "runSummary":
                            runSummary = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "startTime":
                            startTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "type":
                            type = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "commitId":
                            commitId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class PipelineRunImpl.");

            if (links.IsSet && links.Value == null)
                throw new ArgumentNullException(nameof(links), "Property is not nullable for class PipelineRunImpl.");

            if (durationInMillis.IsSet && durationInMillis.Value == null)
                throw new ArgumentNullException(nameof(durationInMillis), "Property is not nullable for class PipelineRunImpl.");

            if (enQueueTime.IsSet && enQueueTime.Value == null)
                throw new ArgumentNullException(nameof(enQueueTime), "Property is not nullable for class PipelineRunImpl.");

            if (endTime.IsSet && endTime.Value == null)
                throw new ArgumentNullException(nameof(endTime), "Property is not nullable for class PipelineRunImpl.");

            if (estimatedDurationInMillis.IsSet && estimatedDurationInMillis.Value == null)
                throw new ArgumentNullException(nameof(estimatedDurationInMillis), "Property is not nullable for class PipelineRunImpl.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class PipelineRunImpl.");

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization), "Property is not nullable for class PipelineRunImpl.");

            if (pipeline.IsSet && pipeline.Value == null)
                throw new ArgumentNullException(nameof(pipeline), "Property is not nullable for class PipelineRunImpl.");

            if (result.IsSet && result.Value == null)
                throw new ArgumentNullException(nameof(result), "Property is not nullable for class PipelineRunImpl.");

            if (runSummary.IsSet && runSummary.Value == null)
                throw new ArgumentNullException(nameof(runSummary), "Property is not nullable for class PipelineRunImpl.");

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class PipelineRunImpl.");

            if (state.IsSet && state.Value == null)
                throw new ArgumentNullException(nameof(state), "Property is not nullable for class PipelineRunImpl.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class PipelineRunImpl.");

            if (commitId.IsSet && commitId.Value == null)
                throw new ArgumentNullException(nameof(commitId), "Property is not nullable for class PipelineRunImpl.");

            return new PipelineRunImpl(varClass, links, durationInMillis, enQueueTime, endTime, estimatedDurationInMillis, id, organization, pipeline, result, runSummary, startTime, state, type, commitId);
        }

        /// <summary>
        /// Serializes a <see cref="PipelineRunImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineRunImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PipelineRunImpl pipelineRunImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, pipelineRunImpl, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PipelineRunImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="pipelineRunImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PipelineRunImpl pipelineRunImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            if (pipelineRunImpl.ClassOption.IsSet && pipelineRunImpl.Class == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.Class), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.LinksOption.IsSet && pipelineRunImpl.Links == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.Links), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.EnQueueTimeOption.IsSet && pipelineRunImpl.EnQueueTime == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.EnQueueTime), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.EndTimeOption.IsSet && pipelineRunImpl.EndTime == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.EndTime), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.IdOption.IsSet && pipelineRunImpl.Id == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.Id), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.OrganizationOption.IsSet && pipelineRunImpl.Organization == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.Organization), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.PipelineOption.IsSet && pipelineRunImpl.Pipeline == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.Pipeline), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.ResultOption.IsSet && pipelineRunImpl.Result == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.Result), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.RunSummaryOption.IsSet && pipelineRunImpl.RunSummary == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.RunSummary), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.StartTimeOption.IsSet && pipelineRunImpl.StartTime == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.StartTime), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.StateOption.IsSet && pipelineRunImpl.State == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.State), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.TypeOption.IsSet && pipelineRunImpl.Type == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.Type), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.CommitIdOption.IsSet && pipelineRunImpl.CommitId == null)
                throw new ArgumentNullException(nameof(pipelineRunImpl.CommitId), "Property is required for class PipelineRunImpl.");

            if (pipelineRunImpl.ClassOption.IsSet)
                writer.WriteString("_class", pipelineRunImpl.Class);

            if (pipelineRunImpl.LinksOption.IsSet)
            {
                writer.WritePropertyName("_links");
                JsonSerializer.Serialize(writer, pipelineRunImpl.Links, jsonSerializerOptions);
            }
            if (pipelineRunImpl.DurationInMillisOption.IsSet)
                writer.WriteNumber("durationInMillis", pipelineRunImpl.DurationInMillisOption.Value!.Value);

            if (pipelineRunImpl.EnQueueTimeOption.IsSet)
                writer.WriteString("enQueueTime", pipelineRunImpl.EnQueueTime);

            if (pipelineRunImpl.EndTimeOption.IsSet)
                writer.WriteString("endTime", pipelineRunImpl.EndTime);

            if (pipelineRunImpl.EstimatedDurationInMillisOption.IsSet)
                writer.WriteNumber("estimatedDurationInMillis", pipelineRunImpl.EstimatedDurationInMillisOption.Value!.Value);

            if (pipelineRunImpl.IdOption.IsSet)
                writer.WriteString("id", pipelineRunImpl.Id);

            if (pipelineRunImpl.OrganizationOption.IsSet)
                writer.WriteString("organization", pipelineRunImpl.Organization);

            if (pipelineRunImpl.PipelineOption.IsSet)
                writer.WriteString("pipeline", pipelineRunImpl.Pipeline);

            if (pipelineRunImpl.ResultOption.IsSet)
                writer.WriteString("result", pipelineRunImpl.Result);

            if (pipelineRunImpl.RunSummaryOption.IsSet)
                writer.WriteString("runSummary", pipelineRunImpl.RunSummary);

            if (pipelineRunImpl.StartTimeOption.IsSet)
                writer.WriteString("startTime", pipelineRunImpl.StartTime);

            if (pipelineRunImpl.StateOption.IsSet)
                writer.WriteString("state", pipelineRunImpl.State);

            if (pipelineRunImpl.TypeOption.IsSet)
                writer.WriteString("type", pipelineRunImpl.Type);

            if (pipelineRunImpl.CommitIdOption.IsSet)
                writer.WriteString("commitId", pipelineRunImpl.CommitId);
        }
    }
}
