// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GithubRepositories
    /// </summary>
    public partial class GithubRepositories : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GithubRepositories" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="links">links</param>
        /// <param name="items">items</param>
        /// <param name="lastPage">lastPage</param>
        /// <param name="nextPage">nextPage</param>
        /// <param name="pageSize">pageSize</param>
        [JsonConstructor]
        public GithubRepositories(Option<string?> @class = default, Option<GithubRepositorieslinks?> links = default, Option<List<GithubRepository>?> items = default, Option<int?> lastPage = default, Option<int?> nextPage = default, Option<int?> pageSize = default)
        {
            ClassOption = @class;
            LinksOption = links;
            ItemsOption = items;
            LastPageOption = lastPage;
            NextPageOption = nextPage;
            PageSizeOption = pageSize;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Links
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GithubRepositorieslinks?> LinksOption { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [JsonPropertyName("_links")]
        public GithubRepositorieslinks? Links { get { return this.LinksOption; } set { this.LinksOption = new(value); } }

        /// <summary>
        /// Used to track the state of Items
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<GithubRepository>?> ItemsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [JsonPropertyName("items")]
        public List<GithubRepository>? Items { get { return this.ItemsOption; } set { this.ItemsOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LastPageOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastPage
        /// </summary>
        [JsonPropertyName("lastPage")]
        public int? LastPage { get { return this.LastPageOption; } set { this.LastPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of NextPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> NextPageOption { get; private set; }

        /// <summary>
        /// Gets or Sets NextPage
        /// </summary>
        [JsonPropertyName("nextPage")]
        public int? NextPage { get { return this.NextPageOption; } set { this.NextPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PageSizeOption { get; private set; }

        /// <summary>
        /// Gets or Sets PageSize
        /// </summary>
        [JsonPropertyName("pageSize")]
        public int? PageSize { get { return this.PageSizeOption; } set { this.PageSizeOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GithubRepositories {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  LastPage: ").Append(LastPage).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  PageSize: ").Append(PageSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GithubRepositories" />
    /// </summary>
    public class GithubRepositoriesJsonConverter : JsonConverter<GithubRepositories>
    {
        /// <summary>
        /// Deserializes json to <see cref="GithubRepositories" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GithubRepositories Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<GithubRepositorieslinks?> links = default;
            Option<List<GithubRepository>?> items = default;
            Option<int?> lastPage = default;
            Option<int?> nextPage = default;
            Option<int?> pageSize = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_links":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                links = new Option<GithubRepositorieslinks?>(JsonSerializer.Deserialize<GithubRepositorieslinks>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "items":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                items = new Option<List<GithubRepository>?>(JsonSerializer.Deserialize<List<GithubRepository>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "lastPage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                lastPage = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "nextPage":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                nextPage = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "pageSize":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                pageSize = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class GithubRepositories.");

            if (links.IsSet && links.Value == null)
                throw new ArgumentNullException(nameof(links), "Property is not nullable for class GithubRepositories.");

            if (items.IsSet && items.Value == null)
                throw new ArgumentNullException(nameof(items), "Property is not nullable for class GithubRepositories.");

            if (lastPage.IsSet && lastPage.Value == null)
                throw new ArgumentNullException(nameof(lastPage), "Property is not nullable for class GithubRepositories.");

            if (nextPage.IsSet && nextPage.Value == null)
                throw new ArgumentNullException(nameof(nextPage), "Property is not nullable for class GithubRepositories.");

            if (pageSize.IsSet && pageSize.Value == null)
                throw new ArgumentNullException(nameof(pageSize), "Property is not nullable for class GithubRepositories.");

            return new GithubRepositories(varClass, links, items, lastPage, nextPage, pageSize);
        }

        /// <summary>
        /// Serializes a <see cref="GithubRepositories" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="githubRepositories"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GithubRepositories githubRepositories, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, githubRepositories, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GithubRepositories" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="githubRepositories"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GithubRepositories githubRepositories, JsonSerializerOptions jsonSerializerOptions)
        {
            if (githubRepositories.ClassOption.IsSet && githubRepositories.Class == null)
                throw new ArgumentNullException(nameof(githubRepositories.Class), "Property is required for class GithubRepositories.");

            if (githubRepositories.LinksOption.IsSet && githubRepositories.Links == null)
                throw new ArgumentNullException(nameof(githubRepositories.Links), "Property is required for class GithubRepositories.");

            if (githubRepositories.ItemsOption.IsSet && githubRepositories.Items == null)
                throw new ArgumentNullException(nameof(githubRepositories.Items), "Property is required for class GithubRepositories.");

            if (githubRepositories.ClassOption.IsSet)
                writer.WriteString("_class", githubRepositories.Class);

            if (githubRepositories.LinksOption.IsSet)
            {
                writer.WritePropertyName("_links");
                JsonSerializer.Serialize(writer, githubRepositories.Links, jsonSerializerOptions);
            }
            if (githubRepositories.ItemsOption.IsSet)
            {
                writer.WritePropertyName("items");
                JsonSerializer.Serialize(writer, githubRepositories.Items, jsonSerializerOptions);
            }
            if (githubRepositories.LastPageOption.IsSet)
                writer.WriteNumber("lastPage", githubRepositories.LastPageOption.Value!.Value);

            if (githubRepositories.NextPageOption.IsSet)
                writer.WriteNumber("nextPage", githubRepositories.NextPageOption.Value!.Value);

            if (githubRepositories.PageSizeOption.IsSet)
                writer.WriteNumber("pageSize", githubRepositories.PageSizeOption.Value!.Value);
        }
    }
}
