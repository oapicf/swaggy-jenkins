// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GithubRepository
    /// </summary>
    public partial class GithubRepository : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GithubRepository" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="links">links</param>
        /// <param name="defaultBranch">defaultBranch</param>
        /// <param name="description">description</param>
        /// <param name="name">name</param>
        /// <param name="permissions">permissions</param>
        /// <param name="private">private</param>
        /// <param name="fullName">fullName</param>
        [JsonConstructor]
        public GithubRepository(Option<string?> @class = default, Option<GithubRepositorylinks?> links = default, Option<string?> defaultBranch = default, Option<string?> description = default, Option<string?> name = default, Option<GithubRepositorypermissions?> permissions = default, Option<bool?> @private = default, Option<string?> fullName = default)
        {
            ClassOption = @class;
            LinksOption = links;
            DefaultBranchOption = defaultBranch;
            DescriptionOption = description;
            NameOption = name;
            PermissionsOption = permissions;
            PrivateOption = @private;
            FullNameOption = fullName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Links
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GithubRepositorylinks?> LinksOption { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [JsonPropertyName("_links")]
        public GithubRepositorylinks? Links { get { return this.LinksOption; } set { this.LinksOption = new(value); } }

        /// <summary>
        /// Used to track the state of DefaultBranch
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DefaultBranchOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultBranch
        /// </summary>
        [JsonPropertyName("defaultBranch")]
        public string? DefaultBranch { get { return this.DefaultBranchOption; } set { this.DefaultBranchOption = new(value); } }

        /// <summary>
        /// Used to track the state of Description
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DescriptionOption { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string? Description { get { return this.DescriptionOption; } set { this.DescriptionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Permissions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<GithubRepositorypermissions?> PermissionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [JsonPropertyName("permissions")]
        public GithubRepositorypermissions? Permissions { get { return this.PermissionsOption; } set { this.PermissionsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Private
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> PrivateOption { get; private set; }

        /// <summary>
        /// Gets or Sets Private
        /// </summary>
        [JsonPropertyName("private")]
        public bool? Private { get { return this.PrivateOption; } set { this.PrivateOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FullNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [JsonPropertyName("fullName")]
        public string? FullName { get { return this.FullNameOption; } set { this.FullNameOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GithubRepository {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  DefaultBranch: ").Append(DefaultBranch).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  Private: ").Append(Private).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GithubRepository" />
    /// </summary>
    public class GithubRepositoryJsonConverter : JsonConverter<GithubRepository>
    {
        /// <summary>
        /// Deserializes json to <see cref="GithubRepository" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GithubRepository Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<GithubRepositorylinks?> links = default;
            Option<string?> defaultBranch = default;
            Option<string?> description = default;
            Option<string?> name = default;
            Option<GithubRepositorypermissions?> permissions = default;
            Option<bool?> varPrivate = default;
            Option<string?> fullName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_links":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                links = new Option<GithubRepositorylinks?>(JsonSerializer.Deserialize<GithubRepositorylinks>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "defaultBranch":
                            defaultBranch = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "permissions":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                permissions = new Option<GithubRepositorypermissions?>(JsonSerializer.Deserialize<GithubRepositorypermissions>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "private":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                varPrivate = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "fullName":
                            fullName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class GithubRepository.");

            if (links.IsSet && links.Value == null)
                throw new ArgumentNullException(nameof(links), "Property is not nullable for class GithubRepository.");

            if (defaultBranch.IsSet && defaultBranch.Value == null)
                throw new ArgumentNullException(nameof(defaultBranch), "Property is not nullable for class GithubRepository.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class GithubRepository.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class GithubRepository.");

            if (permissions.IsSet && permissions.Value == null)
                throw new ArgumentNullException(nameof(permissions), "Property is not nullable for class GithubRepository.");

            if (varPrivate.IsSet && varPrivate.Value == null)
                throw new ArgumentNullException(nameof(varPrivate), "Property is not nullable for class GithubRepository.");

            if (fullName.IsSet && fullName.Value == null)
                throw new ArgumentNullException(nameof(fullName), "Property is not nullable for class GithubRepository.");

            return new GithubRepository(varClass, links, defaultBranch, description, name, permissions, varPrivate, fullName);
        }

        /// <summary>
        /// Serializes a <see cref="GithubRepository" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="githubRepository"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GithubRepository githubRepository, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, githubRepository, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GithubRepository" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="githubRepository"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, GithubRepository githubRepository, JsonSerializerOptions jsonSerializerOptions)
        {
            if (githubRepository.ClassOption.IsSet && githubRepository.Class == null)
                throw new ArgumentNullException(nameof(githubRepository.Class), "Property is required for class GithubRepository.");

            if (githubRepository.LinksOption.IsSet && githubRepository.Links == null)
                throw new ArgumentNullException(nameof(githubRepository.Links), "Property is required for class GithubRepository.");

            if (githubRepository.DefaultBranchOption.IsSet && githubRepository.DefaultBranch == null)
                throw new ArgumentNullException(nameof(githubRepository.DefaultBranch), "Property is required for class GithubRepository.");

            if (githubRepository.DescriptionOption.IsSet && githubRepository.Description == null)
                throw new ArgumentNullException(nameof(githubRepository.Description), "Property is required for class GithubRepository.");

            if (githubRepository.NameOption.IsSet && githubRepository.Name == null)
                throw new ArgumentNullException(nameof(githubRepository.Name), "Property is required for class GithubRepository.");

            if (githubRepository.PermissionsOption.IsSet && githubRepository.Permissions == null)
                throw new ArgumentNullException(nameof(githubRepository.Permissions), "Property is required for class GithubRepository.");

            if (githubRepository.FullNameOption.IsSet && githubRepository.FullName == null)
                throw new ArgumentNullException(nameof(githubRepository.FullName), "Property is required for class GithubRepository.");

            if (githubRepository.ClassOption.IsSet)
                writer.WriteString("_class", githubRepository.Class);

            if (githubRepository.LinksOption.IsSet)
            {
                writer.WritePropertyName("_links");
                JsonSerializer.Serialize(writer, githubRepository.Links, jsonSerializerOptions);
            }
            if (githubRepository.DefaultBranchOption.IsSet)
                writer.WriteString("defaultBranch", githubRepository.DefaultBranch);

            if (githubRepository.DescriptionOption.IsSet)
                writer.WriteString("description", githubRepository.Description);

            if (githubRepository.NameOption.IsSet)
                writer.WriteString("name", githubRepository.Name);

            if (githubRepository.PermissionsOption.IsSet)
            {
                writer.WritePropertyName("permissions");
                JsonSerializer.Serialize(writer, githubRepository.Permissions, jsonSerializerOptions);
            }
            if (githubRepository.PrivateOption.IsSet)
                writer.WriteBoolean("private", githubRepository.PrivateOption.Value!.Value);

            if (githubRepository.FullNameOption.IsSet)
                writer.WriteString("fullName", githubRepository.FullName);
        }
    }
}
