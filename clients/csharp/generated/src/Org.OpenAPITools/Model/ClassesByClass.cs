// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ClassesByClass
    /// </summary>
    public partial class ClassesByClass : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClassesByClass" /> class.
        /// </summary>
        /// <param name="classes">classes</param>
        /// <param name="class">class</param>
        [JsonConstructor]
        public ClassesByClass(Option<List<string>?> classes = default, Option<string?> @class = default)
        {
            ClassesOption = classes;
            ClassOption = @class;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Classes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>?> ClassesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Classes
        /// </summary>
        [JsonPropertyName("classes")]
        public List<string>? Classes { get { return this.ClassesOption; } set { this.ClassesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClassesByClass {\n");
            sb.Append("  Classes: ").Append(Classes).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClassesByClass" />
    /// </summary>
    public class ClassesByClassJsonConverter : JsonConverter<ClassesByClass>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClassesByClass" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClassesByClass Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> classes = default;
            Option<string?> varClass = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "classes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                classes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (classes.IsSet && classes.Value == null)
                throw new ArgumentNullException(nameof(classes), "Property is not nullable for class ClassesByClass.");

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class ClassesByClass.");

            return new ClassesByClass(classes, varClass);
        }

        /// <summary>
        /// Serializes a <see cref="ClassesByClass" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="classesByClass"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClassesByClass classesByClass, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, classesByClass, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClassesByClass" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="classesByClass"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClassesByClass classesByClass, JsonSerializerOptions jsonSerializerOptions)
        {
            if (classesByClass.ClassesOption.IsSet && classesByClass.Classes == null)
                throw new ArgumentNullException(nameof(classesByClass.Classes), "Property is required for class ClassesByClass.");

            if (classesByClass.ClassOption.IsSet && classesByClass.Class == null)
                throw new ArgumentNullException(nameof(classesByClass.Class), "Property is required for class ClassesByClass.");

            if (classesByClass.ClassesOption.IsSet)
            {
                writer.WritePropertyName("classes");
                JsonSerializer.Serialize(writer, classesByClass.Classes, jsonSerializerOptions);
            }
            if (classesByClass.ClassOption.IsSet)
                writer.WriteString("_class", classesByClass.Class);
        }
    }
}
