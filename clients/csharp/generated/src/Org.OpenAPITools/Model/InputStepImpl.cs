// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Org.OpenAPITools.Client;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InputStepImpl
    /// </summary>
    public partial class InputStepImpl : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputStepImpl" /> class.
        /// </summary>
        /// <param name="class">class</param>
        /// <param name="links">links</param>
        /// <param name="id">id</param>
        /// <param name="message">message</param>
        /// <param name="ok">ok</param>
        /// <param name="parameters">parameters</param>
        /// <param name="submitter">submitter</param>
        [JsonConstructor]
        public InputStepImpl(Option<string?> @class = default, Option<InputStepImpllinks?> links = default, Option<string?> id = default, Option<string?> message = default, Option<string?> ok = default, Option<List<StringParameterDefinition>?> parameters = default, Option<string?> submitter = default)
        {
            ClassOption = @class;
            LinksOption = links;
            IdOption = id;
            MessageOption = message;
            OkOption = ok;
            ParametersOption = parameters;
            SubmitterOption = submitter;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Class
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClassOption { get; private set; }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [JsonPropertyName("_class")]
        public string? Class { get { return this.ClassOption; } set { this.ClassOption = new(value); } }

        /// <summary>
        /// Used to track the state of Links
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<InputStepImpllinks?> LinksOption { get; private set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [JsonPropertyName("_links")]
        public InputStepImpllinks? Links { get { return this.LinksOption; } set { this.LinksOption = new(value); } }

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Message
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MessageOption { get; private set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [JsonPropertyName("message")]
        public string? Message { get { return this.MessageOption; } set { this.MessageOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ok
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Ok
        /// </summary>
        [JsonPropertyName("ok")]
        public string? Ok { get { return this.OkOption; } set { this.OkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Parameters
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<StringParameterDefinition>?> ParametersOption { get; private set; }

        /// <summary>
        /// Gets or Sets Parameters
        /// </summary>
        [JsonPropertyName("parameters")]
        public List<StringParameterDefinition>? Parameters { get { return this.ParametersOption; } set { this.ParametersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Submitter
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SubmitterOption { get; private set; }

        /// <summary>
        /// Gets or Sets Submitter
        /// </summary>
        [JsonPropertyName("submitter")]
        public string? Submitter { get { return this.SubmitterOption; } set { this.SubmitterOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputStepImpl {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Ok: ").Append(Ok).Append("\n");
            sb.Append("  Parameters: ").Append(Parameters).Append("\n");
            sb.Append("  Submitter: ").Append(Submitter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InputStepImpl" />
    /// </summary>
    public class InputStepImplJsonConverter : JsonConverter<InputStepImpl>
    {
        /// <summary>
        /// Deserializes json to <see cref="InputStepImpl" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InputStepImpl Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varClass = default;
            Option<InputStepImpllinks?> links = default;
            Option<string?> id = default;
            Option<string?> message = default;
            Option<string?> ok = default;
            Option<List<StringParameterDefinition>?> parameters = default;
            Option<string?> submitter = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "_class":
                            varClass = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "_links":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                links = new Option<InputStepImpllinks?>(JsonSerializer.Deserialize<InputStepImpllinks>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "ok":
                            ok = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "parameters":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                parameters = new Option<List<StringParameterDefinition>?>(JsonSerializer.Deserialize<List<StringParameterDefinition>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "submitter":
                            submitter = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varClass.IsSet && varClass.Value == null)
                throw new ArgumentNullException(nameof(varClass), "Property is not nullable for class InputStepImpl.");

            if (links.IsSet && links.Value == null)
                throw new ArgumentNullException(nameof(links), "Property is not nullable for class InputStepImpl.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class InputStepImpl.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class InputStepImpl.");

            if (ok.IsSet && ok.Value == null)
                throw new ArgumentNullException(nameof(ok), "Property is not nullable for class InputStepImpl.");

            if (parameters.IsSet && parameters.Value == null)
                throw new ArgumentNullException(nameof(parameters), "Property is not nullable for class InputStepImpl.");

            if (submitter.IsSet && submitter.Value == null)
                throw new ArgumentNullException(nameof(submitter), "Property is not nullable for class InputStepImpl.");

            return new InputStepImpl(varClass, links, id, message, ok, parameters, submitter);
        }

        /// <summary>
        /// Serializes a <see cref="InputStepImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inputStepImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InputStepImpl inputStepImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, inputStepImpl, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InputStepImpl" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="inputStepImpl"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InputStepImpl inputStepImpl, JsonSerializerOptions jsonSerializerOptions)
        {
            if (inputStepImpl.ClassOption.IsSet && inputStepImpl.Class == null)
                throw new ArgumentNullException(nameof(inputStepImpl.Class), "Property is required for class InputStepImpl.");

            if (inputStepImpl.LinksOption.IsSet && inputStepImpl.Links == null)
                throw new ArgumentNullException(nameof(inputStepImpl.Links), "Property is required for class InputStepImpl.");

            if (inputStepImpl.IdOption.IsSet && inputStepImpl.Id == null)
                throw new ArgumentNullException(nameof(inputStepImpl.Id), "Property is required for class InputStepImpl.");

            if (inputStepImpl.MessageOption.IsSet && inputStepImpl.Message == null)
                throw new ArgumentNullException(nameof(inputStepImpl.Message), "Property is required for class InputStepImpl.");

            if (inputStepImpl.OkOption.IsSet && inputStepImpl.Ok == null)
                throw new ArgumentNullException(nameof(inputStepImpl.Ok), "Property is required for class InputStepImpl.");

            if (inputStepImpl.ParametersOption.IsSet && inputStepImpl.Parameters == null)
                throw new ArgumentNullException(nameof(inputStepImpl.Parameters), "Property is required for class InputStepImpl.");

            if (inputStepImpl.SubmitterOption.IsSet && inputStepImpl.Submitter == null)
                throw new ArgumentNullException(nameof(inputStepImpl.Submitter), "Property is required for class InputStepImpl.");

            if (inputStepImpl.ClassOption.IsSet)
                writer.WriteString("_class", inputStepImpl.Class);

            if (inputStepImpl.LinksOption.IsSet)
            {
                writer.WritePropertyName("_links");
                JsonSerializer.Serialize(writer, inputStepImpl.Links, jsonSerializerOptions);
            }
            if (inputStepImpl.IdOption.IsSet)
                writer.WriteString("id", inputStepImpl.Id);

            if (inputStepImpl.MessageOption.IsSet)
                writer.WriteString("message", inputStepImpl.Message);

            if (inputStepImpl.OkOption.IsSet)
                writer.WriteString("ok", inputStepImpl.Ok);

            if (inputStepImpl.ParametersOption.IsSet)
            {
                writer.WritePropertyName("parameters");
                JsonSerializer.Serialize(writer, inputStepImpl.Parameters, jsonSerializerOptions);
            }
            if (inputStepImpl.SubmitterOption.IsSet)
                writer.WriteString("submitter", inputStepImpl.Submitter);
        }
    }
}
