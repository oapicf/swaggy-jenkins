/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Client
{
    /// <summary>
    /// Provides hosting configuration for Org.OpenAPITools
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new AllViewJsonConverter());
            _jsonOptions.Converters.Add(new BranchImplJsonConverter());
            _jsonOptions.Converters.Add(new BranchImpllinksJsonConverter());
            _jsonOptions.Converters.Add(new BranchImplpermissionsJsonConverter());
            _jsonOptions.Converters.Add(new CauseActionJsonConverter());
            _jsonOptions.Converters.Add(new CauseUserIdCauseJsonConverter());
            _jsonOptions.Converters.Add(new ClassesByClassJsonConverter());
            _jsonOptions.Converters.Add(new ClockDifferenceJsonConverter());
            _jsonOptions.Converters.Add(new ComputerSetJsonConverter());
            _jsonOptions.Converters.Add(new DefaultCrumbIssuerJsonConverter());
            _jsonOptions.Converters.Add(new DiskSpaceMonitorDescriptorDiskSpaceJsonConverter());
            _jsonOptions.Converters.Add(new EmptyChangeLogSetJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionClassContainerImpl1JsonConverter());
            _jsonOptions.Converters.Add(new ExtensionClassContainerImpl1linksJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionClassContainerImpl1mapJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionClassImplJsonConverter());
            _jsonOptions.Converters.Add(new ExtensionClassImpllinksJsonConverter());
            _jsonOptions.Converters.Add(new FavoriteImplJsonConverter());
            _jsonOptions.Converters.Add(new FavoriteImpllinksJsonConverter());
            _jsonOptions.Converters.Add(new FreeStyleBuildJsonConverter());
            _jsonOptions.Converters.Add(new FreeStyleProjectJsonConverter());
            _jsonOptions.Converters.Add(new FreeStyleProjectactionsJsonConverter());
            _jsonOptions.Converters.Add(new FreeStyleProjecthealthReportJsonConverter());
            _jsonOptions.Converters.Add(new GenericResourceJsonConverter());
            _jsonOptions.Converters.Add(new GithubContentJsonConverter());
            _jsonOptions.Converters.Add(new GithubFileJsonConverter());
            _jsonOptions.Converters.Add(new GithubOrganizationJsonConverter());
            _jsonOptions.Converters.Add(new GithubOrganizationlinksJsonConverter());
            _jsonOptions.Converters.Add(new GithubRepositoriesJsonConverter());
            _jsonOptions.Converters.Add(new GithubRepositorieslinksJsonConverter());
            _jsonOptions.Converters.Add(new GithubRepositoryJsonConverter());
            _jsonOptions.Converters.Add(new GithubRepositorylinksJsonConverter());
            _jsonOptions.Converters.Add(new GithubRepositorypermissionsJsonConverter());
            _jsonOptions.Converters.Add(new GithubRespositoryContainerJsonConverter());
            _jsonOptions.Converters.Add(new GithubRespositoryContainerlinksJsonConverter());
            _jsonOptions.Converters.Add(new GithubScmJsonConverter());
            _jsonOptions.Converters.Add(new GithubScmlinksJsonConverter());
            _jsonOptions.Converters.Add(new HudsonJsonConverter());
            _jsonOptions.Converters.Add(new HudsonMasterComputerJsonConverter());
            _jsonOptions.Converters.Add(new HudsonMasterComputerexecutorsJsonConverter());
            _jsonOptions.Converters.Add(new HudsonMasterComputermonitorDataJsonConverter());
            _jsonOptions.Converters.Add(new HudsonassignedLabelsJsonConverter());
            _jsonOptions.Converters.Add(new InputStepImplJsonConverter());
            _jsonOptions.Converters.Add(new InputStepImpllinksJsonConverter());
            _jsonOptions.Converters.Add(new Label1JsonConverter());
            _jsonOptions.Converters.Add(new LinkJsonConverter());
            _jsonOptions.Converters.Add(new ListViewJsonConverter());
            _jsonOptions.Converters.Add(new MultibranchPipelineJsonConverter());
            _jsonOptions.Converters.Add(new NullSCMJsonConverter());
            _jsonOptions.Converters.Add(new OrganisationJsonConverter());
            _jsonOptions.Converters.Add(new PipelineJsonConverter());
            _jsonOptions.Converters.Add(new PipelineActivityJsonConverter());
            _jsonOptions.Converters.Add(new PipelineActivityartifactsJsonConverter());
            _jsonOptions.Converters.Add(new PipelineBranchesitemJsonConverter());
            _jsonOptions.Converters.Add(new PipelineBranchesitemlatestRunJsonConverter());
            _jsonOptions.Converters.Add(new PipelineBranchesitempullRequestJsonConverter());
            _jsonOptions.Converters.Add(new PipelineBranchesitempullRequestlinksJsonConverter());
            _jsonOptions.Converters.Add(new PipelineFolderImplJsonConverter());
            _jsonOptions.Converters.Add(new PipelineImplJsonConverter());
            _jsonOptions.Converters.Add(new PipelineImpllinksJsonConverter());
            _jsonOptions.Converters.Add(new PipelineRunJsonConverter());
            _jsonOptions.Converters.Add(new PipelineRunImplJsonConverter());
            _jsonOptions.Converters.Add(new PipelineRunImpllinksJsonConverter());
            _jsonOptions.Converters.Add(new PipelineRunNodeJsonConverter());
            _jsonOptions.Converters.Add(new PipelineRunNodeedgesJsonConverter());
            _jsonOptions.Converters.Add(new PipelineRunartifactsJsonConverter());
            _jsonOptions.Converters.Add(new PipelineStepImplJsonConverter());
            _jsonOptions.Converters.Add(new PipelineStepImpllinksJsonConverter());
            _jsonOptions.Converters.Add(new PipelinelatestRunJsonConverter());
            _jsonOptions.Converters.Add(new PipelinelatestRunartifactsJsonConverter());
            _jsonOptions.Converters.Add(new QueueJsonConverter());
            _jsonOptions.Converters.Add(new QueueBlockedItemJsonConverter());
            _jsonOptions.Converters.Add(new QueueItemImplJsonConverter());
            _jsonOptions.Converters.Add(new QueueLeftItemJsonConverter());
            _jsonOptions.Converters.Add(new ResponseTimeMonitorDataJsonConverter());
            _jsonOptions.Converters.Add(new StringParameterDefinitionJsonConverter());
            _jsonOptions.Converters.Add(new StringParameterValueJsonConverter());
            _jsonOptions.Converters.Add(new SwapSpaceMonitorMemoryUsage2JsonConverter());
            _jsonOptions.Converters.Add(new UnlabeledLoadStatisticsJsonConverter());
            _jsonOptions.Converters.Add(new UserJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<BaseApiEvents>();
            _services.AddTransient<IBaseApi, BaseApi>();
            _services.AddSingleton<BlueOceanApiEvents>();
            _services.AddTransient<IBlueOceanApi, BlueOceanApi>();
            _services.AddSingleton<RemoteAccessApiEvents>();
            _services.AddTransient<IRemoteAccessApi, RemoteAccessApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IBaseApi, BaseApi>(client));
            builders.Add(_services.AddHttpClient<IBlueOceanApi, BlueOceanApi>(client));
            builders.Add(_services.AddHttpClient<IRemoteAccessApi, RemoteAccessApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
