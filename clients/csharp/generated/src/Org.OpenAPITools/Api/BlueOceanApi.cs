// <auto-generated>
/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System.Diagnostics.CodeAnalysis;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IBlueOceanApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        BlueOceanApiEvents Events { get; }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete queue item from an organization pipeline queue
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePipelineQueueItemApiResponse"/>&gt;</returns>
        Task<IDeletePipelineQueueItemApiResponse> DeletePipelineQueueItemAsync(string organization, string pipeline, string queue, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete queue item from an organization pipeline queue
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePipelineQueueItemApiResponse"/>?&gt;</returns>
        Task<IDeletePipelineQueueItemApiResponse?> DeletePipelineQueueItemOrDefaultAsync(string organization, string pipeline, string queue, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAuthenticatedUserApiResponse"/>&gt;</returns>
        Task<IGetAuthenticatedUserApiResponse> GetAuthenticatedUserAsync(string organization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAuthenticatedUserApiResponse"/>?&gt;</returns>
        Task<IGetAuthenticatedUserApiResponse?> GetAuthenticatedUserOrDefaultAsync(string organization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClass">Name of the class</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetClassesApiResponse"/>&gt;</returns>
        Task<IGetClassesApiResponse> GetClassesAsync(string varClass, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <param name="varClass">Name of the class</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetClassesApiResponse"/>?&gt;</returns>
        Task<IGetClassesApiResponse?> GetClassesOrDefaultAsync(string varClass, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Key
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonWebKeyApiResponse"/>&gt;</returns>
        Task<IGetJsonWebKeyApiResponse> GetJsonWebKeyAsync(int key, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Key
        /// </remarks>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonWebKeyApiResponse"/>?&gt;</returns>
        Task<IGetJsonWebKeyApiResponse?> GetJsonWebKeyOrDefaultAsync(int key, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Token
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonWebTokenApiResponse"/>&gt;</returns>
        Task<IGetJsonWebTokenApiResponse> GetJsonWebTokenAsync(Option<int> expiryTimeInMins = default, Option<int> maxExpiryTimeInMins = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve JSON Web Token
        /// </remarks>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonWebTokenApiResponse"/>?&gt;</returns>
        Task<IGetJsonWebTokenApiResponse?> GetJsonWebTokenOrDefaultAsync(Option<int> expiryTimeInMins = default, Option<int> maxExpiryTimeInMins = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organization details
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganisationApiResponse"/>&gt;</returns>
        Task<IGetOrganisationApiResponse> GetOrganisationAsync(string organization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organization details
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganisationApiResponse"/>?&gt;</returns>
        Task<IGetOrganisationApiResponse?> GetOrganisationOrDefaultAsync(string organization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations details
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganisationsApiResponse"/>&gt;</returns>
        Task<IGetOrganisationsApiResponse> GetOrganisationsAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organizations details
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganisationsApiResponse"/>?&gt;</returns>
        Task<IGetOrganisationsApiResponse?> GetOrganisationsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineApiResponse"/>&gt;</returns>
        Task<IGetPipelineApiResponse> GetPipelineAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineApiResponse"/>?&gt;</returns>
        Task<IGetPipelineApiResponse?> GetPipelineOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all activities details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineActivitiesApiResponse"/>&gt;</returns>
        Task<IGetPipelineActivitiesApiResponse> GetPipelineActivitiesAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all activities details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineActivitiesApiResponse"/>?&gt;</returns>
        Task<IGetPipelineActivitiesApiResponse?> GetPipelineActivitiesOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchApiResponse"/>&gt;</returns>
        Task<IGetPipelineBranchApiResponse> GetPipelineBranchAsync(string organization, string pipeline, string branch, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchApiResponse"/>?&gt;</returns>
        Task<IGetPipelineBranchApiResponse?> GetPipelineBranchOrDefaultAsync(string organization, string pipeline, string branch, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch run details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchRunApiResponse"/>&gt;</returns>
        Task<IGetPipelineBranchRunApiResponse> GetPipelineBranchRunAsync(string organization, string pipeline, string branch, string run, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch run details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchRunApiResponse"/>?&gt;</returns>
        Task<IGetPipelineBranchRunApiResponse?> GetPipelineBranchRunOrDefaultAsync(string organization, string pipeline, string branch, string run, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchesApiResponse"/>&gt;</returns>
        Task<IGetPipelineBranchesApiResponse> GetPipelineBranchesAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchesApiResponse"/>?&gt;</returns>
        Task<IGetPipelineBranchesApiResponse?> GetPipelineBranchesOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineFolderApiResponse"/>&gt;</returns>
        Task<IGetPipelineFolderApiResponse> GetPipelineFolderAsync(string organization, string folder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineFolderApiResponse"/>?&gt;</returns>
        Task<IGetPipelineFolderApiResponse?> GetPipelineFolderOrDefaultAsync(string organization, string folder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization folder
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineFolderPipelineApiResponse"/>&gt;</returns>
        Task<IGetPipelineFolderPipelineApiResponse> GetPipelineFolderPipelineAsync(string organization, string pipeline, string folder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organization folder
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineFolderPipelineApiResponse"/>?&gt;</returns>
        Task<IGetPipelineFolderPipelineApiResponse?> GetPipelineFolderPipelineOrDefaultAsync(string organization, string pipeline, string folder, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve queue details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineQueueApiResponse"/>&gt;</returns>
        Task<IGetPipelineQueueApiResponse> GetPipelineQueueAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve queue details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineQueueApiResponse"/>?&gt;</returns>
        Task<IGetPipelineQueueApiResponse?> GetPipelineQueueOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunApiResponse"/>&gt;</returns>
        Task<IGetPipelineRunApiResponse> GetPipelineRunAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunApiResponse"/>?&gt;</returns>
        Task<IGetPipelineRunApiResponse?> GetPipelineRunOrDefaultAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunLogApiResponse"/>&gt;</returns>
        Task<IGetPipelineRunLogApiResponse> GetPipelineRunLogAsync(string organization, string pipeline, string run, Option<int> start = default, Option<bool> download = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunLogApiResponse"/>?&gt;</returns>
        Task<IGetPipelineRunLogApiResponse?> GetPipelineRunLogOrDefaultAsync(string organization, string pipeline, string run, Option<int> start = default, Option<bool> download = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeApiResponse"/>&gt;</returns>
        Task<IGetPipelineRunNodeApiResponse> GetPipelineRunNodeAsync(string organization, string pipeline, string run, string node, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeApiResponse"/>?&gt;</returns>
        Task<IGetPipelineRunNodeApiResponse?> GetPipelineRunNodeOrDefaultAsync(string organization, string pipeline, string run, string node, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepApiResponse"/>&gt;</returns>
        Task<IGetPipelineRunNodeStepApiResponse> GetPipelineRunNodeStepAsync(string organization, string pipeline, string run, string node, string step, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepApiResponse"/>?&gt;</returns>
        Task<IGetPipelineRunNodeStepApiResponse?> GetPipelineRunNodeStepOrDefaultAsync(string organization, string pipeline, string run, string node, string step, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run node step
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepLogApiResponse"/>&gt;</returns>
        Task<IGetPipelineRunNodeStepLogApiResponse> GetPipelineRunNodeStepLogAsync(string organization, string pipeline, string run, string node, string step, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get log for a pipeline run node step
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepLogApiResponse"/>?&gt;</returns>
        Task<IGetPipelineRunNodeStepLogApiResponse?> GetPipelineRunNodeStepLogOrDefaultAsync(string organization, string pipeline, string run, string node, string step, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node steps details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepsApiResponse"/>&gt;</returns>
        Task<IGetPipelineRunNodeStepsApiResponse> GetPipelineRunNodeStepsAsync(string organization, string pipeline, string run, string node, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run node steps details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepsApiResponse"/>?&gt;</returns>
        Task<IGetPipelineRunNodeStepsApiResponse?> GetPipelineRunNodeStepsOrDefaultAsync(string organization, string pipeline, string run, string node, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run nodes details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodesApiResponse"/>&gt;</returns>
        Task<IGetPipelineRunNodesApiResponse> GetPipelineRunNodesAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve run nodes details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodesApiResponse"/>?&gt;</returns>
        Task<IGetPipelineRunNodesApiResponse?> GetPipelineRunNodesOrDefaultAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all runs details for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunsApiResponse"/>&gt;</returns>
        Task<IGetPipelineRunsApiResponse> GetPipelineRunsAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all runs details for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunsApiResponse"/>?&gt;</returns>
        Task<IGetPipelineRunsApiResponse?> GetPipelineRunsOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesApiResponse"/>&gt;</returns>
        Task<IGetPipelinesApiResponse> GetPipelinesAsync(string organization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesApiResponse"/>?&gt;</returns>
        Task<IGetPipelinesApiResponse?> GetPipelinesOrDefaultAsync(string organization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMApiResponse"/>&gt;</returns>
        Task<IGetSCMApiResponse> GetSCMAsync(string organization, string scm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMApiResponse"/>?&gt;</returns>
        Task<IGetSCMApiResponse?> GetSCMOrDefaultAsync(string organization, string scm, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repositories details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationRepositoriesApiResponse"/>&gt;</returns>
        Task<IGetSCMOrganisationRepositoriesApiResponse> GetSCMOrganisationRepositoriesAsync(string organization, string scm, string scmOrganisation, Option<string> credentialId = default, Option<int> pageSize = default, Option<int> pageNumber = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repositories details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationRepositoriesApiResponse"/>?&gt;</returns>
        Task<IGetSCMOrganisationRepositoriesApiResponse?> GetSCMOrganisationRepositoriesOrDefaultAsync(string organization, string scm, string scmOrganisation, Option<string> credentialId = default, Option<int> pageSize = default, Option<int> pageNumber = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repository details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationRepositoryApiResponse"/>&gt;</returns>
        Task<IGetSCMOrganisationRepositoryApiResponse> GetSCMOrganisationRepositoryAsync(string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organization repository details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationRepositoryApiResponse"/>?&gt;</returns>
        Task<IGetSCMOrganisationRepositoryApiResponse?> GetSCMOrganisationRepositoryOrDefaultAsync(string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organizations details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationsApiResponse"/>&gt;</returns>
        Task<IGetSCMOrganisationsApiResponse> GetSCMOrganisationsAsync(string organization, string scm, Option<string> credentialId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve SCM organizations details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationsApiResponse"/>?&gt;</returns>
        Task<IGetSCMOrganisationsApiResponse?> GetSCMOrganisationsOrDefaultAsync(string organization, string scm, Option<string> credentialId = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserApiResponse"/>&gt;</returns>
        Task<IGetUserApiResponse> GetUserAsync(string organization, string user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserApiResponse"/>?&gt;</returns>
        Task<IGetUserApiResponse?> GetUserOrDefaultAsync(string organization, string user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user favorites details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserFavoritesApiResponse"/>&gt;</returns>
        Task<IGetUserFavoritesApiResponse> GetUserFavoritesAsync(string user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user favorites details for an organization
        /// </remarks>
        /// <param name="user">Name of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserFavoritesApiResponse"/>?&gt;</returns>
        Task<IGetUserFavoritesApiResponse?> GetUserFavoritesOrDefaultAsync(string user, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organization
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersApiResponse"/>&gt;</returns>
        Task<IGetUsersApiResponse> GetUsersAsync(string organization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organization
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersApiResponse"/>?&gt;</returns>
        Task<IGetUsersApiResponse?> GetUsersOrDefaultAsync(string organization, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replay an organization pipeline run
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPipelineRunApiResponse"/>&gt;</returns>
        Task<IPostPipelineRunApiResponse> PostPipelineRunAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Replay an organization pipeline run
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPipelineRunApiResponse"/>?&gt;</returns>
        Task<IPostPipelineRunApiResponse?> PostPipelineRunOrDefaultAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a build for an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPipelineRunsApiResponse"/>&gt;</returns>
        Task<IPostPipelineRunsApiResponse> PostPipelineRunsAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Start a build for an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPipelineRunsApiResponse"/>?&gt;</returns>
        Task<IPostPipelineRunsApiResponse?> PostPipelineRunsOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Favorite/unfavorite a pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineFavoriteApiResponse"/>&gt;</returns>
        Task<IPutPipelineFavoriteApiResponse> PutPipelineFavoriteAsync(string organization, string pipeline, bool body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Favorite/unfavorite a pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineFavoriteApiResponse"/>?&gt;</returns>
        Task<IPutPipelineFavoriteApiResponse?> PutPipelineFavoriteOrDefaultAsync(string organization, string pipeline, bool body, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a build of an organization pipeline
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineRunApiResponse"/>&gt;</returns>
        Task<IPutPipelineRunApiResponse> PutPipelineRunAsync(string organization, string pipeline, string run, Option<string> blocking = default, Option<int> timeOutInSecs = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Stop a build of an organization pipeline
        /// </remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineRunApiResponse"/>?&gt;</returns>
        Task<IPutPipelineRunApiResponse?> PutPipelineRunOrDefaultAsync(string organization, string pipeline, string run, Option<string> blocking = default, Option<int> timeOutInSecs = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchApiResponse"/>&gt;</returns>
        Task<ISearchApiResponse> SearchAsync(string q, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <param name="q">Query string</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchApiResponse"/>?&gt;</returns>
        Task<ISearchApiResponse?> SearchOrDefaultAsync(string q, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchClassesApiResponse"/>&gt;</returns>
        Task<ISearchClassesApiResponse> SearchClassesAsync(string q, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <param name="q">Query string containing an array of class names</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchClassesApiResponse"/>?&gt;</returns>
        Task<ISearchClassesApiResponse?> SearchClassesOrDefaultAsync(string q, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IDeletePipelineQueueItemApiResponse"/>
    /// </summary>
    public interface IDeletePipelineQueueItemApiResponse : Org.OpenAPITools.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetAuthenticatedUserApiResponse"/>
    /// </summary>
    public interface IGetAuthenticatedUserApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.User?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetClassesApiResponse"/>
    /// </summary>
    public interface IGetClassesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetJsonWebKeyApiResponse"/>
    /// </summary>
    public interface IGetJsonWebKeyApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetJsonWebTokenApiResponse"/>
    /// </summary>
    public interface IGetJsonWebTokenApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganisationApiResponse"/>
    /// </summary>
    public interface IGetOrganisationApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Organisation?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetOrganisationsApiResponse"/>
    /// </summary>
    public interface IGetOrganisationsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<Organisation>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineApiResponse"/>
    /// </summary>
    public interface IGetPipelineApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.Pipeline?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineActivitiesApiResponse"/>
    /// </summary>
    public interface IGetPipelineActivitiesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<PipelineActivity>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineBranchApiResponse"/>
    /// </summary>
    public interface IGetPipelineBranchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.BranchImpl?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineBranchRunApiResponse"/>
    /// </summary>
    public interface IGetPipelineBranchRunApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PipelineRun?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineBranchesApiResponse"/>
    /// </summary>
    public interface IGetPipelineBranchesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.MultibranchPipeline?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineFolderApiResponse"/>
    /// </summary>
    public interface IGetPipelineFolderApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PipelineFolderImpl?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineFolderPipelineApiResponse"/>
    /// </summary>
    public interface IGetPipelineFolderPipelineApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PipelineImpl?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineQueueApiResponse"/>
    /// </summary>
    public interface IGetPipelineQueueApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<QueueItemImpl>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineRunApiResponse"/>
    /// </summary>
    public interface IGetPipelineRunApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PipelineRun?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineRunLogApiResponse"/>
    /// </summary>
    public interface IGetPipelineRunLogApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineRunNodeApiResponse"/>
    /// </summary>
    public interface IGetPipelineRunNodeApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PipelineRunNode?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineRunNodeStepApiResponse"/>
    /// </summary>
    public interface IGetPipelineRunNodeStepApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PipelineStepImpl?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineRunNodeStepLogApiResponse"/>
    /// </summary>
    public interface IGetPipelineRunNodeStepLogApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineRunNodeStepsApiResponse"/>
    /// </summary>
    public interface IGetPipelineRunNodeStepsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<PipelineStepImpl>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineRunNodesApiResponse"/>
    /// </summary>
    public interface IGetPipelineRunNodesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<PipelineRunNode>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelineRunsApiResponse"/>
    /// </summary>
    public interface IGetPipelineRunsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<PipelineRun>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetPipelinesApiResponse"/>
    /// </summary>
    public interface IGetPipelinesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<Pipeline>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetSCMApiResponse"/>
    /// </summary>
    public interface IGetSCMApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.GithubScm?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetSCMOrganisationRepositoriesApiResponse"/>
    /// </summary>
    public interface IGetSCMOrganisationRepositoriesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<GithubOrganization>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetSCMOrganisationRepositoryApiResponse"/>
    /// </summary>
    public interface IGetSCMOrganisationRepositoryApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<GithubOrganization>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetSCMOrganisationsApiResponse"/>
    /// </summary>
    public interface IGetSCMOrganisationsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<GithubOrganization>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserApiResponse"/>
    /// </summary>
    public interface IGetUserApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.User?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetUserFavoritesApiResponse"/>
    /// </summary>
    public interface IGetUserFavoritesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<List<FavoriteImpl>?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IGetUsersApiResponse"/>
    /// </summary>
    public interface IGetUsersApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.User?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IPostPipelineRunApiResponse"/>
    /// </summary>
    public interface IPostPipelineRunApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.QueueItemImpl?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IPostPipelineRunsApiResponse"/>
    /// </summary>
    public interface IPostPipelineRunsApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.QueueItemImpl?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IPutPipelineFavoriteApiResponse"/>
    /// </summary>
    public interface IPutPipelineFavoriteApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.FavoriteImpl?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="IPutPipelineRunApiResponse"/>
    /// </summary>
    public interface IPutPipelineRunApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<Org.OpenAPITools.Model.PipelineRun?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="ISearchApiResponse"/>
    /// </summary>
    public interface ISearchApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// The <see cref="ISearchClassesApiResponse"/>
    /// </summary>
    public interface ISearchClassesApiResponse : Org.OpenAPITools.Client.IApiResponse, IOk<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class BlueOceanApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnDeletePipelineQueueItem;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorDeletePipelineQueueItem;

        internal void ExecuteOnDeletePipelineQueueItem(BlueOceanApi.DeletePipelineQueueItemApiResponse apiResponse)
        {
            OnDeletePipelineQueueItem?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorDeletePipelineQueueItem(Exception exception)
        {
            OnErrorDeletePipelineQueueItem?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetAuthenticatedUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetAuthenticatedUser;

        internal void ExecuteOnGetAuthenticatedUser(BlueOceanApi.GetAuthenticatedUserApiResponse apiResponse)
        {
            OnGetAuthenticatedUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetAuthenticatedUser(Exception exception)
        {
            OnErrorGetAuthenticatedUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetClasses;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetClasses;

        internal void ExecuteOnGetClasses(BlueOceanApi.GetClassesApiResponse apiResponse)
        {
            OnGetClasses?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetClasses(Exception exception)
        {
            OnErrorGetClasses?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetJsonWebKey;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetJsonWebKey;

        internal void ExecuteOnGetJsonWebKey(BlueOceanApi.GetJsonWebKeyApiResponse apiResponse)
        {
            OnGetJsonWebKey?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetJsonWebKey(Exception exception)
        {
            OnErrorGetJsonWebKey?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetJsonWebToken;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetJsonWebToken;

        internal void ExecuteOnGetJsonWebToken(BlueOceanApi.GetJsonWebTokenApiResponse apiResponse)
        {
            OnGetJsonWebToken?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetJsonWebToken(Exception exception)
        {
            OnErrorGetJsonWebToken?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganisation;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganisation;

        internal void ExecuteOnGetOrganisation(BlueOceanApi.GetOrganisationApiResponse apiResponse)
        {
            OnGetOrganisation?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganisation(Exception exception)
        {
            OnErrorGetOrganisation?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetOrganisations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetOrganisations;

        internal void ExecuteOnGetOrganisations(BlueOceanApi.GetOrganisationsApiResponse apiResponse)
        {
            OnGetOrganisations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetOrganisations(Exception exception)
        {
            OnErrorGetOrganisations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipeline;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipeline;

        internal void ExecuteOnGetPipeline(BlueOceanApi.GetPipelineApiResponse apiResponse)
        {
            OnGetPipeline?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipeline(Exception exception)
        {
            OnErrorGetPipeline?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineActivities;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineActivities;

        internal void ExecuteOnGetPipelineActivities(BlueOceanApi.GetPipelineActivitiesApiResponse apiResponse)
        {
            OnGetPipelineActivities?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineActivities(Exception exception)
        {
            OnErrorGetPipelineActivities?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineBranch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineBranch;

        internal void ExecuteOnGetPipelineBranch(BlueOceanApi.GetPipelineBranchApiResponse apiResponse)
        {
            OnGetPipelineBranch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineBranch(Exception exception)
        {
            OnErrorGetPipelineBranch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineBranchRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineBranchRun;

        internal void ExecuteOnGetPipelineBranchRun(BlueOceanApi.GetPipelineBranchRunApiResponse apiResponse)
        {
            OnGetPipelineBranchRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineBranchRun(Exception exception)
        {
            OnErrorGetPipelineBranchRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineBranches;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineBranches;

        internal void ExecuteOnGetPipelineBranches(BlueOceanApi.GetPipelineBranchesApiResponse apiResponse)
        {
            OnGetPipelineBranches?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineBranches(Exception exception)
        {
            OnErrorGetPipelineBranches?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineFolder;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineFolder;

        internal void ExecuteOnGetPipelineFolder(BlueOceanApi.GetPipelineFolderApiResponse apiResponse)
        {
            OnGetPipelineFolder?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineFolder(Exception exception)
        {
            OnErrorGetPipelineFolder?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineFolderPipeline;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineFolderPipeline;

        internal void ExecuteOnGetPipelineFolderPipeline(BlueOceanApi.GetPipelineFolderPipelineApiResponse apiResponse)
        {
            OnGetPipelineFolderPipeline?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineFolderPipeline(Exception exception)
        {
            OnErrorGetPipelineFolderPipeline?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineQueue;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineQueue;

        internal void ExecuteOnGetPipelineQueue(BlueOceanApi.GetPipelineQueueApiResponse apiResponse)
        {
            OnGetPipelineQueue?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineQueue(Exception exception)
        {
            OnErrorGetPipelineQueue?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineRun;

        internal void ExecuteOnGetPipelineRun(BlueOceanApi.GetPipelineRunApiResponse apiResponse)
        {
            OnGetPipelineRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineRun(Exception exception)
        {
            OnErrorGetPipelineRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineRunLog;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineRunLog;

        internal void ExecuteOnGetPipelineRunLog(BlueOceanApi.GetPipelineRunLogApiResponse apiResponse)
        {
            OnGetPipelineRunLog?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineRunLog(Exception exception)
        {
            OnErrorGetPipelineRunLog?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineRunNode;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineRunNode;

        internal void ExecuteOnGetPipelineRunNode(BlueOceanApi.GetPipelineRunNodeApiResponse apiResponse)
        {
            OnGetPipelineRunNode?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineRunNode(Exception exception)
        {
            OnErrorGetPipelineRunNode?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineRunNodeStep;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineRunNodeStep;

        internal void ExecuteOnGetPipelineRunNodeStep(BlueOceanApi.GetPipelineRunNodeStepApiResponse apiResponse)
        {
            OnGetPipelineRunNodeStep?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineRunNodeStep(Exception exception)
        {
            OnErrorGetPipelineRunNodeStep?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineRunNodeStepLog;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineRunNodeStepLog;

        internal void ExecuteOnGetPipelineRunNodeStepLog(BlueOceanApi.GetPipelineRunNodeStepLogApiResponse apiResponse)
        {
            OnGetPipelineRunNodeStepLog?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineRunNodeStepLog(Exception exception)
        {
            OnErrorGetPipelineRunNodeStepLog?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineRunNodeSteps;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineRunNodeSteps;

        internal void ExecuteOnGetPipelineRunNodeSteps(BlueOceanApi.GetPipelineRunNodeStepsApiResponse apiResponse)
        {
            OnGetPipelineRunNodeSteps?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineRunNodeSteps(Exception exception)
        {
            OnErrorGetPipelineRunNodeSteps?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineRunNodes;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineRunNodes;

        internal void ExecuteOnGetPipelineRunNodes(BlueOceanApi.GetPipelineRunNodesApiResponse apiResponse)
        {
            OnGetPipelineRunNodes?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineRunNodes(Exception exception)
        {
            OnErrorGetPipelineRunNodes?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelineRuns;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelineRuns;

        internal void ExecuteOnGetPipelineRuns(BlueOceanApi.GetPipelineRunsApiResponse apiResponse)
        {
            OnGetPipelineRuns?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelineRuns(Exception exception)
        {
            OnErrorGetPipelineRuns?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetPipelines;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetPipelines;

        internal void ExecuteOnGetPipelines(BlueOceanApi.GetPipelinesApiResponse apiResponse)
        {
            OnGetPipelines?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetPipelines(Exception exception)
        {
            OnErrorGetPipelines?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSCM;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSCM;

        internal void ExecuteOnGetSCM(BlueOceanApi.GetSCMApiResponse apiResponse)
        {
            OnGetSCM?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSCM(Exception exception)
        {
            OnErrorGetSCM?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSCMOrganisationRepositories;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSCMOrganisationRepositories;

        internal void ExecuteOnGetSCMOrganisationRepositories(BlueOceanApi.GetSCMOrganisationRepositoriesApiResponse apiResponse)
        {
            OnGetSCMOrganisationRepositories?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSCMOrganisationRepositories(Exception exception)
        {
            OnErrorGetSCMOrganisationRepositories?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSCMOrganisationRepository;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSCMOrganisationRepository;

        internal void ExecuteOnGetSCMOrganisationRepository(BlueOceanApi.GetSCMOrganisationRepositoryApiResponse apiResponse)
        {
            OnGetSCMOrganisationRepository?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSCMOrganisationRepository(Exception exception)
        {
            OnErrorGetSCMOrganisationRepository?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetSCMOrganisations;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetSCMOrganisations;

        internal void ExecuteOnGetSCMOrganisations(BlueOceanApi.GetSCMOrganisationsApiResponse apiResponse)
        {
            OnGetSCMOrganisations?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetSCMOrganisations(Exception exception)
        {
            OnErrorGetSCMOrganisations?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUser;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUser;

        internal void ExecuteOnGetUser(BlueOceanApi.GetUserApiResponse apiResponse)
        {
            OnGetUser?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUser(Exception exception)
        {
            OnErrorGetUser?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUserFavorites;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUserFavorites;

        internal void ExecuteOnGetUserFavorites(BlueOceanApi.GetUserFavoritesApiResponse apiResponse)
        {
            OnGetUserFavorites?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUserFavorites(Exception exception)
        {
            OnErrorGetUserFavorites?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetUsers;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetUsers;

        internal void ExecuteOnGetUsers(BlueOceanApi.GetUsersApiResponse apiResponse)
        {
            OnGetUsers?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetUsers(Exception exception)
        {
            OnErrorGetUsers?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostPipelineRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostPipelineRun;

        internal void ExecuteOnPostPipelineRun(BlueOceanApi.PostPipelineRunApiResponse apiResponse)
        {
            OnPostPipelineRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostPipelineRun(Exception exception)
        {
            OnErrorPostPipelineRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPostPipelineRuns;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPostPipelineRuns;

        internal void ExecuteOnPostPipelineRuns(BlueOceanApi.PostPipelineRunsApiResponse apiResponse)
        {
            OnPostPipelineRuns?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPostPipelineRuns(Exception exception)
        {
            OnErrorPostPipelineRuns?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutPipelineFavorite;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutPipelineFavorite;

        internal void ExecuteOnPutPipelineFavorite(BlueOceanApi.PutPipelineFavoriteApiResponse apiResponse)
        {
            OnPutPipelineFavorite?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutPipelineFavorite(Exception exception)
        {
            OnErrorPutPipelineFavorite?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnPutPipelineRun;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorPutPipelineRun;

        internal void ExecuteOnPutPipelineRun(BlueOceanApi.PutPipelineRunApiResponse apiResponse)
        {
            OnPutPipelineRun?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorPutPipelineRun(Exception exception)
        {
            OnErrorPutPipelineRun?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSearch;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSearch;

        internal void ExecuteOnSearch(BlueOceanApi.SearchApiResponse apiResponse)
        {
            OnSearch?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSearch(Exception exception)
        {
            OnErrorSearch?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnSearchClasses;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorSearchClasses;

        internal void ExecuteOnSearchClasses(BlueOceanApi.SearchClassesApiResponse apiResponse)
        {
            OnSearchClasses?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorSearchClasses(Exception exception)
        {
            OnErrorSearchClasses?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class BlueOceanApi : IBlueOceanApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<BlueOceanApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public BlueOceanApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// A token provider of type <see cref="BasicTokenProvider"/>
        /// </summary>
        public TokenProvider<BasicToken> BasicTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlueOceanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlueOceanApi(ILogger<BlueOceanApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, BlueOceanApiEvents blueOceanApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider,
            TokenProvider<BasicToken> basicTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<BlueOceanApi>();
            HttpClient = httpClient;
            Events = blueOceanApiEvents;
            ApiKeyProvider = apiKeyProvider;
            BasicTokenProvider = basicTokenProvider;
        }

        partial void FormatDeletePipelineQueueItem(ref string organization, ref string pipeline, ref string queue);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="queue"></param>
        /// <returns></returns>
        private void ValidateDeletePipelineQueueItem(string organization, string pipeline, string queue)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (queue == null)
                throw new ArgumentNullException(nameof(queue));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="queue"></param>
        private void AfterDeletePipelineQueueItemDefaultImplementation(IDeletePipelineQueueItemApiResponse apiResponseLocalVar, string organization, string pipeline, string queue)
        {
            bool suppressDefaultLog = false;
            AfterDeletePipelineQueueItem(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, queue);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="queue"></param>
        partial void AfterDeletePipelineQueueItem(ref bool suppressDefaultLog, IDeletePipelineQueueItemApiResponse apiResponseLocalVar, string organization, string pipeline, string queue);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="queue"></param>
        private void OnErrorDeletePipelineQueueItemDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string queue)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorDeletePipelineQueueItem(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, queue);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="queue"></param>
        partial void OnErrorDeletePipelineQueueItem(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string queue);

        /// <summary>
        ///  Delete queue item from an organization pipeline queue
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePipelineQueueItemApiResponse"/>&gt;</returns>
        public async Task<IDeletePipelineQueueItemApiResponse?> DeletePipelineQueueItemOrDefaultAsync(string organization, string pipeline, string queue, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await DeletePipelineQueueItemAsync(organization, pipeline, queue, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Delete queue item from an organization pipeline queue
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IDeletePipelineQueueItemApiResponse"/>&gt;</returns>
        public async Task<IDeletePipelineQueueItemApiResponse> DeletePipelineQueueItemAsync(string organization, string pipeline, string queue, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateDeletePipelineQueueItem(organization, pipeline, queue);

                FormatDeletePipelineQueueItem(ref organization, ref pipeline, ref queue);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bqueue%7D", Uri.EscapeDataString(queue.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<DeletePipelineQueueItemApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<DeletePipelineQueueItemApiResponse>();

                        DeletePipelineQueueItemApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterDeletePipelineQueueItemDefaultImplementation(apiResponseLocalVar, organization, pipeline, queue);

                        Events.ExecuteOnDeletePipelineQueueItem(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorDeletePipelineQueueItemDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}", uriBuilderLocalVar.Path, organization, pipeline, queue);
                Events.ExecuteOnErrorDeletePipelineQueueItem(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="DeletePipelineQueueItemApiResponse"/>
        /// </summary>
        public partial class DeletePipelineQueueItemApiResponse : Org.OpenAPITools.Client.ApiResponse, IDeletePipelineQueueItemApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<DeletePipelineQueueItemApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="DeletePipelineQueueItemApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public DeletePipelineQueueItemApiResponse(ILogger<DeletePipelineQueueItemApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetAuthenticatedUser(ref string organization);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <returns></returns>
        private void ValidateGetAuthenticatedUser(string organization)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        private void AfterGetAuthenticatedUserDefaultImplementation(IGetAuthenticatedUserApiResponse apiResponseLocalVar, string organization)
        {
            bool suppressDefaultLog = false;
            AfterGetAuthenticatedUser(ref suppressDefaultLog, apiResponseLocalVar, organization);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        partial void AfterGetAuthenticatedUser(ref bool suppressDefaultLog, IGetAuthenticatedUserApiResponse apiResponseLocalVar, string organization);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        private void OnErrorGetAuthenticatedUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetAuthenticatedUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        partial void OnErrorGetAuthenticatedUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization);

        /// <summary>
        ///  Retrieve authenticated user details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAuthenticatedUserApiResponse"/>&gt;</returns>
        public async Task<IGetAuthenticatedUserApiResponse?> GetAuthenticatedUserOrDefaultAsync(string organization, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetAuthenticatedUserAsync(organization, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve authenticated user details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetAuthenticatedUserApiResponse"/>&gt;</returns>
        public async Task<IGetAuthenticatedUserApiResponse> GetAuthenticatedUserAsync(string organization, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetAuthenticatedUser(organization);

                FormatGetAuthenticatedUser(ref organization);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/user/";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetAuthenticatedUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetAuthenticatedUserApiResponse>();

                        GetAuthenticatedUserApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/user/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetAuthenticatedUserDefaultImplementation(apiResponseLocalVar, organization);

                        Events.ExecuteOnGetAuthenticatedUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetAuthenticatedUserDefaultImplementation(e, "/blue/rest/organizations/{organization}/user/", uriBuilderLocalVar.Path, organization);
                Events.ExecuteOnErrorGetAuthenticatedUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetAuthenticatedUserApiResponse"/>
        /// </summary>
        public partial class GetAuthenticatedUserApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetAuthenticatedUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetAuthenticatedUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetAuthenticatedUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetAuthenticatedUserApiResponse(ILogger<GetAuthenticatedUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.User? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.User>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.User? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetClasses(ref string varClass);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="varClass"></param>
        /// <returns></returns>
        private void ValidateGetClasses(string varClass)
        {
            if (varClass == null)
                throw new ArgumentNullException(nameof(varClass));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="varClass"></param>
        private void AfterGetClassesDefaultImplementation(IGetClassesApiResponse apiResponseLocalVar, string varClass)
        {
            bool suppressDefaultLog = false;
            AfterGetClasses(ref suppressDefaultLog, apiResponseLocalVar, varClass);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="varClass"></param>
        partial void AfterGetClasses(ref bool suppressDefaultLog, IGetClassesApiResponse apiResponseLocalVar, string varClass);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="varClass"></param>
        private void OnErrorGetClassesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string varClass)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetClasses(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, varClass);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="varClass"></param>
        partial void OnErrorGetClasses(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string varClass);

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <param name="varClass">Name of the class</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetClassesApiResponse"/>&gt;</returns>
        public async Task<IGetClassesApiResponse?> GetClassesOrDefaultAsync(string varClass, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetClassesAsync(varClass, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="varClass">Name of the class</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetClassesApiResponse"/>&gt;</returns>
        public async Task<IGetClassesApiResponse> GetClassesAsync(string varClass, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetClasses(varClass);

                FormatGetClasses(ref varClass);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/classes/{class}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bclass%7D", Uri.EscapeDataString(varClass.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetClassesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetClassesApiResponse>();

                        GetClassesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/classes/{class}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetClassesDefaultImplementation(apiResponseLocalVar, varClass);

                        Events.ExecuteOnGetClasses(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetClassesDefaultImplementation(e, "/blue/rest/classes/{class}", uriBuilderLocalVar.Path, varClass);
                Events.ExecuteOnErrorGetClasses(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetClassesApiResponse"/>
        /// </summary>
        public partial class GetClassesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetClassesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetClassesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetClassesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetClassesApiResponse(ILogger<GetClassesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetJsonWebKey(ref int key);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="key"></param>
        private void AfterGetJsonWebKeyDefaultImplementation(IGetJsonWebKeyApiResponse apiResponseLocalVar, int key)
        {
            bool suppressDefaultLog = false;
            AfterGetJsonWebKey(ref suppressDefaultLog, apiResponseLocalVar, key);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="key"></param>
        partial void AfterGetJsonWebKey(ref bool suppressDefaultLog, IGetJsonWebKeyApiResponse apiResponseLocalVar, int key);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="key"></param>
        private void OnErrorGetJsonWebKeyDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int key)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetJsonWebKey(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, key);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="key"></param>
        partial void OnErrorGetJsonWebKey(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int key);

        /// <summary>
        ///  Retrieve JSON Web Key
        /// </summary>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonWebKeyApiResponse"/>&gt;</returns>
        public async Task<IGetJsonWebKeyApiResponse?> GetJsonWebKeyOrDefaultAsync(int key, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetJsonWebKeyAsync(key, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve JSON Web Key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonWebKeyApiResponse"/>&gt;</returns>
        public async Task<IGetJsonWebKeyApiResponse> GetJsonWebKeyAsync(int key, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetJsonWebKey(ref key);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/jwt-auth/jwks/{key}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bkey%7D", Uri.EscapeDataString(key.ToString()));

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetJsonWebKeyApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetJsonWebKeyApiResponse>();

                        GetJsonWebKeyApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jwt-auth/jwks/{key}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetJsonWebKeyDefaultImplementation(apiResponseLocalVar, key);

                        Events.ExecuteOnGetJsonWebKey(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetJsonWebKeyDefaultImplementation(e, "/jwt-auth/jwks/{key}", uriBuilderLocalVar.Path, key);
                Events.ExecuteOnErrorGetJsonWebKey(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetJsonWebKeyApiResponse"/>
        /// </summary>
        public partial class GetJsonWebKeyApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetJsonWebKeyApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetJsonWebKeyApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetJsonWebKeyApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetJsonWebKeyApiResponse(ILogger<GetJsonWebKeyApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetJsonWebToken(ref Option<int> expiryTimeInMins, ref Option<int> maxExpiryTimeInMins);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="expiryTimeInMins"></param>
        /// <param name="maxExpiryTimeInMins"></param>
        private void AfterGetJsonWebTokenDefaultImplementation(IGetJsonWebTokenApiResponse apiResponseLocalVar, Option<int> expiryTimeInMins, Option<int> maxExpiryTimeInMins)
        {
            bool suppressDefaultLog = false;
            AfterGetJsonWebToken(ref suppressDefaultLog, apiResponseLocalVar, expiryTimeInMins, maxExpiryTimeInMins);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="expiryTimeInMins"></param>
        /// <param name="maxExpiryTimeInMins"></param>
        partial void AfterGetJsonWebToken(ref bool suppressDefaultLog, IGetJsonWebTokenApiResponse apiResponseLocalVar, Option<int> expiryTimeInMins, Option<int> maxExpiryTimeInMins);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="expiryTimeInMins"></param>
        /// <param name="maxExpiryTimeInMins"></param>
        private void OnErrorGetJsonWebTokenDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> expiryTimeInMins, Option<int> maxExpiryTimeInMins)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetJsonWebToken(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, expiryTimeInMins, maxExpiryTimeInMins);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="expiryTimeInMins"></param>
        /// <param name="maxExpiryTimeInMins"></param>
        partial void OnErrorGetJsonWebToken(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> expiryTimeInMins, Option<int> maxExpiryTimeInMins);

        /// <summary>
        ///  Retrieve JSON Web Token
        /// </summary>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonWebTokenApiResponse"/>&gt;</returns>
        public async Task<IGetJsonWebTokenApiResponse?> GetJsonWebTokenOrDefaultAsync(Option<int> expiryTimeInMins = default, Option<int> maxExpiryTimeInMins = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetJsonWebTokenAsync(expiryTimeInMins, maxExpiryTimeInMins, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve JSON Web Token
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes (optional)</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetJsonWebTokenApiResponse"/>&gt;</returns>
        public async Task<IGetJsonWebTokenApiResponse> GetJsonWebTokenAsync(Option<int> expiryTimeInMins = default, Option<int> maxExpiryTimeInMins = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatGetJsonWebToken(ref expiryTimeInMins, ref maxExpiryTimeInMins);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/jwt-auth/token";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (expiryTimeInMins.IsSet)
                        parseQueryStringLocalVar["expiryTimeInMins"] = ClientUtils.ParameterToString(expiryTimeInMins.Value);

                    if (maxExpiryTimeInMins.IsSet)
                        parseQueryStringLocalVar["maxExpiryTimeInMins"] = ClientUtils.ParameterToString(maxExpiryTimeInMins.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetJsonWebTokenApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetJsonWebTokenApiResponse>();

                        GetJsonWebTokenApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/jwt-auth/token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetJsonWebTokenDefaultImplementation(apiResponseLocalVar, expiryTimeInMins, maxExpiryTimeInMins);

                        Events.ExecuteOnGetJsonWebToken(apiResponseLocalVar);

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetJsonWebTokenDefaultImplementation(e, "/jwt-auth/token", uriBuilderLocalVar.Path, expiryTimeInMins, maxExpiryTimeInMins);
                Events.ExecuteOnErrorGetJsonWebToken(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetJsonWebTokenApiResponse"/>
        /// </summary>
        public partial class GetJsonWebTokenApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetJsonWebTokenApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetJsonWebTokenApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetJsonWebTokenApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetJsonWebTokenApiResponse(ILogger<GetJsonWebTokenApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetOrganisation(ref string organization);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <returns></returns>
        private void ValidateGetOrganisation(string organization)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        private void AfterGetOrganisationDefaultImplementation(IGetOrganisationApiResponse apiResponseLocalVar, string organization)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganisation(ref suppressDefaultLog, apiResponseLocalVar, organization);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        partial void AfterGetOrganisation(ref bool suppressDefaultLog, IGetOrganisationApiResponse apiResponseLocalVar, string organization);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        private void OnErrorGetOrganisationDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganisation(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        partial void OnErrorGetOrganisation(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization);

        /// <summary>
        ///  Retrieve organization details
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganisationApiResponse"/>&gt;</returns>
        public async Task<IGetOrganisationApiResponse?> GetOrganisationOrDefaultAsync(string organization, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganisationAsync(organization, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve organization details
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganisationApiResponse"/>&gt;</returns>
        public async Task<IGetOrganisationApiResponse> GetOrganisationAsync(string organization, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetOrganisation(organization);

                FormatGetOrganisation(ref organization);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOrganisationApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganisationApiResponse>();

                        GetOrganisationApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOrganisationDefaultImplementation(apiResponseLocalVar, organization);

                        Events.ExecuteOnGetOrganisation(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganisationDefaultImplementation(e, "/blue/rest/organizations/{organization}", uriBuilderLocalVar.Path, organization);
                Events.ExecuteOnErrorGetOrganisation(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganisationApiResponse"/>
        /// </summary>
        public partial class GetOrganisationApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOrganisationApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganisationApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganisationApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganisationApiResponse(ILogger<GetOrganisationApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Organisation? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Organisation>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Organisation? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        private void AfterGetOrganisationsDefaultImplementation(IGetOrganisationsApiResponse apiResponseLocalVar)
        {
            bool suppressDefaultLog = false;
            AfterGetOrganisations(ref suppressDefaultLog, apiResponseLocalVar);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        partial void AfterGetOrganisations(ref bool suppressDefaultLog, IGetOrganisationsApiResponse apiResponseLocalVar);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        private void OnErrorGetOrganisationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetOrganisations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        partial void OnErrorGetOrganisations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar);

        /// <summary>
        ///  Retrieve all organizations details
        /// </summary>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganisationsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganisationsApiResponse?> GetOrganisationsOrDefaultAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetOrganisationsAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve all organizations details
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetOrganisationsApiResponse"/>&gt;</returns>
        public async Task<IGetOrganisationsApiResponse> GetOrganisationsAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/";

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetOrganisationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetOrganisationsApiResponse>();

                        GetOrganisationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetOrganisationsDefaultImplementation(apiResponseLocalVar);

                        Events.ExecuteOnGetOrganisations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetOrganisationsDefaultImplementation(e, "/blue/rest/organizations/", uriBuilderLocalVar.Path);
                Events.ExecuteOnErrorGetOrganisations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetOrganisationsApiResponse"/>
        /// </summary>
        public partial class GetOrganisationsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetOrganisationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetOrganisationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetOrganisationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetOrganisationsApiResponse(ILogger<GetOrganisationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Organisation>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Organisation>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Organisation>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipeline(ref string organization, ref string pipeline);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <returns></returns>
        private void ValidateGetPipeline(string organization, string pipeline)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void AfterGetPipelineDefaultImplementation(IGetPipelineApiResponse apiResponseLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLog = false;
            AfterGetPipeline(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void AfterGetPipeline(ref bool suppressDefaultLog, IGetPipelineApiResponse apiResponseLocalVar, string organization, string pipeline);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void OnErrorGetPipelineDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipeline(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void OnErrorGetPipeline(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline);

        /// <summary>
        ///  Retrieve pipeline details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineApiResponse?> GetPipelineOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineAsync(organization, pipeline, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve pipeline details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineApiResponse> GetPipelineAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipeline(organization, pipeline);

                FormatGetPipeline(ref organization, ref pipeline);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineApiResponse>();

                        GetPipelineApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineDefaultImplementation(apiResponseLocalVar, organization, pipeline);

                        Events.ExecuteOnGetPipeline(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}", uriBuilderLocalVar.Path, organization, pipeline);
                Events.ExecuteOnErrorGetPipeline(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineApiResponse"/>
        /// </summary>
        public partial class GetPipelineApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineApiResponse(ILogger<GetPipelineApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.Pipeline? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.Pipeline>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.Pipeline? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineActivities(ref string organization, ref string pipeline);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <returns></returns>
        private void ValidateGetPipelineActivities(string organization, string pipeline)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void AfterGetPipelineActivitiesDefaultImplementation(IGetPipelineActivitiesApiResponse apiResponseLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineActivities(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void AfterGetPipelineActivities(ref bool suppressDefaultLog, IGetPipelineActivitiesApiResponse apiResponseLocalVar, string organization, string pipeline);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void OnErrorGetPipelineActivitiesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineActivities(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void OnErrorGetPipelineActivities(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline);

        /// <summary>
        ///  Retrieve all activities details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineActivitiesApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineActivitiesApiResponse?> GetPipelineActivitiesOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineActivitiesAsync(organization, pipeline, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve all activities details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineActivitiesApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineActivitiesApiResponse> GetPipelineActivitiesAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineActivities(organization, pipeline);

                FormatGetPipelineActivities(ref organization, ref pipeline);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineActivitiesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineActivitiesApiResponse>();

                        GetPipelineActivitiesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineActivitiesDefaultImplementation(apiResponseLocalVar, organization, pipeline);

                        Events.ExecuteOnGetPipelineActivities(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineActivitiesDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities", uriBuilderLocalVar.Path, organization, pipeline);
                Events.ExecuteOnErrorGetPipelineActivities(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineActivitiesApiResponse"/>
        /// </summary>
        public partial class GetPipelineActivitiesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineActivitiesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineActivitiesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineActivitiesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineActivitiesApiResponse(ILogger<GetPipelineActivitiesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PipelineActivity>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PipelineActivity>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PipelineActivity>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineBranch(ref string organization, ref string pipeline, ref string branch);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        /// <returns></returns>
        private void ValidateGetPipelineBranch(string organization, string pipeline, string branch)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (branch == null)
                throw new ArgumentNullException(nameof(branch));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        private void AfterGetPipelineBranchDefaultImplementation(IGetPipelineBranchApiResponse apiResponseLocalVar, string organization, string pipeline, string branch)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineBranch(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, branch);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        partial void AfterGetPipelineBranch(ref bool suppressDefaultLog, IGetPipelineBranchApiResponse apiResponseLocalVar, string organization, string pipeline, string branch);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        private void OnErrorGetPipelineBranchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string branch)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineBranch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, branch);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        partial void OnErrorGetPipelineBranch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string branch);

        /// <summary>
        ///  Retrieve branch details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineBranchApiResponse?> GetPipelineBranchOrDefaultAsync(string organization, string pipeline, string branch, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineBranchAsync(organization, pipeline, branch, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve branch details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineBranchApiResponse> GetPipelineBranchAsync(string organization, string pipeline, string branch, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineBranch(organization, pipeline, branch);

                FormatGetPipelineBranch(ref organization, ref pipeline, ref branch);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bbranch%7D", Uri.EscapeDataString(branch.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineBranchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineBranchApiResponse>();

                        GetPipelineBranchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineBranchDefaultImplementation(apiResponseLocalVar, organization, pipeline, branch);

                        Events.ExecuteOnGetPipelineBranch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineBranchDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/", uriBuilderLocalVar.Path, organization, pipeline, branch);
                Events.ExecuteOnErrorGetPipelineBranch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineBranchApiResponse"/>
        /// </summary>
        public partial class GetPipelineBranchApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineBranchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineBranchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineBranchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineBranchApiResponse(ILogger<GetPipelineBranchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.BranchImpl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.BranchImpl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.BranchImpl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineBranchRun(ref string organization, ref string pipeline, ref string branch, ref string run);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        /// <param name="run"></param>
        /// <returns></returns>
        private void ValidateGetPipelineBranchRun(string organization, string pipeline, string branch, string run)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (branch == null)
                throw new ArgumentNullException(nameof(branch));

            if (run == null)
                throw new ArgumentNullException(nameof(run));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        /// <param name="run"></param>
        private void AfterGetPipelineBranchRunDefaultImplementation(IGetPipelineBranchRunApiResponse apiResponseLocalVar, string organization, string pipeline, string branch, string run)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineBranchRun(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, branch, run);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        /// <param name="run"></param>
        partial void AfterGetPipelineBranchRun(ref bool suppressDefaultLog, IGetPipelineBranchRunApiResponse apiResponseLocalVar, string organization, string pipeline, string branch, string run);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        /// <param name="run"></param>
        private void OnErrorGetPipelineBranchRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string branch, string run)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineBranchRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, branch, run);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="branch"></param>
        /// <param name="run"></param>
        partial void OnErrorGetPipelineBranchRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string branch, string run);

        /// <summary>
        ///  Retrieve branch run details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchRunApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineBranchRunApiResponse?> GetPipelineBranchRunOrDefaultAsync(string organization, string pipeline, string branch, string run, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineBranchRunAsync(organization, pipeline, branch, run, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve branch run details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchRunApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineBranchRunApiResponse> GetPipelineBranchRunAsync(string organization, string pipeline, string branch, string run, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineBranchRun(organization, pipeline, branch, run);

                FormatGetPipelineBranchRun(ref organization, ref pipeline, ref branch, ref run);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bbranch%7D", Uri.EscapeDataString(branch.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineBranchRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineBranchRunApiResponse>();

                        GetPipelineBranchRunApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineBranchRunDefaultImplementation(apiResponseLocalVar, organization, pipeline, branch, run);

                        Events.ExecuteOnGetPipelineBranchRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineBranchRunDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}", uriBuilderLocalVar.Path, organization, pipeline, branch, run);
                Events.ExecuteOnErrorGetPipelineBranchRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineBranchRunApiResponse"/>
        /// </summary>
        public partial class GetPipelineBranchRunApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineBranchRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineBranchRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineBranchRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineBranchRunApiResponse(ILogger<GetPipelineBranchRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PipelineRun? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PipelineRun>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PipelineRun? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineBranches(ref string organization, ref string pipeline);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <returns></returns>
        private void ValidateGetPipelineBranches(string organization, string pipeline)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void AfterGetPipelineBranchesDefaultImplementation(IGetPipelineBranchesApiResponse apiResponseLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineBranches(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void AfterGetPipelineBranches(ref bool suppressDefaultLog, IGetPipelineBranchesApiResponse apiResponseLocalVar, string organization, string pipeline);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void OnErrorGetPipelineBranchesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineBranches(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void OnErrorGetPipelineBranches(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline);

        /// <summary>
        ///  Retrieve all branches details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchesApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineBranchesApiResponse?> GetPipelineBranchesOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineBranchesAsync(organization, pipeline, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve all branches details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineBranchesApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineBranchesApiResponse> GetPipelineBranchesAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineBranches(organization, pipeline);

                FormatGetPipelineBranches(ref organization, ref pipeline);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineBranchesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineBranchesApiResponse>();

                        GetPipelineBranchesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineBranchesDefaultImplementation(apiResponseLocalVar, organization, pipeline);

                        Events.ExecuteOnGetPipelineBranches(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineBranchesDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches", uriBuilderLocalVar.Path, organization, pipeline);
                Events.ExecuteOnErrorGetPipelineBranches(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineBranchesApiResponse"/>
        /// </summary>
        public partial class GetPipelineBranchesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineBranchesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineBranchesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineBranchesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineBranchesApiResponse(ILogger<GetPipelineBranchesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.MultibranchPipeline? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.MultibranchPipeline>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.MultibranchPipeline? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineFolder(ref string organization, ref string folder);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="folder"></param>
        /// <returns></returns>
        private void ValidateGetPipelineFolder(string organization, string folder)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (folder == null)
                throw new ArgumentNullException(nameof(folder));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="folder"></param>
        private void AfterGetPipelineFolderDefaultImplementation(IGetPipelineFolderApiResponse apiResponseLocalVar, string organization, string folder)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineFolder(ref suppressDefaultLog, apiResponseLocalVar, organization, folder);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="folder"></param>
        partial void AfterGetPipelineFolder(ref bool suppressDefaultLog, IGetPipelineFolderApiResponse apiResponseLocalVar, string organization, string folder);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="folder"></param>
        private void OnErrorGetPipelineFolderDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string folder)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineFolder(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, folder);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="folder"></param>
        partial void OnErrorGetPipelineFolder(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string folder);

        /// <summary>
        ///  Retrieve pipeline folder for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineFolderApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineFolderApiResponse?> GetPipelineFolderOrDefaultAsync(string organization, string folder, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineFolderAsync(organization, folder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve pipeline folder for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineFolderApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineFolderApiResponse> GetPipelineFolderAsync(string organization, string folder, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineFolder(organization, folder);

                FormatGetPipelineFolder(ref organization, ref folder);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{folder}/";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfolder%7D", Uri.EscapeDataString(folder.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineFolderApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineFolderApiResponse>();

                        GetPipelineFolderApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{folder}/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineFolderDefaultImplementation(apiResponseLocalVar, organization, folder);

                        Events.ExecuteOnGetPipelineFolder(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineFolderDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{folder}/", uriBuilderLocalVar.Path, organization, folder);
                Events.ExecuteOnErrorGetPipelineFolder(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineFolderApiResponse"/>
        /// </summary>
        public partial class GetPipelineFolderApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineFolderApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineFolderApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineFolderApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineFolderApiResponse(ILogger<GetPipelineFolderApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PipelineFolderImpl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PipelineFolderImpl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PipelineFolderImpl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineFolderPipeline(ref string organization, ref string pipeline, ref string folder);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="folder"></param>
        /// <returns></returns>
        private void ValidateGetPipelineFolderPipeline(string organization, string pipeline, string folder)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (folder == null)
                throw new ArgumentNullException(nameof(folder));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="folder"></param>
        private void AfterGetPipelineFolderPipelineDefaultImplementation(IGetPipelineFolderPipelineApiResponse apiResponseLocalVar, string organization, string pipeline, string folder)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineFolderPipeline(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, folder);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="folder"></param>
        partial void AfterGetPipelineFolderPipeline(ref bool suppressDefaultLog, IGetPipelineFolderPipelineApiResponse apiResponseLocalVar, string organization, string pipeline, string folder);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="folder"></param>
        private void OnErrorGetPipelineFolderPipelineDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string folder)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineFolderPipeline(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, folder);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="folder"></param>
        partial void OnErrorGetPipelineFolderPipeline(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string folder);

        /// <summary>
        ///  Retrieve pipeline details for an organization folder
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineFolderPipelineApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineFolderPipelineApiResponse?> GetPipelineFolderPipelineOrDefaultAsync(string organization, string pipeline, string folder, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineFolderPipelineAsync(organization, pipeline, folder, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve pipeline details for an organization folder
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineFolderPipelineApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineFolderPipelineApiResponse> GetPipelineFolderPipelineAsync(string organization, string pipeline, string folder, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineFolderPipeline(organization, pipeline, folder);

                FormatGetPipelineFolderPipeline(ref organization, ref pipeline, ref folder);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bfolder%7D", Uri.EscapeDataString(folder.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineFolderPipelineApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineFolderPipelineApiResponse>();

                        GetPipelineFolderPipelineApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineFolderPipelineDefaultImplementation(apiResponseLocalVar, organization, pipeline, folder);

                        Events.ExecuteOnGetPipelineFolderPipeline(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineFolderPipelineDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}", uriBuilderLocalVar.Path, organization, pipeline, folder);
                Events.ExecuteOnErrorGetPipelineFolderPipeline(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineFolderPipelineApiResponse"/>
        /// </summary>
        public partial class GetPipelineFolderPipelineApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineFolderPipelineApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineFolderPipelineApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineFolderPipelineApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineFolderPipelineApiResponse(ILogger<GetPipelineFolderPipelineApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PipelineImpl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PipelineImpl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PipelineImpl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineQueue(ref string organization, ref string pipeline);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <returns></returns>
        private void ValidateGetPipelineQueue(string organization, string pipeline)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void AfterGetPipelineQueueDefaultImplementation(IGetPipelineQueueApiResponse apiResponseLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineQueue(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void AfterGetPipelineQueue(ref bool suppressDefaultLog, IGetPipelineQueueApiResponse apiResponseLocalVar, string organization, string pipeline);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void OnErrorGetPipelineQueueDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineQueue(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void OnErrorGetPipelineQueue(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline);

        /// <summary>
        ///  Retrieve queue details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineQueueApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineQueueApiResponse?> GetPipelineQueueOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineQueueAsync(organization, pipeline, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve queue details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineQueueApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineQueueApiResponse> GetPipelineQueueAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineQueue(organization, pipeline);

                FormatGetPipelineQueue(ref organization, ref pipeline);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineQueueApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineQueueApiResponse>();

                        GetPipelineQueueApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineQueueDefaultImplementation(apiResponseLocalVar, organization, pipeline);

                        Events.ExecuteOnGetPipelineQueue(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineQueueDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue", uriBuilderLocalVar.Path, organization, pipeline);
                Events.ExecuteOnErrorGetPipelineQueue(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineQueueApiResponse"/>
        /// </summary>
        public partial class GetPipelineQueueApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineQueueApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineQueueApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineQueueApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineQueueApiResponse(ILogger<GetPipelineQueueApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<QueueItemImpl>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<QueueItemImpl>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<QueueItemImpl>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineRun(ref string organization, ref string pipeline, ref string run);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <returns></returns>
        private void ValidateGetPipelineRun(string organization, string pipeline, string run)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        private void AfterGetPipelineRunDefaultImplementation(IGetPipelineRunApiResponse apiResponseLocalVar, string organization, string pipeline, string run)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineRun(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        partial void AfterGetPipelineRun(ref bool suppressDefaultLog, IGetPipelineRunApiResponse apiResponseLocalVar, string organization, string pipeline, string run);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        private void OnErrorGetPipelineRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        partial void OnErrorGetPipelineRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run);

        /// <summary>
        ///  Retrieve run details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunApiResponse?> GetPipelineRunOrDefaultAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineRunAsync(organization, pipeline, run, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve run details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunApiResponse> GetPipelineRunAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineRun(organization, pipeline, run);

                FormatGetPipelineRun(ref organization, ref pipeline, ref run);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineRunApiResponse>();

                        GetPipelineRunApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineRunDefaultImplementation(apiResponseLocalVar, organization, pipeline, run);

                        Events.ExecuteOnGetPipelineRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineRunDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}", uriBuilderLocalVar.Path, organization, pipeline, run);
                Events.ExecuteOnErrorGetPipelineRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineRunApiResponse"/>
        /// </summary>
        public partial class GetPipelineRunApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineRunApiResponse(ILogger<GetPipelineRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PipelineRun? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PipelineRun>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PipelineRun? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineRunLog(ref string organization, ref string pipeline, ref string run, ref Option<int> start, ref Option<bool> download);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <returns></returns>
        private void ValidateGetPipelineRunLog(string organization, string pipeline, string run)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="start"></param>
        /// <param name="download"></param>
        private void AfterGetPipelineRunLogDefaultImplementation(IGetPipelineRunLogApiResponse apiResponseLocalVar, string organization, string pipeline, string run, Option<int> start, Option<bool> download)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineRunLog(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run, start, download);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="start"></param>
        /// <param name="download"></param>
        partial void AfterGetPipelineRunLog(ref bool suppressDefaultLog, IGetPipelineRunLogApiResponse apiResponseLocalVar, string organization, string pipeline, string run, Option<int> start, Option<bool> download);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="start"></param>
        /// <param name="download"></param>
        private void OnErrorGetPipelineRunLogDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, Option<int> start, Option<bool> download)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineRunLog(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run, start, download);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="start"></param>
        /// <param name="download"></param>
        partial void OnErrorGetPipelineRunLog(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, Option<int> start, Option<bool> download);

        /// <summary>
        ///  Get log for a pipeline run
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunLogApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunLogApiResponse?> GetPipelineRunLogOrDefaultAsync(string organization, string pipeline, string run, Option<int> start = default, Option<bool> download = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineRunLogAsync(organization, pipeline, run, start, download, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get log for a pipeline run
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log (optional)</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunLogApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunLogApiResponse> GetPipelineRunLogAsync(string organization, string pipeline, string run, Option<int> start = default, Option<bool> download = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineRunLog(organization, pipeline, run);

                FormatGetPipelineRunLog(ref organization, ref pipeline, ref run, ref start, ref download);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (start.IsSet)
                        parseQueryStringLocalVar["start"] = ClientUtils.ParameterToString(start.Value);

                    if (download.IsSet)
                        parseQueryStringLocalVar["download"] = ClientUtils.ParameterToString(download.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineRunLogApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineRunLogApiResponse>();

                        GetPipelineRunLogApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineRunLogDefaultImplementation(apiResponseLocalVar, organization, pipeline, run, start, download);

                        Events.ExecuteOnGetPipelineRunLog(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineRunLogDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log", uriBuilderLocalVar.Path, organization, pipeline, run, start, download);
                Events.ExecuteOnErrorGetPipelineRunLog(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineRunLogApiResponse"/>
        /// </summary>
        public partial class GetPipelineRunLogApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineRunLogApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineRunLogApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineRunLogApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineRunLogApiResponse(ILogger<GetPipelineRunLogApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineRunNode(ref string organization, ref string pipeline, ref string run, ref string node);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <returns></returns>
        private void ValidateGetPipelineRunNode(string organization, string pipeline, string run, string node)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));

            if (node == null)
                throw new ArgumentNullException(nameof(node));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        private void AfterGetPipelineRunNodeDefaultImplementation(IGetPipelineRunNodeApiResponse apiResponseLocalVar, string organization, string pipeline, string run, string node)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineRunNode(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run, node);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        partial void AfterGetPipelineRunNode(ref bool suppressDefaultLog, IGetPipelineRunNodeApiResponse apiResponseLocalVar, string organization, string pipeline, string run, string node);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        private void OnErrorGetPipelineRunNodeDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, string node)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineRunNode(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run, node);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        partial void OnErrorGetPipelineRunNode(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, string node);

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodeApiResponse?> GetPipelineRunNodeOrDefaultAsync(string organization, string pipeline, string run, string node, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineRunNodeAsync(organization, pipeline, run, node, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodeApiResponse> GetPipelineRunNodeAsync(string organization, string pipeline, string run, string node, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineRunNode(organization, pipeline, run, node);

                FormatGetPipelineRunNode(ref organization, ref pipeline, ref run, ref node);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnode%7D", Uri.EscapeDataString(node.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineRunNodeApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineRunNodeApiResponse>();

                        GetPipelineRunNodeApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineRunNodeDefaultImplementation(apiResponseLocalVar, organization, pipeline, run, node);

                        Events.ExecuteOnGetPipelineRunNode(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineRunNodeDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}", uriBuilderLocalVar.Path, organization, pipeline, run, node);
                Events.ExecuteOnErrorGetPipelineRunNode(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineRunNodeApiResponse"/>
        /// </summary>
        public partial class GetPipelineRunNodeApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineRunNodeApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineRunNodeApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineRunNodeApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineRunNodeApiResponse(ILogger<GetPipelineRunNodeApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PipelineRunNode? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PipelineRunNode>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PipelineRunNode? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineRunNodeStep(ref string organization, ref string pipeline, ref string run, ref string node, ref string step);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        /// <returns></returns>
        private void ValidateGetPipelineRunNodeStep(string organization, string pipeline, string run, string node, string step)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));

            if (node == null)
                throw new ArgumentNullException(nameof(node));

            if (step == null)
                throw new ArgumentNullException(nameof(step));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        private void AfterGetPipelineRunNodeStepDefaultImplementation(IGetPipelineRunNodeStepApiResponse apiResponseLocalVar, string organization, string pipeline, string run, string node, string step)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineRunNodeStep(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run, node, step);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        partial void AfterGetPipelineRunNodeStep(ref bool suppressDefaultLog, IGetPipelineRunNodeStepApiResponse apiResponseLocalVar, string organization, string pipeline, string run, string node, string step);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        private void OnErrorGetPipelineRunNodeStepDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, string node, string step)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineRunNodeStep(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run, node, step);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        partial void OnErrorGetPipelineRunNodeStep(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, string node, string step);

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodeStepApiResponse?> GetPipelineRunNodeStepOrDefaultAsync(string organization, string pipeline, string run, string node, string step, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineRunNodeStepAsync(organization, pipeline, run, node, step, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve run node details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodeStepApiResponse> GetPipelineRunNodeStepAsync(string organization, string pipeline, string run, string node, string step, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineRunNodeStep(organization, pipeline, run, node, step);

                FormatGetPipelineRunNodeStep(ref organization, ref pipeline, ref run, ref node, ref step);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnode%7D", Uri.EscapeDataString(node.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bstep%7D", Uri.EscapeDataString(step.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineRunNodeStepApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineRunNodeStepApiResponse>();

                        GetPipelineRunNodeStepApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineRunNodeStepDefaultImplementation(apiResponseLocalVar, organization, pipeline, run, node, step);

                        Events.ExecuteOnGetPipelineRunNodeStep(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineRunNodeStepDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}", uriBuilderLocalVar.Path, organization, pipeline, run, node, step);
                Events.ExecuteOnErrorGetPipelineRunNodeStep(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineRunNodeStepApiResponse"/>
        /// </summary>
        public partial class GetPipelineRunNodeStepApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineRunNodeStepApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineRunNodeStepApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineRunNodeStepApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineRunNodeStepApiResponse(ILogger<GetPipelineRunNodeStepApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PipelineStepImpl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PipelineStepImpl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PipelineStepImpl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineRunNodeStepLog(ref string organization, ref string pipeline, ref string run, ref string node, ref string step);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        /// <returns></returns>
        private void ValidateGetPipelineRunNodeStepLog(string organization, string pipeline, string run, string node, string step)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));

            if (node == null)
                throw new ArgumentNullException(nameof(node));

            if (step == null)
                throw new ArgumentNullException(nameof(step));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        private void AfterGetPipelineRunNodeStepLogDefaultImplementation(IGetPipelineRunNodeStepLogApiResponse apiResponseLocalVar, string organization, string pipeline, string run, string node, string step)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineRunNodeStepLog(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run, node, step);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        partial void AfterGetPipelineRunNodeStepLog(ref bool suppressDefaultLog, IGetPipelineRunNodeStepLogApiResponse apiResponseLocalVar, string organization, string pipeline, string run, string node, string step);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        private void OnErrorGetPipelineRunNodeStepLogDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, string node, string step)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineRunNodeStepLog(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run, node, step);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <param name="step"></param>
        partial void OnErrorGetPipelineRunNodeStepLog(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, string node, string step);

        /// <summary>
        ///  Get log for a pipeline run node step
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepLogApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodeStepLogApiResponse?> GetPipelineRunNodeStepLogOrDefaultAsync(string organization, string pipeline, string run, string node, string step, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineRunNodeStepLogAsync(organization, pipeline, run, node, step, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get log for a pipeline run node step
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepLogApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodeStepLogApiResponse> GetPipelineRunNodeStepLogAsync(string organization, string pipeline, string run, string node, string step, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineRunNodeStepLog(organization, pipeline, run, node, step);

                FormatGetPipelineRunNodeStepLog(ref organization, ref pipeline, ref run, ref node, ref step);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnode%7D", Uri.EscapeDataString(node.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bstep%7D", Uri.EscapeDataString(step.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineRunNodeStepLogApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineRunNodeStepLogApiResponse>();

                        GetPipelineRunNodeStepLogApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineRunNodeStepLogDefaultImplementation(apiResponseLocalVar, organization, pipeline, run, node, step);

                        Events.ExecuteOnGetPipelineRunNodeStepLog(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineRunNodeStepLogDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log", uriBuilderLocalVar.Path, organization, pipeline, run, node, step);
                Events.ExecuteOnErrorGetPipelineRunNodeStepLog(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineRunNodeStepLogApiResponse"/>
        /// </summary>
        public partial class GetPipelineRunNodeStepLogApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineRunNodeStepLogApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineRunNodeStepLogApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineRunNodeStepLogApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineRunNodeStepLogApiResponse(ILogger<GetPipelineRunNodeStepLogApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineRunNodeSteps(ref string organization, ref string pipeline, ref string run, ref string node);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        /// <returns></returns>
        private void ValidateGetPipelineRunNodeSteps(string organization, string pipeline, string run, string node)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));

            if (node == null)
                throw new ArgumentNullException(nameof(node));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        private void AfterGetPipelineRunNodeStepsDefaultImplementation(IGetPipelineRunNodeStepsApiResponse apiResponseLocalVar, string organization, string pipeline, string run, string node)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineRunNodeSteps(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run, node);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        partial void AfterGetPipelineRunNodeSteps(ref bool suppressDefaultLog, IGetPipelineRunNodeStepsApiResponse apiResponseLocalVar, string organization, string pipeline, string run, string node);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        private void OnErrorGetPipelineRunNodeStepsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, string node)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineRunNodeSteps(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run, node);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="node"></param>
        partial void OnErrorGetPipelineRunNodeSteps(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, string node);

        /// <summary>
        ///  Retrieve run node steps details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepsApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodeStepsApiResponse?> GetPipelineRunNodeStepsOrDefaultAsync(string organization, string pipeline, string run, string node, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineRunNodeStepsAsync(organization, pipeline, run, node, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve run node steps details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodeStepsApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodeStepsApiResponse> GetPipelineRunNodeStepsAsync(string organization, string pipeline, string run, string node, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineRunNodeSteps(organization, pipeline, run, node);

                FormatGetPipelineRunNodeSteps(ref organization, ref pipeline, ref run, ref node);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bnode%7D", Uri.EscapeDataString(node.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineRunNodeStepsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineRunNodeStepsApiResponse>();

                        GetPipelineRunNodeStepsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineRunNodeStepsDefaultImplementation(apiResponseLocalVar, organization, pipeline, run, node);

                        Events.ExecuteOnGetPipelineRunNodeSteps(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineRunNodeStepsDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps", uriBuilderLocalVar.Path, organization, pipeline, run, node);
                Events.ExecuteOnErrorGetPipelineRunNodeSteps(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineRunNodeStepsApiResponse"/>
        /// </summary>
        public partial class GetPipelineRunNodeStepsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineRunNodeStepsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineRunNodeStepsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineRunNodeStepsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineRunNodeStepsApiResponse(ILogger<GetPipelineRunNodeStepsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PipelineStepImpl>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PipelineStepImpl>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PipelineStepImpl>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineRunNodes(ref string organization, ref string pipeline, ref string run);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <returns></returns>
        private void ValidateGetPipelineRunNodes(string organization, string pipeline, string run)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        private void AfterGetPipelineRunNodesDefaultImplementation(IGetPipelineRunNodesApiResponse apiResponseLocalVar, string organization, string pipeline, string run)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineRunNodes(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        partial void AfterGetPipelineRunNodes(ref bool suppressDefaultLog, IGetPipelineRunNodesApiResponse apiResponseLocalVar, string organization, string pipeline, string run);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        private void OnErrorGetPipelineRunNodesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineRunNodes(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        partial void OnErrorGetPipelineRunNodes(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run);

        /// <summary>
        ///  Retrieve run nodes details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodesApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodesApiResponse?> GetPipelineRunNodesOrDefaultAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineRunNodesAsync(organization, pipeline, run, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve run nodes details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunNodesApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunNodesApiResponse> GetPipelineRunNodesAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineRunNodes(organization, pipeline, run);

                FormatGetPipelineRunNodes(ref organization, ref pipeline, ref run);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineRunNodesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineRunNodesApiResponse>();

                        GetPipelineRunNodesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineRunNodesDefaultImplementation(apiResponseLocalVar, organization, pipeline, run);

                        Events.ExecuteOnGetPipelineRunNodes(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineRunNodesDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes", uriBuilderLocalVar.Path, organization, pipeline, run);
                Events.ExecuteOnErrorGetPipelineRunNodes(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineRunNodesApiResponse"/>
        /// </summary>
        public partial class GetPipelineRunNodesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineRunNodesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineRunNodesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineRunNodesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineRunNodesApiResponse(ILogger<GetPipelineRunNodesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PipelineRunNode>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PipelineRunNode>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PipelineRunNode>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelineRuns(ref string organization, ref string pipeline);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <returns></returns>
        private void ValidateGetPipelineRuns(string organization, string pipeline)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void AfterGetPipelineRunsDefaultImplementation(IGetPipelineRunsApiResponse apiResponseLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelineRuns(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void AfterGetPipelineRuns(ref bool suppressDefaultLog, IGetPipelineRunsApiResponse apiResponseLocalVar, string organization, string pipeline);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void OnErrorGetPipelineRunsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelineRuns(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void OnErrorGetPipelineRuns(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline);

        /// <summary>
        ///  Retrieve all runs details for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunsApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunsApiResponse?> GetPipelineRunsOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelineRunsAsync(organization, pipeline, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve all runs details for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelineRunsApiResponse"/>&gt;</returns>
        public async Task<IGetPipelineRunsApiResponse> GetPipelineRunsAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelineRuns(organization, pipeline);

                FormatGetPipelineRuns(ref organization, ref pipeline);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelineRunsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelineRunsApiResponse>();

                        GetPipelineRunsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelineRunsDefaultImplementation(apiResponseLocalVar, organization, pipeline);

                        Events.ExecuteOnGetPipelineRuns(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelineRunsDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs", uriBuilderLocalVar.Path, organization, pipeline);
                Events.ExecuteOnErrorGetPipelineRuns(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelineRunsApiResponse"/>
        /// </summary>
        public partial class GetPipelineRunsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelineRunsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelineRunsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelineRunsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelineRunsApiResponse(ILogger<GetPipelineRunsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<PipelineRun>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<PipelineRun>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<PipelineRun>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetPipelines(ref string organization);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <returns></returns>
        private void ValidateGetPipelines(string organization)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        private void AfterGetPipelinesDefaultImplementation(IGetPipelinesApiResponse apiResponseLocalVar, string organization)
        {
            bool suppressDefaultLog = false;
            AfterGetPipelines(ref suppressDefaultLog, apiResponseLocalVar, organization);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        partial void AfterGetPipelines(ref bool suppressDefaultLog, IGetPipelinesApiResponse apiResponseLocalVar, string organization);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        private void OnErrorGetPipelinesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetPipelines(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        partial void OnErrorGetPipelines(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization);

        /// <summary>
        ///  Retrieve all pipelines details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesApiResponse"/>&gt;</returns>
        public async Task<IGetPipelinesApiResponse?> GetPipelinesOrDefaultAsync(string organization, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetPipelinesAsync(organization, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve all pipelines details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetPipelinesApiResponse"/>&gt;</returns>
        public async Task<IGetPipelinesApiResponse> GetPipelinesAsync(string organization, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetPipelines(organization);

                FormatGetPipelines(ref organization);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetPipelinesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetPipelinesApiResponse>();

                        GetPipelinesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetPipelinesDefaultImplementation(apiResponseLocalVar, organization);

                        Events.ExecuteOnGetPipelines(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetPipelinesDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/", uriBuilderLocalVar.Path, organization);
                Events.ExecuteOnErrorGetPipelines(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetPipelinesApiResponse"/>
        /// </summary>
        public partial class GetPipelinesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetPipelinesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetPipelinesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetPipelinesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetPipelinesApiResponse(ILogger<GetPipelinesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<Pipeline>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<Pipeline>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<Pipeline>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSCM(ref string organization, ref string scm);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <returns></returns>
        private void ValidateGetSCM(string organization, string scm)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (scm == null)
                throw new ArgumentNullException(nameof(scm));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        private void AfterGetSCMDefaultImplementation(IGetSCMApiResponse apiResponseLocalVar, string organization, string scm)
        {
            bool suppressDefaultLog = false;
            AfterGetSCM(ref suppressDefaultLog, apiResponseLocalVar, organization, scm);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        partial void AfterGetSCM(ref bool suppressDefaultLog, IGetSCMApiResponse apiResponseLocalVar, string organization, string scm);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        private void OnErrorGetSCMDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string scm)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSCM(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, scm);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        partial void OnErrorGetSCM(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string scm);

        /// <summary>
        ///  Retrieve SCM details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMApiResponse"/>&gt;</returns>
        public async Task<IGetSCMApiResponse?> GetSCMOrDefaultAsync(string organization, string scm, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSCMAsync(organization, scm, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve SCM details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMApiResponse"/>&gt;</returns>
        public async Task<IGetSCMApiResponse> GetSCMAsync(string organization, string scm, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSCM(organization, scm);

                FormatGetSCM(ref organization, ref scm);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/scm/{scm}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bscm%7D", Uri.EscapeDataString(scm.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSCMApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSCMApiResponse>();

                        GetSCMApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/scm/{scm}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSCMDefaultImplementation(apiResponseLocalVar, organization, scm);

                        Events.ExecuteOnGetSCM(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSCMDefaultImplementation(e, "/blue/rest/organizations/{organization}/scm/{scm}", uriBuilderLocalVar.Path, organization, scm);
                Events.ExecuteOnErrorGetSCM(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSCMApiResponse"/>
        /// </summary>
        public partial class GetSCMApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSCMApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSCMApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSCMApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSCMApiResponse(ILogger<GetSCMApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.GithubScm? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.GithubScm>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.GithubScm? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSCMOrganisationRepositories(ref string organization, ref string scm, ref string scmOrganisation, ref Option<string> credentialId, ref Option<int> pageSize, ref Option<int> pageNumber);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="credentialId"></param>
        /// <returns></returns>
        private void ValidateGetSCMOrganisationRepositories(string organization, string scm, string scmOrganisation, Option<string> credentialId)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (scm == null)
                throw new ArgumentNullException(nameof(scm));

            if (scmOrganisation == null)
                throw new ArgumentNullException(nameof(scmOrganisation));

            if (credentialId.IsSet && credentialId.Value == null)
                throw new ArgumentNullException(nameof(credentialId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="credentialId"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        private void AfterGetSCMOrganisationRepositoriesDefaultImplementation(IGetSCMOrganisationRepositoriesApiResponse apiResponseLocalVar, string organization, string scm, string scmOrganisation, Option<string> credentialId, Option<int> pageSize, Option<int> pageNumber)
        {
            bool suppressDefaultLog = false;
            AfterGetSCMOrganisationRepositories(ref suppressDefaultLog, apiResponseLocalVar, organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="credentialId"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        partial void AfterGetSCMOrganisationRepositories(ref bool suppressDefaultLog, IGetSCMOrganisationRepositoriesApiResponse apiResponseLocalVar, string organization, string scm, string scmOrganisation, Option<string> credentialId, Option<int> pageSize, Option<int> pageNumber);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="credentialId"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        private void OnErrorGetSCMOrganisationRepositoriesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string scm, string scmOrganisation, Option<string> credentialId, Option<int> pageSize, Option<int> pageNumber)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSCMOrganisationRepositories(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="credentialId"></param>
        /// <param name="pageSize"></param>
        /// <param name="pageNumber"></param>
        partial void OnErrorGetSCMOrganisationRepositories(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string scm, string scmOrganisation, Option<string> credentialId, Option<int> pageSize, Option<int> pageNumber);

        /// <summary>
        ///  Retrieve SCM organization repositories details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationRepositoriesApiResponse"/>&gt;</returns>
        public async Task<IGetSCMOrganisationRepositoriesApiResponse?> GetSCMOrganisationRepositoriesOrDefaultAsync(string organization, string scm, string scmOrganisation, Option<string> credentialId = default, Option<int> pageSize = default, Option<int> pageNumber = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSCMOrganisationRepositoriesAsync(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve SCM organization repositories details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="pageSize">Number of items in a page (optional)</param>
        /// <param name="pageNumber">Page number (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationRepositoriesApiResponse"/>&gt;</returns>
        public async Task<IGetSCMOrganisationRepositoriesApiResponse> GetSCMOrganisationRepositoriesAsync(string organization, string scm, string scmOrganisation, Option<string> credentialId = default, Option<int> pageSize = default, Option<int> pageNumber = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSCMOrganisationRepositories(organization, scm, scmOrganisation, credentialId);

                FormatGetSCMOrganisationRepositories(ref organization, ref scm, ref scmOrganisation, ref credentialId, ref pageSize, ref pageNumber);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bscm%7D", Uri.EscapeDataString(scm.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BscmOrganisation%7D", Uri.EscapeDataString(scmOrganisation.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (credentialId.IsSet)
                        parseQueryStringLocalVar["credentialId"] = ClientUtils.ParameterToString(credentialId.Value);

                    if (pageSize.IsSet)
                        parseQueryStringLocalVar["pageSize"] = ClientUtils.ParameterToString(pageSize.Value);

                    if (pageNumber.IsSet)
                        parseQueryStringLocalVar["pageNumber"] = ClientUtils.ParameterToString(pageNumber.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSCMOrganisationRepositoriesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSCMOrganisationRepositoriesApiResponse>();

                        GetSCMOrganisationRepositoriesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSCMOrganisationRepositoriesDefaultImplementation(apiResponseLocalVar, organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);

                        Events.ExecuteOnGetSCMOrganisationRepositories(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSCMOrganisationRepositoriesDefaultImplementation(e, "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories", uriBuilderLocalVar.Path, organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
                Events.ExecuteOnErrorGetSCMOrganisationRepositories(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSCMOrganisationRepositoriesApiResponse"/>
        /// </summary>
        public partial class GetSCMOrganisationRepositoriesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSCMOrganisationRepositoriesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSCMOrganisationRepositoriesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSCMOrganisationRepositoriesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSCMOrganisationRepositoriesApiResponse(ILogger<GetSCMOrganisationRepositoriesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<GithubOrganization>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<GithubOrganization>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<GithubOrganization>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSCMOrganisationRepository(ref string organization, ref string scm, ref string scmOrganisation, ref string repository, ref Option<string> credentialId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="repository"></param>
        /// <param name="credentialId"></param>
        /// <returns></returns>
        private void ValidateGetSCMOrganisationRepository(string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (scm == null)
                throw new ArgumentNullException(nameof(scm));

            if (scmOrganisation == null)
                throw new ArgumentNullException(nameof(scmOrganisation));

            if (repository == null)
                throw new ArgumentNullException(nameof(repository));

            if (credentialId.IsSet && credentialId.Value == null)
                throw new ArgumentNullException(nameof(credentialId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="repository"></param>
        /// <param name="credentialId"></param>
        private void AfterGetSCMOrganisationRepositoryDefaultImplementation(IGetSCMOrganisationRepositoryApiResponse apiResponseLocalVar, string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId)
        {
            bool suppressDefaultLog = false;
            AfterGetSCMOrganisationRepository(ref suppressDefaultLog, apiResponseLocalVar, organization, scm, scmOrganisation, repository, credentialId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="repository"></param>
        /// <param name="credentialId"></param>
        partial void AfterGetSCMOrganisationRepository(ref bool suppressDefaultLog, IGetSCMOrganisationRepositoryApiResponse apiResponseLocalVar, string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="repository"></param>
        /// <param name="credentialId"></param>
        private void OnErrorGetSCMOrganisationRepositoryDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSCMOrganisationRepository(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, scm, scmOrganisation, repository, credentialId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="scmOrganisation"></param>
        /// <param name="repository"></param>
        /// <param name="credentialId"></param>
        partial void OnErrorGetSCMOrganisationRepository(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId);

        /// <summary>
        ///  Retrieve SCM organization repository details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationRepositoryApiResponse"/>&gt;</returns>
        public async Task<IGetSCMOrganisationRepositoryApiResponse?> GetSCMOrganisationRepositoryOrDefaultAsync(string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSCMOrganisationRepositoryAsync(organization, scm, scmOrganisation, repository, credentialId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve SCM organization repository details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationRepositoryApiResponse"/>&gt;</returns>
        public async Task<IGetSCMOrganisationRepositoryApiResponse> GetSCMOrganisationRepositoryAsync(string organization, string scm, string scmOrganisation, string repository, Option<string> credentialId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSCMOrganisationRepository(organization, scm, scmOrganisation, repository, credentialId);

                FormatGetSCMOrganisationRepository(ref organization, ref scm, ref scmOrganisation, ref repository, ref credentialId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bscm%7D", Uri.EscapeDataString(scm.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BscmOrganisation%7D", Uri.EscapeDataString(scmOrganisation.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brepository%7D", Uri.EscapeDataString(repository.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (credentialId.IsSet)
                        parseQueryStringLocalVar["credentialId"] = ClientUtils.ParameterToString(credentialId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSCMOrganisationRepositoryApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSCMOrganisationRepositoryApiResponse>();

                        GetSCMOrganisationRepositoryApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSCMOrganisationRepositoryDefaultImplementation(apiResponseLocalVar, organization, scm, scmOrganisation, repository, credentialId);

                        Events.ExecuteOnGetSCMOrganisationRepository(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSCMOrganisationRepositoryDefaultImplementation(e, "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}", uriBuilderLocalVar.Path, organization, scm, scmOrganisation, repository, credentialId);
                Events.ExecuteOnErrorGetSCMOrganisationRepository(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSCMOrganisationRepositoryApiResponse"/>
        /// </summary>
        public partial class GetSCMOrganisationRepositoryApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSCMOrganisationRepositoryApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSCMOrganisationRepositoryApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSCMOrganisationRepositoryApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSCMOrganisationRepositoryApiResponse(ILogger<GetSCMOrganisationRepositoryApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<GithubOrganization>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<GithubOrganization>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<GithubOrganization>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetSCMOrganisations(ref string organization, ref string scm, ref Option<string> credentialId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="credentialId"></param>
        /// <returns></returns>
        private void ValidateGetSCMOrganisations(string organization, string scm, Option<string> credentialId)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (scm == null)
                throw new ArgumentNullException(nameof(scm));

            if (credentialId.IsSet && credentialId.Value == null)
                throw new ArgumentNullException(nameof(credentialId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="credentialId"></param>
        private void AfterGetSCMOrganisationsDefaultImplementation(IGetSCMOrganisationsApiResponse apiResponseLocalVar, string organization, string scm, Option<string> credentialId)
        {
            bool suppressDefaultLog = false;
            AfterGetSCMOrganisations(ref suppressDefaultLog, apiResponseLocalVar, organization, scm, credentialId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="credentialId"></param>
        partial void AfterGetSCMOrganisations(ref bool suppressDefaultLog, IGetSCMOrganisationsApiResponse apiResponseLocalVar, string organization, string scm, Option<string> credentialId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="credentialId"></param>
        private void OnErrorGetSCMOrganisationsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string scm, Option<string> credentialId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetSCMOrganisations(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, scm, credentialId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="scm"></param>
        /// <param name="credentialId"></param>
        partial void OnErrorGetSCMOrganisations(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string scm, Option<string> credentialId);

        /// <summary>
        ///  Retrieve SCM organizations details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationsApiResponse"/>&gt;</returns>
        public async Task<IGetSCMOrganisationsApiResponse?> GetSCMOrganisationsOrDefaultAsync(string organization, string scm, Option<string> credentialId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetSCMOrganisationsAsync(organization, scm, credentialId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve SCM organizations details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetSCMOrganisationsApiResponse"/>&gt;</returns>
        public async Task<IGetSCMOrganisationsApiResponse> GetSCMOrganisationsAsync(string organization, string scm, Option<string> credentialId = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetSCMOrganisations(organization, scm, credentialId);

                FormatGetSCMOrganisations(ref organization, ref scm, ref credentialId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/scm/{scm}/organizations";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bscm%7D", Uri.EscapeDataString(scm.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (credentialId.IsSet)
                        parseQueryStringLocalVar["credentialId"] = ClientUtils.ParameterToString(credentialId.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetSCMOrganisationsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetSCMOrganisationsApiResponse>();

                        GetSCMOrganisationsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/scm/{scm}/organizations", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetSCMOrganisationsDefaultImplementation(apiResponseLocalVar, organization, scm, credentialId);

                        Events.ExecuteOnGetSCMOrganisations(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetSCMOrganisationsDefaultImplementation(e, "/blue/rest/organizations/{organization}/scm/{scm}/organizations", uriBuilderLocalVar.Path, organization, scm, credentialId);
                Events.ExecuteOnErrorGetSCMOrganisations(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetSCMOrganisationsApiResponse"/>
        /// </summary>
        public partial class GetSCMOrganisationsApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetSCMOrganisationsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetSCMOrganisationsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetSCMOrganisationsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetSCMOrganisationsApiResponse(ILogger<GetSCMOrganisationsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<GithubOrganization>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<GithubOrganization>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<GithubOrganization>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUser(ref string organization, ref string user);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        private void ValidateGetUser(string organization, string user)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (user == null)
                throw new ArgumentNullException(nameof(user));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="user"></param>
        private void AfterGetUserDefaultImplementation(IGetUserApiResponse apiResponseLocalVar, string organization, string user)
        {
            bool suppressDefaultLog = false;
            AfterGetUser(ref suppressDefaultLog, apiResponseLocalVar, organization, user);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="user"></param>
        partial void AfterGetUser(ref bool suppressDefaultLog, IGetUserApiResponse apiResponseLocalVar, string organization, string user);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="user"></param>
        private void OnErrorGetUserDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string user)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUser(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, user);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="user"></param>
        partial void OnErrorGetUser(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string user);

        /// <summary>
        ///  Retrieve user details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserApiResponse"/>&gt;</returns>
        public async Task<IGetUserApiResponse?> GetUserOrDefaultAsync(string organization, string user, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserAsync(organization, user, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve user details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserApiResponse"/>&gt;</returns>
        public async Task<IGetUserApiResponse> GetUserAsync(string organization, string user, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUser(organization, user);

                FormatGetUser(ref organization, ref user);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/users/{user}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser%7D", Uri.EscapeDataString(user.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserApiResponse>();

                        GetUserApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/users/{user}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserDefaultImplementation(apiResponseLocalVar, organization, user);

                        Events.ExecuteOnGetUser(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserDefaultImplementation(e, "/blue/rest/organizations/{organization}/users/{user}", uriBuilderLocalVar.Path, organization, user);
                Events.ExecuteOnErrorGetUser(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserApiResponse"/>
        /// </summary>
        public partial class GetUserApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserApiResponse(ILogger<GetUserApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.User? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.User>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.User? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUserFavorites(ref string user);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        private void ValidateGetUserFavorites(string user)
        {
            if (user == null)
                throw new ArgumentNullException(nameof(user));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="user"></param>
        private void AfterGetUserFavoritesDefaultImplementation(IGetUserFavoritesApiResponse apiResponseLocalVar, string user)
        {
            bool suppressDefaultLog = false;
            AfterGetUserFavorites(ref suppressDefaultLog, apiResponseLocalVar, user);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="user"></param>
        partial void AfterGetUserFavorites(ref bool suppressDefaultLog, IGetUserFavoritesApiResponse apiResponseLocalVar, string user);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="user"></param>
        private void OnErrorGetUserFavoritesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string user)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUserFavorites(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, user);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="user"></param>
        partial void OnErrorGetUserFavorites(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string user);

        /// <summary>
        ///  Retrieve user favorites details for an organization
        /// </summary>
        /// <param name="user">Name of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserFavoritesApiResponse"/>&gt;</returns>
        public async Task<IGetUserFavoritesApiResponse?> GetUserFavoritesOrDefaultAsync(string user, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUserFavoritesAsync(user, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve user favorites details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="user">Name of the user</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUserFavoritesApiResponse"/>&gt;</returns>
        public async Task<IGetUserFavoritesApiResponse> GetUserFavoritesAsync(string user, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUserFavorites(user);

                FormatGetUserFavorites(ref user);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/users/{user}/favorites";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Buser%7D", Uri.EscapeDataString(user.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUserFavoritesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUserFavoritesApiResponse>();

                        GetUserFavoritesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/users/{user}/favorites", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUserFavoritesDefaultImplementation(apiResponseLocalVar, user);

                        Events.ExecuteOnGetUserFavorites(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUserFavoritesDefaultImplementation(e, "/blue/rest/users/{user}/favorites", uriBuilderLocalVar.Path, user);
                Events.ExecuteOnErrorGetUserFavorites(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUserFavoritesApiResponse"/>
        /// </summary>
        public partial class GetUserFavoritesApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUserFavoritesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUserFavoritesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUserFavoritesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUserFavoritesApiResponse(ILogger<GetUserFavoritesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<FavoriteImpl>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<FavoriteImpl>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<FavoriteImpl>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetUsers(ref string organization);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <returns></returns>
        private void ValidateGetUsers(string organization)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        private void AfterGetUsersDefaultImplementation(IGetUsersApiResponse apiResponseLocalVar, string organization)
        {
            bool suppressDefaultLog = false;
            AfterGetUsers(ref suppressDefaultLog, apiResponseLocalVar, organization);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        partial void AfterGetUsers(ref bool suppressDefaultLog, IGetUsersApiResponse apiResponseLocalVar, string organization);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        private void OnErrorGetUsersDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetUsers(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        partial void OnErrorGetUsers(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization);

        /// <summary>
        ///  Retrieve users details for an organization
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersApiResponse"/>&gt;</returns>
        public async Task<IGetUsersApiResponse?> GetUsersOrDefaultAsync(string organization, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetUsersAsync(organization, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Retrieve users details for an organization
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetUsersApiResponse"/>&gt;</returns>
        public async Task<IGetUsersApiResponse> GetUsersAsync(string organization, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetUsers(organization);

                FormatGetUsers(ref organization);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/users/";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetUsersApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetUsersApiResponse>();

                        GetUsersApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/users/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetUsersDefaultImplementation(apiResponseLocalVar, organization);

                        Events.ExecuteOnGetUsers(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetUsersDefaultImplementation(e, "/blue/rest/organizations/{organization}/users/", uriBuilderLocalVar.Path, organization);
                Events.ExecuteOnErrorGetUsers(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetUsersApiResponse"/>
        /// </summary>
        public partial class GetUsersApiResponse : Org.OpenAPITools.Client.ApiResponse, IGetUsersApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetUsersApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetUsersApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetUsersApiResponse(ILogger<GetUsersApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.User? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.User>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.User? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostPipelineRun(ref string organization, ref string pipeline, ref string run);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <returns></returns>
        private void ValidatePostPipelineRun(string organization, string pipeline, string run)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        private void AfterPostPipelineRunDefaultImplementation(IPostPipelineRunApiResponse apiResponseLocalVar, string organization, string pipeline, string run)
        {
            bool suppressDefaultLog = false;
            AfterPostPipelineRun(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        partial void AfterPostPipelineRun(ref bool suppressDefaultLog, IPostPipelineRunApiResponse apiResponseLocalVar, string organization, string pipeline, string run);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        private void OnErrorPostPipelineRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostPipelineRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        partial void OnErrorPostPipelineRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run);

        /// <summary>
        ///  Replay an organization pipeline run
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPipelineRunApiResponse"/>&gt;</returns>
        public async Task<IPostPipelineRunApiResponse?> PostPipelineRunOrDefaultAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostPipelineRunAsync(organization, pipeline, run, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Replay an organization pipeline run
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPipelineRunApiResponse"/>&gt;</returns>
        public async Task<IPostPipelineRunApiResponse> PostPipelineRunAsync(string organization, string pipeline, string run, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostPipelineRun(organization, pipeline, run);

                FormatPostPipelineRun(ref organization, ref pipeline, ref run);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostPipelineRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostPipelineRunApiResponse>();

                        PostPipelineRunApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostPipelineRunDefaultImplementation(apiResponseLocalVar, organization, pipeline, run);

                        Events.ExecuteOnPostPipelineRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostPipelineRunDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay", uriBuilderLocalVar.Path, organization, pipeline, run);
                Events.ExecuteOnErrorPostPipelineRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostPipelineRunApiResponse"/>
        /// </summary>
        public partial class PostPipelineRunApiResponse : Org.OpenAPITools.Client.ApiResponse, IPostPipelineRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostPipelineRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostPipelineRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostPipelineRunApiResponse(ILogger<PostPipelineRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.QueueItemImpl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.QueueItemImpl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.QueueItemImpl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPostPipelineRuns(ref string organization, ref string pipeline);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <returns></returns>
        private void ValidatePostPipelineRuns(string organization, string pipeline)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void AfterPostPipelineRunsDefaultImplementation(IPostPipelineRunsApiResponse apiResponseLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLog = false;
            AfterPostPipelineRuns(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void AfterPostPipelineRuns(ref bool suppressDefaultLog, IPostPipelineRunsApiResponse apiResponseLocalVar, string organization, string pipeline);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        private void OnErrorPostPipelineRunsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPostPipelineRuns(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        partial void OnErrorPostPipelineRuns(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline);

        /// <summary>
        ///  Start a build for an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPipelineRunsApiResponse"/>&gt;</returns>
        public async Task<IPostPipelineRunsApiResponse?> PostPipelineRunsOrDefaultAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PostPipelineRunsAsync(organization, pipeline, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Start a build for an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPostPipelineRunsApiResponse"/>&gt;</returns>
        public async Task<IPostPipelineRunsApiResponse> PostPipelineRunsAsync(string organization, string pipeline, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePostPipelineRuns(organization, pipeline);

                FormatPostPipelineRuns(ref organization, ref pipeline);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PostPipelineRunsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PostPipelineRunsApiResponse>();

                        PostPipelineRunsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPostPipelineRunsDefaultImplementation(apiResponseLocalVar, organization, pipeline);

                        Events.ExecuteOnPostPipelineRuns(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPostPipelineRunsDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs", uriBuilderLocalVar.Path, organization, pipeline);
                Events.ExecuteOnErrorPostPipelineRuns(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PostPipelineRunsApiResponse"/>
        /// </summary>
        public partial class PostPipelineRunsApiResponse : Org.OpenAPITools.Client.ApiResponse, IPostPipelineRunsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PostPipelineRunsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PostPipelineRunsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PostPipelineRunsApiResponse(ILogger<PostPipelineRunsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.QueueItemImpl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.QueueItemImpl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.QueueItemImpl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutPipelineFavorite(ref string organization, ref string pipeline, ref bool body);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <returns></returns>
        private void ValidatePutPipelineFavorite(string organization, string pipeline)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="body"></param>
        private void AfterPutPipelineFavoriteDefaultImplementation(IPutPipelineFavoriteApiResponse apiResponseLocalVar, string organization, string pipeline, bool body)
        {
            bool suppressDefaultLog = false;
            AfterPutPipelineFavorite(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, body);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="body"></param>
        partial void AfterPutPipelineFavorite(ref bool suppressDefaultLog, IPutPipelineFavoriteApiResponse apiResponseLocalVar, string organization, string pipeline, bool body);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="body"></param>
        private void OnErrorPutPipelineFavoriteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, bool body)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutPipelineFavorite(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, body);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="body"></param>
        partial void OnErrorPutPipelineFavorite(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, bool body);

        /// <summary>
        ///  Favorite/unfavorite a pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineFavoriteApiResponse"/>&gt;</returns>
        public async Task<IPutPipelineFavoriteApiResponse?> PutPipelineFavoriteOrDefaultAsync(string organization, string pipeline, bool body, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutPipelineFavoriteAsync(organization, pipeline, body, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Favorite/unfavorite a pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineFavoriteApiResponse"/>&gt;</returns>
        public async Task<IPutPipelineFavoriteApiResponse> PutPipelineFavoriteAsync(string organization, string pipeline, bool body, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutPipelineFavorite(organization, pipeline);

                FormatPutPipelineFavorite(ref organization, ref pipeline, ref body);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));

                    httpRequestMessageLocalVar.Content = (body as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(body, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutPipelineFavoriteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutPipelineFavoriteApiResponse>();

                        PutPipelineFavoriteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutPipelineFavoriteDefaultImplementation(apiResponseLocalVar, organization, pipeline, body);

                        Events.ExecuteOnPutPipelineFavorite(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutPipelineFavoriteDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite", uriBuilderLocalVar.Path, organization, pipeline, body);
                Events.ExecuteOnErrorPutPipelineFavorite(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutPipelineFavoriteApiResponse"/>
        /// </summary>
        public partial class PutPipelineFavoriteApiResponse : Org.OpenAPITools.Client.ApiResponse, IPutPipelineFavoriteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutPipelineFavoriteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutPipelineFavoriteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutPipelineFavoriteApiResponse(ILogger<PutPipelineFavoriteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.FavoriteImpl? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.FavoriteImpl>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.FavoriteImpl? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatPutPipelineRun(ref string organization, ref string pipeline, ref string run, ref Option<string> blocking, ref Option<int> timeOutInSecs);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="blocking"></param>
        /// <returns></returns>
        private void ValidatePutPipelineRun(string organization, string pipeline, string run, Option<string> blocking)
        {
            if (organization == null)
                throw new ArgumentNullException(nameof(organization));

            if (pipeline == null)
                throw new ArgumentNullException(nameof(pipeline));

            if (run == null)
                throw new ArgumentNullException(nameof(run));

            if (blocking.IsSet && blocking.Value == null)
                throw new ArgumentNullException(nameof(blocking));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="blocking"></param>
        /// <param name="timeOutInSecs"></param>
        private void AfterPutPipelineRunDefaultImplementation(IPutPipelineRunApiResponse apiResponseLocalVar, string organization, string pipeline, string run, Option<string> blocking, Option<int> timeOutInSecs)
        {
            bool suppressDefaultLog = false;
            AfterPutPipelineRun(ref suppressDefaultLog, apiResponseLocalVar, organization, pipeline, run, blocking, timeOutInSecs);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="blocking"></param>
        /// <param name="timeOutInSecs"></param>
        partial void AfterPutPipelineRun(ref bool suppressDefaultLog, IPutPipelineRunApiResponse apiResponseLocalVar, string organization, string pipeline, string run, Option<string> blocking, Option<int> timeOutInSecs);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="blocking"></param>
        /// <param name="timeOutInSecs"></param>
        private void OnErrorPutPipelineRunDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, Option<string> blocking, Option<int> timeOutInSecs)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorPutPipelineRun(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, organization, pipeline, run, blocking, timeOutInSecs);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="organization"></param>
        /// <param name="pipeline"></param>
        /// <param name="run"></param>
        /// <param name="blocking"></param>
        /// <param name="timeOutInSecs"></param>
        partial void OnErrorPutPipelineRun(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string organization, string pipeline, string run, Option<string> blocking, Option<int> timeOutInSecs);

        /// <summary>
        ///  Stop a build of an organization pipeline
        /// </summary>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineRunApiResponse"/>&gt;</returns>
        public async Task<IPutPipelineRunApiResponse?> PutPipelineRunOrDefaultAsync(string organization, string pipeline, string run, Option<string> blocking = default, Option<int> timeOutInSecs = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await PutPipelineRunAsync(organization, pipeline, run, blocking, timeOutInSecs, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Stop a build of an organization pipeline
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false (optional)</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IPutPipelineRunApiResponse"/>&gt;</returns>
        public async Task<IPutPipelineRunApiResponse> PutPipelineRunAsync(string organization, string pipeline, string run, Option<string> blocking = default, Option<int> timeOutInSecs = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidatePutPipelineRun(organization, pipeline, run, blocking);

                FormatPutPipelineRun(ref organization, ref pipeline, ref run, ref blocking, ref timeOutInSecs);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Borganization%7D", Uri.EscapeDataString(organization.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bpipeline%7D", Uri.EscapeDataString(pipeline.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Brun%7D", Uri.EscapeDataString(run.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (blocking.IsSet)
                        parseQueryStringLocalVar["blocking"] = ClientUtils.ParameterToString(blocking.Value);

                    if (timeOutInSecs.IsSet)
                        parseQueryStringLocalVar["timeOutInSecs"] = ClientUtils.ParameterToString(timeOutInSecs.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<PutPipelineRunApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<PutPipelineRunApiResponse>();

                        PutPipelineRunApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterPutPipelineRunDefaultImplementation(apiResponseLocalVar, organization, pipeline, run, blocking, timeOutInSecs);

                        Events.ExecuteOnPutPipelineRun(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorPutPipelineRunDefaultImplementation(e, "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop", uriBuilderLocalVar.Path, organization, pipeline, run, blocking, timeOutInSecs);
                Events.ExecuteOnErrorPutPipelineRun(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="PutPipelineRunApiResponse"/>
        /// </summary>
        public partial class PutPipelineRunApiResponse : Org.OpenAPITools.Client.ApiResponse, IPutPipelineRunApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<PutPipelineRunApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="PutPipelineRunApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public PutPipelineRunApiResponse(ILogger<PutPipelineRunApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Org.OpenAPITools.Model.PipelineRun? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Org.OpenAPITools.Model.PipelineRun>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Org.OpenAPITools.Model.PipelineRun? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSearch(ref string q);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateSearch(string q)
        {
            if (q == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="q"></param>
        private void AfterSearchDefaultImplementation(ISearchApiResponse apiResponseLocalVar, string q)
        {
            bool suppressDefaultLog = false;
            AfterSearch(ref suppressDefaultLog, apiResponseLocalVar, q);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="q"></param>
        partial void AfterSearch(ref bool suppressDefaultLog, ISearchApiResponse apiResponseLocalVar, string q);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="q"></param>
        private void OnErrorSearchDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string q)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSearch(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, q);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="q"></param>
        partial void OnErrorSearch(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string q);

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <param name="q">Query string</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchApiResponse"/>&gt;</returns>
        public async Task<ISearchApiResponse?> SearchOrDefaultAsync(string q, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SearchAsync(q, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchApiResponse"/>&gt;</returns>
        public async Task<ISearchApiResponse> SearchAsync(string q, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSearch(q);

                FormatSearch(ref q);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/search/";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SearchApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SearchApiResponse>();

                        SearchApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/search/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSearchDefaultImplementation(apiResponseLocalVar, q);

                        Events.ExecuteOnSearch(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSearchDefaultImplementation(e, "/blue/rest/search/", uriBuilderLocalVar.Path, q);
                Events.ExecuteOnErrorSearch(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SearchApiResponse"/>
        /// </summary>
        public partial class SearchApiResponse : Org.OpenAPITools.Client.ApiResponse, ISearchApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SearchApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SearchApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SearchApiResponse(ILogger<SearchApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatSearchClasses(ref string q);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="q"></param>
        /// <returns></returns>
        private void ValidateSearchClasses(string q)
        {
            if (q == null)
                throw new ArgumentNullException(nameof(q));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="q"></param>
        private void AfterSearchClassesDefaultImplementation(ISearchClassesApiResponse apiResponseLocalVar, string q)
        {
            bool suppressDefaultLog = false;
            AfterSearchClasses(ref suppressDefaultLog, apiResponseLocalVar, q);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="q"></param>
        partial void AfterSearchClasses(ref bool suppressDefaultLog, ISearchClassesApiResponse apiResponseLocalVar, string q);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="q"></param>
        private void OnErrorSearchClassesDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string q)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorSearchClasses(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, q);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="q"></param>
        partial void OnErrorSearchClasses(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string q);

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <param name="q">Query string containing an array of class names</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchClassesApiResponse"/>&gt;</returns>
        public async Task<ISearchClassesApiResponse?> SearchClassesOrDefaultAsync(string q, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await SearchClassesAsync(q, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ISearchClassesApiResponse"/>&gt;</returns>
        public async Task<ISearchClassesApiResponse> SearchClassesAsync(string q, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateSearchClasses(q);

                FormatSearchClasses(ref q);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/blue/rest/classes/";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    parseQueryStringLocalVar["q"] = ClientUtils.ParameterToString(q);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BasicToken basicTokenLocalVar1 = (BasicToken) await BasicTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(basicTokenLocalVar1);

                    basicTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<SearchClassesApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<SearchClassesApiResponse>();

                        SearchClassesApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/blue/rest/classes/", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterSearchClassesDefaultImplementation(apiResponseLocalVar, q);

                        Events.ExecuteOnSearchClasses(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorSearchClassesDefaultImplementation(e, "/blue/rest/classes/", uriBuilderLocalVar.Path, q);
                Events.ExecuteOnErrorSearchClasses(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="SearchClassesApiResponse"/>
        /// </summary>
        public partial class SearchClassesApiResponse : Org.OpenAPITools.Client.ApiResponse, ISearchClassesApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<SearchClassesApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="SearchClassesApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public SearchClassesApiResponse(ILogger<SearchClassesApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public string? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
