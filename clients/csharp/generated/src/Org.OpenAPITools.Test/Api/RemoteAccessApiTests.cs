/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing RemoteAccessApi
    /// </summary>
    public sealed class RemoteAccessApiTests : ApiTestsBase
    {
        private readonly IRemoteAccessApi _instance;

        public RemoteAccessApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IRemoteAccessApi>();
        }

        /// <summary>
        /// Test GetComputer
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetComputerAsyncTest()
        {
            int depth = default!;
            var response = await _instance.GetComputerAsync(depth);
            var model = response.Ok();
            Assert.IsType<ComputerSet>(model);
        }

        /// <summary>
        /// Test GetJenkins
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJenkinsAsyncTest()
        {
            var response = await _instance.GetJenkinsAsync();
            var model = response.Ok();
            Assert.IsType<Hudson>(model);
        }

        /// <summary>
        /// Test GetJob
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJobAsyncTest()
        {
            string name = default!;
            var response = await _instance.GetJobAsync(name);
            var model = response.Ok();
            Assert.IsType<FreeStyleProject>(model);
        }

        /// <summary>
        /// Test GetJobConfig
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJobConfigAsyncTest()
        {
            string name = default!;
            var response = await _instance.GetJobConfigAsync(name);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetJobLastBuild
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJobLastBuildAsyncTest()
        {
            string name = default!;
            var response = await _instance.GetJobLastBuildAsync(name);
            var model = response.Ok();
            Assert.IsType<FreeStyleBuild>(model);
        }

        /// <summary>
        /// Test GetJobProgressiveText
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJobProgressiveTextAsyncTest()
        {
            string name = default!;
            string number = default!;
            string start = default!;
            await _instance.GetJobProgressiveTextAsync(name, number, start);
        }

        /// <summary>
        /// Test GetQueue
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetQueueAsyncTest()
        {
            var response = await _instance.GetQueueAsync();
            var model = response.Ok();
            Assert.IsType<Queue>(model);
        }

        /// <summary>
        /// Test GetQueueItem
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetQueueItemAsyncTest()
        {
            string number = default!;
            var response = await _instance.GetQueueItemAsync(number);
            var model = response.Ok();
            Assert.IsType<Queue>(model);
        }

        /// <summary>
        /// Test GetView
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetViewAsyncTest()
        {
            string name = default!;
            var response = await _instance.GetViewAsync(name);
            var model = response.Ok();
            Assert.IsType<ListView>(model);
        }

        /// <summary>
        /// Test GetViewConfig
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetViewConfigAsyncTest()
        {
            string name = default!;
            var response = await _instance.GetViewConfigAsync(name);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test HeadJenkins
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task HeadJenkinsAsyncTest()
        {
            await _instance.HeadJenkinsAsync();
        }

        /// <summary>
        /// Test PostCreateItem
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCreateItemAsyncTest()
        {
            string name = default!;
            Client.Option<string> from = default!;
            Client.Option<string> mode = default!;
            Client.Option<string> jenkinsCrumb = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> body = default!;
            await _instance.PostCreateItemAsync(name, from, mode, jenkinsCrumb, contentType, body);
        }

        /// <summary>
        /// Test PostCreateView
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostCreateViewAsyncTest()
        {
            string name = default!;
            Client.Option<string> jenkinsCrumb = default!;
            Client.Option<string> contentType = default!;
            Client.Option<string> body = default!;
            await _instance.PostCreateViewAsync(name, jenkinsCrumb, contentType, body);
        }

        /// <summary>
        /// Test PostJobBuild
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostJobBuildAsyncTest()
        {
            string name = default!;
            string json = default!;
            Client.Option<string> token = default!;
            Client.Option<string> jenkinsCrumb = default!;
            await _instance.PostJobBuildAsync(name, json, token, jenkinsCrumb);
        }

        /// <summary>
        /// Test PostJobConfig
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostJobConfigAsyncTest()
        {
            string name = default!;
            string body = default!;
            Client.Option<string> jenkinsCrumb = default!;
            await _instance.PostJobConfigAsync(name, body, jenkinsCrumb);
        }

        /// <summary>
        /// Test PostJobDelete
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostJobDeleteAsyncTest()
        {
            string name = default!;
            Client.Option<string> jenkinsCrumb = default!;
            await _instance.PostJobDeleteAsync(name, jenkinsCrumb);
        }

        /// <summary>
        /// Test PostJobDisable
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostJobDisableAsyncTest()
        {
            string name = default!;
            Client.Option<string> jenkinsCrumb = default!;
            await _instance.PostJobDisableAsync(name, jenkinsCrumb);
        }

        /// <summary>
        /// Test PostJobEnable
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostJobEnableAsyncTest()
        {
            string name = default!;
            Client.Option<string> jenkinsCrumb = default!;
            await _instance.PostJobEnableAsync(name, jenkinsCrumb);
        }

        /// <summary>
        /// Test PostJobLastBuildStop
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostJobLastBuildStopAsyncTest()
        {
            string name = default!;
            Client.Option<string> jenkinsCrumb = default!;
            await _instance.PostJobLastBuildStopAsync(name, jenkinsCrumb);
        }

        /// <summary>
        /// Test PostViewConfig
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostViewConfigAsyncTest()
        {
            string name = default!;
            string body = default!;
            Client.Option<string> jenkinsCrumb = default!;
            await _instance.PostViewConfigAsync(name, body, jenkinsCrumb);
        }
    }
}
