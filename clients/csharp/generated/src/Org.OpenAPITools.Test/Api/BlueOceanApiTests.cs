/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing BlueOceanApi
    /// </summary>
    public sealed class BlueOceanApiTests : ApiTestsBase
    {
        private readonly IBlueOceanApi _instance;

        public BlueOceanApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IBlueOceanApi>();
        }

        /// <summary>
        /// Test DeletePipelineQueueItem
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task DeletePipelineQueueItemAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string queue = default!;
            await _instance.DeletePipelineQueueItemAsync(organization, pipeline, queue);
        }

        /// <summary>
        /// Test GetAuthenticatedUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetAuthenticatedUserAsyncTest()
        {
            string organization = default!;
            var response = await _instance.GetAuthenticatedUserAsync(organization);
            var model = response.Ok();
            Assert.IsType<User>(model);
        }

        /// <summary>
        /// Test GetClasses
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetClassesAsyncTest()
        {
            string varClass = default!;
            var response = await _instance.GetClassesAsync(varClass);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetJsonWebKey
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJsonWebKeyAsyncTest()
        {
            int key = default!;
            var response = await _instance.GetJsonWebKeyAsync(key);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetJsonWebToken
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetJsonWebTokenAsyncTest()
        {
            Client.Option<int> expiryTimeInMins = default!;
            Client.Option<int> maxExpiryTimeInMins = default!;
            var response = await _instance.GetJsonWebTokenAsync(expiryTimeInMins, maxExpiryTimeInMins);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetOrganisation
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetOrganisationAsyncTest()
        {
            string organization = default!;
            var response = await _instance.GetOrganisationAsync(organization);
            var model = response.Ok();
            Assert.IsType<Organisation>(model);
        }

        /// <summary>
        /// Test GetOrganisations
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetOrganisationsAsyncTest()
        {
            var response = await _instance.GetOrganisationsAsync();
            var model = response.Ok();
            Assert.IsType<List<Organisation>>(model);
        }

        /// <summary>
        /// Test GetPipeline
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            var response = await _instance.GetPipelineAsync(organization, pipeline);
            var model = response.Ok();
            Assert.IsType<Pipeline>(model);
        }

        /// <summary>
        /// Test GetPipelineActivities
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineActivitiesAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            var response = await _instance.GetPipelineActivitiesAsync(organization, pipeline);
            var model = response.Ok();
            Assert.IsType<List<PipelineActivity>>(model);
        }

        /// <summary>
        /// Test GetPipelineBranch
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineBranchAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string branch = default!;
            var response = await _instance.GetPipelineBranchAsync(organization, pipeline, branch);
            var model = response.Ok();
            Assert.IsType<BranchImpl>(model);
        }

        /// <summary>
        /// Test GetPipelineBranchRun
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineBranchRunAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string branch = default!;
            string run = default!;
            var response = await _instance.GetPipelineBranchRunAsync(organization, pipeline, branch, run);
            var model = response.Ok();
            Assert.IsType<PipelineRun>(model);
        }

        /// <summary>
        /// Test GetPipelineBranches
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineBranchesAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            var response = await _instance.GetPipelineBranchesAsync(organization, pipeline);
            var model = response.Ok();
            Assert.IsType<MultibranchPipeline>(model);
        }

        /// <summary>
        /// Test GetPipelineFolder
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineFolderAsyncTest()
        {
            string organization = default!;
            string folder = default!;
            var response = await _instance.GetPipelineFolderAsync(organization, folder);
            var model = response.Ok();
            Assert.IsType<PipelineFolderImpl>(model);
        }

        /// <summary>
        /// Test GetPipelineFolderPipeline
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineFolderPipelineAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string folder = default!;
            var response = await _instance.GetPipelineFolderPipelineAsync(organization, pipeline, folder);
            var model = response.Ok();
            Assert.IsType<PipelineImpl>(model);
        }

        /// <summary>
        /// Test GetPipelineQueue
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineQueueAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            var response = await _instance.GetPipelineQueueAsync(organization, pipeline);
            var model = response.Ok();
            Assert.IsType<List<QueueItemImpl>>(model);
        }

        /// <summary>
        /// Test GetPipelineRun
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineRunAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            var response = await _instance.GetPipelineRunAsync(organization, pipeline, run);
            var model = response.Ok();
            Assert.IsType<PipelineRun>(model);
        }

        /// <summary>
        /// Test GetPipelineRunLog
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineRunLogAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            Client.Option<int> start = default!;
            Client.Option<bool> download = default!;
            var response = await _instance.GetPipelineRunLogAsync(organization, pipeline, run, start, download);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetPipelineRunNode
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineRunNodeAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            string node = default!;
            var response = await _instance.GetPipelineRunNodeAsync(organization, pipeline, run, node);
            var model = response.Ok();
            Assert.IsType<PipelineRunNode>(model);
        }

        /// <summary>
        /// Test GetPipelineRunNodeStep
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineRunNodeStepAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            string node = default!;
            string step = default!;
            var response = await _instance.GetPipelineRunNodeStepAsync(organization, pipeline, run, node, step);
            var model = response.Ok();
            Assert.IsType<PipelineStepImpl>(model);
        }

        /// <summary>
        /// Test GetPipelineRunNodeStepLog
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineRunNodeStepLogAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            string node = default!;
            string step = default!;
            var response = await _instance.GetPipelineRunNodeStepLogAsync(organization, pipeline, run, node, step);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test GetPipelineRunNodeSteps
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineRunNodeStepsAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            string node = default!;
            var response = await _instance.GetPipelineRunNodeStepsAsync(organization, pipeline, run, node);
            var model = response.Ok();
            Assert.IsType<List<PipelineStepImpl>>(model);
        }

        /// <summary>
        /// Test GetPipelineRunNodes
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineRunNodesAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            var response = await _instance.GetPipelineRunNodesAsync(organization, pipeline, run);
            var model = response.Ok();
            Assert.IsType<List<PipelineRunNode>>(model);
        }

        /// <summary>
        /// Test GetPipelineRuns
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelineRunsAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            var response = await _instance.GetPipelineRunsAsync(organization, pipeline);
            var model = response.Ok();
            Assert.IsType<List<PipelineRun>>(model);
        }

        /// <summary>
        /// Test GetPipelines
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetPipelinesAsyncTest()
        {
            string organization = default!;
            var response = await _instance.GetPipelinesAsync(organization);
            var model = response.Ok();
            Assert.IsType<List<Pipeline>>(model);
        }

        /// <summary>
        /// Test GetSCM
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSCMAsyncTest()
        {
            string organization = default!;
            string scm = default!;
            var response = await _instance.GetSCMAsync(organization, scm);
            var model = response.Ok();
            Assert.IsType<GithubScm>(model);
        }

        /// <summary>
        /// Test GetSCMOrganisationRepositories
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSCMOrganisationRepositoriesAsyncTest()
        {
            string organization = default!;
            string scm = default!;
            string scmOrganisation = default!;
            Client.Option<string> credentialId = default!;
            Client.Option<int> pageSize = default!;
            Client.Option<int> pageNumber = default!;
            var response = await _instance.GetSCMOrganisationRepositoriesAsync(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
            var model = response.Ok();
            Assert.IsType<List<GithubOrganization>>(model);
        }

        /// <summary>
        /// Test GetSCMOrganisationRepository
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSCMOrganisationRepositoryAsyncTest()
        {
            string organization = default!;
            string scm = default!;
            string scmOrganisation = default!;
            string repository = default!;
            Client.Option<string> credentialId = default!;
            var response = await _instance.GetSCMOrganisationRepositoryAsync(organization, scm, scmOrganisation, repository, credentialId);
            var model = response.Ok();
            Assert.IsType<List<GithubOrganization>>(model);
        }

        /// <summary>
        /// Test GetSCMOrganisations
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSCMOrganisationsAsyncTest()
        {
            string organization = default!;
            string scm = default!;
            Client.Option<string> credentialId = default!;
            var response = await _instance.GetSCMOrganisationsAsync(organization, scm, credentialId);
            var model = response.Ok();
            Assert.IsType<List<GithubOrganization>>(model);
        }

        /// <summary>
        /// Test GetUser
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserAsyncTest()
        {
            string organization = default!;
            string user = default!;
            var response = await _instance.GetUserAsync(organization, user);
            var model = response.Ok();
            Assert.IsType<User>(model);
        }

        /// <summary>
        /// Test GetUserFavorites
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUserFavoritesAsyncTest()
        {
            string user = default!;
            var response = await _instance.GetUserFavoritesAsync(user);
            var model = response.Ok();
            Assert.IsType<List<FavoriteImpl>>(model);
        }

        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetUsersAsyncTest()
        {
            string organization = default!;
            var response = await _instance.GetUsersAsync(organization);
            var model = response.Ok();
            Assert.IsType<User>(model);
        }

        /// <summary>
        /// Test PostPipelineRun
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostPipelineRunAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            var response = await _instance.PostPipelineRunAsync(organization, pipeline, run);
            var model = response.Ok();
            Assert.IsType<QueueItemImpl>(model);
        }

        /// <summary>
        /// Test PostPipelineRuns
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PostPipelineRunsAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            var response = await _instance.PostPipelineRunsAsync(organization, pipeline);
            var model = response.Ok();
            Assert.IsType<QueueItemImpl>(model);
        }

        /// <summary>
        /// Test PutPipelineFavorite
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutPipelineFavoriteAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            bool body = default!;
            var response = await _instance.PutPipelineFavoriteAsync(organization, pipeline, body);
            var model = response.Ok();
            Assert.IsType<FavoriteImpl>(model);
        }

        /// <summary>
        /// Test PutPipelineRun
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task PutPipelineRunAsyncTest()
        {
            string organization = default!;
            string pipeline = default!;
            string run = default!;
            Client.Option<string> blocking = default!;
            Client.Option<int> timeOutInSecs = default!;
            var response = await _instance.PutPipelineRunAsync(organization, pipeline, run, blocking, timeOutInSecs);
            var model = response.Ok();
            Assert.IsType<PipelineRun>(model);
        }

        /// <summary>
        /// Test Search
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchAsyncTest()
        {
            string q = default!;
            var response = await _instance.SearchAsync(q);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }

        /// <summary>
        /// Test SearchClasses
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchClassesAsyncTest()
        {
            string q = default!;
            var response = await _instance.SearchClassesAsync(q);
            var model = response.Ok();
            Assert.IsType<string>(model);
        }
    }
}
