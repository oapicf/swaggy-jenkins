/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.ComputerSet;
import org.openapitools.model.FreeStyleBuild;
import org.openapitools.model.FreeStyleProject;
import org.openapitools.model.Hudson;
import org.openapitools.model.ListView;
import org.openapitools.model.Queue;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2025-05-10T02:40:06.004151617Z[Etc/UTC]", comments = "Generator version: 7.12.0")
@Controller
@Tag(name = "RemoteAccess", description = "The RemoteAccess API")
public class RemoteAccessController {
    /**
     * Retrieve computer details
     *
     * @param depth Recursion depth in response model (required)
     * @return ComputerSet
     */
    @Operation(
        operationId = "getComputer",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved computer details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ComputerSet.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "depth", description = "Recursion depth in response model", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/computer/api/json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ComputerSet> getComputer(
        @QueryValue(value="depth") @NotNull Integer depth
    ) {
        // TODO implement getComputer();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve Jenkins details
     *
     * @return Hudson
     */
    @Operation(
        operationId = "getJenkins",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved Jenkins details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Hudson.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/api/json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Hudson> getJenkins() {
        // TODO implement getJenkins();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve job details
     *
     * @param name Name of the job (required)
     * @return FreeStyleProject
     */
    @Operation(
        operationId = "getJob",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FreeStyleProject.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/job/{name}/api/json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<FreeStyleProject> getJob(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getJob();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve job configuration
     *
     * @param name Name of the job (required)
     * @return String
     */
    @Operation(
        operationId = "getJobConfig",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job configuration in config.xml format", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/job/{name}/config.xml")
    @Produces(value = {"text/xml"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<String> getJobConfig(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getJobConfig();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve job&#39;s last build details
     *
     * @param name Name of the job (required)
     * @return FreeStyleBuild
     */
    @Operation(
        operationId = "getJobLastBuild",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job's last build details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FreeStyleBuild.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/job/{name}/lastBuild/api/json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<FreeStyleBuild> getJobLastBuild(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getJobLastBuild();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve job&#39;s build progressive text output
     *
     * @param name Name of the job (required)
     * @param number Build number (required)
     * @param start Starting point of progressive text output (required)
     */
    @Operation(
        operationId = "getJobProgressiveText",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job's build progressive text output"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true),
            @Parameter(name = "number", description = "Build number", required = true),
            @Parameter(name = "start", description = "Starting point of progressive text output", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/job/{name}/{number}/logText/progressiveText")
    @Produces(value = {})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> getJobProgressiveText(
        @PathVariable(value="name") @NotNull String name, 
        @PathVariable(value="number") @NotNull String number, 
        @QueryValue(value="start") @NotNull String start
    ) {
        // TODO implement getJobProgressiveText();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve queue details
     *
     * @return Queue
     */
    @Operation(
        operationId = "getQueue",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved queue details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Queue.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/queue/api/json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Queue> getQueue() {
        // TODO implement getQueue();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve queued item details
     *
     * @param number Queue number (required)
     * @return Queue
     */
    @Operation(
        operationId = "getQueueItem",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved queued item details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Queue.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "number", description = "Queue number", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/queue/item/{number}/api/json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Queue> getQueueItem(
        @PathVariable(value="number") @NotNull String number
    ) {
        // TODO implement getQueueItem();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve view details
     *
     * @param name Name of the view (required)
     * @return ListView
     */
    @Operation(
        operationId = "getView",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved view details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ListView.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "View cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the view", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/view/{name}/api/json")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<ListView> getView(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getView();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve view configuration
     *
     * @param name Name of the view (required)
     * @return String
     */
    @Operation(
        operationId = "getViewConfig",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved view configuration in config.xml format", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "View cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the view", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/view/{name}/config.xml")
    @Produces(value = {"text/xml"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<String> getViewConfig(
        @PathVariable(value="name") @NotNull String name
    ) {
        // TODO implement getViewConfig();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve Jenkins headers
     *
     */
    @Operation(
        operationId = "headJenkins",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved Jenkins headers"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Head(uri="/api/json")
    @Produces(value = {})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> headJenkins() {
        // TODO implement headJenkins();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create a new job using job configuration, or copied from an existing job
     *
     * @param name Name of the new job (required)
     * @param from Existing job to copy from (optional)
     * @param mode Set to &#39;copy&#39; for copying an existing job (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param _body Job configuration in config.xml format (optional)
     */
    @Operation(
        operationId = "postCreateItem",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully created a new job"),
            @ApiResponse(responseCode = "400", description = "An error has occurred - error message is embedded inside the HTML response", content = {
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the new job", required = true),
            @Parameter(name = "from", description = "Existing job to copy from"),
            @Parameter(name = "mode", description = "Set to 'copy' for copying an existing job"),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token"),
            @Parameter(name = "contentType", description = "Content type header application/xml"),
            @Parameter(name = "_body", description = "Job configuration in config.xml format")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/createItem")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postCreateItem(
        @QueryValue(value="name") @NotNull String name, 
        @QueryValue(value="from") @Nullable String from, 
        @QueryValue(value="mode") @Nullable String mode, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb, 
        @Header(value="Content-Type") @Nullable String contentType, 
        @Body @Nullable String _body
    ) {
        // TODO implement postCreateItem();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Create a new view using view configuration
     *
     * @param name Name of the new view (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param _body View configuration in config.xml format (optional)
     */
    @Operation(
        operationId = "postCreateView",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully created the view"),
            @ApiResponse(responseCode = "400", description = "An error has occurred - error message is embedded inside the HTML response", content = {
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the new view", required = true),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token"),
            @Parameter(name = "contentType", description = "Content type header application/xml"),
            @Parameter(name = "_body", description = "View configuration in config.xml format")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/createView")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postCreateView(
        @QueryValue(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb, 
        @Header(value="Content-Type") @Nullable String contentType, 
        @Body @Nullable String _body
    ) {
        // TODO implement postCreateView();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Build a job
     *
     * @param name Name of the job (required)
     * @param json  (required)
     * @param token  (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @Operation(
        operationId = "postJobBuild",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully built the job (backward compatibility for older versions of Jenkins)"),
            @ApiResponse(responseCode = "201", description = "Successfully built the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true),
            @Parameter(name = "json", required = true),
            @Parameter(name = "token"),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/job/{name}/build")
    @Produces(value = {})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postJobBuild(
        @PathVariable(value="name") @NotNull String name, 
        @QueryValue(value="json") @NotNull String json, 
        @QueryValue(value="token") @Nullable String token, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobBuild();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Update job configuration
     *
     * @param name Name of the job (required)
     * @param _body Job configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @Operation(
        operationId = "postJobConfig",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job configuration in config.xml format"),
            @ApiResponse(responseCode = "400", description = "An error has occurred - error message is embedded inside the HTML response", content = {
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true),
            @Parameter(name = "_body", description = "Job configuration in config.xml format", required = true),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/job/{name}/config.xml")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postJobConfig(
        @PathVariable(value="name") @NotNull String name, 
        @Body @NotNull String _body, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobConfig();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Delete a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @Operation(
        operationId = "postJobDelete",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/job/{name}/doDelete")
    @Produces(value = {})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postJobDelete(
        @PathVariable(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobDelete();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Disable a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @Operation(
        operationId = "postJobDisable",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully disabled the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/job/{name}/disable")
    @Produces(value = {})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postJobDisable(
        @PathVariable(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobDisable();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Enable a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @Operation(
        operationId = "postJobEnable",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully enabled the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/job/{name}/enable")
    @Produces(value = {})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postJobEnable(
        @PathVariable(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobEnable();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Stop a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @Operation(
        operationId = "postJobLastBuildStop",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully stopped the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the job", required = true),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/job/{name}/lastBuild/stop")
    @Produces(value = {})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postJobLastBuildStop(
        @PathVariable(value="name") @NotNull String name, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postJobLastBuildStop();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Update view configuration
     *
     * @param name Name of the view (required)
     * @param _body View configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     */
    @Operation(
        operationId = "postViewConfig",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully updated view configuration"),
            @ApiResponse(responseCode = "400", description = "An error has occurred - error message is embedded inside the HTML response", content = {
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "View cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "name", description = "Name of the view", required = true),
            @Parameter(name = "_body", description = "View configuration in config.xml format", required = true),
            @Parameter(name = "jenkinsCrumb", description = "CSRF protection token")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/view/{name}/config.xml")
    @Produces(value = {})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> postViewConfig(
        @PathVariable(value="name") @NotNull String name, 
        @Body @NotNull String _body, 
        @Header(value="Jenkins-Crumb") @Nullable String jenkinsCrumb
    ) {
        // TODO implement postViewConfig();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
