/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.controller;

import io.micronaut.http.annotation.*;
import io.micronaut.core.annotation.Nullable;
import io.micronaut.core.convert.format.Format;
import io.micronaut.security.annotation.Secured;
import io.micronaut.security.rules.SecurityRule;
import reactor.core.publisher.Mono;
import io.micronaut.http.HttpStatus;
import io.micronaut.http.exceptions.HttpStatusException;
import org.openapitools.model.BranchImpl;
import org.openapitools.model.FavoriteImpl;
import org.openapitools.model.GithubOrganization;
import org.openapitools.model.GithubScm;
import org.openapitools.model.MultibranchPipeline;
import org.openapitools.model.Organisation;
import org.openapitools.model.Pipeline;
import org.openapitools.model.PipelineActivity;
import org.openapitools.model.PipelineFolderImpl;
import org.openapitools.model.PipelineImpl;
import org.openapitools.model.PipelineRun;
import org.openapitools.model.PipelineRunNode;
import org.openapitools.model.PipelineStepImpl;
import org.openapitools.model.QueueItemImpl;
import org.openapitools.model.User;
import javax.annotation.Generated;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@Generated(value="org.openapitools.codegen.languages.JavaMicronautServerCodegen", date="2024-03-15T14:12:15.717235233Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Controller
@Tag(name = "BlueOcean", description = "The BlueOcean API")
public class BlueOceanController {
    /**
     * Delete queue item from an organization pipeline queue
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param queue Name of the queue item (required)
     */
    @Operation(
        operationId = "deletePipelineQueueItem",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted queue item"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "queue", description = "Name of the queue item", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Delete(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}")
    @Produces(value = {})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Void> deletePipelineQueueItem(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="queue") @NotNull String queue
    ) {
        // TODO implement deletePipelineQueueItem();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve authenticated user details for an organization
     *
     * @param organization Name of the organization (required)
     * @return User
     */
    @Operation(
        operationId = "getAuthenticatedUser",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved authenticated user details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/user/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<User> getAuthenticatedUser(
        @PathVariable(value="organization") @NotNull String organization
    ) {
        // TODO implement getAuthenticatedUser();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get a list of class names supported by a given class
     *
     * @param propertyClass Name of the class (required)
     * @return String
     */
    @Operation(
        operationId = "getClasses",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved class names", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "propertyClass", description = "Name of the class", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/classes/{class}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<String> getClasses(
        @PathVariable(value="class") @NotNull String propertyClass
    ) {
        // TODO implement getClasses();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve JSON Web Key
     *
     * @param key Key ID received as part of JWT header field kid (required)
     * @return String
     */
    @Operation(
        operationId = "getJsonWebKey",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved JWT token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "key", description = "Key ID received as part of JWT header field kid", required = true)
        }
    )
    @Get(uri="/jwt-auth/jwks/{key}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<String> getJsonWebKey(
        @PathVariable(value="key") @NotNull Integer key
    ) {
        // TODO implement getJsonWebKey();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve JSON Web Token
     *
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes (optional)
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes (optional)
     * @return String
     */
    @Operation(
        operationId = "getJsonWebToken",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved JWT token", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "expiryTimeInMins", description = "Token expiry time in minutes, default: 30 minutes"),
            @Parameter(name = "maxExpiryTimeInMins", description = "Maximum token expiry time in minutes, default: 480 minutes")
        }
    )
    @Get(uri="/jwt-auth/token")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_ANONYMOUS})
    public Mono<String> getJsonWebToken(
        @QueryValue(value="expiryTimeInMins") @Nullable Integer expiryTimeInMins, 
        @QueryValue(value="maxExpiryTimeInMins") @Nullable Integer maxExpiryTimeInMins
    ) {
        // TODO implement getJsonWebToken();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve organization details
     *
     * @param organization Name of the organization (required)
     * @return Organisation
     */
    @Operation(
        operationId = "getOrganisation",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organisation.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Pipeline cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Organisation> getOrganisation(
        @PathVariable(value="organization") @NotNull String organization
    ) {
        // TODO implement getOrganisation();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve all organizations details
     *
     * @return List&lt;Organisation&gt;
     */
    @Operation(
        operationId = "getOrganisations",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipelines details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organisation.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<Organisation>> getOrganisations() {
        // TODO implement getOrganisations();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve pipeline details for an organization
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Pipeline
     */
    @Operation(
        operationId = "getPipeline",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Pipeline.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Pipeline cannot be found on Jenkins instance")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<Pipeline> getPipeline(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipeline();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve all activities details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;PipelineActivity&gt;
     */
    @Operation(
        operationId = "getPipelineActivities",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved all activities details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineActivity.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<PipelineActivity>> getPipelineActivities(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipelineActivities();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve branch details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return BranchImpl
     */
    @Operation(
        operationId = "getPipelineBranch",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved branch details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BranchImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "branch", description = "Name of the branch", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<BranchImpl> getPipelineBranch(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="branch") @NotNull String branch
    ) {
        // TODO implement getPipelineBranch();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve branch run details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param run Name of the run (required)
     * @return PipelineRun
     */
    @Operation(
        operationId = "getPipelineBranchRun",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRun.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "branch", description = "Name of the branch", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<PipelineRun> getPipelineBranchRun(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="branch") @NotNull String branch, 
        @PathVariable(value="run") @NotNull String run
    ) {
        // TODO implement getPipelineBranchRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve all branches details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return MultibranchPipeline
     */
    @Operation(
        operationId = "getPipelineBranches",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved all branches details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MultibranchPipeline.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<MultibranchPipeline> getPipelineBranches(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipelineBranches();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve pipeline folder for an organization
     *
     * @param organization Name of the organization (required)
     * @param folder Name of the folder (required)
     * @return PipelineFolderImpl
     */
    @Operation(
        operationId = "getPipelineFolder",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved folder details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineFolderImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "folder", description = "Name of the folder", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{folder}/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<PipelineFolderImpl> getPipelineFolder(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="folder") @NotNull String folder
    ) {
        // TODO implement getPipelineFolder();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve pipeline details for an organization folder
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return PipelineImpl
     */
    @Operation(
        operationId = "getPipelineFolderPipeline",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "folder", description = "Name of the folder", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<PipelineImpl> getPipelineFolderPipeline(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="folder") @NotNull String folder
    ) {
        // TODO implement getPipelineFolderPipeline();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve queue details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;QueueItemImpl&gt;
     */
    @Operation(
        operationId = "getPipelineQueue",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved queue details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueueItemImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<QueueItemImpl>> getPipelineQueue(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipelineQueue();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve run details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return PipelineRun
     */
    @Operation(
        operationId = "getPipelineRun",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRun.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<PipelineRun> getPipelineRun(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run
    ) {
        // TODO implement getPipelineRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get log for a pipeline run
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param start Start position of the log (optional)
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)
     * @return String
     */
    @Operation(
        operationId = "getPipelineRunLog",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline run log", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true),
            @Parameter(name = "start", description = "Start position of the log"),
            @Parameter(name = "download", description = "Set to true in order to download the file, otherwise it's passed as a response body")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<String> getPipelineRunLog(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @QueryValue(value="start") @Nullable Integer start, 
        @QueryValue(value="download") @Nullable Boolean download
    ) {
        // TODO implement getPipelineRunLog();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve run node details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return PipelineRunNode
     */
    @Operation(
        operationId = "getPipelineRunNode",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run node details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRunNode.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true),
            @Parameter(name = "node", description = "Name of the node", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<PipelineRunNode> getPipelineRunNode(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @PathVariable(value="node") @NotNull String node
    ) {
        // TODO implement getPipelineRunNode();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve run node details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return PipelineStepImpl
     */
    @Operation(
        operationId = "getPipelineRunNodeStep",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run node step details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineStepImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true),
            @Parameter(name = "node", description = "Name of the node", required = true),
            @Parameter(name = "step", description = "Name of the step", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<PipelineStepImpl> getPipelineRunNodeStep(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @PathVariable(value="node") @NotNull String node, 
        @PathVariable(value="step") @NotNull String step
    ) {
        // TODO implement getPipelineRunNodeStep();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get log for a pipeline run node step
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return String
     */
    @Operation(
        operationId = "getPipelineRunNodeStepLog",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline run node step log", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true),
            @Parameter(name = "node", description = "Name of the node", required = true),
            @Parameter(name = "step", description = "Name of the step", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<String> getPipelineRunNodeStepLog(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @PathVariable(value="node") @NotNull String node, 
        @PathVariable(value="step") @NotNull String step
    ) {
        // TODO implement getPipelineRunNodeStepLog();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve run node steps details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return List&lt;PipelineStepImpl&gt;
     */
    @Operation(
        operationId = "getPipelineRunNodeSteps",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run node steps details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineStepImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true),
            @Parameter(name = "node", description = "Name of the node", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<PipelineStepImpl>> getPipelineRunNodeSteps(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @PathVariable(value="node") @NotNull String node
    ) {
        // TODO implement getPipelineRunNodeSteps();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve run nodes details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return List&lt;PipelineRunNode&gt;
     */
    @Operation(
        operationId = "getPipelineRunNodes",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run nodes details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRunNode.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<PipelineRunNode>> getPipelineRunNodes(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run
    ) {
        // TODO implement getPipelineRunNodes();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve all runs details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List&lt;PipelineRun&gt;
     */
    @Operation(
        operationId = "getPipelineRuns",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved runs details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRun.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<PipelineRun>> getPipelineRuns(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement getPipelineRuns();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve all pipelines details for an organization
     *
     * @param organization Name of the organization (required)
     * @return List&lt;Pipeline&gt;
     */
    @Operation(
        operationId = "getPipelines",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipelines details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Pipeline.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/pipelines/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<Pipeline>> getPipelines(
        @PathVariable(value="organization") @NotNull String organization
    ) {
        // TODO implement getPipelines();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve SCM details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @return GithubScm
     */
    @Operation(
        operationId = "getSCM",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved SCM details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GithubScm.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "scm", description = "Name of SCM", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/scm/{scm}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<GithubScm> getSCM(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="scm") @NotNull String scm
    ) {
        // TODO implement getSCM();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve SCM organization repositories details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param credentialId Credential ID (optional)
     * @param pageSize Number of items in a page (optional)
     * @param pageNumber Page number (optional)
     * @return List&lt;GithubOrganization&gt;
     */
    @Operation(
        operationId = "getSCMOrganisationRepositories",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved SCM organization repositories details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GithubOrganization.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "scm", description = "Name of SCM", required = true),
            @Parameter(name = "scmOrganisation", description = "Name of the SCM organization", required = true),
            @Parameter(name = "credentialId", description = "Credential ID"),
            @Parameter(name = "pageSize", description = "Number of items in a page"),
            @Parameter(name = "pageNumber", description = "Page number")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<GithubOrganization>> getSCMOrganisationRepositories(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="scm") @NotNull String scm, 
        @PathVariable(value="scmOrganisation") @NotNull String scmOrganisation, 
        @QueryValue(value="credentialId") @Nullable String credentialId, 
        @QueryValue(value="pageSize") @Nullable Integer pageSize, 
        @QueryValue(value="pageNumber") @Nullable Integer pageNumber
    ) {
        // TODO implement getSCMOrganisationRepositories();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve SCM organization repository details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param repository Name of the SCM repository (required)
     * @param credentialId Credential ID (optional)
     * @return List&lt;GithubOrganization&gt;
     */
    @Operation(
        operationId = "getSCMOrganisationRepository",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved SCM organizations details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GithubOrganization.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "scm", description = "Name of SCM", required = true),
            @Parameter(name = "scmOrganisation", description = "Name of the SCM organization", required = true),
            @Parameter(name = "repository", description = "Name of the SCM repository", required = true),
            @Parameter(name = "credentialId", description = "Credential ID")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<GithubOrganization>> getSCMOrganisationRepository(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="scm") @NotNull String scm, 
        @PathVariable(value="scmOrganisation") @NotNull String scmOrganisation, 
        @PathVariable(value="repository") @NotNull String repository, 
        @QueryValue(value="credentialId") @Nullable String credentialId
    ) {
        // TODO implement getSCMOrganisationRepository();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve SCM organizations details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param credentialId Credential ID (optional)
     * @return List&lt;GithubOrganization&gt;
     */
    @Operation(
        operationId = "getSCMOrganisations",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved SCM organizations details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GithubOrganization.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "scm", description = "Name of SCM", required = true),
            @Parameter(name = "credentialId", description = "Credential ID")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/scm/{scm}/organizations")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<GithubOrganization>> getSCMOrganisations(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="scm") @NotNull String scm, 
        @QueryValue(value="credentialId") @Nullable String credentialId
    ) {
        // TODO implement getSCMOrganisations();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve user details for an organization
     *
     * @param organization Name of the organization (required)
     * @param user Name of the user (required)
     * @return User
     */
    @Operation(
        operationId = "getUser",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved users details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "user", description = "Name of the user", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/users/{user}")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<User> getUser(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="user") @NotNull String user
    ) {
        // TODO implement getUser();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve user favorites details for an organization
     *
     * @param user Name of the user (required)
     * @return List&lt;FavoriteImpl&gt;
     */
    @Operation(
        operationId = "getUserFavorites",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved users favorites details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FavoriteImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "user", description = "Name of the user", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/users/{user}/favorites")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<List<FavoriteImpl>> getUserFavorites(
        @PathVariable(value="user") @NotNull String user
    ) {
        // TODO implement getUserFavorites();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Retrieve users details for an organization
     *
     * @param organization Name of the organization (required)
     * @return User
     */
    @Operation(
        operationId = "getUsers",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved users details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/organizations/{organization}/users/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<User> getUsers(
        @PathVariable(value="organization") @NotNull String organization
    ) {
        // TODO implement getUsers();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Replay an organization pipeline run
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return QueueItemImpl
     */
    @Operation(
        operationId = "postPipelineRun",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully replayed a pipeline run", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueueItemImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<QueueItemImpl> postPipelineRun(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run
    ) {
        // TODO implement postPipelineRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Start a build for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return QueueItemImpl
     */
    @Operation(
        operationId = "postPipelineRuns",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully started a build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueueItemImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Post(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<QueueItemImpl> postPipelineRuns(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline
    ) {
        // TODO implement postPipelineRuns();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Favorite/unfavorite a pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param _body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite (required)
     * @return FavoriteImpl
     */
    @Operation(
        operationId = "putPipelineFavorite",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully favorited/unfavorited a pipeline", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FavoriteImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "_body", description = "Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Put(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite")
    @Produces(value = {"application/json"})
    @Consumes(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<FavoriteImpl> putPipelineFavorite(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @Body @NotNull Boolean _body
    ) {
        // TODO implement putPipelineFavorite();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Stop a build of an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param blocking Set to true to make blocking stop, default: false (optional)
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds (optional)
     * @return PipelineRun
     */
    @Operation(
        operationId = "putPipelineRun",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully stopped a build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRun.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "organization", description = "Name of the organization", required = true),
            @Parameter(name = "pipeline", description = "Name of the pipeline", required = true),
            @Parameter(name = "run", description = "Name of the run", required = true),
            @Parameter(name = "blocking", description = "Set to true to make blocking stop, default: false"),
            @Parameter(name = "timeOutInSecs", description = "Timeout in seconds, default: 10 seconds")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Put(uri="/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<PipelineRun> putPipelineRun(
        @PathVariable(value="organization") @NotNull String organization, 
        @PathVariable(value="pipeline") @NotNull String pipeline, 
        @PathVariable(value="run") @NotNull String run, 
        @QueryValue(value="blocking") @Nullable String blocking, 
        @QueryValue(value="timeOutInSecs") @Nullable Integer timeOutInSecs
    ) {
        // TODO implement putPipelineRun();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Search for any resource details
     *
     * @param q Query string (required)
     * @return String
     */
    @Operation(
        operationId = "search",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved search result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "q", description = "Query string", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/search/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<String> search(
        @QueryValue(value="q") @NotNull String q
    ) {
        // TODO implement search();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }


    /**
     * Get classes details
     *
     * @param q Query string containing an array of class names (required)
     * @return String
     */
    @Operation(
        operationId = "searchClasses",
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved search result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        parameters = {
            @Parameter(name = "q", description = "Query string containing an array of class names", required = true)
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @Get(uri="/blue/rest/classes/")
    @Produces(value = {"application/json"})
    @Secured({SecurityRule.IS_AUTHENTICATED})
    public Mono<String> searchClasses(
        @QueryValue(value="q") @NotNull String q
    ) {
        // TODO implement searchClasses();
        return Mono.error(new HttpStatusException(HttpStatus.NOT_IMPLEMENTED, null));
    }

}
