# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SwaggyJenkins.Api.RemoteAccess do
  @moduledoc """
  API calls for all endpoints tagged `RemoteAccess`.
  """

  alias SwaggyJenkins.Connection
  import SwaggyJenkins.RequestBuilder

  @doc """
  Retrieve computer details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `depth` (integer()): Recursion depth in response model
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.ComputerSet.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_computer(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.ComputerSet.t} | {:error, Tesla.Env.t}
  def get_computer(connection, depth, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/computer/api/json")
      |> add_param(:query, :depth, depth)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.ComputerSet},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve Jenkins details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.Hudson.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_jenkins(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.Hudson.t} | {:error, Tesla.Env.t}
  def get_jenkins(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/api/json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.Hudson},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve job details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.FreeStyleProject.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_job(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.FreeStyleProject.t} | {:error, Tesla.Env.t}
  def get_job(connection, name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/job/#{name}/api/json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.FreeStyleProject},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Retrieve job configuration

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_job_config(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_job_config(connection, name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/job/#{name}/config.xml")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Retrieve job's last build details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.FreeStyleBuild.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_job_last_build(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.FreeStyleBuild.t} | {:error, Tesla.Env.t}
  def get_job_last_build(connection, name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/job/#{name}/lastBuild/api/json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.FreeStyleBuild},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Retrieve job's build progressive text output

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `number` (String.t): Build number
  - `start` (String.t): Starting point of progressive text output
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_job_progressive_text(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def get_job_progressive_text(connection, name, number, start, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/job/#{name}/#{number}/logText/progressiveText")
      |> add_param(:query, :start, start)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Retrieve queue details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.Queue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_queue(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.Queue.t} | {:error, Tesla.Env.t}
  def get_queue(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/queue/api/json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.Queue},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve queued item details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `number` (String.t): Queue number
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.Queue.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_queue_item(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.Queue.t} | {:error, Tesla.Env.t}
  def get_queue_item(connection, number, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/queue/item/#{number}/api/json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.Queue},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve view details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the view
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.ListView.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_view(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.ListView.t} | {:error, Tesla.Env.t}
  def get_view(connection, name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/view/#{name}/api/json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.ListView},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Retrieve view configuration

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the view
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_view_config(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_view_config(connection, name, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/view/#{name}/config.xml")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Retrieve Jenkins headers

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec head_jenkins(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def head_jenkins(connection, _opts \\ []) do
    request =
      %{}
      |> method(:head)
      |> url("/api/json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Create a new job using job configuration, or copied from an existing job

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the new job
  - `opts` (keyword): Optional parameters
    - `:from` (String.t): Existing job to copy from
    - `:mode` (String.t): Set to 'copy' for copying an existing job
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token
    - `:"Content-Type"` (String.t): Content type header application/xml
    - `:body` (String.t): Job configuration in config.xml format

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_create_item(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def post_create_item(connection, name, opts \\ []) do
    optional_params = %{
      :from => :query,
      :mode => :query,
      :"Jenkins-Crumb" => :headers,
      :"Content-Type" => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/createItem")
      |> add_param(:query, :name, name)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Create a new view using view configuration

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the new view
  - `opts` (keyword): Optional parameters
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token
    - `:"Content-Type"` (String.t): Content type header application/xml
    - `:body` (String.t): View configuration in config.xml format

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_create_view(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def post_create_view(connection, name, opts \\ []) do
    optional_params = %{
      :"Jenkins-Crumb" => :headers,
      :"Content-Type" => :headers,
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/createView")
      |> add_param(:query, :name, name)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Build a job

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `json` (String.t): 
  - `opts` (keyword): Optional parameters
    - `:token` (String.t): 
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_job_build(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_job_build(connection, name, json, opts \\ []) do
    optional_params = %{
      :token => :query,
      :"Jenkins-Crumb" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/job/#{name}/build")
      |> add_param(:query, :json, json)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {201, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Update job configuration

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `body` (String.t): Job configuration in config.xml format
  - `opts` (keyword): Optional parameters
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_job_config(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def post_job_config(connection, name, body, opts \\ []) do
    optional_params = %{
      :"Jenkins-Crumb" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/job/#{name}/config.xml")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Delete a job

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `opts` (keyword): Optional parameters
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_job_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_job_delete(connection, name, opts \\ []) do
    optional_params = %{
      :"Jenkins-Crumb" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/job/#{name}/doDelete")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Disable a job

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `opts` (keyword): Optional parameters
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_job_disable(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_job_disable(connection, name, opts \\ []) do
    optional_params = %{
      :"Jenkins-Crumb" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/job/#{name}/disable")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Enable a job

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `opts` (keyword): Optional parameters
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_job_enable(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_job_enable(connection, name, opts \\ []) do
    optional_params = %{
      :"Jenkins-Crumb" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/job/#{name}/enable")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Stop a job

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the job
  - `opts` (keyword): Optional parameters
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_job_last_build_stop(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def post_job_last_build_stop(connection, name, opts \\ []) do
    optional_params = %{
      :"Jenkins-Crumb" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/job/#{name}/lastBuild/stop")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Update view configuration

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `name` (String.t): Name of the view
  - `body` (String.t): View configuration in config.xml format
  - `opts` (keyword): Optional parameters
    - `:"Jenkins-Crumb"` (String.t): CSRF protection token

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_view_config(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def post_view_config(connection, name, body, opts \\ []) do
    optional_params = %{
      :"Jenkins-Crumb" => :headers
    }

    request =
      %{}
      |> method(:post)
      |> url("/view/#{name}/config.xml")
      |> add_param(:body, :body, body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end
end
