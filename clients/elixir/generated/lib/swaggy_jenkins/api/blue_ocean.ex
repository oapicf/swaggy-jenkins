# NOTE: This file is auto generated by OpenAPI Generator 7.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SwaggyJenkins.Api.BlueOcean do
  @moduledoc """
  API calls for all endpoints tagged `BlueOcean`.
  """

  alias SwaggyJenkins.Connection
  import SwaggyJenkins.RequestBuilder

  @doc """
  Delete queue item from an organization pipeline queue

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `queue` (String.t): Name of the queue item
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_pipeline_queue_item(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def delete_pipeline_queue_item(connection, organization, pipeline, queue, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/queue/#{queue}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve authenticated user details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.User.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_authenticated_user(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.User.t} | {:error, Tesla.Env.t}
  def get_authenticated_user(connection, organization, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/user/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.User},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Get a list of class names supported by a given class

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `class` (String.t): Name of the class
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_classes(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_classes(connection, class, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/classes/#{class}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve JSON Web Key

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `key` (integer()): Key ID received as part of JWT header field kid
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_json_web_key(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_json_web_key(connection, key, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/jwt-auth/jwks/#{key}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve JSON Web Token

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:expiryTimeInMins` (integer()): Token expiry time in minutes, default: 30 minutes
    - `:maxExpiryTimeInMins` (integer()): Maximum token expiry time in minutes, default: 480 minutes

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_json_web_token(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_json_web_token(connection, opts \\ []) do
    optional_params = %{
      :expiryTimeInMins => :query,
      :maxExpiryTimeInMins => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/jwt-auth/token")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve organization details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.Organisation.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_organisation(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.Organisation.t} | {:error, Tesla.Env.t}
  def get_organisation(connection, organization, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.Organisation},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Retrieve all organizations details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Organisation{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_organisations(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.Organisation.t)} | {:error, Tesla.Env.t}
  def get_organisations(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.Organisation},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve pipeline details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.Pipeline.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.Pipeline.t} | {:error, Tesla.Env.t}
  def get_pipeline(connection, organization, pipeline, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.Pipeline},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Retrieve all activities details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PipelineActivity{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_activities(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.PipelineActivity.t)} | {:error, Tesla.Env.t}
  def get_pipeline_activities(connection, organization, pipeline, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/activities")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineActivity},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve branch details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `branch` (String.t): Name of the branch
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.BranchImpl.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_branch(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.BranchImpl.t} | {:error, Tesla.Env.t}
  def get_pipeline_branch(connection, organization, pipeline, branch, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/branches/#{branch}/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.BranchImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve branch run details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `branch` (String.t): Name of the branch
  - `run` (String.t): Name of the run
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.PipelineRun.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_branch_run(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.PipelineRun.t} | {:error, Tesla.Env.t}
  def get_pipeline_branch_run(connection, organization, pipeline, branch, run, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/branches/#{branch}/runs/#{run}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineRun},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve all branches details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.MultibranchPipeline.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_branches(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.MultibranchPipeline.t} | {:error, Tesla.Env.t}
  def get_pipeline_branches(connection, organization, pipeline, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/branches")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.MultibranchPipeline},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve pipeline folder for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `folder` (String.t): Name of the folder
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.PipelineFolderImpl.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_folder(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.PipelineFolderImpl.t} | {:error, Tesla.Env.t}
  def get_pipeline_folder(connection, organization, folder, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{folder}/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineFolderImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve pipeline details for an organization folder

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `folder` (String.t): Name of the folder
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.PipelineImpl.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_folder_pipeline(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.PipelineImpl.t} | {:error, Tesla.Env.t}
  def get_pipeline_folder_pipeline(connection, organization, pipeline, folder, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{folder}/pipelines/#{pipeline}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve queue details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%QueueItemImpl{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_queue(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.QueueItemImpl.t)} | {:error, Tesla.Env.t}
  def get_pipeline_queue(connection, organization, pipeline, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/queue")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.QueueItemImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve run details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.PipelineRun.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_run(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.PipelineRun.t} | {:error, Tesla.Env.t}
  def get_pipeline_run(connection, organization, pipeline, run, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineRun},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Get log for a pipeline run

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `opts` (keyword): Optional parameters
    - `:start` (integer()): Start position of the log
    - `:download` (boolean()): Set to true in order to download the file, otherwise it's passed as a response body

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_run_log(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_log(connection, organization, pipeline, run, opts \\ []) do
    optional_params = %{
      :start => :query,
      :download => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/log")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve run node details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `node` (String.t): Name of the node
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.PipelineRunNode.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_run_node(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.PipelineRunNode.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_node(connection, organization, pipeline, run, node, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes/#{node}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineRunNode},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve run node details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `node` (String.t): Name of the node
  - `step` (String.t): Name of the step
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.PipelineStepImpl.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_run_node_step(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.PipelineStepImpl.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_node_step(connection, organization, pipeline, run, node, step, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes/#{node}/steps/#{step}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineStepImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Get log for a pipeline run node step

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `node` (String.t): Name of the node
  - `step` (String.t): Name of the step
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_run_node_step_log(Tesla.Env.client, String.t, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def get_pipeline_run_node_step_log(connection, organization, pipeline, run, node, step, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes/#{node}/steps/#{step}/log")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve run node steps details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `node` (String.t): Name of the node
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PipelineStepImpl{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_run_node_steps(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.PipelineStepImpl.t)} | {:error, Tesla.Env.t}
  def get_pipeline_run_node_steps(connection, organization, pipeline, run, node, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes/#{node}/steps")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineStepImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve run nodes details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PipelineRunNode{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_run_nodes(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.PipelineRunNode.t)} | {:error, Tesla.Env.t}
  def get_pipeline_run_nodes(connection, organization, pipeline, run, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/nodes")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineRunNode},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve all runs details for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%PipelineRun{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipeline_runs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.PipelineRun.t)} | {:error, Tesla.Env.t}
  def get_pipeline_runs(connection, organization, pipeline, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineRun},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve all pipelines details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Pipeline{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_pipelines(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.Pipeline.t)} | {:error, Tesla.Env.t}
  def get_pipelines(connection, organization, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/pipelines/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.Pipeline},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve SCM details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `scm` (String.t): Name of SCM
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.GithubScm.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_scm(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.GithubScm.t} | {:error, Tesla.Env.t}
  def get_scm(connection, organization, scm, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/scm/#{scm}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.GithubScm},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve SCM organization repositories details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `scm` (String.t): Name of SCM
  - `scm_organisation` (String.t): Name of the SCM organization
  - `opts` (keyword): Optional parameters
    - `:credentialId` (String.t): Credential ID
    - `:pageSize` (integer()): Number of items in a page
    - `:pageNumber` (integer()): Page number

  ### Returns

  - `{:ok, [%GithubOrganization{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_scm_organisation_repositories(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.GithubOrganization.t)} | {:error, Tesla.Env.t}
  def get_scm_organisation_repositories(connection, organization, scm, scm_organisation, opts \\ []) do
    optional_params = %{
      :credentialId => :query,
      :pageSize => :query,
      :pageNumber => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/scm/#{scm}/organizations/#{scm_organisation}/repositories")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.GithubOrganization},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve SCM organization repository details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `scm` (String.t): Name of SCM
  - `scm_organisation` (String.t): Name of the SCM organization
  - `repository` (String.t): Name of the SCM repository
  - `opts` (keyword): Optional parameters
    - `:credentialId` (String.t): Credential ID

  ### Returns

  - `{:ok, [%GithubOrganization{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_scm_organisation_repository(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.GithubOrganization.t)} | {:error, Tesla.Env.t}
  def get_scm_organisation_repository(connection, organization, scm, scm_organisation, repository, opts \\ []) do
    optional_params = %{
      :credentialId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/scm/#{scm}/organizations/#{scm_organisation}/repositories/#{repository}")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.GithubOrganization},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve SCM organizations details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `scm` (String.t): Name of SCM
  - `opts` (keyword): Optional parameters
    - `:credentialId` (String.t): Credential ID

  ### Returns

  - `{:ok, [%GithubOrganization{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_scm_organisations(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.GithubOrganization.t)} | {:error, Tesla.Env.t}
  def get_scm_organisations(connection, organization, scm, opts \\ []) do
    optional_params = %{
      :credentialId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/scm/#{scm}/organizations")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.GithubOrganization},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve user details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `user` (String.t): Name of the user
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.User.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_user(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.User.t} | {:error, Tesla.Env.t}
  def get_user(connection, organization, user, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/users/#{user}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.User},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve user favorites details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `user` (String.t): Name of the user
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%FavoriteImpl{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_user_favorites(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, list(SwaggyJenkins.Model.FavoriteImpl.t)} | {:error, Tesla.Env.t}
  def get_user_favorites(connection, user, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/users/#{user}/favorites")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.FavoriteImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Retrieve users details for an organization

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.User.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_users(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.User.t} | {:error, Tesla.Env.t}
  def get_users(connection, organization, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/organizations/#{organization}/users/")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.User},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Replay an organization pipeline run

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.QueueItemImpl.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_pipeline_run(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.QueueItemImpl.t} | {:error, Tesla.Env.t}
  def post_pipeline_run(connection, organization, pipeline, run, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/replay")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.QueueItemImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Start a build for an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.QueueItemImpl.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec post_pipeline_runs(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.QueueItemImpl.t} | {:error, Tesla.Env.t}
  def post_pipeline_runs(connection, organization, pipeline, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs")
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.QueueItemImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Favorite/unfavorite a pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `body` (boolean()): Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SwaggyJenkins.Model.FavoriteImpl.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_pipeline_favorite(Tesla.Env.client, String.t, String.t, boolean(), keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.FavoriteImpl.t} | {:error, Tesla.Env.t}
  def put_pipeline_favorite(connection, organization, pipeline, body, _opts \\ []) do
    request =
      %{}
      |> method(:put)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/favorite")
      |> add_param(:body, :body, body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.FavoriteImpl},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Stop a build of an organization pipeline

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `organization` (String.t): Name of the organization
  - `pipeline` (String.t): Name of the pipeline
  - `run` (String.t): Name of the run
  - `opts` (keyword): Optional parameters
    - `:blocking` (String.t): Set to true to make blocking stop, default: false
    - `:timeOutInSecs` (integer()): Timeout in seconds, default: 10 seconds

  ### Returns

  - `{:ok, SwaggyJenkins.Model.PipelineRun.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec put_pipeline_run(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SwaggyJenkins.Model.PipelineRun.t} | {:error, Tesla.Env.t}
  def put_pipeline_run(connection, organization, pipeline, run, opts \\ []) do
    optional_params = %{
      :blocking => :query,
      :timeOutInSecs => :query
    }

    request =
      %{}
      |> method(:put)
      |> url("/blue/rest/organizations/#{organization}/pipelines/#{pipeline}/runs/#{run}/stop")
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SwaggyJenkins.Model.PipelineRun},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Search for any resource details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `q` (String.t): Query string
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def search(connection, q, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/search/")
      |> add_param(:query, :q, q)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end

  @doc """
  Get classes details

  ### Parameters

  - `connection` (SwaggyJenkins.Connection): Connection to server
  - `q` (String.t): Query string containing an array of class names
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_classes(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def search_classes(connection, q, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/blue/rest/classes/")
      |> add_param(:query, :q, q)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false}
    ])
  end
end
