/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { BranchImpl } from '../model/branchImpl';
import { FavoriteImpl } from '../model/favoriteImpl';
import { GithubOrganization } from '../model/githubOrganization';
import { GithubScm } from '../model/githubScm';
import { MultibranchPipeline } from '../model/multibranchPipeline';
import { Organisation } from '../model/organisation';
import { Pipeline } from '../model/pipeline';
import { PipelineActivity } from '../model/pipelineActivity';
import { PipelineFolderImpl } from '../model/pipelineFolderImpl';
import { PipelineImpl } from '../model/pipelineImpl';
import { PipelineRun } from '../model/pipelineRun';
import { PipelineRunNode } from '../model/pipelineRunNode';
import { PipelineStepImpl } from '../model/pipelineStepImpl';
import { QueueItemImpl } from '../model/queueItemImpl';
import { User } from '../model/user';
import { Configuration } from '../configuration';


@Injectable()
export class BlueOceanService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Record<string,string> = {};
    public configuration = new Configuration();

    constructor(protected httpClient: HttpService, @Optional() configuration: Configuration) {
        this.configuration = configuration || this.configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        return consumes.includes(form);
    }

    /**
     * 
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param queue Name of the queue item
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, ): Observable<AxiosResponse<any>>;
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling deletePipelineQueueItem.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling deletePipelineQueueItem.');
        }

        if (queue === null || queue === undefined) {
            throw new Error('Required parameter queue was null or undefined when calling deletePipelineQueueItem.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.delete<any>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/queue/${encodeURIComponent(String(queue))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAuthenticatedUser(organization: string, ): Observable<AxiosResponse<User>>;
    public getAuthenticatedUser(organization: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getAuthenticatedUser.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<User>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/user/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Get a list of class names supported by a given class
     * @param _class Name of the class
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getClasses(_class: string, ): Observable<AxiosResponse<string>>;
    public getClasses(_class: string, ): Observable<any> {

        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling getClasses.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<string>(`${this.basePath}/blue/rest/classes/${encodeURIComponent(String(_class))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve JSON Web Key
     * @param key Key ID received as part of JWT header field kid
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJsonWebKey(key: number, ): Observable<AxiosResponse<string>>;
    public getJsonWebKey(key: number, ): Observable<any> {

        if (key === null || key === undefined) {
            throw new Error('Required parameter key was null or undefined when calling getJsonWebKey.');
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<string>(`${this.basePath}/jwt-auth/jwks/${encodeURIComponent(String(key))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve JSON Web Token
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, ): Observable<AxiosResponse<string>>;
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, ): Observable<any> {



        let queryParameters = new URLSearchParams();
        if (expiryTimeInMins !== undefined && expiryTimeInMins !== null) {
            queryParameters.append('expiryTimeInMins', <any>expiryTimeInMins);
        }
        if (maxExpiryTimeInMins !== undefined && maxExpiryTimeInMins !== null) {
            queryParameters.append('maxExpiryTimeInMins', <any>maxExpiryTimeInMins);
        }

        let headers = {...this.defaultHeaders};

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<string>(`${this.basePath}/jwt-auth/token`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve organization details
     * @param organization Name of the organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganisation(organization: string, ): Observable<AxiosResponse<Organisation>>;
    public getOrganisation(organization: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getOrganisation.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Organisation>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve all organizations details
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getOrganisations(): Observable<AxiosResponse<Array<Organisation>>>;
    public getOrganisations(): Observable<any> {

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<Organisation>>(`${this.basePath}/blue/rest/organizations/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipeline(organization: string, pipeline: string, ): Observable<AxiosResponse<Pipeline>>;
    public getPipeline(organization: string, pipeline: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipeline.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipeline.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Pipeline>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineActivities(organization: string, pipeline: string, ): Observable<AxiosResponse<Array<PipelineActivity>>>;
    public getPipelineActivities(organization: string, pipeline: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineActivities.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineActivities.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<PipelineActivity>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/activities`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineBranch(organization: string, pipeline: string, branch: string, ): Observable<AxiosResponse<BranchImpl>>;
    public getPipelineBranch(organization: string, pipeline: string, branch: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranch.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranch.');
        }

        if (branch === null || branch === undefined) {
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranch.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<BranchImpl>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches/${encodeURIComponent(String(branch))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     * @param run Name of the run
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, ): Observable<AxiosResponse<PipelineRun>>;
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranchRun.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranchRun.');
        }

        if (branch === null || branch === undefined) {
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranchRun.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineBranchRun.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<PipelineRun>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches/${encodeURIComponent(String(branch))}/runs/${encodeURIComponent(String(run))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineBranches(organization: string, pipeline: string, ): Observable<AxiosResponse<MultibranchPipeline>>;
    public getPipelineBranches(organization: string, pipeline: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranches.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranches.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<MultibranchPipeline>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization
     * @param folder Name of the folder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineFolder(organization: string, folder: string, ): Observable<AxiosResponse<PipelineFolderImpl>>;
    public getPipelineFolder(organization: string, folder: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineFolder.');
        }

        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolder.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<PipelineFolderImpl>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(folder))}/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param folder Name of the folder
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, ): Observable<AxiosResponse<PipelineImpl>>;
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineFolderPipeline.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineFolderPipeline.');
        }

        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolderPipeline.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<PipelineImpl>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(folder))}/pipelines/${encodeURIComponent(String(pipeline))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineQueue(organization: string, pipeline: string, ): Observable<AxiosResponse<Array<QueueItemImpl>>>;
    public getPipelineQueue(organization: string, pipeline: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineQueue.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineQueue.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<QueueItemImpl>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/queue`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRun(organization: string, pipeline: string, run: string, ): Observable<AxiosResponse<PipelineRun>>;
    public getPipelineRun(organization: string, pipeline: string, run: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRun.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRun.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRun.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<PipelineRun>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Get log for a pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param start Start position of the log
     * @param download Set to true in order to download the file, otherwise it\&#39;s passed as a response body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, ): Observable<AxiosResponse<string>>;
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunLog.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunLog.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunLog.');
        }



        let queryParameters = new URLSearchParams();
        if (start !== undefined && start !== null) {
            queryParameters.append('start', <any>start);
        }
        if (download !== undefined && download !== null) {
            queryParameters.append('download', <any>download);
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<string>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/log`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, ): Observable<AxiosResponse<PipelineRunNode>>;
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNode.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNode.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNode.');
        }

        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNode.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<PipelineRunNode>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, ): Observable<AxiosResponse<PipelineStepImpl>>;
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeStep.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeStep.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeStep.');
        }

        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeStep.');
        }

        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling getPipelineRunNodeStep.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<PipelineStepImpl>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps/${encodeURIComponent(String(step))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Get log for a pipeline run node step
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, ): Observable<AxiosResponse<string>>;
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<string>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps/${encodeURIComponent(String(step))}/log`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, ): Observable<AxiosResponse<Array<PipelineStepImpl>>>;
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeSteps.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeSteps.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeSteps.');
        }

        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeSteps.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<PipelineStepImpl>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, ): Observable<AxiosResponse<Array<PipelineRunNode>>>;
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodes.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodes.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodes.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<PipelineRunNode>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelineRuns(organization: string, pipeline: string, ): Observable<AxiosResponse<Array<PipelineRun>>>;
    public getPipelineRuns(organization: string, pipeline: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRuns.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRuns.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<PipelineRun>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPipelines(organization: string, ): Observable<AxiosResponse<Array<Pipeline>>>;
    public getPipelines(organization: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelines.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<Pipeline>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve SCM details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSCM(organization: string, scm: string, ): Observable<AxiosResponse<GithubScm>>;
    public getSCM(organization: string, scm: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCM.');
        }

        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCM.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<GithubScm>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param credentialId Credential ID
     * @param pageSize Number of items in a page
     * @param pageNumber Page number
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, ): Observable<AxiosResponse<Array<GithubOrganization>>>;
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisationRepositories.');
        }

        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisationRepositories.');
        }

        if (scmOrganisation === null || scmOrganisation === undefined) {
            throw new Error('Required parameter scmOrganisation was null or undefined when calling getSCMOrganisationRepositories.');
        }




        let queryParameters = new URLSearchParams();
        if (credentialId !== undefined && credentialId !== null) {
            queryParameters.append('credentialId', <any>credentialId);
        }
        if (pageSize !== undefined && pageSize !== null) {
            queryParameters.append('pageSize', <any>pageSize);
        }
        if (pageNumber !== undefined && pageNumber !== null) {
            queryParameters.append('pageNumber', <any>pageNumber);
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<GithubOrganization>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations/${encodeURIComponent(String(scmOrganisation))}/repositories`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param repository Name of the SCM repository
     * @param credentialId Credential ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, ): Observable<AxiosResponse<Array<GithubOrganization>>>;
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisationRepository.');
        }

        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisationRepository.');
        }

        if (scmOrganisation === null || scmOrganisation === undefined) {
            throw new Error('Required parameter scmOrganisation was null or undefined when calling getSCMOrganisationRepository.');
        }

        if (repository === null || repository === undefined) {
            throw new Error('Required parameter repository was null or undefined when calling getSCMOrganisationRepository.');
        }


        let queryParameters = new URLSearchParams();
        if (credentialId !== undefined && credentialId !== null) {
            queryParameters.append('credentialId', <any>credentialId);
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<GithubOrganization>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations/${encodeURIComponent(String(scmOrganisation))}/repositories/${encodeURIComponent(String(repository))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param credentialId Credential ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, ): Observable<AxiosResponse<Array<GithubOrganization>>>;
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisations.');
        }

        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisations.');
        }


        let queryParameters = new URLSearchParams();
        if (credentialId !== undefined && credentialId !== null) {
            queryParameters.append('credentialId', <any>credentialId);
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<GithubOrganization>>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve user details for an organization
     * @param organization Name of the organization
     * @param user Name of the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUser(organization: string, user: string, ): Observable<AxiosResponse<User>>;
    public getUser(organization: string, user: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getUser.');
        }

        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getUser.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<User>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/users/${encodeURIComponent(String(user))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve user favorites details for an organization
     * @param user Name of the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUserFavorites(user: string, ): Observable<AxiosResponse<Array<FavoriteImpl>>>;
    public getUserFavorites(user: string, ): Observable<any> {

        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getUserFavorites.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<Array<FavoriteImpl>>(`${this.basePath}/blue/rest/users/${encodeURIComponent(String(user))}/favorites`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Retrieve users details for an organization
     * @param organization Name of the organization
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getUsers(organization: string, ): Observable<AxiosResponse<User>>;
    public getUsers(organization: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getUsers.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<User>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/users/`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Replay an organization pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPipelineRun(organization: string, pipeline: string, run: string, ): Observable<AxiosResponse<QueueItemImpl>>;
    public postPipelineRun(organization: string, pipeline: string, run: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling postPipelineRun.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling postPipelineRun.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling postPipelineRun.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<QueueItemImpl>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/replay`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Start a build for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public postPipelineRuns(organization: string, pipeline: string, ): Observable<AxiosResponse<QueueItemImpl>>;
    public postPipelineRuns(organization: string, pipeline: string, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling postPipelineRuns.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling postPipelineRuns.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.post<QueueItemImpl>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putPipelineFavorite(organization: string, pipeline: string, body: boolean, ): Observable<AxiosResponse<FavoriteImpl>>;
    public putPipelineFavorite(organization: string, pipeline: string, body: boolean, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling putPipelineFavorite.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling putPipelineFavorite.');
        }

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putPipelineFavorite.');
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers['Content-Type'] = httpContentTypeSelected;
        }
        return this.httpClient.put<FavoriteImpl>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/favorite`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Stop a build of an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param blocking Set to true to make blocking stop, default: false
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, ): Observable<AxiosResponse<PipelineRun>>;
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, ): Observable<any> {

        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling putPipelineRun.');
        }

        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling putPipelineRun.');
        }

        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling putPipelineRun.');
        }



        let queryParameters = new URLSearchParams();
        if (blocking !== undefined && blocking !== null) {
            queryParameters.append('blocking', <any>blocking);
        }
        if (timeOutInSecs !== undefined && timeOutInSecs !== null) {
            queryParameters.append('timeOutInSecs', <any>timeOutInSecs);
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.put<PipelineRun>(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/stop`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Search for any resource details
     * @param q Query string
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public search(q: string, ): Observable<AxiosResponse<string>>;
    public search(q: string, ): Observable<any> {

        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling search.');
        }

        let queryParameters = new URLSearchParams();
        if (q !== undefined && q !== null) {
            queryParameters.append('q', <any>q);
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<string>(`${this.basePath}/blue/rest/search/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchClasses(q: string, ): Observable<AxiosResponse<string>>;
    public searchClasses(q: string, ): Observable<any> {

        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling searchClasses.');
        }

        let queryParameters = new URLSearchParams();
        if (q !== undefined && q !== null) {
            queryParameters.append('q', <any>q);
        }

        let headers = {...this.defaultHeaders};

        // authentication (jenkins_auth) required
        if (this.configuration.username || this.configuration.password) {
            headers['Authorization'] = 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers['Accept'] = httpHeaderAcceptSelected;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        return this.httpClient.get<string>(`${this.basePath}/blue/rest/classes/`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers
            }
        );
    }
}
