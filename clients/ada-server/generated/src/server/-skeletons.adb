--  Swaggy Jenkins
--  Jenkins API clients generated from Swagger / Open API specification
--
--  The version of the OpenAPI document: 3.0.2_pre.0
--  Contact: blah+oapicf@cliffano.com
--
--  NOTE: This package is auto generated by OpenAPI-Generator 7.12.0.
--  https://openapi-generator.tech
--  Do not edit the class manually.

pragma Warnings (Off, "*is not referenced");
with Swagger.Streams;
with Swagger.Servers.Operation;
package body .Skeletons is
   pragma Style_Checks ("-bmrIu");
   pragma Warnings (Off, "*use clause for package*");

   use Swagger.Streams;

   Mime_1 : aliased constant String := "*/*";
   Mime_2 : aliased constant String := "text/xml";
   Media_List_1 : aliased constant Swagger.Mime_List := (
     1 => Swagger.Mime_Json);   Media_List_2 : aliased constant Swagger.Mime_List := (
     1 => Mime_1'Access);   Media_List_3 : aliased constant Swagger.Mime_List := (
     1 => Mime_2'Access);

   package body Skeleton is


      package API_Get_Crumb is
         new Swagger.Servers.Operation
            (Handler => Get_Crumb,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/crumbIssuer/api/json",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Crumb
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.DefaultCrumbIssuer_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Impl.Get_Crumb (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved CSRF protection token");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Crumb;

      package API_Delete_Pipeline_Queue_Item is
         new Swagger.Servers.Operation
            (Handler => Delete_Pipeline_Queue_Item,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}",
             Mimes   => null);

      --  
      procedure Delete_Pipeline_Queue_Item
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Queue : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Queue := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Impl.Delete_Pipeline_Queue_Item
            (Organization,
             Pipeline,
             Queue, Context);

      end Delete_Pipeline_Queue_Item;

      package API_Get_Authenticated_User is
         new Swagger.Servers.Operation
            (Handler => Get_Authenticated_User,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/user/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Authenticated_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Result : .Models.User_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Authenticated_User
            (Organization, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved authenticated user details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Authenticated_User;

      package API_Get_Classes is
         new Swagger.Servers.Operation
            (Handler => Get_Classes,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/classes/{class}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Classes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Class : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Class := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Classes
            (Class, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved class names");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Classes;

      package API_Get_Json_Web_Key is
         new Swagger.Servers.Operation
            (Handler => Get_Json_Web_Key,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/jwt-auth/jwks/{key}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Json_Web_Key
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Key : Integer;
         Result : Swagger.UString;
      begin
         
         
         Key := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Json_Web_Key
            (Key, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved JWT token");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Json_Web_Key;

      package API_Get_Json_Web_Token is
         new Swagger.Servers.Operation
            (Handler => Get_Json_Web_Token,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/jwt-auth/token",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Json_Web_Token
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Expiry_Time_In_Mins : Swagger.Nullable_Integer;
         Max_Expiry_Time_In_Mins : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         
         Expiry_Time_In_Mins := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "expiryTimeInMins"));

         Max_Expiry_Time_In_Mins := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "maxExpiryTimeInMins"));

         
         Impl.Get_Json_Web_Token
            (Expiry_Time_In_Mins,
             Max_Expiry_Time_In_Mins, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved JWT token");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Json_Web_Token;

      package API_Get_Organisation is
         new Swagger.Servers.Operation
            (Handler => Get_Organisation,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Organisation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Result : .Models.Organisation_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Organisation
            (Organization, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pipeline cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Organisation;

      package API_Get_Organisations is
         new Swagger.Servers.Operation
            (Handler => Get_Organisations,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Organisations
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.Organisation_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Impl.Get_Organisations (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipelines details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Organisations;

      package API_Get_Pipeline is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.Pipeline_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Pipeline
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pipeline cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Pipeline;

      package API_Get_Pipeline_Activities is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Activities,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Activities
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.PipelineActivity_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Pipeline_Activities
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved all activities details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Activities;

      package API_Get_Pipeline_Branch is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Branch,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Branch
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Branch : Swagger.UString;
         Result : .Models.BranchImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Branch := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Impl.Get_Pipeline_Branch
            (Organization,
             Pipeline,
             Branch, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved branch details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Branch;

      package API_Get_Pipeline_Branch_Run is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Branch_Run,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Branch_Run
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Branch : Swagger.UString;
         Run : Swagger.UString;
         Result : .Models.PipelineRun_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Branch := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Impl.Get_Pipeline_Branch_Run
            (Organization,
             Pipeline,
             Branch,
             Run, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Branch_Run;

      package API_Get_Pipeline_Branches is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Branches,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Branches
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.MultibranchPipeline_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Pipeline_Branches
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved all branches details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Branches;

      package API_Get_Pipeline_Folder is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Folder,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{folder}/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Folder
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Folder : Swagger.UString;
         Result : .Models.PipelineFolderImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Folder := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Pipeline_Folder
            (Organization,
             Folder, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved folder details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Folder;

      package API_Get_Pipeline_Folder_Pipeline is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Folder_Pipeline,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Folder_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Folder : Swagger.UString;
         Result : .Models.PipelineImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Folder := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Pipeline_Folder_Pipeline
            (Organization,
             Pipeline,
             Folder, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Folder_Pipeline;

      package API_Get_Pipeline_Queue is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Queue,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Queue
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.QueueItemImpl_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Pipeline_Queue
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved queue details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Queue;

      package API_Get_Pipeline_Run is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Run
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Result : .Models.PipelineRun_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Impl.Get_Pipeline_Run
            (Organization,
             Pipeline,
             Run, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run;

      package API_Get_Pipeline_Run_Log is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Log,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Run_Log
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Start : Swagger.Nullable_Integer;
         Download : Swagger.Nullable_Boolean;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Start := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start"));

         Download := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "download"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Impl.Get_Pipeline_Run_Log
            (Organization,
             Pipeline,
             Run,
             Start,
             Download, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline run log");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Log;

      package API_Get_Pipeline_Run_Node is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Node,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Run_Node
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Node : Swagger.UString;
         Result : .Models.PipelineRunNode_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Node := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Impl.Get_Pipeline_Run_Node
            (Organization,
             Pipeline,
             Run,
             Node, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run node details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Node;

      package API_Get_Pipeline_Run_Node_Step is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Node_Step,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Run_Node_Step
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Node : Swagger.UString;
         Step : Swagger.UString;
         Result : .Models.PipelineStepImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Node := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Step := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 5));

         Impl.Get_Pipeline_Run_Node_Step
            (Organization,
             Pipeline,
             Run,
             Node,
             Step, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run node step details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Node_Step;

      package API_Get_Pipeline_Run_Node_Step_Log is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Node_Step_Log,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Run_Node_Step_Log
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Node : Swagger.UString;
         Step : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Node := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Step := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 5));

         Impl.Get_Pipeline_Run_Node_Step_Log
            (Organization,
             Pipeline,
             Run,
             Node,
             Step, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline run node step log");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Node_Step_Log;

      package API_Get_Pipeline_Run_Node_Steps is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Node_Steps,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Run_Node_Steps
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Node : Swagger.UString;
         Result : .Models.PipelineStepImpl_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Node := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Impl.Get_Pipeline_Run_Node_Steps
            (Organization,
             Pipeline,
             Run,
             Node, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run node steps details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Node_Steps;

      package API_Get_Pipeline_Run_Nodes is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Nodes,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Run_Nodes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Result : .Models.PipelineRunNode_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Impl.Get_Pipeline_Run_Nodes
            (Organization,
             Pipeline,
             Run, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run nodes details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Nodes;

      package API_Get_Pipeline_Runs is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Runs,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipeline_Runs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.PipelineRun_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Pipeline_Runs
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved runs details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Runs;

      package API_Get_Pipelines is
         new Swagger.Servers.Operation
            (Handler => Get_Pipelines,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Pipelines
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Result : .Models.Pipeline_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Pipelines
            (Organization, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipelines details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipelines;

      package API_Get_SCM is
         new Swagger.Servers.Operation
            (Handler => Get_SCM,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/scm/{scm}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_SCM
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Scm : Swagger.UString;
         Result : .Models.GithubScm_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Scm := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_SCM
            (Organization,
             Scm, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved SCM details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_SCM;

      package API_Get_SCMOrganisation_Repositories is
         new Swagger.Servers.Operation
            (Handler => Get_SCMOrganisation_Repositories,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_SCMOrganisation_Repositories
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Scm : Swagger.UString;
         Scm_Organisation : Swagger.UString;
         Credential_Id : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Page_Number : Swagger.Nullable_Integer;
         Result : .Models.GithubOrganization_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Credential_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "credentialId"));

         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "pageSize"));

         Page_Number := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "pageNumber"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Scm := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Scm_Organisation := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Impl.Get_SCMOrganisation_Repositories
            (Organization,
             Scm,
             Scm_Organisation,
             Credential_Id,
             Page_Size,
             Page_Number, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved SCM organization repositories details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_SCMOrganisation_Repositories;

      package API_Get_SCMOrganisation_Repository is
         new Swagger.Servers.Operation
            (Handler => Get_SCMOrganisation_Repository,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_SCMOrganisation_Repository
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Scm : Swagger.UString;
         Scm_Organisation : Swagger.UString;
         Repository : Swagger.UString;
         Credential_Id : Swagger.Nullable_UString;
         Result : .Models.GithubOrganization_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Credential_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "credentialId"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Scm := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Scm_Organisation := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Repository := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Impl.Get_SCMOrganisation_Repository
            (Organization,
             Scm,
             Scm_Organisation,
             Repository,
             Credential_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved SCM organizations details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_SCMOrganisation_Repository;

      package API_Get_SCMOrganisations is
         new Swagger.Servers.Operation
            (Handler => Get_SCMOrganisations,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/scm/{scm}/organizations",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_SCMOrganisations
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Scm : Swagger.UString;
         Credential_Id : Swagger.Nullable_UString;
         Result : .Models.GithubOrganization_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Credential_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "credentialId"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Scm := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_SCMOrganisations
            (Organization,
             Scm,
             Credential_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved SCM organizations details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_SCMOrganisations;

      package API_Get_User is
         new Swagger.Servers.Operation
            (Handler => Get_User,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/users/{user}",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         User : Swagger.UString;
         Result : .Models.User_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         User := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_User
            (Organization,
             User, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved users details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_User;

      package API_Get_User_Favorites is
         new Swagger.Servers.Operation
            (Handler => Get_User_Favorites,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/users/{user}/favorites",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_User_Favorites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         User : Swagger.UString;
         Result : .Models.FavoriteImpl_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         User := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_User_Favorites
            (User, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved users favorites details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_User_Favorites;

      package API_Get_Users is
         new Swagger.Servers.Operation
            (Handler => Get_Users,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/users/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Users
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Result : .Models.User_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Users
            (Organization, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved users details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Users;

      package API_Post_Pipeline_Run is
         new Swagger.Servers.Operation
            (Handler => Post_Pipeline_Run,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay",
             Mimes   => Media_List_1'Access);

      --  
      procedure Post_Pipeline_Run
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Result : .Models.QueueItemImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Impl.Post_Pipeline_Run
            (Organization,
             Pipeline,
             Run, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully replayed a pipeline run");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Post_Pipeline_Run;

      package API_Post_Pipeline_Runs is
         new Swagger.Servers.Operation
            (Handler => Post_Pipeline_Runs,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
             Mimes   => Media_List_1'Access);

      --  
      procedure Post_Pipeline_Runs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.QueueItemImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Post_Pipeline_Runs
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully started a build");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Post_Pipeline_Runs;

      package API_Put_Pipeline_Favorite is
         new Swagger.Servers.Operation
            (Handler => Put_Pipeline_Favorite,
             Method  => Swagger.Servers.PUT,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite",
             Mimes   => Media_List_1'Access);

      --  
      procedure Put_Pipeline_Favorite
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         P_Body : Boolean;
         Result : .Models.FavoriteImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "body", P_Body);
         Impl.Put_Pipeline_Favorite
            (Organization,
             Pipeline,
             P_Body, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully favorited/unfavorited a pipeline");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Put_Pipeline_Favorite;

      package API_Put_Pipeline_Run is
         new Swagger.Servers.Operation
            (Handler => Put_Pipeline_Run,
             Method  => Swagger.Servers.PUT,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop",
             Mimes   => Media_List_1'Access);

      --  
      procedure Put_Pipeline_Run
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Blocking : Swagger.Nullable_UString;
         Time_Out_In_Secs : Swagger.Nullable_Integer;
         Result : .Models.PipelineRun_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Blocking := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "blocking"));

         Time_Out_In_Secs := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "timeOutInSecs"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Impl.Put_Pipeline_Run
            (Organization,
             Pipeline,
             Run,
             Blocking,
             Time_Out_In_Secs, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully stopped a build");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Put_Pipeline_Run;

      package API_Search is
         new Swagger.Servers.Operation
            (Handler => Search,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/search/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Search
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Q : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Q := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "q"));

         
         Impl.Search
            (Q, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved search result");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Search;

      package API_Search_Classes is
         new Swagger.Servers.Operation
            (Handler => Search_Classes,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/classes/",
             Mimes   => Media_List_1'Access);

      --  
      procedure Search_Classes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Q : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Q := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "q"));

         
         Impl.Search_Classes
            (Q, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved search result");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Search_Classes;

      package API_Get_Computer is
         new Swagger.Servers.Operation
            (Handler => Get_Computer,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/computer/api/json",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Computer
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Depth : Integer;
         Result : .Models.ComputerSet_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Depth := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "depth"));

         
         Impl.Get_Computer
            (Depth, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved computer details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Computer;

      package API_Get_Jenkins is
         new Swagger.Servers.Operation
            (Handler => Get_Jenkins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/json",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Jenkins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.Hudson_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Impl.Get_Jenkins (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved Jenkins details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Jenkins;

      package API_Get_Job is
         new Swagger.Servers.Operation
            (Handler => Get_Job,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/job/{name}/api/json",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Job
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Result : .Models.FreeStyleProject_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Job
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved job details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Job cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Job;

      package API_Get_Job_Config is
         new Swagger.Servers.Operation
            (Handler => Get_Job_Config,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/job/{name}/config.xml",
             Mimes   => Media_List_3'Access);

      --  
      procedure Get_Job_Config
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Job_Config
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved job configuration in config.xml format");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Job cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Job_Config;

      package API_Get_Job_Last_Build is
         new Swagger.Servers.Operation
            (Handler => Get_Job_Last_Build,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/job/{name}/lastBuild/api/json",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Job_Last_Build
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Result : .Models.FreeStyleBuild_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Job_Last_Build
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved job's last build details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Job cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Job_Last_Build;

      package API_Get_Job_Progressive_Text is
         new Swagger.Servers.Operation
            (Handler => Get_Job_Progressive_Text,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/job/{name}/{number}/logText/progressiveText",
             Mimes   => null);

      --  
      procedure Get_Job_Progressive_Text
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Number : Swagger.UString;
         Start : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Start := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "start"));

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Number := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Impl.Get_Job_Progressive_Text
            (Name,
             Number,
             Start, Context);

      end Get_Job_Progressive_Text;

      package API_Get_Queue is
         new Swagger.Servers.Operation
            (Handler => Get_Queue,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/queue/api/json",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Queue
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Result : .Models.Queue_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Impl.Get_Queue (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved queue details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Queue;

      package API_Get_Queue_Item is
         new Swagger.Servers.Operation
            (Handler => Get_Queue_Item,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/queue/item/{number}/api/json",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_Queue_Item
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Number : Swagger.UString;
         Result : .Models.Queue_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Number := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_Queue_Item
            (Number, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved queued item details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Queue_Item;

      package API_Get_View is
         new Swagger.Servers.Operation
            (Handler => Get_View,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/view/{name}/api/json",
             Mimes   => Media_List_1'Access);

      --  
      procedure Get_View
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Result : .Models.ListView_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_View
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved view details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("View cannot be found on Jenkins instance");
            return;
         end if;

      end Get_View;

      package API_Get_View_Config is
         new Swagger.Servers.Operation
            (Handler => Get_View_Config,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/view/{name}/config.xml",
             Mimes   => Media_List_3'Access);

      --  
      procedure Get_View_Config
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Get_View_Config
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved view configuration in config.xml format");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("View cannot be found on Jenkins instance");
            return;
         end if;

      end Get_View_Config;

      package API_Head_Jenkins is
         new Swagger.Servers.Operation
            (Handler => Head_Jenkins,
             Method  => Swagger.Servers.HEAD,
             URI     => URI_Prefix & "/api/json",
             Mimes   => null);

      --  
      procedure Head_Jenkins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Impl.Head_Jenkins (Context);

      end Head_Jenkins;

      package API_Post_Create_Item is
         new Swagger.Servers.Operation
            (Handler => Post_Create_Item,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/createItem",
             Mimes   => Media_List_2'Access);

      --  
      procedure Post_Create_Item
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Name : Swagger.UString;
         From : Swagger.Nullable_UString;
         Mode : Swagger.Nullable_UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         P_Body : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "name"));

         From := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "from"));

         Mode := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "mode"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "body", P_Body);
         Impl.Post_Create_Item
            (Name,
             From,
             Mode,
             Jenkins_Crumb,
             Content_Type,
             P_Body, Context);

      end Post_Create_Item;

      package API_Post_Create_View is
         new Swagger.Servers.Operation
            (Handler => Post_Create_View,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/createView",
             Mimes   => Media_List_2'Access);

      --  
      procedure Post_Create_View
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         P_Body : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "name"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "body", P_Body);
         Impl.Post_Create_View
            (Name,
             Jenkins_Crumb,
             Content_Type,
             P_Body, Context);

      end Post_Create_View;

      package API_Post_Job_Build is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Build,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/build",
             Mimes   => null);

      --  
      procedure Post_Job_Build
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Json : Swagger.UString;
         Token : Swagger.Nullable_UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         Json := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "json"));

         Token := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "token"));

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Post_Job_Build
            (Name,
             Json,
             Token,
             Jenkins_Crumb, Context);

      end Post_Job_Build;

      package API_Post_Job_Config is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Config,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/config.xml",
             Mimes   => Media_List_2'Access);

      --  
      procedure Post_Job_Config
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Name : Swagger.UString;
         P_Body : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "body", P_Body);
         Impl.Post_Job_Config
            (Name,
             P_Body,
             Jenkins_Crumb, Context);

      end Post_Job_Config;

      package API_Post_Job_Delete is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Delete,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/doDelete",
             Mimes   => null);

      --  
      procedure Post_Job_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Post_Job_Delete
            (Name,
             Jenkins_Crumb, Context);

      end Post_Job_Delete;

      package API_Post_Job_Disable is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Disable,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/disable",
             Mimes   => null);

      --  
      procedure Post_Job_Disable
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Post_Job_Disable
            (Name,
             Jenkins_Crumb, Context);

      end Post_Job_Disable;

      package API_Post_Job_Enable is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Enable,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/enable",
             Mimes   => null);

      --  
      procedure Post_Job_Enable
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Post_Job_Enable
            (Name,
             Jenkins_Crumb, Context);

      end Post_Job_Enable;

      package API_Post_Job_Last_Build_Stop is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Last_Build_Stop,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/lastBuild/stop",
             Mimes   => null);

      --  
      procedure Post_Job_Last_Build_Stop
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Impl : Implementation_Type;
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Impl.Post_Job_Last_Build_Stop
            (Name,
             Jenkins_Crumb, Context);

      end Post_Job_Last_Build_Stop;

      package API_Post_View_Config is
         new Swagger.Servers.Operation
            (Handler => Post_View_Config,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/view/{name}/config.xml",
             Mimes   => Media_List_2'Access);

      --  
      procedure Post_View_Config
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Impl : Implementation_Type;
         Name : Swagger.UString;
         P_Body : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         
         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         if Swagger.Is_Null (Input) then
            Context.Set_Error (415, "Invalid content");
            return;
         end if;

         .Models.Deserialize (Input, "body", P_Body);
         Impl.Post_View_Config
            (Name,
             P_Body,
             Jenkins_Crumb, Context);

      end Post_View_Config;

      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Crumb.Definition);
         Swagger.Servers.Register (Server, API_Delete_Pipeline_Queue_Item.Definition);
         Swagger.Servers.Register (Server, API_Get_Authenticated_User.Definition);
         Swagger.Servers.Register (Server, API_Get_Classes.Definition);
         Swagger.Servers.Register (Server, API_Get_Json_Web_Key.Definition);
         Swagger.Servers.Register (Server, API_Get_Json_Web_Token.Definition);
         Swagger.Servers.Register (Server, API_Get_Organisation.Definition);
         Swagger.Servers.Register (Server, API_Get_Organisations.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Activities.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Branch.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Branch_Run.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Branches.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Folder.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Folder_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Queue.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Log.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Node.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Node_Step.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Node_Step_Log.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Node_Steps.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Nodes.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Runs.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipelines.Definition);
         Swagger.Servers.Register (Server, API_Get_SCM.Definition);
         Swagger.Servers.Register (Server, API_Get_SCMOrganisation_Repositories.Definition);
         Swagger.Servers.Register (Server, API_Get_SCMOrganisation_Repository.Definition);
         Swagger.Servers.Register (Server, API_Get_SCMOrganisations.Definition);
         Swagger.Servers.Register (Server, API_Get_User.Definition);
         Swagger.Servers.Register (Server, API_Get_User_Favorites.Definition);
         Swagger.Servers.Register (Server, API_Get_Users.Definition);
         Swagger.Servers.Register (Server, API_Post_Pipeline_Run.Definition);
         Swagger.Servers.Register (Server, API_Post_Pipeline_Runs.Definition);
         Swagger.Servers.Register (Server, API_Put_Pipeline_Favorite.Definition);
         Swagger.Servers.Register (Server, API_Put_Pipeline_Run.Definition);
         Swagger.Servers.Register (Server, API_Search.Definition);
         Swagger.Servers.Register (Server, API_Search_Classes.Definition);
         Swagger.Servers.Register (Server, API_Get_Computer.Definition);
         Swagger.Servers.Register (Server, API_Get_Jenkins.Definition);
         Swagger.Servers.Register (Server, API_Get_Job.Definition);
         Swagger.Servers.Register (Server, API_Get_Job_Config.Definition);
         Swagger.Servers.Register (Server, API_Get_Job_Last_Build.Definition);
         Swagger.Servers.Register (Server, API_Get_Job_Progressive_Text.Definition);
         Swagger.Servers.Register (Server, API_Get_Queue.Definition);
         Swagger.Servers.Register (Server, API_Get_Queue_Item.Definition);
         Swagger.Servers.Register (Server, API_Get_View.Definition);
         Swagger.Servers.Register (Server, API_Get_View_Config.Definition);
         Swagger.Servers.Register (Server, API_Head_Jenkins.Definition);
         Swagger.Servers.Register (Server, API_Post_Create_Item.Definition);
         Swagger.Servers.Register (Server, API_Post_Create_View.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Build.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Config.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Delete.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Disable.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Enable.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Last_Build_Stop.Definition);
         Swagger.Servers.Register (Server, API_Post_View_Config.Definition);
      end Register;

   end Skeleton;

   package body Shared_Instance is


      --  
      procedure Get_Crumb
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.DefaultCrumbIssuer_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Server.Get_Crumb (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved CSRF protection token");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Crumb;

      package API_Get_Crumb is
         new Swagger.Servers.Operation
            (Handler => Get_Crumb,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/crumbIssuer/api/json",
             Mimes   => Media_List_1'Access);


      --  
      procedure Delete_Pipeline_Queue_Item
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Queue : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Queue := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Server.Delete_Pipeline_Queue_Item
            (Organization,
             Pipeline,
             Queue, Context);

      end Delete_Pipeline_Queue_Item;

      package API_Delete_Pipeline_Queue_Item is
         new Swagger.Servers.Operation
            (Handler => Delete_Pipeline_Queue_Item,
             Method  => Swagger.Servers.DELETE,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}",
             Mimes   => null);


      --  
      procedure Get_Authenticated_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Result : .Models.User_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Authenticated_User
            (Organization, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved authenticated user details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Authenticated_User;

      package API_Get_Authenticated_User is
         new Swagger.Servers.Operation
            (Handler => Get_Authenticated_User,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/user/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Classes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Class : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Class := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Classes
            (Class, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved class names");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Classes;

      package API_Get_Classes is
         new Swagger.Servers.Operation
            (Handler => Get_Classes,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/classes/{class}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Json_Web_Key
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Key : Integer;
         Result : Swagger.UString;
      begin

         
         Key := To_Integer (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Json_Web_Key
            (Key, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved JWT token");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Json_Web_Key;

      package API_Get_Json_Web_Key is
         new Swagger.Servers.Operation
            (Handler => Get_Json_Web_Key,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/jwt-auth/jwks/{key}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Json_Web_Token
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Expiry_Time_In_Mins : Swagger.Nullable_Integer;
         Max_Expiry_Time_In_Mins : Swagger.Nullable_Integer;
         Result : Swagger.UString;
      begin
         Expiry_Time_In_Mins := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "expiryTimeInMins"));
         Max_Expiry_Time_In_Mins := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "maxExpiryTimeInMins"));

         
         Server.Get_Json_Web_Token
            (Expiry_Time_In_Mins,
             Max_Expiry_Time_In_Mins, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved JWT token");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Json_Web_Token;

      package API_Get_Json_Web_Token is
         new Swagger.Servers.Operation
            (Handler => Get_Json_Web_Token,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/jwt-auth/token",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Organisation
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Result : .Models.Organisation_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Organisation
            (Organization, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pipeline cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Organisation;

      package API_Get_Organisation is
         new Swagger.Servers.Operation
            (Handler => Get_Organisation,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Organisations
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.Organisation_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Server.Get_Organisations (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipelines details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Organisations;

      package API_Get_Organisations is
         new Swagger.Servers.Operation
            (Handler => Get_Organisations,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.Pipeline_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Pipeline
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Pipeline cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Pipeline;

      package API_Get_Pipeline is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Activities
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.PipelineActivity_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Pipeline_Activities
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved all activities details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Activities;

      package API_Get_Pipeline_Activities is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Activities,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Branch
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Branch : Swagger.UString;
         Result : .Models.BranchImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Branch := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Server.Get_Pipeline_Branch
            (Organization,
             Pipeline,
             Branch, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved branch details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Branch;

      package API_Get_Pipeline_Branch is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Branch,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Branch_Run
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Branch : Swagger.UString;
         Run : Swagger.UString;
         Result : .Models.PipelineRun_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Branch := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Server.Get_Pipeline_Branch_Run
            (Organization,
             Pipeline,
             Branch,
             Run, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Branch_Run;

      package API_Get_Pipeline_Branch_Run is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Branch_Run,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Branches
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.MultibranchPipeline_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Pipeline_Branches
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved all branches details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Branches;

      package API_Get_Pipeline_Branches is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Branches,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Folder
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Folder : Swagger.UString;
         Result : .Models.PipelineFolderImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Folder := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Pipeline_Folder
            (Organization,
             Folder, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved folder details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Folder;

      package API_Get_Pipeline_Folder is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Folder,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{folder}/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Folder_Pipeline
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Folder : Swagger.UString;
         Result : .Models.PipelineImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Folder := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Pipeline_Folder_Pipeline
            (Organization,
             Pipeline,
             Folder, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Folder_Pipeline;

      package API_Get_Pipeline_Folder_Pipeline is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Folder_Pipeline,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Queue
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.QueueItemImpl_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Pipeline_Queue
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved queue details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Queue;

      package API_Get_Pipeline_Queue is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Queue,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Run
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Result : .Models.PipelineRun_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Server.Get_Pipeline_Run
            (Organization,
             Pipeline,
             Run, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run;

      package API_Get_Pipeline_Run is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Run_Log
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Start : Swagger.Nullable_Integer;
         Download : Swagger.Nullable_Boolean;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Start := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "start"));
         Download := To_Boolean (Swagger.Servers.Get_Query_Parameter (Req, "download"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Server.Get_Pipeline_Run_Log
            (Organization,
             Pipeline,
             Run,
             Start,
             Download, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline run log");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Log;

      package API_Get_Pipeline_Run_Log is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Log,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Run_Node
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Node : Swagger.UString;
         Result : .Models.PipelineRunNode_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Node := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Server.Get_Pipeline_Run_Node
            (Organization,
             Pipeline,
             Run,
             Node, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run node details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Node;

      package API_Get_Pipeline_Run_Node is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Node,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Run_Node_Step
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Node : Swagger.UString;
         Step : Swagger.UString;
         Result : .Models.PipelineStepImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Node := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Step := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 5));

         Server.Get_Pipeline_Run_Node_Step
            (Organization,
             Pipeline,
             Run,
             Node,
             Step, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run node step details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Node_Step;

      package API_Get_Pipeline_Run_Node_Step is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Node_Step,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Run_Node_Step_Log
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Node : Swagger.UString;
         Step : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Node := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Step := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 5));

         Server.Get_Pipeline_Run_Node_Step_Log
            (Organization,
             Pipeline,
             Run,
             Node,
             Step, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipeline run node step log");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Node_Step_Log;

      package API_Get_Pipeline_Run_Node_Step_Log is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Node_Step_Log,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Run_Node_Steps
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Node : Swagger.UString;
         Result : .Models.PipelineStepImpl_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Node := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Server.Get_Pipeline_Run_Node_Steps
            (Organization,
             Pipeline,
             Run,
             Node, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run node steps details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Node_Steps;

      package API_Get_Pipeline_Run_Node_Steps is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Node_Steps,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Run_Nodes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Result : .Models.PipelineRunNode_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Server.Get_Pipeline_Run_Nodes
            (Organization,
             Pipeline,
             Run, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved run nodes details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Run_Nodes;

      package API_Get_Pipeline_Run_Nodes is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Run_Nodes,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipeline_Runs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.PipelineRun_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Pipeline_Runs
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved runs details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipeline_Runs;

      package API_Get_Pipeline_Runs is
         new Swagger.Servers.Operation
            (Handler => Get_Pipeline_Runs,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Pipelines
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Result : .Models.Pipeline_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Pipelines
            (Organization, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved pipelines details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Pipelines;

      package API_Get_Pipelines is
         new Swagger.Servers.Operation
            (Handler => Get_Pipelines,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_SCM
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Scm : Swagger.UString;
         Result : .Models.GithubScm_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Scm := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_SCM
            (Organization,
             Scm, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved SCM details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_SCM;

      package API_Get_SCM is
         new Swagger.Servers.Operation
            (Handler => Get_SCM,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/scm/{scm}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_SCMOrganisation_Repositories
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Scm : Swagger.UString;
         Scm_Organisation : Swagger.UString;
         Credential_Id : Swagger.Nullable_UString;
         Page_Size : Swagger.Nullable_Integer;
         Page_Number : Swagger.Nullable_Integer;
         Result : .Models.GithubOrganization_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Credential_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "credentialId"));
         Page_Size := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "pageSize"));
         Page_Number := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "pageNumber"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Scm := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Scm_Organisation := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Server.Get_SCMOrganisation_Repositories
            (Organization,
             Scm,
             Scm_Organisation,
             Credential_Id,
             Page_Size,
             Page_Number, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved SCM organization repositories details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_SCMOrganisation_Repositories;

      package API_Get_SCMOrganisation_Repositories is
         new Swagger.Servers.Operation
            (Handler => Get_SCMOrganisation_Repositories,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_SCMOrganisation_Repository
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Scm : Swagger.UString;
         Scm_Organisation : Swagger.UString;
         Repository : Swagger.UString;
         Credential_Id : Swagger.Nullable_UString;
         Result : .Models.GithubOrganization_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Credential_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "credentialId"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Scm := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Scm_Organisation := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Repository := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 4));

         Server.Get_SCMOrganisation_Repository
            (Organization,
             Scm,
             Scm_Organisation,
             Repository,
             Credential_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved SCM organizations details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_SCMOrganisation_Repository;

      package API_Get_SCMOrganisation_Repository is
         new Swagger.Servers.Operation
            (Handler => Get_SCMOrganisation_Repository,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_SCMOrganisations
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Scm : Swagger.UString;
         Credential_Id : Swagger.Nullable_UString;
         Result : .Models.GithubOrganization_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Credential_Id := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "credentialId"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Scm := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_SCMOrganisations
            (Organization,
             Scm,
             Credential_Id, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved SCM organizations details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_SCMOrganisations;

      package API_Get_SCMOrganisations is
         new Swagger.Servers.Operation
            (Handler => Get_SCMOrganisations,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/scm/{scm}/organizations",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_User
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         User : Swagger.UString;
         Result : .Models.User_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         User := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_User
            (Organization,
             User, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved users details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_User;

      package API_Get_User is
         new Swagger.Servers.Operation
            (Handler => Get_User,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/users/{user}",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_User_Favorites
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         User : Swagger.UString;
         Result : .Models.FavoriteImpl_Type_Vectors.Vector;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         User := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_User_Favorites
            (User, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved users favorites details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_User_Favorites;

      package API_Get_User_Favorites is
         new Swagger.Servers.Operation
            (Handler => Get_User_Favorites,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/users/{user}/favorites",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Users
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Result : .Models.User_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Users
            (Organization, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved users details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Users;

      package API_Get_Users is
         new Swagger.Servers.Operation
            (Handler => Get_Users,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/users/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Post_Pipeline_Run
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Result : .Models.QueueItemImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Server.Post_Pipeline_Run
            (Organization,
             Pipeline,
             Run, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully replayed a pipeline run");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Post_Pipeline_Run;

      package API_Post_Pipeline_Run is
         new Swagger.Servers.Operation
            (Handler => Post_Pipeline_Run,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay",
             Mimes   => Media_List_1'Access);


      --  
      procedure Post_Pipeline_Runs
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Result : .Models.QueueItemImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Post_Pipeline_Runs
            (Organization,
             Pipeline, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully started a build");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Post_Pipeline_Runs;

      package API_Post_Pipeline_Runs is
         new Swagger.Servers.Operation
            (Handler => Post_Pipeline_Runs,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
             Mimes   => Media_List_1'Access);


      --  
      procedure Put_Pipeline_Favorite
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         P_Body : Boolean;
         Result : .Models.FavoriteImpl_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Put_Pipeline_Favorite
            (Organization,
             Pipeline,
             P_Body, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully favorited/unfavorited a pipeline");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Put_Pipeline_Favorite;

      package API_Put_Pipeline_Favorite is
         new Swagger.Servers.Operation
            (Handler => Put_Pipeline_Favorite,
             Method  => Swagger.Servers.PUT,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite",
             Mimes   => Media_List_1'Access);


      --  
      procedure Put_Pipeline_Run
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Organization : Swagger.UString;
         Pipeline : Swagger.UString;
         Run : Swagger.UString;
         Blocking : Swagger.Nullable_UString;
         Time_Out_In_Secs : Swagger.Nullable_Integer;
         Result : .Models.PipelineRun_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Blocking := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "blocking"));
         Time_Out_In_Secs := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "timeOutInSecs"));

         
         Organization := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Pipeline := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Run := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 3));

         Server.Put_Pipeline_Run
            (Organization,
             Pipeline,
             Run,
             Blocking,
             Time_Out_In_Secs, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully stopped a build");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Put_Pipeline_Run;

      package API_Put_Pipeline_Run is
         new Swagger.Servers.Operation
            (Handler => Put_Pipeline_Run,
             Method  => Swagger.Servers.PUT,
             URI     => URI_Prefix & "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop",
             Mimes   => Media_List_1'Access);


      --  
      procedure Search
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Q : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Q := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "q"));

         
         Server.Search
            (Q, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved search result");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Search;

      package API_Search is
         new Swagger.Servers.Operation
            (Handler => Search,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/search/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Search_Classes
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Q : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Q := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "q"));

         
         Server.Search_Classes
            (Q, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved search result");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Search_Classes;

      package API_Search_Classes is
         new Swagger.Servers.Operation
            (Handler => Search_Classes,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/blue/rest/classes/",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Computer
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Depth : Integer;
         Result : .Models.ComputerSet_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Depth := To_Integer (Swagger.Servers.Get_Query_Parameter (Req, "depth"));

         
         Server.Get_Computer
            (Depth, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved computer details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Computer;

      package API_Get_Computer is
         new Swagger.Servers.Operation
            (Handler => Get_Computer,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/computer/api/json",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Jenkins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.Hudson_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Server.Get_Jenkins (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved Jenkins details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Jenkins;

      package API_Get_Jenkins is
         new Swagger.Servers.Operation
            (Handler => Get_Jenkins,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/api/json",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Job
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Result : .Models.FreeStyleProject_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Job
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved job details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Job cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Job;

      package API_Get_Job is
         new Swagger.Servers.Operation
            (Handler => Get_Job,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/job/{name}/api/json",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Job_Config
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Job_Config
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved job configuration in config.xml format");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Job cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Job_Config;

      package API_Get_Job_Config is
         new Swagger.Servers.Operation
            (Handler => Get_Job_Config,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/job/{name}/config.xml",
             Mimes   => Media_List_3'Access);


      --  
      procedure Get_Job_Last_Build
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Result : .Models.FreeStyleBuild_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Job_Last_Build
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved job's last build details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("Job cannot be found on Jenkins instance");
            return;
         end if;

      end Get_Job_Last_Build;

      package API_Get_Job_Last_Build is
         new Swagger.Servers.Operation
            (Handler => Get_Job_Last_Build,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/job/{name}/lastBuild/api/json",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Job_Progressive_Text
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Number : Swagger.UString;
         Start : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Start := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "start"));

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Number := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 2));

         Server.Get_Job_Progressive_Text
            (Name,
             Number,
             Start, Context);

      end Get_Job_Progressive_Text;

      package API_Get_Job_Progressive_Text is
         new Swagger.Servers.Operation
            (Handler => Get_Job_Progressive_Text,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/job/{name}/{number}/logText/progressiveText",
             Mimes   => null);


      --  
      procedure Get_Queue
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Result : .Models.Queue_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Server.Get_Queue (Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved queue details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Queue;

      package API_Get_Queue is
         new Swagger.Servers.Operation
            (Handler => Get_Queue,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/queue/api/json",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_Queue_Item
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Number : Swagger.UString;
         Result : .Models.Queue_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Number := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_Queue_Item
            (Number, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved queued item details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;

      end Get_Queue_Item;

      package API_Get_Queue_Item is
         new Swagger.Servers.Operation
            (Handler => Get_Queue_Item,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/queue/item/{number}/api/json",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_View
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Result : .Models.ListView_Type;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_View
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved view details");

            Stream.Start_Document;
            Serialize (Stream, "", Result);
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("View cannot be found on Jenkins instance");
            return;
         end if;

      end Get_View;

      package API_Get_View is
         new Swagger.Servers.Operation
            (Handler => Get_View,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/view/{name}/api/json",
             Mimes   => Media_List_1'Access);


      --  
      procedure Get_View_Config
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Result : Swagger.UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Get_View_Config
            (Name, Result, Context);
         if Context.Get_Status = 200 then
            Context.Set_Description ("Successfully retrieved view configuration in config.xml format");

            Stream.Start_Document;
            if not Value..Is_Null then
               Stream.Write_Entity ("", Result);
            end if;
            Stream.End_Document;
            return;
         end if;
         if Context.Get_Status = 401 then
            Context.Set_Description ("Authentication failed _ incorrect username and/or password");
            return;
         end if;
         if Context.Get_Status = 403 then
            Context.Set_Description ("Jenkins requires authentication _ please set username and password");
            return;
         end if;
         if Context.Get_Status = 404 then
            Context.Set_Description ("View cannot be found on Jenkins instance");
            return;
         end if;

      end Get_View_Config;

      package API_Get_View_Config is
         new Swagger.Servers.Operation
            (Handler => Get_View_Config,
             Method  => Swagger.Servers.GET,
             URI     => URI_Prefix & "/view/{name}/config.xml",
             Mimes   => Media_List_3'Access);


      --  
      procedure Head_Jenkins
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Server.Head_Jenkins (Context);

      end Head_Jenkins;

      package API_Head_Jenkins is
         new Swagger.Servers.Operation
            (Handler => Head_Jenkins,
             Method  => Swagger.Servers.HEAD,
             URI     => URI_Prefix & "/api/json",
             Mimes   => null);


      --  
      procedure Post_Create_Item
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Name : Swagger.UString;
         From : Swagger.Nullable_UString;
         Mode : Swagger.Nullable_UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         P_Body : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Name := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "name"));
         From := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "from"));
         Mode := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "mode"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Post_Create_Item
            (Name,
             From,
             Mode,
             Jenkins_Crumb,
             Content_Type,
             P_Body, Context);

      end Post_Create_Item;

      package API_Post_Create_Item is
         new Swagger.Servers.Operation
            (Handler => Post_Create_Item,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/createItem",
             Mimes   => Media_List_2'Access);


      --  
      procedure Post_Create_View
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
         Content_Type : Swagger.Nullable_UString;
         P_Body : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Name := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "name"));

         
         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Post_Create_View
            (Name,
             Jenkins_Crumb,
             Content_Type,
             P_Body, Context);

      end Post_Create_View;

      package API_Post_Create_View is
         new Swagger.Servers.Operation
            (Handler => Post_Create_View,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/createView",
             Mimes   => Media_List_2'Access);


      --  
      procedure Post_Job_Build
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Json : Swagger.UString;
         Token : Swagger.Nullable_UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;
         Json := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "json"));
         Token := To_Swagger.UString (Swagger.Servers.Get_Query_Parameter (Req, "token"));

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Post_Job_Build
            (Name,
             Json,
             Token,
             Jenkins_Crumb, Context);

      end Post_Job_Build;

      package API_Post_Job_Build is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Build,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/build",
             Mimes   => null);


      --  
      procedure Post_Job_Config
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Name : Swagger.UString;
         P_Body : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Post_Job_Config
            (Name,
             P_Body,
             Jenkins_Crumb, Context);

      end Post_Job_Config;

      package API_Post_Job_Config is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Config,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/config.xml",
             Mimes   => Media_List_2'Access);


      --  
      procedure Post_Job_Delete
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Post_Job_Delete
            (Name,
             Jenkins_Crumb, Context);

      end Post_Job_Delete;

      package API_Post_Job_Delete is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Delete,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/doDelete",
             Mimes   => null);


      --  
      procedure Post_Job_Disable
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Post_Job_Disable
            (Name,
             Jenkins_Crumb, Context);

      end Post_Job_Disable;

      package API_Post_Job_Disable is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Disable,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/disable",
             Mimes   => null);


      --  
      procedure Post_Job_Enable
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Post_Job_Enable
            (Name,
             Jenkins_Crumb, Context);

      end Post_Job_Enable;

      package API_Post_Job_Enable is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Enable,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/enable",
             Mimes   => null);


      --  
      procedure Post_Job_Last_Build_Stop
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Name : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Server.Post_Job_Last_Build_Stop
            (Name,
             Jenkins_Crumb, Context);

      end Post_Job_Last_Build_Stop;

      package API_Post_Job_Last_Build_Stop is
         new Swagger.Servers.Operation
            (Handler => Post_Job_Last_Build_Stop,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/job/{name}/lastBuild/stop",
             Mimes   => null);


      --  
      procedure Post_View_Config
         (Req     : in out Swagger.Servers.Request'Class;
          Reply   : in out Swagger.Servers.Response'Class;
          Stream  : in out Swagger.Servers.Output_Stream'Class;
          Context : in out Swagger.Servers.Context_Type) is
         Input   : Swagger.Value_Type;
         Name : Swagger.UString;
         P_Body : Swagger.UString;
         Jenkins_Crumb : Swagger.Nullable_UString;
      begin
         if not Context.Is_Authenticated then
            Context.Set_Error (401, "Not authenticated");
            return;
         end if;

         
         Name := To_Swagger.UString (Swagger.Servers.Get_Path_Parameter (Req, 1));

         Swagger.Servers.Read (Req, Media_List_1, Input);
         
         .Models.Deserialize (Input, "body", P_Body);
         Server.Post_View_Config
            (Name,
             P_Body,
             Jenkins_Crumb, Context);

      end Post_View_Config;

      package API_Post_View_Config is
         new Swagger.Servers.Operation
            (Handler => Post_View_Config,
             Method  => Swagger.Servers.POST,
             URI     => URI_Prefix & "/view/{name}/config.xml",
             Mimes   => Media_List_2'Access);


      procedure Register (Server : in out Swagger.Servers.Application_Type'Class) is
      begin
         Swagger.Servers.Register (Server, API_Get_Crumb.Definition);
         Swagger.Servers.Register (Server, API_Delete_Pipeline_Queue_Item.Definition);
         Swagger.Servers.Register (Server, API_Get_Authenticated_User.Definition);
         Swagger.Servers.Register (Server, API_Get_Classes.Definition);
         Swagger.Servers.Register (Server, API_Get_Json_Web_Key.Definition);
         Swagger.Servers.Register (Server, API_Get_Json_Web_Token.Definition);
         Swagger.Servers.Register (Server, API_Get_Organisation.Definition);
         Swagger.Servers.Register (Server, API_Get_Organisations.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Activities.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Branch.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Branch_Run.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Branches.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Folder.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Folder_Pipeline.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Queue.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Log.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Node.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Node_Step.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Node_Step_Log.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Node_Steps.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Run_Nodes.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipeline_Runs.Definition);
         Swagger.Servers.Register (Server, API_Get_Pipelines.Definition);
         Swagger.Servers.Register (Server, API_Get_SCM.Definition);
         Swagger.Servers.Register (Server, API_Get_SCMOrganisation_Repositories.Definition);
         Swagger.Servers.Register (Server, API_Get_SCMOrganisation_Repository.Definition);
         Swagger.Servers.Register (Server, API_Get_SCMOrganisations.Definition);
         Swagger.Servers.Register (Server, API_Get_User.Definition);
         Swagger.Servers.Register (Server, API_Get_User_Favorites.Definition);
         Swagger.Servers.Register (Server, API_Get_Users.Definition);
         Swagger.Servers.Register (Server, API_Post_Pipeline_Run.Definition);
         Swagger.Servers.Register (Server, API_Post_Pipeline_Runs.Definition);
         Swagger.Servers.Register (Server, API_Put_Pipeline_Favorite.Definition);
         Swagger.Servers.Register (Server, API_Put_Pipeline_Run.Definition);
         Swagger.Servers.Register (Server, API_Search.Definition);
         Swagger.Servers.Register (Server, API_Search_Classes.Definition);
         Swagger.Servers.Register (Server, API_Get_Computer.Definition);
         Swagger.Servers.Register (Server, API_Get_Jenkins.Definition);
         Swagger.Servers.Register (Server, API_Get_Job.Definition);
         Swagger.Servers.Register (Server, API_Get_Job_Config.Definition);
         Swagger.Servers.Register (Server, API_Get_Job_Last_Build.Definition);
         Swagger.Servers.Register (Server, API_Get_Job_Progressive_Text.Definition);
         Swagger.Servers.Register (Server, API_Get_Queue.Definition);
         Swagger.Servers.Register (Server, API_Get_Queue_Item.Definition);
         Swagger.Servers.Register (Server, API_Get_View.Definition);
         Swagger.Servers.Register (Server, API_Get_View_Config.Definition);
         Swagger.Servers.Register (Server, API_Head_Jenkins.Definition);
         Swagger.Servers.Register (Server, API_Post_Create_Item.Definition);
         Swagger.Servers.Register (Server, API_Post_Create_View.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Build.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Config.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Delete.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Disable.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Enable.Definition);
         Swagger.Servers.Register (Server, API_Post_Job_Last_Build_Stop.Definition);
         Swagger.Servers.Register (Server, API_Post_View_Config.Definition);
      end Register;

      protected body Server is
         --  
         procedure Get_Crumb (Result : out .Models.DefaultCrumbIssuer_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Crumb (Result, Context);
         end Get_Crumb;

         --  
         procedure Delete_Pipeline_Queue_Item
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Queue : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Delete_Pipeline_Queue_Item
               (Organization,
                Pipeline,
                Queue,
                Context);
         end Delete_Pipeline_Queue_Item;

         --  
         procedure Get_Authenticated_User
            (Organization : in Swagger.UString;
             Result : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Authenticated_User
               (Organization,
                Result,
                Context);
         end Get_Authenticated_User;

         --  
         procedure Get_Classes
            (Class : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Classes
               (Class,
                Result,
                Context);
         end Get_Classes;

         --  
         procedure Get_Json_Web_Key
            (Key : in Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Json_Web_Key
               (Key,
                Result,
                Context);
         end Get_Json_Web_Key;

         --  
         procedure Get_Json_Web_Token
            (Expiry_Time_In_Mins : in Swagger.Nullable_Integer;
             Max_Expiry_Time_In_Mins : in Swagger.Nullable_Integer;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Json_Web_Token
               (Expiry_Time_In_Mins,
                Max_Expiry_Time_In_Mins,
                Result,
                Context);
         end Get_Json_Web_Token;

         --  
         procedure Get_Organisation
            (Organization : in Swagger.UString;
             Result : out .Models.Organisation_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Organisation
               (Organization,
                Result,
                Context);
         end Get_Organisation;

         --  
         procedure Get_Organisations (Result : out ;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Organisations (Result, Context);
         end Get_Organisations;

         --  
         procedure Get_Pipeline
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Result : out .Models.Pipeline_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline
               (Organization,
                Pipeline,
                Result,
                Context);
         end Get_Pipeline;

         --  
         procedure Get_Pipeline_Activities
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Result : out .Models.PipelineActivity_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Activities
               (Organization,
                Pipeline,
                Result,
                Context);
         end Get_Pipeline_Activities;

         --  
         procedure Get_Pipeline_Branch
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Branch : in Swagger.UString;
             Result : out .Models.BranchImpl_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Branch
               (Organization,
                Pipeline,
                Branch,
                Result,
                Context);
         end Get_Pipeline_Branch;

         --  
         procedure Get_Pipeline_Branch_Run
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Branch : in Swagger.UString;
             Run : in Swagger.UString;
             Result : out .Models.PipelineRun_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Branch_Run
               (Organization,
                Pipeline,
                Branch,
                Run,
                Result,
                Context);
         end Get_Pipeline_Branch_Run;

         --  
         procedure Get_Pipeline_Branches
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Result : out .Models.MultibranchPipeline_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Branches
               (Organization,
                Pipeline,
                Result,
                Context);
         end Get_Pipeline_Branches;

         --  
         procedure Get_Pipeline_Folder
            (Organization : in Swagger.UString;
             Folder : in Swagger.UString;
             Result : out .Models.PipelineFolderImpl_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Folder
               (Organization,
                Folder,
                Result,
                Context);
         end Get_Pipeline_Folder;

         --  
         procedure Get_Pipeline_Folder_Pipeline
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Folder : in Swagger.UString;
             Result : out .Models.PipelineImpl_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Folder_Pipeline
               (Organization,
                Pipeline,
                Folder,
                Result,
                Context);
         end Get_Pipeline_Folder_Pipeline;

         --  
         procedure Get_Pipeline_Queue
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Result : out .Models.QueueItemImpl_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Queue
               (Organization,
                Pipeline,
                Result,
                Context);
         end Get_Pipeline_Queue;

         --  
         procedure Get_Pipeline_Run
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Result : out .Models.PipelineRun_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Run
               (Organization,
                Pipeline,
                Run,
                Result,
                Context);
         end Get_Pipeline_Run;

         --  
         procedure Get_Pipeline_Run_Log
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Start : in Swagger.Nullable_Integer;
             Download : in Swagger.Nullable_Boolean;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Run_Log
               (Organization,
                Pipeline,
                Run,
                Start,
                Download,
                Result,
                Context);
         end Get_Pipeline_Run_Log;

         --  
         procedure Get_Pipeline_Run_Node
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Node : in Swagger.UString;
             Result : out .Models.PipelineRunNode_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Run_Node
               (Organization,
                Pipeline,
                Run,
                Node,
                Result,
                Context);
         end Get_Pipeline_Run_Node;

         --  
         procedure Get_Pipeline_Run_Node_Step
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Node : in Swagger.UString;
             Step : in Swagger.UString;
             Result : out .Models.PipelineStepImpl_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Run_Node_Step
               (Organization,
                Pipeline,
                Run,
                Node,
                Step,
                Result,
                Context);
         end Get_Pipeline_Run_Node_Step;

         --  
         procedure Get_Pipeline_Run_Node_Step_Log
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Node : in Swagger.UString;
             Step : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Run_Node_Step_Log
               (Organization,
                Pipeline,
                Run,
                Node,
                Step,
                Result,
                Context);
         end Get_Pipeline_Run_Node_Step_Log;

         --  
         procedure Get_Pipeline_Run_Node_Steps
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Node : in Swagger.UString;
             Result : out .Models.PipelineStepImpl_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Run_Node_Steps
               (Organization,
                Pipeline,
                Run,
                Node,
                Result,
                Context);
         end Get_Pipeline_Run_Node_Steps;

         --  
         procedure Get_Pipeline_Run_Nodes
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Result : out .Models.PipelineRunNode_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Run_Nodes
               (Organization,
                Pipeline,
                Run,
                Result,
                Context);
         end Get_Pipeline_Run_Nodes;

         --  
         procedure Get_Pipeline_Runs
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Result : out .Models.PipelineRun_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipeline_Runs
               (Organization,
                Pipeline,
                Result,
                Context);
         end Get_Pipeline_Runs;

         --  
         procedure Get_Pipelines
            (Organization : in Swagger.UString;
             Result : out .Models.Pipeline_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Pipelines
               (Organization,
                Result,
                Context);
         end Get_Pipelines;

         --  
         procedure Get_SCM
            (Organization : in Swagger.UString;
             Scm : in Swagger.UString;
             Result : out .Models.GithubScm_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_SCM
               (Organization,
                Scm,
                Result,
                Context);
         end Get_SCM;

         --  
         procedure Get_SCMOrganisation_Repositories
            (Organization : in Swagger.UString;
             Scm : in Swagger.UString;
             Scm_Organisation : in Swagger.UString;
             Credential_Id : in Swagger.Nullable_UString;
             Page_Size : in Swagger.Nullable_Integer;
             Page_Number : in Swagger.Nullable_Integer;
             Result : out .Models.GithubOrganization_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_SCMOrganisation_Repositories
               (Organization,
                Scm,
                Scm_Organisation,
                Credential_Id,
                Page_Size,
                Page_Number,
                Result,
                Context);
         end Get_SCMOrganisation_Repositories;

         --  
         procedure Get_SCMOrganisation_Repository
            (Organization : in Swagger.UString;
             Scm : in Swagger.UString;
             Scm_Organisation : in Swagger.UString;
             Repository : in Swagger.UString;
             Credential_Id : in Swagger.Nullable_UString;
             Result : out .Models.GithubOrganization_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_SCMOrganisation_Repository
               (Organization,
                Scm,
                Scm_Organisation,
                Repository,
                Credential_Id,
                Result,
                Context);
         end Get_SCMOrganisation_Repository;

         --  
         procedure Get_SCMOrganisations
            (Organization : in Swagger.UString;
             Scm : in Swagger.UString;
             Credential_Id : in Swagger.Nullable_UString;
             Result : out .Models.GithubOrganization_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_SCMOrganisations
               (Organization,
                Scm,
                Credential_Id,
                Result,
                Context);
         end Get_SCMOrganisations;

         --  
         procedure Get_User
            (Organization : in Swagger.UString;
             User : in Swagger.UString;
             Result : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_User
               (Organization,
                User,
                Result,
                Context);
         end Get_User;

         --  
         procedure Get_User_Favorites
            (User : in Swagger.UString;
             Result : out .Models.FavoriteImpl_Type_Vectors.Vector;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_User_Favorites
               (User,
                Result,
                Context);
         end Get_User_Favorites;

         --  
         procedure Get_Users
            (Organization : in Swagger.UString;
             Result : out .Models.User_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Users
               (Organization,
                Result,
                Context);
         end Get_Users;

         --  
         procedure Post_Pipeline_Run
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Result : out .Models.QueueItemImpl_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Pipeline_Run
               (Organization,
                Pipeline,
                Run,
                Result,
                Context);
         end Post_Pipeline_Run;

         --  
         procedure Post_Pipeline_Runs
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Result : out .Models.QueueItemImpl_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Pipeline_Runs
               (Organization,
                Pipeline,
                Result,
                Context);
         end Post_Pipeline_Runs;

         --  
         procedure Put_Pipeline_Favorite
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             P_Body : in Boolean;
             Result : out .Models.FavoriteImpl_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Put_Pipeline_Favorite
               (Organization,
                Pipeline,
                P_Body,
                Result,
                Context);
         end Put_Pipeline_Favorite;

         --  
         procedure Put_Pipeline_Run
            (Organization : in Swagger.UString;
             Pipeline : in Swagger.UString;
             Run : in Swagger.UString;
             Blocking : in Swagger.Nullable_UString;
             Time_Out_In_Secs : in Swagger.Nullable_Integer;
             Result : out .Models.PipelineRun_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Put_Pipeline_Run
               (Organization,
                Pipeline,
                Run,
                Blocking,
                Time_Out_In_Secs,
                Result,
                Context);
         end Put_Pipeline_Run;

         --  
         procedure Search
            (Q : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Search
               (Q,
                Result,
                Context);
         end Search;

         --  
         procedure Search_Classes
            (Q : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Search_Classes
               (Q,
                Result,
                Context);
         end Search_Classes;

         --  
         procedure Get_Computer
            (Depth : in Integer;
             Result : out .Models.ComputerSet_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Computer
               (Depth,
                Result,
                Context);
         end Get_Computer;

         --  
         procedure Get_Jenkins (Result : out .Models.Hudson_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Jenkins (Result, Context);
         end Get_Jenkins;

         --  
         procedure Get_Job
            (Name : in Swagger.UString;
             Result : out .Models.FreeStyleProject_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Job
               (Name,
                Result,
                Context);
         end Get_Job;

         --  
         procedure Get_Job_Config
            (Name : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Job_Config
               (Name,
                Result,
                Context);
         end Get_Job_Config;

         --  
         procedure Get_Job_Last_Build
            (Name : in Swagger.UString;
             Result : out .Models.FreeStyleBuild_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Job_Last_Build
               (Name,
                Result,
                Context);
         end Get_Job_Last_Build;

         --  
         procedure Get_Job_Progressive_Text
            (Name : in Swagger.UString;
             Number : in Swagger.UString;
             Start : in Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Job_Progressive_Text
               (Name,
                Number,
                Start,
                Context);
         end Get_Job_Progressive_Text;

         --  
         procedure Get_Queue (Result : out .Models.Queue_Type;
         Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Queue (Result, Context);
         end Get_Queue;

         --  
         procedure Get_Queue_Item
            (Number : in Swagger.UString;
             Result : out .Models.Queue_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_Queue_Item
               (Number,
                Result,
                Context);
         end Get_Queue_Item;

         --  
         procedure Get_View
            (Name : in Swagger.UString;
             Result : out .Models.ListView_Type;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_View
               (Name,
                Result,
                Context);
         end Get_View;

         --  
         procedure Get_View_Config
            (Name : in Swagger.UString;
             Result : out Swagger.UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Get_View_Config
               (Name,
                Result,
                Context);
         end Get_View_Config;

         --  
         procedure Head_Jenkins (Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Head_Jenkins (Context);
         end Head_Jenkins;

         --  
         procedure Post_Create_Item
            (Name : in Swagger.UString;
             From : in Swagger.Nullable_UString;
             Mode : in Swagger.Nullable_UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Content_Type : in Swagger.Nullable_UString;
             P_Body : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Create_Item
               (Name,
                From,
                Mode,
                Jenkins_Crumb,
                Content_Type,
                P_Body,
                Context);
         end Post_Create_Item;

         --  
         procedure Post_Create_View
            (Name : in Swagger.UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Content_Type : in Swagger.Nullable_UString;
             P_Body : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Create_View
               (Name,
                Jenkins_Crumb,
                Content_Type,
                P_Body,
                Context);
         end Post_Create_View;

         --  
         procedure Post_Job_Build
            (Name : in Swagger.UString;
             Json : in Swagger.UString;
             Token : in Swagger.Nullable_UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Job_Build
               (Name,
                Json,
                Token,
                Jenkins_Crumb,
                Context);
         end Post_Job_Build;

         --  
         procedure Post_Job_Config
            (Name : in Swagger.UString;
             P_Body : in Swagger.UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Job_Config
               (Name,
                P_Body,
                Jenkins_Crumb,
                Context);
         end Post_Job_Config;

         --  
         procedure Post_Job_Delete
            (Name : in Swagger.UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Job_Delete
               (Name,
                Jenkins_Crumb,
                Context);
         end Post_Job_Delete;

         --  
         procedure Post_Job_Disable
            (Name : in Swagger.UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Job_Disable
               (Name,
                Jenkins_Crumb,
                Context);
         end Post_Job_Disable;

         --  
         procedure Post_Job_Enable
            (Name : in Swagger.UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Job_Enable
               (Name,
                Jenkins_Crumb,
                Context);
         end Post_Job_Enable;

         --  
         procedure Post_Job_Last_Build_Stop
            (Name : in Swagger.UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_Job_Last_Build_Stop
               (Name,
                Jenkins_Crumb,
                Context);
         end Post_Job_Last_Build_Stop;

         --  
         procedure Post_View_Config
            (Name : in Swagger.UString;
             P_Body : in Swagger.UString;
             Jenkins_Crumb : in Swagger.Nullable_UString;
             Context : in out Swagger.Servers.Context_Type) is
         begin
            Impl.Post_View_Config
               (Name,
                P_Body,
                Jenkins_Crumb,
                Context);
         end Post_View_Config;

      end Server;

   end Shared_Instance;

end .Skeletons;
