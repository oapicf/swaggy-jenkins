/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "BlueOceanApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string BlueOceanApi::base = "";

BlueOceanApi::BlueOceanApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void BlueOceanApi::init() {
    setupRoutes();
}

void BlueOceanApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Delete(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/queue/:queue", Routes::bind(&BlueOceanApi::delete_pipeline_queue_item_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/user/", Routes::bind(&BlueOceanApi::get_authenticated_user_handler, this));
    Routes::Get(*router, base + "/blue/rest/classes/:class", Routes::bind(&BlueOceanApi::get_classes_handler, this));
    Routes::Get(*router, base + "/jwt-auth/jwks/:key", Routes::bind(&BlueOceanApi::get_json_web_key_handler, this));
    Routes::Get(*router, base + "/jwt-auth/token", Routes::bind(&BlueOceanApi::get_json_web_token_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization", Routes::bind(&BlueOceanApi::get_organisation_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/", Routes::bind(&BlueOceanApi::get_organisations_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline", Routes::bind(&BlueOceanApi::get_pipeline_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/activities", Routes::bind(&BlueOceanApi::get_pipeline_activities_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/branches/:branch/", Routes::bind(&BlueOceanApi::get_pipeline_branch_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/branches/:branch/runs/:run", Routes::bind(&BlueOceanApi::get_pipeline_branch_run_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/branches", Routes::bind(&BlueOceanApi::get_pipeline_branches_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:folder/", Routes::bind(&BlueOceanApi::get_pipeline_folder_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:folder/pipelines/:pipeline", Routes::bind(&BlueOceanApi::get_pipeline_folder_pipeline_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/queue", Routes::bind(&BlueOceanApi::get_pipeline_queue_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run", Routes::bind(&BlueOceanApi::get_pipeline_run_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/log", Routes::bind(&BlueOceanApi::get_pipeline_run_log_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node", Routes::bind(&BlueOceanApi::get_pipeline_run_node_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps/:step", Routes::bind(&BlueOceanApi::get_pipeline_run_node_step_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps/:step/log", Routes::bind(&BlueOceanApi::get_pipeline_run_node_step_log_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes/:node/steps", Routes::bind(&BlueOceanApi::get_pipeline_run_node_steps_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/nodes", Routes::bind(&BlueOceanApi::get_pipeline_run_nodes_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs", Routes::bind(&BlueOceanApi::get_pipeline_runs_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/pipelines/", Routes::bind(&BlueOceanApi::get_pipelines_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/scm/:scm", Routes::bind(&BlueOceanApi::get_scm_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/scm/:scm/organizations/:scmOrganisation/repositories", Routes::bind(&BlueOceanApi::get_scm_organisation_repositories_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/scm/:scm/organizations/:scmOrganisation/repositories/:repository", Routes::bind(&BlueOceanApi::get_scm_organisation_repository_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/scm/:scm/organizations", Routes::bind(&BlueOceanApi::get_scm_organisations_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/users/:user", Routes::bind(&BlueOceanApi::get_user_handler, this));
    Routes::Get(*router, base + "/blue/rest/users/:user/favorites", Routes::bind(&BlueOceanApi::get_user_favorites_handler, this));
    Routes::Get(*router, base + "/blue/rest/organizations/:organization/users/", Routes::bind(&BlueOceanApi::get_users_handler, this));
    Routes::Post(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/replay", Routes::bind(&BlueOceanApi::post_pipeline_run_handler, this));
    Routes::Post(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs", Routes::bind(&BlueOceanApi::post_pipeline_runs_handler, this));
    Routes::Put(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/favorite", Routes::bind(&BlueOceanApi::put_pipeline_favorite_handler, this));
    Routes::Put(*router, base + "/blue/rest/organizations/:organization/pipelines/:pipeline/runs/:run/stop", Routes::bind(&BlueOceanApi::put_pipeline_run_handler, this));
    Routes::Get(*router, base + "/blue/rest/search/", Routes::bind(&BlueOceanApi::search_handler, this));
    Routes::Get(*router, base + "/blue/rest/classes/", Routes::bind(&BlueOceanApi::search_classes_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&BlueOceanApi::blue_ocean_api_default_handler, this));
}

void BlueOceanApi::handleParsingException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleParsingException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> BlueOceanApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

void BlueOceanApi::handleOperationException(const std::exception& ex, Pistache::Http::ResponseWriter &response) const noexcept
{
    std::pair<Pistache::Http::Code, std::string> codeAndError = handleOperationException(ex);
    response.send(codeAndError.first, codeAndError.second);
}

std::pair<Pistache::Http::Code, std::string> BlueOceanApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void BlueOceanApi::delete_pipeline_queue_item_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto queue = request.param(":queue").as<std::string>();
    
    try {
        this->delete_pipeline_queue_item(organization, pipeline, queue, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_authenticated_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    
    try {
        this->get_authenticated_user(organization, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_classes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto r_class = request.param(":r_class").as<std::string>();
    
    try {
        this->get_classes(r_class, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_json_web_key_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto key = request.param(":key").as<int32_t>();
    
    try {
        this->get_json_web_key(key, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_json_web_token_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto expiryTimeInMinsQuery = request.query().get("expiryTimeInMins");
    std::optional<int32_t> expiryTimeInMins;
    if(expiryTimeInMinsQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(expiryTimeInMinsQuery.value(), valueQuery_instance)){
            expiryTimeInMins = valueQuery_instance;
        }
    }
    auto maxExpiryTimeInMinsQuery = request.query().get("maxExpiryTimeInMins");
    std::optional<int32_t> maxExpiryTimeInMins;
    if(maxExpiryTimeInMinsQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(maxExpiryTimeInMinsQuery.value(), valueQuery_instance)){
            maxExpiryTimeInMins = valueQuery_instance;
        }
    }
    
    try {
        this->get_json_web_token(expiryTimeInMins, maxExpiryTimeInMins, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_organisation_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    
    try {
        this->get_organisation(organization, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_organisations_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_organisations(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
        this->get_pipeline(organization, pipeline, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_activities_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
        this->get_pipeline_activities(organization, pipeline, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_branch_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto branch = request.param(":branch").as<std::string>();
    
    try {
        this->get_pipeline_branch(organization, pipeline, branch, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_branch_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto branch = request.param(":branch").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    try {
        this->get_pipeline_branch_run(organization, pipeline, branch, run, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_branches_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
        this->get_pipeline_branches(organization, pipeline, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_folder_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto folder = request.param(":folder").as<std::string>();
    
    try {
        this->get_pipeline_folder(organization, folder, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_folder_pipeline_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto folder = request.param(":folder").as<std::string>();
    
    try {
        this->get_pipeline_folder_pipeline(organization, pipeline, folder, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_queue_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
        this->get_pipeline_queue(organization, pipeline, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    try {
        this->get_pipeline_run(organization, pipeline, run, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_run_log_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    // Getting the query params
    auto startQuery = request.query().get("start");
    std::optional<int32_t> start;
    if(startQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(startQuery.value(), valueQuery_instance)){
            start = valueQuery_instance;
        }
    }
    auto downloadQuery = request.query().get("download");
    std::optional<bool> download;
    if(downloadQuery.has_value()){
        bool valueQuery_instance;
        if(fromStringValue(downloadQuery.value(), valueQuery_instance)){
            download = valueQuery_instance;
        }
    }
    
    try {
        this->get_pipeline_run_log(organization, pipeline, run, start, download, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_run_node_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    auto node = request.param(":node").as<std::string>();
    
    try {
        this->get_pipeline_run_node(organization, pipeline, run, node, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_run_node_step_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    auto node = request.param(":node").as<std::string>();
    auto step = request.param(":step").as<std::string>();
    
    try {
        this->get_pipeline_run_node_step(organization, pipeline, run, node, step, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_run_node_step_log_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    auto node = request.param(":node").as<std::string>();
    auto step = request.param(":step").as<std::string>();
    
    try {
        this->get_pipeline_run_node_step_log(organization, pipeline, run, node, step, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_run_node_steps_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    auto node = request.param(":node").as<std::string>();
    
    try {
        this->get_pipeline_run_node_steps(organization, pipeline, run, node, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_run_nodes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    try {
        this->get_pipeline_run_nodes(organization, pipeline, run, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipeline_runs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
        this->get_pipeline_runs(organization, pipeline, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_pipelines_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    
    try {
        this->get_pipelines(organization, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_scm_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto scm = request.param(":scm").as<std::string>();
    
    try {
        this->get_scm(organization, scm, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_scm_organisation_repositories_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto scm = request.param(":scm").as<std::string>();
    auto scmOrganisation = request.param(":scmOrganisation").as<std::string>();
    
    // Getting the query params
    auto credentialIdQuery = request.query().get("credentialId");
    std::optional<std::string> credentialId;
    if(credentialIdQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(credentialIdQuery.value(), valueQuery_instance)){
            credentialId = valueQuery_instance;
        }
    }
    auto pageSizeQuery = request.query().get("pageSize");
    std::optional<int32_t> pageSize;
    if(pageSizeQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(pageSizeQuery.value(), valueQuery_instance)){
            pageSize = valueQuery_instance;
        }
    }
    auto pageNumberQuery = request.query().get("pageNumber");
    std::optional<int32_t> pageNumber;
    if(pageNumberQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(pageNumberQuery.value(), valueQuery_instance)){
            pageNumber = valueQuery_instance;
        }
    }
    
    try {
        this->get_scm_organisation_repositories(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_scm_organisation_repository_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto scm = request.param(":scm").as<std::string>();
    auto scmOrganisation = request.param(":scmOrganisation").as<std::string>();
    auto repository = request.param(":repository").as<std::string>();
    
    // Getting the query params
    auto credentialIdQuery = request.query().get("credentialId");
    std::optional<std::string> credentialId;
    if(credentialIdQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(credentialIdQuery.value(), valueQuery_instance)){
            credentialId = valueQuery_instance;
        }
    }
    
    try {
        this->get_scm_organisation_repository(organization, scm, scmOrganisation, repository, credentialId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_scm_organisations_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto scm = request.param(":scm").as<std::string>();
    
    // Getting the query params
    auto credentialIdQuery = request.query().get("credentialId");
    std::optional<std::string> credentialId;
    if(credentialIdQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(credentialIdQuery.value(), valueQuery_instance)){
            credentialId = valueQuery_instance;
        }
    }
    
    try {
        this->get_scm_organisations(organization, scm, credentialId, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_user_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto user = request.param(":user").as<std::string>();
    
    try {
        this->get_user(organization, user, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_user_favorites_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto user = request.param(":user").as<std::string>();
    
    try {
        this->get_user_favorites(user, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::get_users_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    
    try {
        this->get_users(organization, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::post_pipeline_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    try {
        this->post_pipeline_run(organization, pipeline, run, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::post_pipeline_runs_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    try {
        this->post_pipeline_runs(organization, pipeline, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::put_pipeline_favorite_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    
    // Getting the body param
    
    bool body;
    
    try {
        body = request.body();
    } catch (std::exception &e) {
        this->handleParsingException(e, response);
        return;
    }

    try {
        this->put_pipeline_favorite(organization, pipeline, body, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::put_pipeline_run_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto organization = request.param(":organization").as<std::string>();
    auto pipeline = request.param(":pipeline").as<std::string>();
    auto run = request.param(":run").as<std::string>();
    
    // Getting the query params
    auto blockingQuery = request.query().get("blocking");
    std::optional<std::string> blocking;
    if(blockingQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(blockingQuery.value(), valueQuery_instance)){
            blocking = valueQuery_instance;
        }
    }
    auto timeOutInSecsQuery = request.query().get("timeOutInSecs");
    std::optional<int32_t> timeOutInSecs;
    if(timeOutInSecsQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(timeOutInSecsQuery.value(), valueQuery_instance)){
            timeOutInSecs = valueQuery_instance;
        }
    }
    
    try {
        this->put_pipeline_run(organization, pipeline, run, blocking, timeOutInSecs, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::search_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto qQuery = request.query().get("q");
    std::optional<std::string> q;
    if(qQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(qQuery.value(), valueQuery_instance)){
            q = valueQuery_instance;
        }
    }
    
    try {
        this->search(q, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void BlueOceanApi::search_classes_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto qQuery = request.query().get("q");
    std::optional<std::string> q;
    if(qQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(qQuery.value(), valueQuery_instance)){
            q = valueQuery_instance;
        }
    }
    
    try {
        this->search_classes(q, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        this->handleOperationException(e, response);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void BlueOceanApi::blue_ocean_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

