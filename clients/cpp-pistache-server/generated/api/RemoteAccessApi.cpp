/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/

#include "RemoteAccessApi.h"
#include "Helpers.h"

namespace org::openapitools::server::api
{

using namespace org::openapitools::server::helpers;
using namespace org::openapitools::server::model;

const std::string RemoteAccessApi::base = "";

RemoteAccessApi::RemoteAccessApi(const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : ApiBase(rtr)
{
}

void RemoteAccessApi::init() {
    setupRoutes();
}

void RemoteAccessApi::setupRoutes() {
    using namespace Pistache::Rest;

    Routes::Get(*router, base + "/computer/api/json", Routes::bind(&RemoteAccessApi::get_computer_handler, this));
    Routes::Get(*router, base + "/api/json", Routes::bind(&RemoteAccessApi::get_jenkins_handler, this));
    Routes::Get(*router, base + "/job/:name/api/json", Routes::bind(&RemoteAccessApi::get_job_handler, this));
    Routes::Get(*router, base + "/job/:name/config.xml", Routes::bind(&RemoteAccessApi::get_job_config_handler, this));
    Routes::Get(*router, base + "/job/:name/lastBuild/api/json", Routes::bind(&RemoteAccessApi::get_job_last_build_handler, this));
    Routes::Get(*router, base + "/job/:name/:number/logText/progressiveText", Routes::bind(&RemoteAccessApi::get_job_progressive_text_handler, this));
    Routes::Get(*router, base + "/queue/api/json", Routes::bind(&RemoteAccessApi::get_queue_handler, this));
    Routes::Get(*router, base + "/queue/item/:number/api/json", Routes::bind(&RemoteAccessApi::get_queue_item_handler, this));
    Routes::Get(*router, base + "/view/:name/api/json", Routes::bind(&RemoteAccessApi::get_view_handler, this));
    Routes::Get(*router, base + "/view/:name/config.xml", Routes::bind(&RemoteAccessApi::get_view_config_handler, this));
    Routes::Head(*router, base + "/api/json", Routes::bind(&RemoteAccessApi::head_jenkins_handler, this));
    Routes::Post(*router, base + "/createItem", Routes::bind(&RemoteAccessApi::post_create_item_handler, this));
    Routes::Post(*router, base + "/createView", Routes::bind(&RemoteAccessApi::post_create_view_handler, this));
    Routes::Post(*router, base + "/job/:name/build", Routes::bind(&RemoteAccessApi::post_job_build_handler, this));
    Routes::Post(*router, base + "/job/:name/config.xml", Routes::bind(&RemoteAccessApi::post_job_config_handler, this));
    Routes::Post(*router, base + "/job/:name/doDelete", Routes::bind(&RemoteAccessApi::post_job_delete_handler, this));
    Routes::Post(*router, base + "/job/:name/disable", Routes::bind(&RemoteAccessApi::post_job_disable_handler, this));
    Routes::Post(*router, base + "/job/:name/enable", Routes::bind(&RemoteAccessApi::post_job_enable_handler, this));
    Routes::Post(*router, base + "/job/:name/lastBuild/stop", Routes::bind(&RemoteAccessApi::post_job_last_build_stop_handler, this));
    Routes::Post(*router, base + "/view/:name/config.xml", Routes::bind(&RemoteAccessApi::post_view_config_handler, this));

    // Default handler, called when a route is not found
    router->addCustomHandler(Routes::bind(&RemoteAccessApi::remote_access_api_default_handler, this));
}

std::pair<Pistache::Http::Code, std::string> RemoteAccessApi::handleParsingException(const std::exception& ex) const noexcept
{
    try {
        throw;
    } catch (nlohmann::detail::exception &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (org::openapitools::server::helpers::ValidationException &e) {
        return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    } catch (std::exception &e) {
        return std::make_pair(Pistache::Http::Code::Internal_Server_Error, e.what());
    }
}

std::pair<Pistache::Http::Code, std::string> RemoteAccessApi::handleOperationException(const std::exception& ex) const noexcept
{
    return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void RemoteAccessApi::get_computer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the query params
    auto depthQuery = request.query().get("depth");
    std::optional<int32_t> depth;
    if(depthQuery.has_value()){
        int32_t valueQuery_instance;
        if(fromStringValue(depthQuery.value(), valueQuery_instance)){
            depth = valueQuery_instance;
        }
    }
    
    try {
        this->get_computer(depth, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_jenkins_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_jenkins(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    try {
        this->get_job(name, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_job_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    try {
        this->get_job_config(name, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_job_last_build_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    try {
        this->get_job_last_build(name, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_job_progressive_text_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    auto number = request.param(":number").as<std::string>();
    
    // Getting the query params
    auto startQuery = request.query().get("start");
    std::optional<std::string> start;
    if(startQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(startQuery.value(), valueQuery_instance)){
            start = valueQuery_instance;
        }
    }
    
    try {
        this->get_job_progressive_text(name, number, start, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_queue_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->get_queue(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_queue_item_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto number = request.param(":number").as<std::string>();
    
    try {
        this->get_queue_item(number, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_view_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    try {
        this->get_view(name, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::get_view_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    try {
        this->get_view_config(name, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::head_jenkins_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    try {


    try {
        this->head_jenkins(response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_create_item_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    std::string body;
    
    // Getting the query params
    auto nameQuery = request.query().get("name");
    std::optional<std::string> name;
    if(nameQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(nameQuery.value(), valueQuery_instance)){
            name = valueQuery_instance;
        }
    }
    auto fromQuery = request.query().get("from");
    std::optional<std::string> from;
    if(fromQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(fromQuery.value(), valueQuery_instance)){
            from = valueQuery_instance;
        }
    }
    auto modeQuery = request.query().get("mode");
    std::optional<std::string> mode;
    if(modeQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(modeQuery.value(), valueQuery_instance)){
            mode = valueQuery_instance;
        }
    }
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");
    auto contentType = request.headers().tryGetRaw("Content-Type");

    try {
        body = request.body();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->post_create_item(name, from, mode, jenkinsCrumb, contentType, body, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_create_view_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {


    // Getting the body param
    
    std::string body;
    
    // Getting the query params
    auto nameQuery = request.query().get("name");
    std::optional<std::string> name;
    if(nameQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(nameQuery.value(), valueQuery_instance)){
            name = valueQuery_instance;
        }
    }
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");
    auto contentType = request.headers().tryGetRaw("Content-Type");

    try {
        body = request.body();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->post_create_view(name, jenkinsCrumb, contentType, body, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_job_build_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the query params
    auto jsonQuery = request.query().get("json");
    std::optional<std::string> json;
    if(jsonQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(jsonQuery.value(), valueQuery_instance)){
            json = valueQuery_instance;
        }
    }
    auto tokenQuery = request.query().get("token");
    std::optional<std::string> token;
    if(tokenQuery.has_value()){
        std::string valueQuery_instance;
        if(fromStringValue(tokenQuery.value(), valueQuery_instance)){
            token = valueQuery_instance;
        }
    }
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");

    try {
        this->post_job_build(name, json, token, jenkinsCrumb, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_job_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the body param
    
    std::string body;
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");

    try {
        body = request.body();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->post_job_config(name, body, jenkinsCrumb, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_job_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");

    try {
        this->post_job_delete(name, jenkinsCrumb, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_job_disable_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");

    try {
        this->post_job_disable(name, jenkinsCrumb, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_job_enable_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");

    try {
        this->post_job_enable(name, jenkinsCrumb, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_job_last_build_stop_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");

    try {
        this->post_job_last_build_stop(name, jenkinsCrumb, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}
void RemoteAccessApi::post_view_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response) {
    try {

    // Getting the path params
    auto name = request.param(":name").as<std::string>();
    
    // Getting the body param
    
    std::string body;
    
    // Getting the header params
    auto jenkinsCrumb = request.headers().tryGetRaw("Jenkins-Crumb");

    try {
        body = request.body();
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleParsingException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    try {
        this->post_view_config(name, body, jenkinsCrumb, response);
    } catch (Pistache::Http::HttpError &e) {
        response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
        return;
    } catch (std::exception &e) {
        const std::pair<Pistache::Http::Code, std::string> errorInfo = this->handleOperationException(e);
        response.send(errorInfo.first, errorInfo.second);
        return;
    }

    } catch (std::exception &e) {
        response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    }

}

void RemoteAccessApi::remote_access_api_default_handler(const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
    response.send(Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

} // namespace org::openapitools::server::api

