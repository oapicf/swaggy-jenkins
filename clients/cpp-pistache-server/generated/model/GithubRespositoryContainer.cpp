/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GithubRespositoryContainer.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GithubRespositoryContainer::GithubRespositoryContainer()
{
    m__class = "";
    m__classIsSet = false;
    m__linksIsSet = false;
    m_RepositoriesIsSet = false;
    
}

void GithubRespositoryContainer::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GithubRespositoryContainer::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GithubRespositoryContainer::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GithubRespositoryContainer" : pathPrefix;

                
    return success;
}

bool GithubRespositoryContainer::operator==(const GithubRespositoryContainer& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!linksIsSet() && !rhs.linksIsSet()) || (linksIsSet() && rhs.linksIsSet() && getLinks() == rhs.getLinks())) &&
    
    
    ((!repositoriesIsSet() && !rhs.repositoriesIsSet()) || (repositoriesIsSet() && rhs.repositoriesIsSet() && getRepositories() == rhs.getRepositories()))
    
    ;
}

bool GithubRespositoryContainer::operator!=(const GithubRespositoryContainer& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GithubRespositoryContainer& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
    if(o.repositoriesIsSet())
        j["repositories"] = o.m_Repositories;
    
}

void from_json(const nlohmann::json& j, GithubRespositoryContainer& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
    if(j.find("repositories") != j.end())
    {
        j.at("repositories").get_to(o.m_Repositories);
        o.m_RepositoriesIsSet = true;
    } 
    
}

std::string GithubRespositoryContainer::getClass() const
{
    return m__class;
}
void GithubRespositoryContainer::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubRespositoryContainer::r_classIsSet() const
{
    return m__classIsSet;
}
void GithubRespositoryContainer::unset_class()
{
    m__classIsSet = false;
}
org::openapitools::server::model::GithubRespositoryContainerlinks GithubRespositoryContainer::getLinks() const
{
    return m__links;
}
void GithubRespositoryContainer::setLinks(org::openapitools::server::model::GithubRespositoryContainerlinks const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool GithubRespositoryContainer::linksIsSet() const
{
    return m__linksIsSet;
}
void GithubRespositoryContainer::unset_links()
{
    m__linksIsSet = false;
}
org::openapitools::server::model::GithubRepositories GithubRespositoryContainer::getRepositories() const
{
    return m_Repositories;
}
void GithubRespositoryContainer::setRepositories(org::openapitools::server::model::GithubRepositories const& value)
{
    m_Repositories = value;
    m_RepositoriesIsSet = true;
}
bool GithubRespositoryContainer::repositoriesIsSet() const
{
    return m_RepositoriesIsSet;
}
void GithubRespositoryContainer::unsetRepositories()
{
    m_RepositoriesIsSet = false;
}


} // namespace org::openapitools::server::model

