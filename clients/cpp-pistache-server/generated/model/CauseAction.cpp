/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "CauseAction.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

CauseAction::CauseAction()
{
    m__class = "";
    m__classIsSet = false;
    m_CausesIsSet = false;
    
}

void CauseAction::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool CauseAction::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool CauseAction::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "CauseAction" : pathPrefix;

             
    if (causesIsSet())
    {
        const std::vector<org::openapitools::server::model::CauseUserIdCause>& value = m_Causes;
        const std::string currentValuePath = _pathPrefix + ".causes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CauseUserIdCause& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".causes") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool CauseAction::operator==(const CauseAction& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!causesIsSet() && !rhs.causesIsSet()) || (causesIsSet() && rhs.causesIsSet() && getCauses() == rhs.getCauses()))
    
    ;
}

bool CauseAction::operator!=(const CauseAction& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CauseAction& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.causesIsSet() || !o.m_Causes.empty())
        j["causes"] = o.m_Causes;
    
}

void from_json(const nlohmann::json& j, CauseAction& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("causes") != j.end())
    {
        j.at("causes").get_to(o.m_Causes);
        o.m_CausesIsSet = true;
    } 
    
}

std::string CauseAction::getClass() const
{
    return m__class;
}
void CauseAction::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool CauseAction::r_classIsSet() const
{
    return m__classIsSet;
}
void CauseAction::unset_class()
{
    m__classIsSet = false;
}
std::vector<org::openapitools::server::model::CauseUserIdCause> CauseAction::getCauses() const
{
    return m_Causes;
}
void CauseAction::setCauses(std::vector<org::openapitools::server::model::CauseUserIdCause> const& value)
{
    m_Causes = value;
    m_CausesIsSet = true;
}
bool CauseAction::causesIsSet() const
{
    return m_CausesIsSet;
}
void CauseAction::unsetCauses()
{
    m_CausesIsSet = false;
}


} // namespace org::openapitools::server::model

