/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "BranchImplpermissions.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

BranchImplpermissions::BranchImplpermissions()
{
    m_Create = false;
    m_CreateIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
    m_Start = false;
    m_StartIsSet = false;
    m_Stop = false;
    m_StopIsSet = false;
    m__class = "";
    m__classIsSet = false;
    
}

void BranchImplpermissions::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool BranchImplpermissions::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool BranchImplpermissions::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "BranchImplpermissions" : pathPrefix;

                        
    return success;
}

bool BranchImplpermissions::operator==(const BranchImplpermissions& rhs) const
{
    return
    
    
    
    ((!createIsSet() && !rhs.createIsSet()) || (createIsSet() && rhs.createIsSet() && isCreate() == rhs.isCreate())) &&
    
    
    ((!readIsSet() && !rhs.readIsSet()) || (readIsSet() && rhs.readIsSet() && isRead() == rhs.isRead())) &&
    
    
    ((!startIsSet() && !rhs.startIsSet()) || (startIsSet() && rhs.startIsSet() && isStart() == rhs.isStart())) &&
    
    
    ((!stopIsSet() && !rhs.stopIsSet()) || (stopIsSet() && rhs.stopIsSet() && isStop() == rhs.isStop())) &&
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass()))
    
    ;
}

bool BranchImplpermissions::operator!=(const BranchImplpermissions& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const BranchImplpermissions& o)
{
    j = nlohmann::json::object();
    if(o.createIsSet())
        j["create"] = o.m_Create;
    if(o.readIsSet())
        j["read"] = o.m_Read;
    if(o.startIsSet())
        j["start"] = o.m_Start;
    if(o.stopIsSet())
        j["stop"] = o.m_Stop;
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    
}

void from_json(const nlohmann::json& j, BranchImplpermissions& o)
{
    if(j.find("create") != j.end())
    {
        j.at("create").get_to(o.m_Create);
        o.m_CreateIsSet = true;
    } 
    if(j.find("read") != j.end())
    {
        j.at("read").get_to(o.m_Read);
        o.m_ReadIsSet = true;
    } 
    if(j.find("start") != j.end())
    {
        j.at("start").get_to(o.m_Start);
        o.m_StartIsSet = true;
    } 
    if(j.find("stop") != j.end())
    {
        j.at("stop").get_to(o.m_Stop);
        o.m_StopIsSet = true;
    } 
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    
}

bool BranchImplpermissions::isCreate() const
{
    return m_Create;
}
void BranchImplpermissions::setCreate(bool const value)
{
    m_Create = value;
    m_CreateIsSet = true;
}
bool BranchImplpermissions::createIsSet() const
{
    return m_CreateIsSet;
}
void BranchImplpermissions::unsetCreate()
{
    m_CreateIsSet = false;
}
bool BranchImplpermissions::isRead() const
{
    return m_Read;
}
void BranchImplpermissions::setRead(bool const value)
{
    m_Read = value;
    m_ReadIsSet = true;
}
bool BranchImplpermissions::readIsSet() const
{
    return m_ReadIsSet;
}
void BranchImplpermissions::unsetRead()
{
    m_ReadIsSet = false;
}
bool BranchImplpermissions::isStart() const
{
    return m_Start;
}
void BranchImplpermissions::setStart(bool const value)
{
    m_Start = value;
    m_StartIsSet = true;
}
bool BranchImplpermissions::startIsSet() const
{
    return m_StartIsSet;
}
void BranchImplpermissions::unsetStart()
{
    m_StartIsSet = false;
}
bool BranchImplpermissions::isStop() const
{
    return m_Stop;
}
void BranchImplpermissions::setStop(bool const value)
{
    m_Stop = value;
    m_StopIsSet = true;
}
bool BranchImplpermissions::stopIsSet() const
{
    return m_StopIsSet;
}
void BranchImplpermissions::unsetStop()
{
    m_StopIsSet = false;
}
std::string BranchImplpermissions::getClass() const
{
    return m__class;
}
void BranchImplpermissions::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool BranchImplpermissions::r_classIsSet() const
{
    return m__classIsSet;
}
void BranchImplpermissions::unset_class()
{
    m__classIsSet = false;
}


} // namespace org::openapitools::server::model

