/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GithubContent.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GithubContent::GithubContent()
{
    m_Name = "";
    m_NameIsSet = false;
    m_Sha = "";
    m_ShaIsSet = false;
    m__class = "";
    m__classIsSet = false;
    m_Repo = "";
    m_RepoIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Owner = "";
    m_OwnerIsSet = false;
    m_Path = "";
    m_PathIsSet = false;
    m_Base64Data = "";
    m_Base64DataIsSet = false;
    
}

void GithubContent::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GithubContent::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GithubContent::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GithubContent" : pathPrefix;

                                    
    return success;
}

bool GithubContent::operator==(const GithubContent& rhs) const
{
    return
    
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!shaIsSet() && !rhs.shaIsSet()) || (shaIsSet() && rhs.shaIsSet() && getSha() == rhs.getSha())) &&
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!repoIsSet() && !rhs.repoIsSet()) || (repoIsSet() && rhs.repoIsSet() && getRepo() == rhs.getRepo())) &&
    
    
    ((!sizeIsSet() && !rhs.sizeIsSet()) || (sizeIsSet() && rhs.sizeIsSet() && getSize() == rhs.getSize())) &&
    
    
    ((!ownerIsSet() && !rhs.ownerIsSet()) || (ownerIsSet() && rhs.ownerIsSet() && getOwner() == rhs.getOwner())) &&
    
    
    ((!pathIsSet() && !rhs.pathIsSet()) || (pathIsSet() && rhs.pathIsSet() && getPath() == rhs.getPath())) &&
    
    
    ((!base64DataIsSet() && !rhs.base64DataIsSet()) || (base64DataIsSet() && rhs.base64DataIsSet() && getBase64Data() == rhs.getBase64Data()))
    
    ;
}

bool GithubContent::operator!=(const GithubContent& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GithubContent& o)
{
    j = nlohmann::json::object();
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.shaIsSet())
        j["sha"] = o.m_Sha;
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.repoIsSet())
        j["repo"] = o.m_Repo;
    if(o.sizeIsSet())
        j["size"] = o.m_Size;
    if(o.ownerIsSet())
        j["owner"] = o.m_Owner;
    if(o.pathIsSet())
        j["path"] = o.m_Path;
    if(o.base64DataIsSet())
        j["base64Data"] = o.m_Base64Data;
    
}

void from_json(const nlohmann::json& j, GithubContent& o)
{
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("sha") != j.end())
    {
        j.at("sha").get_to(o.m_Sha);
        o.m_ShaIsSet = true;
    } 
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("repo") != j.end())
    {
        j.at("repo").get_to(o.m_Repo);
        o.m_RepoIsSet = true;
    } 
    if(j.find("size") != j.end())
    {
        j.at("size").get_to(o.m_Size);
        o.m_SizeIsSet = true;
    } 
    if(j.find("owner") != j.end())
    {
        j.at("owner").get_to(o.m_Owner);
        o.m_OwnerIsSet = true;
    } 
    if(j.find("path") != j.end())
    {
        j.at("path").get_to(o.m_Path);
        o.m_PathIsSet = true;
    } 
    if(j.find("base64Data") != j.end())
    {
        j.at("base64Data").get_to(o.m_Base64Data);
        o.m_Base64DataIsSet = true;
    } 
    
}

std::string GithubContent::getName() const
{
    return m_Name;
}
void GithubContent::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool GithubContent::nameIsSet() const
{
    return m_NameIsSet;
}
void GithubContent::unsetName()
{
    m_NameIsSet = false;
}
std::string GithubContent::getSha() const
{
    return m_Sha;
}
void GithubContent::setSha(std::string const& value)
{
    m_Sha = value;
    m_ShaIsSet = true;
}
bool GithubContent::shaIsSet() const
{
    return m_ShaIsSet;
}
void GithubContent::unsetSha()
{
    m_ShaIsSet = false;
}
std::string GithubContent::getClass() const
{
    return m__class;
}
void GithubContent::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubContent::r_classIsSet() const
{
    return m__classIsSet;
}
void GithubContent::unset_class()
{
    m__classIsSet = false;
}
std::string GithubContent::getRepo() const
{
    return m_Repo;
}
void GithubContent::setRepo(std::string const& value)
{
    m_Repo = value;
    m_RepoIsSet = true;
}
bool GithubContent::repoIsSet() const
{
    return m_RepoIsSet;
}
void GithubContent::unsetRepo()
{
    m_RepoIsSet = false;
}
int32_t GithubContent::getSize() const
{
    return m_Size;
}
void GithubContent::setSize(int32_t const value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool GithubContent::sizeIsSet() const
{
    return m_SizeIsSet;
}
void GithubContent::unsetSize()
{
    m_SizeIsSet = false;
}
std::string GithubContent::getOwner() const
{
    return m_Owner;
}
void GithubContent::setOwner(std::string const& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}
bool GithubContent::ownerIsSet() const
{
    return m_OwnerIsSet;
}
void GithubContent::unsetOwner()
{
    m_OwnerIsSet = false;
}
std::string GithubContent::getPath() const
{
    return m_Path;
}
void GithubContent::setPath(std::string const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool GithubContent::pathIsSet() const
{
    return m_PathIsSet;
}
void GithubContent::unsetPath()
{
    m_PathIsSet = false;
}
std::string GithubContent::getBase64Data() const
{
    return m_Base64Data;
}
void GithubContent::setBase64Data(std::string const& value)
{
    m_Base64Data = value;
    m_Base64DataIsSet = true;
}
bool GithubContent::base64DataIsSet() const
{
    return m_Base64DataIsSet;
}
void GithubContent::unsetBase64Data()
{
    m_Base64DataIsSet = false;
}


} // namespace org::openapitools::server::model

