/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ClassesByClass.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ClassesByClass::ClassesByClass()
{
    m_ClassesIsSet = false;
    m__class = "";
    m__classIsSet = false;
    
}

void ClassesByClass::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ClassesByClass::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ClassesByClass::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ClassesByClass" : pathPrefix;

         
    if (classesIsSet())
    {
        const std::vector<std::string>& value = m_Classes;
        const std::string currentValuePath = _pathPrefix + ".classes";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const std::string& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        
 
                i++;
            }
        }

    }
        
    return success;
}

bool ClassesByClass::operator==(const ClassesByClass& rhs) const
{
    return
    
    
    
    ((!classesIsSet() && !rhs.classesIsSet()) || (classesIsSet() && rhs.classesIsSet() && getClasses() == rhs.getClasses())) &&
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass()))
    
    ;
}

bool ClassesByClass::operator!=(const ClassesByClass& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ClassesByClass& o)
{
    j = nlohmann::json::object();
    if(o.classesIsSet() || !o.m_Classes.empty())
        j["classes"] = o.m_Classes;
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    
}

void from_json(const nlohmann::json& j, ClassesByClass& o)
{
    if(j.find("classes") != j.end())
    {
        j.at("classes").get_to(o.m_Classes);
        o.m_ClassesIsSet = true;
    } 
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    
}

std::vector<std::string> ClassesByClass::getClasses() const
{
    return m_Classes;
}
void ClassesByClass::setClasses(std::vector<std::string> const& value)
{
    m_Classes = value;
    m_ClassesIsSet = true;
}
bool ClassesByClass::classesIsSet() const
{
    return m_ClassesIsSet;
}
void ClassesByClass::unsetClasses()
{
    m_ClassesIsSet = false;
}
std::string ClassesByClass::getClass() const
{
    return m__class;
}
void ClassesByClass::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool ClassesByClass::r_classIsSet() const
{
    return m__classIsSet;
}
void ClassesByClass::unset_class()
{
    m__classIsSet = false;
}


} // namespace org::openapitools::server::model

