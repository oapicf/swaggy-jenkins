/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * HudsonMasterComputermonitorData.h
 *
 * 
 */

#ifndef HudsonMasterComputermonitorData_H_
#define HudsonMasterComputermonitorData_H_


#include "SwapSpaceMonitorMemoryUsage2.h"
#include "DiskSpaceMonitorDescriptorDiskSpace.h"
#include <string>
#include "ResponseTimeMonitorData.h"
#include "ClockDifference.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  HudsonMasterComputermonitorData
{
public:
    HudsonMasterComputermonitorData();
    virtual ~HudsonMasterComputermonitorData() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const HudsonMasterComputermonitorData& rhs) const;
    bool operator!=(const HudsonMasterComputermonitorData& rhs) const;

    /////////////////////////////////////////////
    /// HudsonMasterComputermonitorData members

    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::SwapSpaceMonitorMemoryUsage2 getHudsonNodeMonitorsSwapSpaceMonitor() const;
    void setHudsonNodeMonitorsSwapSpaceMonitor(org::openapitools::server::model::SwapSpaceMonitorMemoryUsage2 const& value);
    bool hudsonNodeMonitorsSwapSpaceMonitorIsSet() const;
    void unsetHudson_node_monitors_SwapSpaceMonitor();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DiskSpaceMonitorDescriptorDiskSpace getHudsonNodeMonitorsTemporarySpaceMonitor() const;
    void setHudsonNodeMonitorsTemporarySpaceMonitor(org::openapitools::server::model::DiskSpaceMonitorDescriptorDiskSpace const& value);
    bool hudsonNodeMonitorsTemporarySpaceMonitorIsSet() const;
    void unsetHudson_node_monitors_TemporarySpaceMonitor();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::DiskSpaceMonitorDescriptorDiskSpace getHudsonNodeMonitorsDiskSpaceMonitor() const;
    void setHudsonNodeMonitorsDiskSpaceMonitor(org::openapitools::server::model::DiskSpaceMonitorDescriptorDiskSpace const& value);
    bool hudsonNodeMonitorsDiskSpaceMonitorIsSet() const;
    void unsetHudson_node_monitors_DiskSpaceMonitor();
    /// <summary>
    /// 
    /// </summary>
    std::string getHudsonNodeMonitorsArchitectureMonitor() const;
    void setHudsonNodeMonitorsArchitectureMonitor(std::string const& value);
    bool hudsonNodeMonitorsArchitectureMonitorIsSet() const;
    void unsetHudson_node_monitors_ArchitectureMonitor();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ResponseTimeMonitorData getHudsonNodeMonitorsResponseTimeMonitor() const;
    void setHudsonNodeMonitorsResponseTimeMonitor(org::openapitools::server::model::ResponseTimeMonitorData const& value);
    bool hudsonNodeMonitorsResponseTimeMonitorIsSet() const;
    void unsetHudson_node_monitors_ResponseTimeMonitor();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::ClockDifference getHudsonNodeMonitorsClockMonitor() const;
    void setHudsonNodeMonitorsClockMonitor(org::openapitools::server::model::ClockDifference const& value);
    bool hudsonNodeMonitorsClockMonitorIsSet() const;
    void unsetHudson_node_monitors_ClockMonitor();
    /// <summary>
    /// 
    /// </summary>
    std::string getClass() const;
    void setClass(std::string const& value);
    bool r_classIsSet() const;
    void unset_class();

    friend  void to_json(nlohmann::json& j, const HudsonMasterComputermonitorData& o);
    friend  void from_json(const nlohmann::json& j, HudsonMasterComputermonitorData& o);
protected:
    org::openapitools::server::model::SwapSpaceMonitorMemoryUsage2 m_Hudson_node_monitors_SwapSpaceMonitor;
    bool m_Hudson_node_monitors_SwapSpaceMonitorIsSet;
    org::openapitools::server::model::DiskSpaceMonitorDescriptorDiskSpace m_Hudson_node_monitors_TemporarySpaceMonitor;
    bool m_Hudson_node_monitors_TemporarySpaceMonitorIsSet;
    org::openapitools::server::model::DiskSpaceMonitorDescriptorDiskSpace m_Hudson_node_monitors_DiskSpaceMonitor;
    bool m_Hudson_node_monitors_DiskSpaceMonitorIsSet;
    std::string m_Hudson_node_monitors_ArchitectureMonitor;
    bool m_Hudson_node_monitors_ArchitectureMonitorIsSet;
    org::openapitools::server::model::ResponseTimeMonitorData m_Hudson_node_monitors_ResponseTimeMonitor;
    bool m_Hudson_node_monitors_ResponseTimeMonitorIsSet;
    org::openapitools::server::model::ClockDifference m_Hudson_node_monitors_ClockMonitor;
    bool m_Hudson_node_monitors_ClockMonitorIsSet;
    std::string m__class;
    bool m__classIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* HudsonMasterComputermonitorData_H_ */
