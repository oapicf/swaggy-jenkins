/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FreeStyleBuild.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FreeStyleBuild::FreeStyleBuild()
{
    m__class = "";
    m__classIsSet = false;
    m_number = 0;
    m_numberIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    m_ActionsIsSet = false;
    m_Building = false;
    m_BuildingIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_DisplayName = "";
    m_DisplayNameIsSet = false;
    m_Duration = 0;
    m_DurationIsSet = false;
    m_EstimatedDuration = 0;
    m_EstimatedDurationIsSet = false;
    m_Executor = "";
    m_ExecutorIsSet = false;
    m_FullDisplayName = "";
    m_FullDisplayNameIsSet = false;
    m_Id = "";
    m_IdIsSet = false;
    m_KeepLog = false;
    m_KeepLogIsSet = false;
    m_QueueId = 0;
    m_QueueIdIsSet = false;
    m_Result = "";
    m_ResultIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_BuiltOn = "";
    m_BuiltOnIsSet = false;
    m_ChangeSetIsSet = false;
    
}

void FreeStyleBuild::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FreeStyleBuild::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FreeStyleBuild::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FreeStyleBuild" : pathPrefix;

                     
    if (actionsIsSet())
    {
        const std::vector<org::openapitools::server::model::CauseAction>& value = m_Actions;
        const std::string currentValuePath = _pathPrefix + ".actions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::CauseAction& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".actions") && success;
 
                i++;
            }
        }

    }
                                                            
    return success;
}

bool FreeStyleBuild::operator==(const FreeStyleBuild& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!numberIsSet() && !rhs.numberIsSet()) || (numberIsSet() && rhs.numberIsSet() && getNumber() == rhs.getNumber())) &&
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl())) &&
    
    
    ((!actionsIsSet() && !rhs.actionsIsSet()) || (actionsIsSet() && rhs.actionsIsSet() && getActions() == rhs.getActions())) &&
    
    
    ((!buildingIsSet() && !rhs.buildingIsSet()) || (buildingIsSet() && rhs.buildingIsSet() && isBuilding() == rhs.isBuilding())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!displayNameIsSet() && !rhs.displayNameIsSet()) || (displayNameIsSet() && rhs.displayNameIsSet() && getDisplayName() == rhs.getDisplayName())) &&
    
    
    ((!durationIsSet() && !rhs.durationIsSet()) || (durationIsSet() && rhs.durationIsSet() && getDuration() == rhs.getDuration())) &&
    
    
    ((!estimatedDurationIsSet() && !rhs.estimatedDurationIsSet()) || (estimatedDurationIsSet() && rhs.estimatedDurationIsSet() && getEstimatedDuration() == rhs.getEstimatedDuration())) &&
    
    
    ((!executorIsSet() && !rhs.executorIsSet()) || (executorIsSet() && rhs.executorIsSet() && getExecutor() == rhs.getExecutor())) &&
    
    
    ((!fullDisplayNameIsSet() && !rhs.fullDisplayNameIsSet()) || (fullDisplayNameIsSet() && rhs.fullDisplayNameIsSet() && getFullDisplayName() == rhs.getFullDisplayName())) &&
    
    
    ((!idIsSet() && !rhs.idIsSet()) || (idIsSet() && rhs.idIsSet() && getId() == rhs.getId())) &&
    
    
    ((!keepLogIsSet() && !rhs.keepLogIsSet()) || (keepLogIsSet() && rhs.keepLogIsSet() && isKeepLog() == rhs.isKeepLog())) &&
    
    
    ((!queueIdIsSet() && !rhs.queueIdIsSet()) || (queueIdIsSet() && rhs.queueIdIsSet() && getQueueId() == rhs.getQueueId())) &&
    
    
    ((!resultIsSet() && !rhs.resultIsSet()) || (resultIsSet() && rhs.resultIsSet() && getResult() == rhs.getResult())) &&
    
    
    ((!timestampIsSet() && !rhs.timestampIsSet()) || (timestampIsSet() && rhs.timestampIsSet() && getTimestamp() == rhs.getTimestamp())) &&
    
    
    ((!builtOnIsSet() && !rhs.builtOnIsSet()) || (builtOnIsSet() && rhs.builtOnIsSet() && getBuiltOn() == rhs.getBuiltOn())) &&
    
    
    ((!changeSetIsSet() && !rhs.changeSetIsSet()) || (changeSetIsSet() && rhs.changeSetIsSet() && getChangeSet() == rhs.getChangeSet()))
    
    ;
}

bool FreeStyleBuild::operator!=(const FreeStyleBuild& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FreeStyleBuild& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.numberIsSet())
        j["number"] = o.m_number;
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    if(o.actionsIsSet() || !o.m_Actions.empty())
        j["actions"] = o.m_Actions;
    if(o.buildingIsSet())
        j["building"] = o.m_Building;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.displayNameIsSet())
        j["displayName"] = o.m_DisplayName;
    if(o.durationIsSet())
        j["duration"] = o.m_Duration;
    if(o.estimatedDurationIsSet())
        j["estimatedDuration"] = o.m_EstimatedDuration;
    if(o.executorIsSet())
        j["executor"] = o.m_Executor;
    if(o.fullDisplayNameIsSet())
        j["fullDisplayName"] = o.m_FullDisplayName;
    if(o.idIsSet())
        j["id"] = o.m_Id;
    if(o.keepLogIsSet())
        j["keepLog"] = o.m_KeepLog;
    if(o.queueIdIsSet())
        j["queueId"] = o.m_QueueId;
    if(o.resultIsSet())
        j["result"] = o.m_Result;
    if(o.timestampIsSet())
        j["timestamp"] = o.m_Timestamp;
    if(o.builtOnIsSet())
        j["builtOn"] = o.m_BuiltOn;
    if(o.changeSetIsSet())
        j["changeSet"] = o.m_ChangeSet;
    
}

void from_json(const nlohmann::json& j, FreeStyleBuild& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("number") != j.end())
    {
        j.at("number").get_to(o.m_number);
        o.m_numberIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    if(j.find("actions") != j.end())
    {
        j.at("actions").get_to(o.m_Actions);
        o.m_ActionsIsSet = true;
    } 
    if(j.find("building") != j.end())
    {
        j.at("building").get_to(o.m_Building);
        o.m_BuildingIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("displayName") != j.end())
    {
        j.at("displayName").get_to(o.m_DisplayName);
        o.m_DisplayNameIsSet = true;
    } 
    if(j.find("duration") != j.end())
    {
        j.at("duration").get_to(o.m_Duration);
        o.m_DurationIsSet = true;
    } 
    if(j.find("estimatedDuration") != j.end())
    {
        j.at("estimatedDuration").get_to(o.m_EstimatedDuration);
        o.m_EstimatedDurationIsSet = true;
    } 
    if(j.find("executor") != j.end())
    {
        j.at("executor").get_to(o.m_Executor);
        o.m_ExecutorIsSet = true;
    } 
    if(j.find("fullDisplayName") != j.end())
    {
        j.at("fullDisplayName").get_to(o.m_FullDisplayName);
        o.m_FullDisplayNameIsSet = true;
    } 
    if(j.find("id") != j.end())
    {
        j.at("id").get_to(o.m_Id);
        o.m_IdIsSet = true;
    } 
    if(j.find("keepLog") != j.end())
    {
        j.at("keepLog").get_to(o.m_KeepLog);
        o.m_KeepLogIsSet = true;
    } 
    if(j.find("queueId") != j.end())
    {
        j.at("queueId").get_to(o.m_QueueId);
        o.m_QueueIdIsSet = true;
    } 
    if(j.find("result") != j.end())
    {
        j.at("result").get_to(o.m_Result);
        o.m_ResultIsSet = true;
    } 
    if(j.find("timestamp") != j.end())
    {
        j.at("timestamp").get_to(o.m_Timestamp);
        o.m_TimestampIsSet = true;
    } 
    if(j.find("builtOn") != j.end())
    {
        j.at("builtOn").get_to(o.m_BuiltOn);
        o.m_BuiltOnIsSet = true;
    } 
    if(j.find("changeSet") != j.end())
    {
        j.at("changeSet").get_to(o.m_ChangeSet);
        o.m_ChangeSetIsSet = true;
    } 
    
}

std::string FreeStyleBuild::getClass() const
{
    return m__class;
}
void FreeStyleBuild::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool FreeStyleBuild::r_classIsSet() const
{
    return m__classIsSet;
}
void FreeStyleBuild::unset_class()
{
    m__classIsSet = false;
}
int32_t FreeStyleBuild::getNumber() const
{
    return m_number;
}
void FreeStyleBuild::setNumber(int32_t const value)
{
    m_number = value;
    m_numberIsSet = true;
}
bool FreeStyleBuild::numberIsSet() const
{
    return m_numberIsSet;
}
void FreeStyleBuild::unsetnumber()
{
    m_numberIsSet = false;
}
std::string FreeStyleBuild::getUrl() const
{
    return m_Url;
}
void FreeStyleBuild::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool FreeStyleBuild::urlIsSet() const
{
    return m_UrlIsSet;
}
void FreeStyleBuild::unsetUrl()
{
    m_UrlIsSet = false;
}
std::vector<org::openapitools::server::model::CauseAction> FreeStyleBuild::getActions() const
{
    return m_Actions;
}
void FreeStyleBuild::setActions(std::vector<org::openapitools::server::model::CauseAction> const& value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}
bool FreeStyleBuild::actionsIsSet() const
{
    return m_ActionsIsSet;
}
void FreeStyleBuild::unsetActions()
{
    m_ActionsIsSet = false;
}
bool FreeStyleBuild::isBuilding() const
{
    return m_Building;
}
void FreeStyleBuild::setBuilding(bool const value)
{
    m_Building = value;
    m_BuildingIsSet = true;
}
bool FreeStyleBuild::buildingIsSet() const
{
    return m_BuildingIsSet;
}
void FreeStyleBuild::unsetBuilding()
{
    m_BuildingIsSet = false;
}
std::string FreeStyleBuild::getDescription() const
{
    return m_Description;
}
void FreeStyleBuild::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool FreeStyleBuild::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void FreeStyleBuild::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string FreeStyleBuild::getDisplayName() const
{
    return m_DisplayName;
}
void FreeStyleBuild::setDisplayName(std::string const& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool FreeStyleBuild::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}
void FreeStyleBuild::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
int32_t FreeStyleBuild::getDuration() const
{
    return m_Duration;
}
void FreeStyleBuild::setDuration(int32_t const value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}
bool FreeStyleBuild::durationIsSet() const
{
    return m_DurationIsSet;
}
void FreeStyleBuild::unsetDuration()
{
    m_DurationIsSet = false;
}
int32_t FreeStyleBuild::getEstimatedDuration() const
{
    return m_EstimatedDuration;
}
void FreeStyleBuild::setEstimatedDuration(int32_t const value)
{
    m_EstimatedDuration = value;
    m_EstimatedDurationIsSet = true;
}
bool FreeStyleBuild::estimatedDurationIsSet() const
{
    return m_EstimatedDurationIsSet;
}
void FreeStyleBuild::unsetEstimatedDuration()
{
    m_EstimatedDurationIsSet = false;
}
std::string FreeStyleBuild::getExecutor() const
{
    return m_Executor;
}
void FreeStyleBuild::setExecutor(std::string const& value)
{
    m_Executor = value;
    m_ExecutorIsSet = true;
}
bool FreeStyleBuild::executorIsSet() const
{
    return m_ExecutorIsSet;
}
void FreeStyleBuild::unsetExecutor()
{
    m_ExecutorIsSet = false;
}
std::string FreeStyleBuild::getFullDisplayName() const
{
    return m_FullDisplayName;
}
void FreeStyleBuild::setFullDisplayName(std::string const& value)
{
    m_FullDisplayName = value;
    m_FullDisplayNameIsSet = true;
}
bool FreeStyleBuild::fullDisplayNameIsSet() const
{
    return m_FullDisplayNameIsSet;
}
void FreeStyleBuild::unsetFullDisplayName()
{
    m_FullDisplayNameIsSet = false;
}
std::string FreeStyleBuild::getId() const
{
    return m_Id;
}
void FreeStyleBuild::setId(std::string const& value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool FreeStyleBuild::idIsSet() const
{
    return m_IdIsSet;
}
void FreeStyleBuild::unsetId()
{
    m_IdIsSet = false;
}
bool FreeStyleBuild::isKeepLog() const
{
    return m_KeepLog;
}
void FreeStyleBuild::setKeepLog(bool const value)
{
    m_KeepLog = value;
    m_KeepLogIsSet = true;
}
bool FreeStyleBuild::keepLogIsSet() const
{
    return m_KeepLogIsSet;
}
void FreeStyleBuild::unsetKeepLog()
{
    m_KeepLogIsSet = false;
}
int32_t FreeStyleBuild::getQueueId() const
{
    return m_QueueId;
}
void FreeStyleBuild::setQueueId(int32_t const value)
{
    m_QueueId = value;
    m_QueueIdIsSet = true;
}
bool FreeStyleBuild::queueIdIsSet() const
{
    return m_QueueIdIsSet;
}
void FreeStyleBuild::unsetQueueId()
{
    m_QueueIdIsSet = false;
}
std::string FreeStyleBuild::getResult() const
{
    return m_Result;
}
void FreeStyleBuild::setResult(std::string const& value)
{
    m_Result = value;
    m_ResultIsSet = true;
}
bool FreeStyleBuild::resultIsSet() const
{
    return m_ResultIsSet;
}
void FreeStyleBuild::unsetResult()
{
    m_ResultIsSet = false;
}
int32_t FreeStyleBuild::getTimestamp() const
{
    return m_Timestamp;
}
void FreeStyleBuild::setTimestamp(int32_t const value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool FreeStyleBuild::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void FreeStyleBuild::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::string FreeStyleBuild::getBuiltOn() const
{
    return m_BuiltOn;
}
void FreeStyleBuild::setBuiltOn(std::string const& value)
{
    m_BuiltOn = value;
    m_BuiltOnIsSet = true;
}
bool FreeStyleBuild::builtOnIsSet() const
{
    return m_BuiltOnIsSet;
}
void FreeStyleBuild::unsetBuiltOn()
{
    m_BuiltOnIsSet = false;
}
org::openapitools::server::model::EmptyChangeLogSet FreeStyleBuild::getChangeSet() const
{
    return m_ChangeSet;
}
void FreeStyleBuild::setChangeSet(org::openapitools::server::model::EmptyChangeLogSet const& value)
{
    m_ChangeSet = value;
    m_ChangeSetIsSet = true;
}
bool FreeStyleBuild::changeSetIsSet() const
{
    return m_ChangeSetIsSet;
}
void FreeStyleBuild::unsetChangeSet()
{
    m_ChangeSetIsSet = false;
}


} // namespace org::openapitools::server::model

