/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "SwapSpaceMonitorMemoryUsage2.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

SwapSpaceMonitorMemoryUsage2::SwapSpaceMonitorMemoryUsage2()
{
    m__class = "";
    m__classIsSet = false;
    m_AvailablePhysicalMemory = 0;
    m_AvailablePhysicalMemoryIsSet = false;
    m_AvailableSwapSpace = 0;
    m_AvailableSwapSpaceIsSet = false;
    m_TotalPhysicalMemory = 0;
    m_TotalPhysicalMemoryIsSet = false;
    m_TotalSwapSpace = 0;
    m_TotalSwapSpaceIsSet = false;
    
}

void SwapSpaceMonitorMemoryUsage2::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool SwapSpaceMonitorMemoryUsage2::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool SwapSpaceMonitorMemoryUsage2::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "SwapSpaceMonitorMemoryUsage2" : pathPrefix;

                        
    return success;
}

bool SwapSpaceMonitorMemoryUsage2::operator==(const SwapSpaceMonitorMemoryUsage2& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!availablePhysicalMemoryIsSet() && !rhs.availablePhysicalMemoryIsSet()) || (availablePhysicalMemoryIsSet() && rhs.availablePhysicalMemoryIsSet() && getAvailablePhysicalMemory() == rhs.getAvailablePhysicalMemory())) &&
    
    
    ((!availableSwapSpaceIsSet() && !rhs.availableSwapSpaceIsSet()) || (availableSwapSpaceIsSet() && rhs.availableSwapSpaceIsSet() && getAvailableSwapSpace() == rhs.getAvailableSwapSpace())) &&
    
    
    ((!totalPhysicalMemoryIsSet() && !rhs.totalPhysicalMemoryIsSet()) || (totalPhysicalMemoryIsSet() && rhs.totalPhysicalMemoryIsSet() && getTotalPhysicalMemory() == rhs.getTotalPhysicalMemory())) &&
    
    
    ((!totalSwapSpaceIsSet() && !rhs.totalSwapSpaceIsSet()) || (totalSwapSpaceIsSet() && rhs.totalSwapSpaceIsSet() && getTotalSwapSpace() == rhs.getTotalSwapSpace()))
    
    ;
}

bool SwapSpaceMonitorMemoryUsage2::operator!=(const SwapSpaceMonitorMemoryUsage2& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SwapSpaceMonitorMemoryUsage2& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.availablePhysicalMemoryIsSet())
        j["availablePhysicalMemory"] = o.m_AvailablePhysicalMemory;
    if(o.availableSwapSpaceIsSet())
        j["availableSwapSpace"] = o.m_AvailableSwapSpace;
    if(o.totalPhysicalMemoryIsSet())
        j["totalPhysicalMemory"] = o.m_TotalPhysicalMemory;
    if(o.totalSwapSpaceIsSet())
        j["totalSwapSpace"] = o.m_TotalSwapSpace;
    
}

void from_json(const nlohmann::json& j, SwapSpaceMonitorMemoryUsage2& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("availablePhysicalMemory") != j.end())
    {
        j.at("availablePhysicalMemory").get_to(o.m_AvailablePhysicalMemory);
        o.m_AvailablePhysicalMemoryIsSet = true;
    } 
    if(j.find("availableSwapSpace") != j.end())
    {
        j.at("availableSwapSpace").get_to(o.m_AvailableSwapSpace);
        o.m_AvailableSwapSpaceIsSet = true;
    } 
    if(j.find("totalPhysicalMemory") != j.end())
    {
        j.at("totalPhysicalMemory").get_to(o.m_TotalPhysicalMemory);
        o.m_TotalPhysicalMemoryIsSet = true;
    } 
    if(j.find("totalSwapSpace") != j.end())
    {
        j.at("totalSwapSpace").get_to(o.m_TotalSwapSpace);
        o.m_TotalSwapSpaceIsSet = true;
    } 
    
}

std::string SwapSpaceMonitorMemoryUsage2::getClass() const
{
    return m__class;
}
void SwapSpaceMonitorMemoryUsage2::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::r_classIsSet() const
{
    return m__classIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unset_class()
{
    m__classIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getAvailablePhysicalMemory() const
{
    return m_AvailablePhysicalMemory;
}
void SwapSpaceMonitorMemoryUsage2::setAvailablePhysicalMemory(int32_t const value)
{
    m_AvailablePhysicalMemory = value;
    m_AvailablePhysicalMemoryIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::availablePhysicalMemoryIsSet() const
{
    return m_AvailablePhysicalMemoryIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unsetAvailablePhysicalMemory()
{
    m_AvailablePhysicalMemoryIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getAvailableSwapSpace() const
{
    return m_AvailableSwapSpace;
}
void SwapSpaceMonitorMemoryUsage2::setAvailableSwapSpace(int32_t const value)
{
    m_AvailableSwapSpace = value;
    m_AvailableSwapSpaceIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::availableSwapSpaceIsSet() const
{
    return m_AvailableSwapSpaceIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unsetAvailableSwapSpace()
{
    m_AvailableSwapSpaceIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getTotalPhysicalMemory() const
{
    return m_TotalPhysicalMemory;
}
void SwapSpaceMonitorMemoryUsage2::setTotalPhysicalMemory(int32_t const value)
{
    m_TotalPhysicalMemory = value;
    m_TotalPhysicalMemoryIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::totalPhysicalMemoryIsSet() const
{
    return m_TotalPhysicalMemoryIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unsetTotalPhysicalMemory()
{
    m_TotalPhysicalMemoryIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getTotalSwapSpace() const
{
    return m_TotalSwapSpace;
}
void SwapSpaceMonitorMemoryUsage2::setTotalSwapSpace(int32_t const value)
{
    m_TotalSwapSpace = value;
    m_TotalSwapSpaceIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::totalSwapSpaceIsSet() const
{
    return m_TotalSwapSpaceIsSet;
}
void SwapSpaceMonitorMemoryUsage2::unsetTotalSwapSpace()
{
    m_TotalSwapSpaceIsSet = false;
}


} // namespace org::openapitools::server::model

