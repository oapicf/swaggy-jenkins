/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GithubRepository.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GithubRepository::GithubRepository()
{
    m__class = "";
    m__classIsSet = false;
    m__linksIsSet = false;
    m_DefaultBranch = "";
    m_DefaultBranchIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_PermissionsIsSet = false;
    m_r_private = false;
    m_r_privateIsSet = false;
    m_FullName = "";
    m_FullNameIsSet = false;
    
}

void GithubRepository::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GithubRepository::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GithubRepository::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GithubRepository" : pathPrefix;

                                    
    return success;
}

bool GithubRepository::operator==(const GithubRepository& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!linksIsSet() && !rhs.linksIsSet()) || (linksIsSet() && rhs.linksIsSet() && getLinks() == rhs.getLinks())) &&
    
    
    ((!defaultBranchIsSet() && !rhs.defaultBranchIsSet()) || (defaultBranchIsSet() && rhs.defaultBranchIsSet() && getDefaultBranch() == rhs.getDefaultBranch())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!permissionsIsSet() && !rhs.permissionsIsSet()) || (permissionsIsSet() && rhs.permissionsIsSet() && getPermissions() == rhs.getPermissions())) &&
    
    
    ((!rPrivateIsSet() && !rhs.rPrivateIsSet()) || (rPrivateIsSet() && rhs.rPrivateIsSet() && isRPrivate() == rhs.isRPrivate())) &&
    
    
    ((!fullNameIsSet() && !rhs.fullNameIsSet()) || (fullNameIsSet() && rhs.fullNameIsSet() && getFullName() == rhs.getFullName()))
    
    ;
}

bool GithubRepository::operator!=(const GithubRepository& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GithubRepository& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
    if(o.defaultBranchIsSet())
        j["defaultBranch"] = o.m_DefaultBranch;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.permissionsIsSet())
        j["permissions"] = o.m_Permissions;
    if(o.rPrivateIsSet())
        j["private"] = o.m_r_private;
    if(o.fullNameIsSet())
        j["fullName"] = o.m_FullName;
    
}

void from_json(const nlohmann::json& j, GithubRepository& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
    if(j.find("defaultBranch") != j.end())
    {
        j.at("defaultBranch").get_to(o.m_DefaultBranch);
        o.m_DefaultBranchIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("permissions") != j.end())
    {
        j.at("permissions").get_to(o.m_Permissions);
        o.m_PermissionsIsSet = true;
    } 
    if(j.find("private") != j.end())
    {
        j.at("private").get_to(o.m_r_private);
        o.m_r_privateIsSet = true;
    } 
    if(j.find("fullName") != j.end())
    {
        j.at("fullName").get_to(o.m_FullName);
        o.m_FullNameIsSet = true;
    } 
    
}

std::string GithubRepository::getClass() const
{
    return m__class;
}
void GithubRepository::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubRepository::r_classIsSet() const
{
    return m__classIsSet;
}
void GithubRepository::unset_class()
{
    m__classIsSet = false;
}
org::openapitools::server::model::GithubRepositorylinks GithubRepository::getLinks() const
{
    return m__links;
}
void GithubRepository::setLinks(org::openapitools::server::model::GithubRepositorylinks const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool GithubRepository::linksIsSet() const
{
    return m__linksIsSet;
}
void GithubRepository::unset_links()
{
    m__linksIsSet = false;
}
std::string GithubRepository::getDefaultBranch() const
{
    return m_DefaultBranch;
}
void GithubRepository::setDefaultBranch(std::string const& value)
{
    m_DefaultBranch = value;
    m_DefaultBranchIsSet = true;
}
bool GithubRepository::defaultBranchIsSet() const
{
    return m_DefaultBranchIsSet;
}
void GithubRepository::unsetDefaultBranch()
{
    m_DefaultBranchIsSet = false;
}
std::string GithubRepository::getDescription() const
{
    return m_Description;
}
void GithubRepository::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool GithubRepository::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void GithubRepository::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string GithubRepository::getName() const
{
    return m_Name;
}
void GithubRepository::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool GithubRepository::nameIsSet() const
{
    return m_NameIsSet;
}
void GithubRepository::unsetName()
{
    m_NameIsSet = false;
}
org::openapitools::server::model::GithubRepositorypermissions GithubRepository::getPermissions() const
{
    return m_Permissions;
}
void GithubRepository::setPermissions(org::openapitools::server::model::GithubRepositorypermissions const& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool GithubRepository::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}
void GithubRepository::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
bool GithubRepository::isRPrivate() const
{
    return m_r_private;
}
void GithubRepository::setRPrivate(bool const value)
{
    m_r_private = value;
    m_r_privateIsSet = true;
}
bool GithubRepository::rPrivateIsSet() const
{
    return m_r_privateIsSet;
}
void GithubRepository::unsetr_private()
{
    m_r_privateIsSet = false;
}
std::string GithubRepository::getFullName() const
{
    return m_FullName;
}
void GithubRepository::setFullName(std::string const& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool GithubRepository::fullNameIsSet() const
{
    return m_FullNameIsSet;
}
void GithubRepository::unsetFullName()
{
    m_FullNameIsSet = false;
}


} // namespace org::openapitools::server::model

