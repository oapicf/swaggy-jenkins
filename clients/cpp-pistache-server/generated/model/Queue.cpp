/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Queue.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Queue::Queue()
{
    m__class = "";
    m__classIsSet = false;
    m_ItemsIsSet = false;
    
}

void Queue::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Queue::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Queue::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Queue" : pathPrefix;

             
    if (itemsIsSet())
    {
        const std::vector<org::openapitools::server::model::QueueBlockedItem>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::QueueBlockedItem& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool Queue::operator==(const Queue& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!itemsIsSet() && !rhs.itemsIsSet()) || (itemsIsSet() && rhs.itemsIsSet() && getItems() == rhs.getItems()))
    
    ;
}

bool Queue::operator!=(const Queue& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Queue& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.itemsIsSet() || !o.m_Items.empty())
        j["items"] = o.m_Items;
    
}

void from_json(const nlohmann::json& j, Queue& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("items") != j.end())
    {
        j.at("items").get_to(o.m_Items);
        o.m_ItemsIsSet = true;
    } 
    
}

std::string Queue::getClass() const
{
    return m__class;
}
void Queue::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool Queue::r_classIsSet() const
{
    return m__classIsSet;
}
void Queue::unset_class()
{
    m__classIsSet = false;
}
std::vector<org::openapitools::server::model::QueueBlockedItem> Queue::getItems() const
{
    return m_Items;
}
void Queue::setItems(std::vector<org::openapitools::server::model::QueueBlockedItem> const& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}
bool Queue::itemsIsSet() const
{
    return m_ItemsIsSet;
}
void Queue::unsetItems()
{
    m_ItemsIsSet = false;
}


} // namespace org::openapitools::server::model

