/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "FreeStyleProject.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

FreeStyleProject::FreeStyleProject()
{
    m__class = "";
    m__classIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    m_Color = "";
    m_ColorIsSet = false;
    m_ActionsIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_DisplayName = "";
    m_DisplayNameIsSet = false;
    m_DisplayNameOrNull = "";
    m_DisplayNameOrNullIsSet = false;
    m_FullDisplayName = "";
    m_FullDisplayNameIsSet = false;
    m_FullName = "";
    m_FullNameIsSet = false;
    m_Buildable = false;
    m_BuildableIsSet = false;
    m_BuildsIsSet = false;
    m_FirstBuildIsSet = false;
    m_HealthReportIsSet = false;
    m_InQueue = false;
    m_InQueueIsSet = false;
    m_KeepDependencies = false;
    m_KeepDependenciesIsSet = false;
    m_LastBuildIsSet = false;
    m_LastCompletedBuildIsSet = false;
    m_LastFailedBuild = "";
    m_LastFailedBuildIsSet = false;
    m_LastStableBuildIsSet = false;
    m_LastSuccessfulBuildIsSet = false;
    m_LastUnstableBuild = "";
    m_LastUnstableBuildIsSet = false;
    m_LastUnsuccessfulBuild = "";
    m_LastUnsuccessfulBuildIsSet = false;
    m_NextBuildNumber = 0;
    m_NextBuildNumberIsSet = false;
    m_QueueItem = "";
    m_QueueItemIsSet = false;
    m_ConcurrentBuild = false;
    m_ConcurrentBuildIsSet = false;
    m_ScmIsSet = false;
    
}

void FreeStyleProject::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool FreeStyleProject::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool FreeStyleProject::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "FreeStyleProject" : pathPrefix;

                         
    if (actionsIsSet())
    {
        const std::vector<org::openapitools::server::model::FreeStyleProjectactions>& value = m_Actions;
        const std::string currentValuePath = _pathPrefix + ".actions";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FreeStyleProjectactions& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".actions") && success;
 
                i++;
            }
        }

    }
                                 
    if (buildsIsSet())
    {
        const std::vector<org::openapitools::server::model::FreeStyleBuild>& value = m_Builds;
        const std::string currentValuePath = _pathPrefix + ".builds";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FreeStyleBuild& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".builds") && success;
 
                i++;
            }
        }

    }
             
    if (healthReportIsSet())
    {
        const std::vector<org::openapitools::server::model::FreeStyleProjecthealthReport>& value = m_HealthReport;
        const std::string currentValuePath = _pathPrefix + ".healthReport";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FreeStyleProjecthealthReport& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".healthReport") && success;
 
                i++;
            }
        }

    }
                                                        
    return success;
}

bool FreeStyleProject::operator==(const FreeStyleProject& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl())) &&
    
    
    ((!colorIsSet() && !rhs.colorIsSet()) || (colorIsSet() && rhs.colorIsSet() && getColor() == rhs.getColor())) &&
    
    
    ((!actionsIsSet() && !rhs.actionsIsSet()) || (actionsIsSet() && rhs.actionsIsSet() && getActions() == rhs.getActions())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!displayNameIsSet() && !rhs.displayNameIsSet()) || (displayNameIsSet() && rhs.displayNameIsSet() && getDisplayName() == rhs.getDisplayName())) &&
    
    
    ((!displayNameOrNullIsSet() && !rhs.displayNameOrNullIsSet()) || (displayNameOrNullIsSet() && rhs.displayNameOrNullIsSet() && getDisplayNameOrNull() == rhs.getDisplayNameOrNull())) &&
    
    
    ((!fullDisplayNameIsSet() && !rhs.fullDisplayNameIsSet()) || (fullDisplayNameIsSet() && rhs.fullDisplayNameIsSet() && getFullDisplayName() == rhs.getFullDisplayName())) &&
    
    
    ((!fullNameIsSet() && !rhs.fullNameIsSet()) || (fullNameIsSet() && rhs.fullNameIsSet() && getFullName() == rhs.getFullName())) &&
    
    
    ((!buildableIsSet() && !rhs.buildableIsSet()) || (buildableIsSet() && rhs.buildableIsSet() && isBuildable() == rhs.isBuildable())) &&
    
    
    ((!buildsIsSet() && !rhs.buildsIsSet()) || (buildsIsSet() && rhs.buildsIsSet() && getBuilds() == rhs.getBuilds())) &&
    
    
    ((!firstBuildIsSet() && !rhs.firstBuildIsSet()) || (firstBuildIsSet() && rhs.firstBuildIsSet() && getFirstBuild() == rhs.getFirstBuild())) &&
    
    
    ((!healthReportIsSet() && !rhs.healthReportIsSet()) || (healthReportIsSet() && rhs.healthReportIsSet() && getHealthReport() == rhs.getHealthReport())) &&
    
    
    ((!inQueueIsSet() && !rhs.inQueueIsSet()) || (inQueueIsSet() && rhs.inQueueIsSet() && isInQueue() == rhs.isInQueue())) &&
    
    
    ((!keepDependenciesIsSet() && !rhs.keepDependenciesIsSet()) || (keepDependenciesIsSet() && rhs.keepDependenciesIsSet() && isKeepDependencies() == rhs.isKeepDependencies())) &&
    
    
    ((!lastBuildIsSet() && !rhs.lastBuildIsSet()) || (lastBuildIsSet() && rhs.lastBuildIsSet() && getLastBuild() == rhs.getLastBuild())) &&
    
    
    ((!lastCompletedBuildIsSet() && !rhs.lastCompletedBuildIsSet()) || (lastCompletedBuildIsSet() && rhs.lastCompletedBuildIsSet() && getLastCompletedBuild() == rhs.getLastCompletedBuild())) &&
    
    
    ((!lastFailedBuildIsSet() && !rhs.lastFailedBuildIsSet()) || (lastFailedBuildIsSet() && rhs.lastFailedBuildIsSet() && getLastFailedBuild() == rhs.getLastFailedBuild())) &&
    
    
    ((!lastStableBuildIsSet() && !rhs.lastStableBuildIsSet()) || (lastStableBuildIsSet() && rhs.lastStableBuildIsSet() && getLastStableBuild() == rhs.getLastStableBuild())) &&
    
    
    ((!lastSuccessfulBuildIsSet() && !rhs.lastSuccessfulBuildIsSet()) || (lastSuccessfulBuildIsSet() && rhs.lastSuccessfulBuildIsSet() && getLastSuccessfulBuild() == rhs.getLastSuccessfulBuild())) &&
    
    
    ((!lastUnstableBuildIsSet() && !rhs.lastUnstableBuildIsSet()) || (lastUnstableBuildIsSet() && rhs.lastUnstableBuildIsSet() && getLastUnstableBuild() == rhs.getLastUnstableBuild())) &&
    
    
    ((!lastUnsuccessfulBuildIsSet() && !rhs.lastUnsuccessfulBuildIsSet()) || (lastUnsuccessfulBuildIsSet() && rhs.lastUnsuccessfulBuildIsSet() && getLastUnsuccessfulBuild() == rhs.getLastUnsuccessfulBuild())) &&
    
    
    ((!nextBuildNumberIsSet() && !rhs.nextBuildNumberIsSet()) || (nextBuildNumberIsSet() && rhs.nextBuildNumberIsSet() && getNextBuildNumber() == rhs.getNextBuildNumber())) &&
    
    
    ((!queueItemIsSet() && !rhs.queueItemIsSet()) || (queueItemIsSet() && rhs.queueItemIsSet() && getQueueItem() == rhs.getQueueItem())) &&
    
    
    ((!concurrentBuildIsSet() && !rhs.concurrentBuildIsSet()) || (concurrentBuildIsSet() && rhs.concurrentBuildIsSet() && isConcurrentBuild() == rhs.isConcurrentBuild())) &&
    
    
    ((!scmIsSet() && !rhs.scmIsSet()) || (scmIsSet() && rhs.scmIsSet() && getScm() == rhs.getScm()))
    
    ;
}

bool FreeStyleProject::operator!=(const FreeStyleProject& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const FreeStyleProject& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    if(o.colorIsSet())
        j["color"] = o.m_Color;
    if(o.actionsIsSet() || !o.m_Actions.empty())
        j["actions"] = o.m_Actions;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.displayNameIsSet())
        j["displayName"] = o.m_DisplayName;
    if(o.displayNameOrNullIsSet())
        j["displayNameOrNull"] = o.m_DisplayNameOrNull;
    if(o.fullDisplayNameIsSet())
        j["fullDisplayName"] = o.m_FullDisplayName;
    if(o.fullNameIsSet())
        j["fullName"] = o.m_FullName;
    if(o.buildableIsSet())
        j["buildable"] = o.m_Buildable;
    if(o.buildsIsSet() || !o.m_Builds.empty())
        j["builds"] = o.m_Builds;
    if(o.firstBuildIsSet())
        j["firstBuild"] = o.m_FirstBuild;
    if(o.healthReportIsSet() || !o.m_HealthReport.empty())
        j["healthReport"] = o.m_HealthReport;
    if(o.inQueueIsSet())
        j["inQueue"] = o.m_InQueue;
    if(o.keepDependenciesIsSet())
        j["keepDependencies"] = o.m_KeepDependencies;
    if(o.lastBuildIsSet())
        j["lastBuild"] = o.m_LastBuild;
    if(o.lastCompletedBuildIsSet())
        j["lastCompletedBuild"] = o.m_LastCompletedBuild;
    if(o.lastFailedBuildIsSet())
        j["lastFailedBuild"] = o.m_LastFailedBuild;
    if(o.lastStableBuildIsSet())
        j["lastStableBuild"] = o.m_LastStableBuild;
    if(o.lastSuccessfulBuildIsSet())
        j["lastSuccessfulBuild"] = o.m_LastSuccessfulBuild;
    if(o.lastUnstableBuildIsSet())
        j["lastUnstableBuild"] = o.m_LastUnstableBuild;
    if(o.lastUnsuccessfulBuildIsSet())
        j["lastUnsuccessfulBuild"] = o.m_LastUnsuccessfulBuild;
    if(o.nextBuildNumberIsSet())
        j["nextBuildNumber"] = o.m_NextBuildNumber;
    if(o.queueItemIsSet())
        j["queueItem"] = o.m_QueueItem;
    if(o.concurrentBuildIsSet())
        j["concurrentBuild"] = o.m_ConcurrentBuild;
    if(o.scmIsSet())
        j["scm"] = o.m_Scm;
    
}

void from_json(const nlohmann::json& j, FreeStyleProject& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    if(j.find("color") != j.end())
    {
        j.at("color").get_to(o.m_Color);
        o.m_ColorIsSet = true;
    } 
    if(j.find("actions") != j.end())
    {
        j.at("actions").get_to(o.m_Actions);
        o.m_ActionsIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("displayName") != j.end())
    {
        j.at("displayName").get_to(o.m_DisplayName);
        o.m_DisplayNameIsSet = true;
    } 
    if(j.find("displayNameOrNull") != j.end())
    {
        j.at("displayNameOrNull").get_to(o.m_DisplayNameOrNull);
        o.m_DisplayNameOrNullIsSet = true;
    } 
    if(j.find("fullDisplayName") != j.end())
    {
        j.at("fullDisplayName").get_to(o.m_FullDisplayName);
        o.m_FullDisplayNameIsSet = true;
    } 
    if(j.find("fullName") != j.end())
    {
        j.at("fullName").get_to(o.m_FullName);
        o.m_FullNameIsSet = true;
    } 
    if(j.find("buildable") != j.end())
    {
        j.at("buildable").get_to(o.m_Buildable);
        o.m_BuildableIsSet = true;
    } 
    if(j.find("builds") != j.end())
    {
        j.at("builds").get_to(o.m_Builds);
        o.m_BuildsIsSet = true;
    } 
    if(j.find("firstBuild") != j.end())
    {
        j.at("firstBuild").get_to(o.m_FirstBuild);
        o.m_FirstBuildIsSet = true;
    } 
    if(j.find("healthReport") != j.end())
    {
        j.at("healthReport").get_to(o.m_HealthReport);
        o.m_HealthReportIsSet = true;
    } 
    if(j.find("inQueue") != j.end())
    {
        j.at("inQueue").get_to(o.m_InQueue);
        o.m_InQueueIsSet = true;
    } 
    if(j.find("keepDependencies") != j.end())
    {
        j.at("keepDependencies").get_to(o.m_KeepDependencies);
        o.m_KeepDependenciesIsSet = true;
    } 
    if(j.find("lastBuild") != j.end())
    {
        j.at("lastBuild").get_to(o.m_LastBuild);
        o.m_LastBuildIsSet = true;
    } 
    if(j.find("lastCompletedBuild") != j.end())
    {
        j.at("lastCompletedBuild").get_to(o.m_LastCompletedBuild);
        o.m_LastCompletedBuildIsSet = true;
    } 
    if(j.find("lastFailedBuild") != j.end())
    {
        j.at("lastFailedBuild").get_to(o.m_LastFailedBuild);
        o.m_LastFailedBuildIsSet = true;
    } 
    if(j.find("lastStableBuild") != j.end())
    {
        j.at("lastStableBuild").get_to(o.m_LastStableBuild);
        o.m_LastStableBuildIsSet = true;
    } 
    if(j.find("lastSuccessfulBuild") != j.end())
    {
        j.at("lastSuccessfulBuild").get_to(o.m_LastSuccessfulBuild);
        o.m_LastSuccessfulBuildIsSet = true;
    } 
    if(j.find("lastUnstableBuild") != j.end())
    {
        j.at("lastUnstableBuild").get_to(o.m_LastUnstableBuild);
        o.m_LastUnstableBuildIsSet = true;
    } 
    if(j.find("lastUnsuccessfulBuild") != j.end())
    {
        j.at("lastUnsuccessfulBuild").get_to(o.m_LastUnsuccessfulBuild);
        o.m_LastUnsuccessfulBuildIsSet = true;
    } 
    if(j.find("nextBuildNumber") != j.end())
    {
        j.at("nextBuildNumber").get_to(o.m_NextBuildNumber);
        o.m_NextBuildNumberIsSet = true;
    } 
    if(j.find("queueItem") != j.end())
    {
        j.at("queueItem").get_to(o.m_QueueItem);
        o.m_QueueItemIsSet = true;
    } 
    if(j.find("concurrentBuild") != j.end())
    {
        j.at("concurrentBuild").get_to(o.m_ConcurrentBuild);
        o.m_ConcurrentBuildIsSet = true;
    } 
    if(j.find("scm") != j.end())
    {
        j.at("scm").get_to(o.m_Scm);
        o.m_ScmIsSet = true;
    } 
    
}

std::string FreeStyleProject::getClass() const
{
    return m__class;
}
void FreeStyleProject::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool FreeStyleProject::r_classIsSet() const
{
    return m__classIsSet;
}
void FreeStyleProject::unset_class()
{
    m__classIsSet = false;
}
std::string FreeStyleProject::getName() const
{
    return m_Name;
}
void FreeStyleProject::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool FreeStyleProject::nameIsSet() const
{
    return m_NameIsSet;
}
void FreeStyleProject::unsetName()
{
    m_NameIsSet = false;
}
std::string FreeStyleProject::getUrl() const
{
    return m_Url;
}
void FreeStyleProject::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool FreeStyleProject::urlIsSet() const
{
    return m_UrlIsSet;
}
void FreeStyleProject::unsetUrl()
{
    m_UrlIsSet = false;
}
std::string FreeStyleProject::getColor() const
{
    return m_Color;
}
void FreeStyleProject::setColor(std::string const& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}
bool FreeStyleProject::colorIsSet() const
{
    return m_ColorIsSet;
}
void FreeStyleProject::unsetColor()
{
    m_ColorIsSet = false;
}
std::vector<org::openapitools::server::model::FreeStyleProjectactions> FreeStyleProject::getActions() const
{
    return m_Actions;
}
void FreeStyleProject::setActions(std::vector<org::openapitools::server::model::FreeStyleProjectactions> const& value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}
bool FreeStyleProject::actionsIsSet() const
{
    return m_ActionsIsSet;
}
void FreeStyleProject::unsetActions()
{
    m_ActionsIsSet = false;
}
std::string FreeStyleProject::getDescription() const
{
    return m_Description;
}
void FreeStyleProject::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool FreeStyleProject::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void FreeStyleProject::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::string FreeStyleProject::getDisplayName() const
{
    return m_DisplayName;
}
void FreeStyleProject::setDisplayName(std::string const& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool FreeStyleProject::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}
void FreeStyleProject::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
std::string FreeStyleProject::getDisplayNameOrNull() const
{
    return m_DisplayNameOrNull;
}
void FreeStyleProject::setDisplayNameOrNull(std::string const& value)
{
    m_DisplayNameOrNull = value;
    m_DisplayNameOrNullIsSet = true;
}
bool FreeStyleProject::displayNameOrNullIsSet() const
{
    return m_DisplayNameOrNullIsSet;
}
void FreeStyleProject::unsetDisplayNameOrNull()
{
    m_DisplayNameOrNullIsSet = false;
}
std::string FreeStyleProject::getFullDisplayName() const
{
    return m_FullDisplayName;
}
void FreeStyleProject::setFullDisplayName(std::string const& value)
{
    m_FullDisplayName = value;
    m_FullDisplayNameIsSet = true;
}
bool FreeStyleProject::fullDisplayNameIsSet() const
{
    return m_FullDisplayNameIsSet;
}
void FreeStyleProject::unsetFullDisplayName()
{
    m_FullDisplayNameIsSet = false;
}
std::string FreeStyleProject::getFullName() const
{
    return m_FullName;
}
void FreeStyleProject::setFullName(std::string const& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool FreeStyleProject::fullNameIsSet() const
{
    return m_FullNameIsSet;
}
void FreeStyleProject::unsetFullName()
{
    m_FullNameIsSet = false;
}
bool FreeStyleProject::isBuildable() const
{
    return m_Buildable;
}
void FreeStyleProject::setBuildable(bool const value)
{
    m_Buildable = value;
    m_BuildableIsSet = true;
}
bool FreeStyleProject::buildableIsSet() const
{
    return m_BuildableIsSet;
}
void FreeStyleProject::unsetBuildable()
{
    m_BuildableIsSet = false;
}
std::vector<org::openapitools::server::model::FreeStyleBuild> FreeStyleProject::getBuilds() const
{
    return m_Builds;
}
void FreeStyleProject::setBuilds(std::vector<org::openapitools::server::model::FreeStyleBuild> const& value)
{
    m_Builds = value;
    m_BuildsIsSet = true;
}
bool FreeStyleProject::buildsIsSet() const
{
    return m_BuildsIsSet;
}
void FreeStyleProject::unsetBuilds()
{
    m_BuildsIsSet = false;
}
org::openapitools::server::model::FreeStyleBuild FreeStyleProject::getFirstBuild() const
{
    return m_FirstBuild;
}
void FreeStyleProject::setFirstBuild(org::openapitools::server::model::FreeStyleBuild const& value)
{
    m_FirstBuild = value;
    m_FirstBuildIsSet = true;
}
bool FreeStyleProject::firstBuildIsSet() const
{
    return m_FirstBuildIsSet;
}
void FreeStyleProject::unsetFirstBuild()
{
    m_FirstBuildIsSet = false;
}
std::vector<org::openapitools::server::model::FreeStyleProjecthealthReport> FreeStyleProject::getHealthReport() const
{
    return m_HealthReport;
}
void FreeStyleProject::setHealthReport(std::vector<org::openapitools::server::model::FreeStyleProjecthealthReport> const& value)
{
    m_HealthReport = value;
    m_HealthReportIsSet = true;
}
bool FreeStyleProject::healthReportIsSet() const
{
    return m_HealthReportIsSet;
}
void FreeStyleProject::unsetHealthReport()
{
    m_HealthReportIsSet = false;
}
bool FreeStyleProject::isInQueue() const
{
    return m_InQueue;
}
void FreeStyleProject::setInQueue(bool const value)
{
    m_InQueue = value;
    m_InQueueIsSet = true;
}
bool FreeStyleProject::inQueueIsSet() const
{
    return m_InQueueIsSet;
}
void FreeStyleProject::unsetInQueue()
{
    m_InQueueIsSet = false;
}
bool FreeStyleProject::isKeepDependencies() const
{
    return m_KeepDependencies;
}
void FreeStyleProject::setKeepDependencies(bool const value)
{
    m_KeepDependencies = value;
    m_KeepDependenciesIsSet = true;
}
bool FreeStyleProject::keepDependenciesIsSet() const
{
    return m_KeepDependenciesIsSet;
}
void FreeStyleProject::unsetKeepDependencies()
{
    m_KeepDependenciesIsSet = false;
}
org::openapitools::server::model::FreeStyleBuild FreeStyleProject::getLastBuild() const
{
    return m_LastBuild;
}
void FreeStyleProject::setLastBuild(org::openapitools::server::model::FreeStyleBuild const& value)
{
    m_LastBuild = value;
    m_LastBuildIsSet = true;
}
bool FreeStyleProject::lastBuildIsSet() const
{
    return m_LastBuildIsSet;
}
void FreeStyleProject::unsetLastBuild()
{
    m_LastBuildIsSet = false;
}
org::openapitools::server::model::FreeStyleBuild FreeStyleProject::getLastCompletedBuild() const
{
    return m_LastCompletedBuild;
}
void FreeStyleProject::setLastCompletedBuild(org::openapitools::server::model::FreeStyleBuild const& value)
{
    m_LastCompletedBuild = value;
    m_LastCompletedBuildIsSet = true;
}
bool FreeStyleProject::lastCompletedBuildIsSet() const
{
    return m_LastCompletedBuildIsSet;
}
void FreeStyleProject::unsetLastCompletedBuild()
{
    m_LastCompletedBuildIsSet = false;
}
std::string FreeStyleProject::getLastFailedBuild() const
{
    return m_LastFailedBuild;
}
void FreeStyleProject::setLastFailedBuild(std::string const& value)
{
    m_LastFailedBuild = value;
    m_LastFailedBuildIsSet = true;
}
bool FreeStyleProject::lastFailedBuildIsSet() const
{
    return m_LastFailedBuildIsSet;
}
void FreeStyleProject::unsetLastFailedBuild()
{
    m_LastFailedBuildIsSet = false;
}
org::openapitools::server::model::FreeStyleBuild FreeStyleProject::getLastStableBuild() const
{
    return m_LastStableBuild;
}
void FreeStyleProject::setLastStableBuild(org::openapitools::server::model::FreeStyleBuild const& value)
{
    m_LastStableBuild = value;
    m_LastStableBuildIsSet = true;
}
bool FreeStyleProject::lastStableBuildIsSet() const
{
    return m_LastStableBuildIsSet;
}
void FreeStyleProject::unsetLastStableBuild()
{
    m_LastStableBuildIsSet = false;
}
org::openapitools::server::model::FreeStyleBuild FreeStyleProject::getLastSuccessfulBuild() const
{
    return m_LastSuccessfulBuild;
}
void FreeStyleProject::setLastSuccessfulBuild(org::openapitools::server::model::FreeStyleBuild const& value)
{
    m_LastSuccessfulBuild = value;
    m_LastSuccessfulBuildIsSet = true;
}
bool FreeStyleProject::lastSuccessfulBuildIsSet() const
{
    return m_LastSuccessfulBuildIsSet;
}
void FreeStyleProject::unsetLastSuccessfulBuild()
{
    m_LastSuccessfulBuildIsSet = false;
}
std::string FreeStyleProject::getLastUnstableBuild() const
{
    return m_LastUnstableBuild;
}
void FreeStyleProject::setLastUnstableBuild(std::string const& value)
{
    m_LastUnstableBuild = value;
    m_LastUnstableBuildIsSet = true;
}
bool FreeStyleProject::lastUnstableBuildIsSet() const
{
    return m_LastUnstableBuildIsSet;
}
void FreeStyleProject::unsetLastUnstableBuild()
{
    m_LastUnstableBuildIsSet = false;
}
std::string FreeStyleProject::getLastUnsuccessfulBuild() const
{
    return m_LastUnsuccessfulBuild;
}
void FreeStyleProject::setLastUnsuccessfulBuild(std::string const& value)
{
    m_LastUnsuccessfulBuild = value;
    m_LastUnsuccessfulBuildIsSet = true;
}
bool FreeStyleProject::lastUnsuccessfulBuildIsSet() const
{
    return m_LastUnsuccessfulBuildIsSet;
}
void FreeStyleProject::unsetLastUnsuccessfulBuild()
{
    m_LastUnsuccessfulBuildIsSet = false;
}
int32_t FreeStyleProject::getNextBuildNumber() const
{
    return m_NextBuildNumber;
}
void FreeStyleProject::setNextBuildNumber(int32_t const value)
{
    m_NextBuildNumber = value;
    m_NextBuildNumberIsSet = true;
}
bool FreeStyleProject::nextBuildNumberIsSet() const
{
    return m_NextBuildNumberIsSet;
}
void FreeStyleProject::unsetNextBuildNumber()
{
    m_NextBuildNumberIsSet = false;
}
std::string FreeStyleProject::getQueueItem() const
{
    return m_QueueItem;
}
void FreeStyleProject::setQueueItem(std::string const& value)
{
    m_QueueItem = value;
    m_QueueItemIsSet = true;
}
bool FreeStyleProject::queueItemIsSet() const
{
    return m_QueueItemIsSet;
}
void FreeStyleProject::unsetQueueItem()
{
    m_QueueItemIsSet = false;
}
bool FreeStyleProject::isConcurrentBuild() const
{
    return m_ConcurrentBuild;
}
void FreeStyleProject::setConcurrentBuild(bool const value)
{
    m_ConcurrentBuild = value;
    m_ConcurrentBuildIsSet = true;
}
bool FreeStyleProject::concurrentBuildIsSet() const
{
    return m_ConcurrentBuildIsSet;
}
void FreeStyleProject::unsetConcurrentBuild()
{
    m_ConcurrentBuildIsSet = false;
}
org::openapitools::server::model::NullSCM FreeStyleProject::getScm() const
{
    return m_Scm;
}
void FreeStyleProject::setScm(org::openapitools::server::model::NullSCM const& value)
{
    m_Scm = value;
    m_ScmIsSet = true;
}
bool FreeStyleProject::scmIsSet() const
{
    return m_ScmIsSet;
}
void FreeStyleProject::unsetScm()
{
    m_ScmIsSet = false;
}


} // namespace org::openapitools::server::model

