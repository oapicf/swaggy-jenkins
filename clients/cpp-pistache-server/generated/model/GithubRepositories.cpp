/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GithubRepositories.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GithubRepositories::GithubRepositories()
{
    m__class = "";
    m__classIsSet = false;
    m__linksIsSet = false;
    m_ItemsIsSet = false;
    m_LastPage = 0;
    m_LastPageIsSet = false;
    m_NextPage = 0;
    m_NextPageIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
    
}

void GithubRepositories::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GithubRepositories::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GithubRepositories::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GithubRepositories" : pathPrefix;

                 
    if (itemsIsSet())
    {
        const std::vector<org::openapitools::server::model::GithubRepository>& value = m_Items;
        const std::string currentValuePath = _pathPrefix + ".items";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::GithubRepository& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".items") && success;
 
                i++;
            }
        }

    }
                
    return success;
}

bool GithubRepositories::operator==(const GithubRepositories& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!linksIsSet() && !rhs.linksIsSet()) || (linksIsSet() && rhs.linksIsSet() && getLinks() == rhs.getLinks())) &&
    
    
    ((!itemsIsSet() && !rhs.itemsIsSet()) || (itemsIsSet() && rhs.itemsIsSet() && getItems() == rhs.getItems())) &&
    
    
    ((!lastPageIsSet() && !rhs.lastPageIsSet()) || (lastPageIsSet() && rhs.lastPageIsSet() && getLastPage() == rhs.getLastPage())) &&
    
    
    ((!nextPageIsSet() && !rhs.nextPageIsSet()) || (nextPageIsSet() && rhs.nextPageIsSet() && getNextPage() == rhs.getNextPage())) &&
    
    
    ((!pageSizeIsSet() && !rhs.pageSizeIsSet()) || (pageSizeIsSet() && rhs.pageSizeIsSet() && getPageSize() == rhs.getPageSize()))
    
    ;
}

bool GithubRepositories::operator!=(const GithubRepositories& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GithubRepositories& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.linksIsSet())
        j["_links"] = o.m__links;
    if(o.itemsIsSet() || !o.m_Items.empty())
        j["items"] = o.m_Items;
    if(o.lastPageIsSet())
        j["lastPage"] = o.m_LastPage;
    if(o.nextPageIsSet())
        j["nextPage"] = o.m_NextPage;
    if(o.pageSizeIsSet())
        j["pageSize"] = o.m_PageSize;
    
}

void from_json(const nlohmann::json& j, GithubRepositories& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("_links") != j.end())
    {
        j.at("_links").get_to(o.m__links);
        o.m__linksIsSet = true;
    } 
    if(j.find("items") != j.end())
    {
        j.at("items").get_to(o.m_Items);
        o.m_ItemsIsSet = true;
    } 
    if(j.find("lastPage") != j.end())
    {
        j.at("lastPage").get_to(o.m_LastPage);
        o.m_LastPageIsSet = true;
    } 
    if(j.find("nextPage") != j.end())
    {
        j.at("nextPage").get_to(o.m_NextPage);
        o.m_NextPageIsSet = true;
    } 
    if(j.find("pageSize") != j.end())
    {
        j.at("pageSize").get_to(o.m_PageSize);
        o.m_PageSizeIsSet = true;
    } 
    
}

std::string GithubRepositories::getClass() const
{
    return m__class;
}
void GithubRepositories::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubRepositories::r_classIsSet() const
{
    return m__classIsSet;
}
void GithubRepositories::unset_class()
{
    m__classIsSet = false;
}
org::openapitools::server::model::GithubRepositorieslinks GithubRepositories::getLinks() const
{
    return m__links;
}
void GithubRepositories::setLinks(org::openapitools::server::model::GithubRepositorieslinks const& value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool GithubRepositories::linksIsSet() const
{
    return m__linksIsSet;
}
void GithubRepositories::unset_links()
{
    m__linksIsSet = false;
}
std::vector<org::openapitools::server::model::GithubRepository> GithubRepositories::getItems() const
{
    return m_Items;
}
void GithubRepositories::setItems(std::vector<org::openapitools::server::model::GithubRepository> const& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}
bool GithubRepositories::itemsIsSet() const
{
    return m_ItemsIsSet;
}
void GithubRepositories::unsetItems()
{
    m_ItemsIsSet = false;
}
int32_t GithubRepositories::getLastPage() const
{
    return m_LastPage;
}
void GithubRepositories::setLastPage(int32_t const value)
{
    m_LastPage = value;
    m_LastPageIsSet = true;
}
bool GithubRepositories::lastPageIsSet() const
{
    return m_LastPageIsSet;
}
void GithubRepositories::unsetLastPage()
{
    m_LastPageIsSet = false;
}
int32_t GithubRepositories::getNextPage() const
{
    return m_NextPage;
}
void GithubRepositories::setNextPage(int32_t const value)
{
    m_NextPage = value;
    m_NextPageIsSet = true;
}
bool GithubRepositories::nextPageIsSet() const
{
    return m_NextPageIsSet;
}
void GithubRepositories::unsetNextPage()
{
    m_NextPageIsSet = false;
}
int32_t GithubRepositories::getPageSize() const
{
    return m_PageSize;
}
void GithubRepositories::setPageSize(int32_t const value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}
bool GithubRepositories::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}
void GithubRepositories::unsetPageSize()
{
    m_PageSizeIsSet = false;
}


} // namespace org::openapitools::server::model

