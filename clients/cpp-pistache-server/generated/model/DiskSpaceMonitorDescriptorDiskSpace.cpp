/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "DiskSpaceMonitorDescriptorDiskSpace.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

DiskSpaceMonitorDescriptorDiskSpace::DiskSpaceMonitorDescriptorDiskSpace()
{
    m__class = "";
    m__classIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Path = "";
    m_PathIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    
}

void DiskSpaceMonitorDescriptorDiskSpace::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool DiskSpaceMonitorDescriptorDiskSpace::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool DiskSpaceMonitorDescriptorDiskSpace::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "DiskSpaceMonitorDescriptorDiskSpace" : pathPrefix;

                    
    return success;
}

bool DiskSpaceMonitorDescriptorDiskSpace::operator==(const DiskSpaceMonitorDescriptorDiskSpace& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!timestampIsSet() && !rhs.timestampIsSet()) || (timestampIsSet() && rhs.timestampIsSet() && getTimestamp() == rhs.getTimestamp())) &&
    
    
    ((!pathIsSet() && !rhs.pathIsSet()) || (pathIsSet() && rhs.pathIsSet() && getPath() == rhs.getPath())) &&
    
    
    ((!sizeIsSet() && !rhs.sizeIsSet()) || (sizeIsSet() && rhs.sizeIsSet() && getSize() == rhs.getSize()))
    
    ;
}

bool DiskSpaceMonitorDescriptorDiskSpace::operator!=(const DiskSpaceMonitorDescriptorDiskSpace& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const DiskSpaceMonitorDescriptorDiskSpace& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.timestampIsSet())
        j["timestamp"] = o.m_Timestamp;
    if(o.pathIsSet())
        j["path"] = o.m_Path;
    if(o.sizeIsSet())
        j["size"] = o.m_Size;
    
}

void from_json(const nlohmann::json& j, DiskSpaceMonitorDescriptorDiskSpace& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("timestamp") != j.end())
    {
        j.at("timestamp").get_to(o.m_Timestamp);
        o.m_TimestampIsSet = true;
    } 
    if(j.find("path") != j.end())
    {
        j.at("path").get_to(o.m_Path);
        o.m_PathIsSet = true;
    } 
    if(j.find("size") != j.end())
    {
        j.at("size").get_to(o.m_Size);
        o.m_SizeIsSet = true;
    } 
    
}

std::string DiskSpaceMonitorDescriptorDiskSpace::getClass() const
{
    return m__class;
}
void DiskSpaceMonitorDescriptorDiskSpace::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::r_classIsSet() const
{
    return m__classIsSet;
}
void DiskSpaceMonitorDescriptorDiskSpace::unset_class()
{
    m__classIsSet = false;
}
int32_t DiskSpaceMonitorDescriptorDiskSpace::getTimestamp() const
{
    return m_Timestamp;
}
void DiskSpaceMonitorDescriptorDiskSpace::setTimestamp(int32_t const value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void DiskSpaceMonitorDescriptorDiskSpace::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::string DiskSpaceMonitorDescriptorDiskSpace::getPath() const
{
    return m_Path;
}
void DiskSpaceMonitorDescriptorDiskSpace::setPath(std::string const& value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::pathIsSet() const
{
    return m_PathIsSet;
}
void DiskSpaceMonitorDescriptorDiskSpace::unsetPath()
{
    m_PathIsSet = false;
}
int32_t DiskSpaceMonitorDescriptorDiskSpace::getSize() const
{
    return m_Size;
}
void DiskSpaceMonitorDescriptorDiskSpace::setSize(int32_t const value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool DiskSpaceMonitorDescriptorDiskSpace::sizeIsSet() const
{
    return m_SizeIsSet;
}
void DiskSpaceMonitorDescriptorDiskSpace::unsetSize()
{
    m_SizeIsSet = false;
}


} // namespace org::openapitools::server::model

