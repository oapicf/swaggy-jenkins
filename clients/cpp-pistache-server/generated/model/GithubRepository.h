/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
/*
 * GithubRepository.h
 *
 * 
 */

#ifndef GithubRepository_H_
#define GithubRepository_H_


#include <string>
#include "GithubRepositorypermissions.h"
#include "GithubRepositorylinks.h"
#include <nlohmann/json.hpp>

namespace org::openapitools::server::model
{

/// <summary>
/// 
/// </summary>
class  GithubRepository
{
public:
    GithubRepository();
    virtual ~GithubRepository() = default;


    /// <summary>
    /// Validate the current data in the model. Throws a ValidationException on failure.
    /// </summary>
    void validate() const;

    /// <summary>
    /// Validate the current data in the model. Returns false on error and writes an error
    /// message into the given stringstream.
    /// </summary>
    bool validate(std::stringstream& msg) const;

    /// <summary>
    /// Helper overload for validate. Used when one model stores another model and calls it's validate.
    /// Not meant to be called outside that case.
    /// </summary>
    bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

    bool operator==(const GithubRepository& rhs) const;
    bool operator!=(const GithubRepository& rhs) const;

    /////////////////////////////////////////////
    /// GithubRepository members

    /// <summary>
    /// 
    /// </summary>
    std::string getClass() const;
    void setClass(std::string const& value);
    bool r_classIsSet() const;
    void unset_class();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GithubRepositorylinks getLinks() const;
    void setLinks(org::openapitools::server::model::GithubRepositorylinks const& value);
    bool linksIsSet() const;
    void unset_links();
    /// <summary>
    /// 
    /// </summary>
    std::string getDefaultBranch() const;
    void setDefaultBranch(std::string const& value);
    bool defaultBranchIsSet() const;
    void unsetDefaultBranch();
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string const& value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string const& value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    org::openapitools::server::model::GithubRepositorypermissions getPermissions() const;
    void setPermissions(org::openapitools::server::model::GithubRepositorypermissions const& value);
    bool permissionsIsSet() const;
    void unsetPermissions();
    /// <summary>
    /// 
    /// </summary>
    bool isRPrivate() const;
    void setRPrivate(bool const value);
    bool rPrivateIsSet() const;
    void unsetr_private();
    /// <summary>
    /// 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string const& value);
    bool fullNameIsSet() const;
    void unsetFullName();

    friend  void to_json(nlohmann::json& j, const GithubRepository& o);
    friend  void from_json(const nlohmann::json& j, GithubRepository& o);
protected:
    std::string m__class;
    bool m__classIsSet;
    org::openapitools::server::model::GithubRepositorylinks m__links;
    bool m__linksIsSet;
    std::string m_DefaultBranch;
    bool m_DefaultBranchIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    org::openapitools::server::model::GithubRepositorypermissions m_Permissions;
    bool m_PermissionsIsSet;
    bool m_r_private;
    bool m_r_privateIsSet;
    std::string m_FullName;
    bool m_FullNameIsSet;
    
};

} // namespace org::openapitools::server::model

#endif /* GithubRepository_H_ */
