/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "ListView.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

ListView::ListView()
{
    m__class = "";
    m__classIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_JobsIsSet = false;
    m_Name = "";
    m_NameIsSet = false;
    m_Url = "";
    m_UrlIsSet = false;
    
}

void ListView::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool ListView::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool ListView::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "ListView" : pathPrefix;

                 
    if (jobsIsSet())
    {
        const std::vector<org::openapitools::server::model::FreeStyleProject>& value = m_Jobs;
        const std::string currentValuePath = _pathPrefix + ".jobs";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FreeStyleProject& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".jobs") && success;
 
                i++;
            }
        }

    }
            
    return success;
}

bool ListView::operator==(const ListView& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!jobsIsSet() && !rhs.jobsIsSet()) || (jobsIsSet() && rhs.jobsIsSet() && getJobs() == rhs.getJobs())) &&
    
    
    ((!nameIsSet() && !rhs.nameIsSet()) || (nameIsSet() && rhs.nameIsSet() && getName() == rhs.getName())) &&
    
    
    ((!urlIsSet() && !rhs.urlIsSet()) || (urlIsSet() && rhs.urlIsSet() && getUrl() == rhs.getUrl()))
    
    ;
}

bool ListView::operator!=(const ListView& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const ListView& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.jobsIsSet() || !o.m_Jobs.empty())
        j["jobs"] = o.m_Jobs;
    if(o.nameIsSet())
        j["name"] = o.m_Name;
    if(o.urlIsSet())
        j["url"] = o.m_Url;
    
}

void from_json(const nlohmann::json& j, ListView& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("jobs") != j.end())
    {
        j.at("jobs").get_to(o.m_Jobs);
        o.m_JobsIsSet = true;
    } 
    if(j.find("name") != j.end())
    {
        j.at("name").get_to(o.m_Name);
        o.m_NameIsSet = true;
    } 
    if(j.find("url") != j.end())
    {
        j.at("url").get_to(o.m_Url);
        o.m_UrlIsSet = true;
    } 
    
}

std::string ListView::getClass() const
{
    return m__class;
}
void ListView::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool ListView::r_classIsSet() const
{
    return m__classIsSet;
}
void ListView::unset_class()
{
    m__classIsSet = false;
}
std::string ListView::getDescription() const
{
    return m_Description;
}
void ListView::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool ListView::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void ListView::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<org::openapitools::server::model::FreeStyleProject> ListView::getJobs() const
{
    return m_Jobs;
}
void ListView::setJobs(std::vector<org::openapitools::server::model::FreeStyleProject> const& value)
{
    m_Jobs = value;
    m_JobsIsSet = true;
}
bool ListView::jobsIsSet() const
{
    return m_JobsIsSet;
}
void ListView::unsetJobs()
{
    m_JobsIsSet = false;
}
std::string ListView::getName() const
{
    return m_Name;
}
void ListView::setName(std::string const& value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool ListView::nameIsSet() const
{
    return m_NameIsSet;
}
void ListView::unsetName()
{
    m_NameIsSet = false;
}
std::string ListView::getUrl() const
{
    return m_Url;
}
void ListView::setUrl(std::string const& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool ListView::urlIsSet() const
{
    return m_UrlIsSet;
}
void ListView::unsetUrl()
{
    m_UrlIsSet = false;
}


} // namespace org::openapitools::server::model

