/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "GithubRepositorypermissions.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

GithubRepositorypermissions::GithubRepositorypermissions()
{
    m_Admin = false;
    m_AdminIsSet = false;
    m_Push = false;
    m_PushIsSet = false;
    m_Pull = false;
    m_PullIsSet = false;
    m__class = "";
    m__classIsSet = false;
    
}

void GithubRepositorypermissions::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool GithubRepositorypermissions::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool GithubRepositorypermissions::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "GithubRepositorypermissions" : pathPrefix;

                    
    return success;
}

bool GithubRepositorypermissions::operator==(const GithubRepositorypermissions& rhs) const
{
    return
    
    
    
    ((!adminIsSet() && !rhs.adminIsSet()) || (adminIsSet() && rhs.adminIsSet() && isAdmin() == rhs.isAdmin())) &&
    
    
    ((!pushIsSet() && !rhs.pushIsSet()) || (pushIsSet() && rhs.pushIsSet() && isPush() == rhs.isPush())) &&
    
    
    ((!pullIsSet() && !rhs.pullIsSet()) || (pullIsSet() && rhs.pullIsSet() && isPull() == rhs.isPull())) &&
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass()))
    
    ;
}

bool GithubRepositorypermissions::operator!=(const GithubRepositorypermissions& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const GithubRepositorypermissions& o)
{
    j = nlohmann::json::object();
    if(o.adminIsSet())
        j["admin"] = o.m_Admin;
    if(o.pushIsSet())
        j["push"] = o.m_Push;
    if(o.pullIsSet())
        j["pull"] = o.m_Pull;
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    
}

void from_json(const nlohmann::json& j, GithubRepositorypermissions& o)
{
    if(j.find("admin") != j.end())
    {
        j.at("admin").get_to(o.m_Admin);
        o.m_AdminIsSet = true;
    } 
    if(j.find("push") != j.end())
    {
        j.at("push").get_to(o.m_Push);
        o.m_PushIsSet = true;
    } 
    if(j.find("pull") != j.end())
    {
        j.at("pull").get_to(o.m_Pull);
        o.m_PullIsSet = true;
    } 
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    
}

bool GithubRepositorypermissions::isAdmin() const
{
    return m_Admin;
}
void GithubRepositorypermissions::setAdmin(bool const value)
{
    m_Admin = value;
    m_AdminIsSet = true;
}
bool GithubRepositorypermissions::adminIsSet() const
{
    return m_AdminIsSet;
}
void GithubRepositorypermissions::unsetAdmin()
{
    m_AdminIsSet = false;
}
bool GithubRepositorypermissions::isPush() const
{
    return m_Push;
}
void GithubRepositorypermissions::setPush(bool const value)
{
    m_Push = value;
    m_PushIsSet = true;
}
bool GithubRepositorypermissions::pushIsSet() const
{
    return m_PushIsSet;
}
void GithubRepositorypermissions::unsetPush()
{
    m_PushIsSet = false;
}
bool GithubRepositorypermissions::isPull() const
{
    return m_Pull;
}
void GithubRepositorypermissions::setPull(bool const value)
{
    m_Pull = value;
    m_PullIsSet = true;
}
bool GithubRepositorypermissions::pullIsSet() const
{
    return m_PullIsSet;
}
void GithubRepositorypermissions::unsetPull()
{
    m_PullIsSet = false;
}
std::string GithubRepositorypermissions::getClass() const
{
    return m__class;
}
void GithubRepositorypermissions::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GithubRepositorypermissions::r_classIsSet() const
{
    return m__classIsSet;
}
void GithubRepositorypermissions::unset_class()
{
    m__classIsSet = false;
}


} // namespace org::openapitools::server::model

