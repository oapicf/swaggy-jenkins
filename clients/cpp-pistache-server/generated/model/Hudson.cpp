/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/


#include "Hudson.h"
#include "Helpers.h"

#include <sstream>

namespace org::openapitools::server::model
{

Hudson::Hudson()
{
    m__class = "";
    m__classIsSet = false;
    m_AssignedLabelsIsSet = false;
    m_Mode = "";
    m_ModeIsSet = false;
    m_NodeDescription = "";
    m_NodeDescriptionIsSet = false;
    m_NodeName = "";
    m_NodeNameIsSet = false;
    m_NumExecutors = 0;
    m_NumExecutorsIsSet = false;
    m_Description = "";
    m_DescriptionIsSet = false;
    m_JobsIsSet = false;
    m_PrimaryViewIsSet = false;
    m_QuietingDown = false;
    m_QuietingDownIsSet = false;
    m_SlaveAgentPort = 0;
    m_SlaveAgentPortIsSet = false;
    m_UnlabeledLoadIsSet = false;
    m_UseCrumbs = false;
    m_UseCrumbsIsSet = false;
    m_UseSecurity = false;
    m_UseSecurityIsSet = false;
    m_ViewsIsSet = false;
    
}

void Hudson::validate() const
{
    std::stringstream msg;
    if (!validate(msg))
    {
        throw org::openapitools::server::helpers::ValidationException(msg.str());
    }
}

bool Hudson::validate(std::stringstream& msg) const
{
    return validate(msg, "");
}

bool Hudson::validate(std::stringstream& msg, const std::string& pathPrefix) const
{
    bool success = true;
    const std::string _pathPrefix = pathPrefix.empty() ? "Hudson" : pathPrefix;

             
    if (assignedLabelsIsSet())
    {
        const std::vector<org::openapitools::server::model::HudsonassignedLabels>& value = m_AssignedLabels;
        const std::string currentValuePath = _pathPrefix + ".assignedLabels";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::HudsonassignedLabels& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".assignedLabels") && success;
 
                i++;
            }
        }

    }
                             
    if (jobsIsSet())
    {
        const std::vector<org::openapitools::server::model::FreeStyleProject>& value = m_Jobs;
        const std::string currentValuePath = _pathPrefix + ".jobs";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::FreeStyleProject& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".jobs") && success;
 
                i++;
            }
        }

    }
                                 
    if (viewsIsSet())
    {
        const std::vector<org::openapitools::server::model::AllView>& value = m_Views;
        const std::string currentValuePath = _pathPrefix + ".views";
                
        
        { // Recursive validation of array elements
            const std::string oldValuePath = currentValuePath;
            int i = 0;
            for (const org::openapitools::server::model::AllView& value : value)
            { 
                const std::string currentValuePath = oldValuePath + "[" + std::to_string(i) + "]";
                        
        success = value.validate(msg, currentValuePath + ".views") && success;
 
                i++;
            }
        }

    }
    
    return success;
}

bool Hudson::operator==(const Hudson& rhs) const
{
    return
    
    
    
    ((!r_classIsSet() && !rhs.r_classIsSet()) || (r_classIsSet() && rhs.r_classIsSet() && getClass() == rhs.getClass())) &&
    
    
    ((!assignedLabelsIsSet() && !rhs.assignedLabelsIsSet()) || (assignedLabelsIsSet() && rhs.assignedLabelsIsSet() && getAssignedLabels() == rhs.getAssignedLabels())) &&
    
    
    ((!modeIsSet() && !rhs.modeIsSet()) || (modeIsSet() && rhs.modeIsSet() && getMode() == rhs.getMode())) &&
    
    
    ((!nodeDescriptionIsSet() && !rhs.nodeDescriptionIsSet()) || (nodeDescriptionIsSet() && rhs.nodeDescriptionIsSet() && getNodeDescription() == rhs.getNodeDescription())) &&
    
    
    ((!nodeNameIsSet() && !rhs.nodeNameIsSet()) || (nodeNameIsSet() && rhs.nodeNameIsSet() && getNodeName() == rhs.getNodeName())) &&
    
    
    ((!numExecutorsIsSet() && !rhs.numExecutorsIsSet()) || (numExecutorsIsSet() && rhs.numExecutorsIsSet() && getNumExecutors() == rhs.getNumExecutors())) &&
    
    
    ((!descriptionIsSet() && !rhs.descriptionIsSet()) || (descriptionIsSet() && rhs.descriptionIsSet() && getDescription() == rhs.getDescription())) &&
    
    
    ((!jobsIsSet() && !rhs.jobsIsSet()) || (jobsIsSet() && rhs.jobsIsSet() && getJobs() == rhs.getJobs())) &&
    
    
    ((!primaryViewIsSet() && !rhs.primaryViewIsSet()) || (primaryViewIsSet() && rhs.primaryViewIsSet() && getPrimaryView() == rhs.getPrimaryView())) &&
    
    
    ((!quietingDownIsSet() && !rhs.quietingDownIsSet()) || (quietingDownIsSet() && rhs.quietingDownIsSet() && isQuietingDown() == rhs.isQuietingDown())) &&
    
    
    ((!slaveAgentPortIsSet() && !rhs.slaveAgentPortIsSet()) || (slaveAgentPortIsSet() && rhs.slaveAgentPortIsSet() && getSlaveAgentPort() == rhs.getSlaveAgentPort())) &&
    
    
    ((!unlabeledLoadIsSet() && !rhs.unlabeledLoadIsSet()) || (unlabeledLoadIsSet() && rhs.unlabeledLoadIsSet() && getUnlabeledLoad() == rhs.getUnlabeledLoad())) &&
    
    
    ((!useCrumbsIsSet() && !rhs.useCrumbsIsSet()) || (useCrumbsIsSet() && rhs.useCrumbsIsSet() && isUseCrumbs() == rhs.isUseCrumbs())) &&
    
    
    ((!useSecurityIsSet() && !rhs.useSecurityIsSet()) || (useSecurityIsSet() && rhs.useSecurityIsSet() && isUseSecurity() == rhs.isUseSecurity())) &&
    
    
    ((!viewsIsSet() && !rhs.viewsIsSet()) || (viewsIsSet() && rhs.viewsIsSet() && getViews() == rhs.getViews()))
    
    ;
}

bool Hudson::operator!=(const Hudson& rhs) const
{
    return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Hudson& o)
{
    j = nlohmann::json::object();
    if(o.r_classIsSet())
        j["_class"] = o.m__class;
    if(o.assignedLabelsIsSet() || !o.m_AssignedLabels.empty())
        j["assignedLabels"] = o.m_AssignedLabels;
    if(o.modeIsSet())
        j["mode"] = o.m_Mode;
    if(o.nodeDescriptionIsSet())
        j["nodeDescription"] = o.m_NodeDescription;
    if(o.nodeNameIsSet())
        j["nodeName"] = o.m_NodeName;
    if(o.numExecutorsIsSet())
        j["numExecutors"] = o.m_NumExecutors;
    if(o.descriptionIsSet())
        j["description"] = o.m_Description;
    if(o.jobsIsSet() || !o.m_Jobs.empty())
        j["jobs"] = o.m_Jobs;
    if(o.primaryViewIsSet())
        j["primaryView"] = o.m_PrimaryView;
    if(o.quietingDownIsSet())
        j["quietingDown"] = o.m_QuietingDown;
    if(o.slaveAgentPortIsSet())
        j["slaveAgentPort"] = o.m_SlaveAgentPort;
    if(o.unlabeledLoadIsSet())
        j["unlabeledLoad"] = o.m_UnlabeledLoad;
    if(o.useCrumbsIsSet())
        j["useCrumbs"] = o.m_UseCrumbs;
    if(o.useSecurityIsSet())
        j["useSecurity"] = o.m_UseSecurity;
    if(o.viewsIsSet() || !o.m_Views.empty())
        j["views"] = o.m_Views;
    
}

void from_json(const nlohmann::json& j, Hudson& o)
{
    if(j.find("_class") != j.end())
    {
        j.at("_class").get_to(o.m__class);
        o.m__classIsSet = true;
    } 
    if(j.find("assignedLabels") != j.end())
    {
        j.at("assignedLabels").get_to(o.m_AssignedLabels);
        o.m_AssignedLabelsIsSet = true;
    } 
    if(j.find("mode") != j.end())
    {
        j.at("mode").get_to(o.m_Mode);
        o.m_ModeIsSet = true;
    } 
    if(j.find("nodeDescription") != j.end())
    {
        j.at("nodeDescription").get_to(o.m_NodeDescription);
        o.m_NodeDescriptionIsSet = true;
    } 
    if(j.find("nodeName") != j.end())
    {
        j.at("nodeName").get_to(o.m_NodeName);
        o.m_NodeNameIsSet = true;
    } 
    if(j.find("numExecutors") != j.end())
    {
        j.at("numExecutors").get_to(o.m_NumExecutors);
        o.m_NumExecutorsIsSet = true;
    } 
    if(j.find("description") != j.end())
    {
        j.at("description").get_to(o.m_Description);
        o.m_DescriptionIsSet = true;
    } 
    if(j.find("jobs") != j.end())
    {
        j.at("jobs").get_to(o.m_Jobs);
        o.m_JobsIsSet = true;
    } 
    if(j.find("primaryView") != j.end())
    {
        j.at("primaryView").get_to(o.m_PrimaryView);
        o.m_PrimaryViewIsSet = true;
    } 
    if(j.find("quietingDown") != j.end())
    {
        j.at("quietingDown").get_to(o.m_QuietingDown);
        o.m_QuietingDownIsSet = true;
    } 
    if(j.find("slaveAgentPort") != j.end())
    {
        j.at("slaveAgentPort").get_to(o.m_SlaveAgentPort);
        o.m_SlaveAgentPortIsSet = true;
    } 
    if(j.find("unlabeledLoad") != j.end())
    {
        j.at("unlabeledLoad").get_to(o.m_UnlabeledLoad);
        o.m_UnlabeledLoadIsSet = true;
    } 
    if(j.find("useCrumbs") != j.end())
    {
        j.at("useCrumbs").get_to(o.m_UseCrumbs);
        o.m_UseCrumbsIsSet = true;
    } 
    if(j.find("useSecurity") != j.end())
    {
        j.at("useSecurity").get_to(o.m_UseSecurity);
        o.m_UseSecurityIsSet = true;
    } 
    if(j.find("views") != j.end())
    {
        j.at("views").get_to(o.m_Views);
        o.m_ViewsIsSet = true;
    } 
    
}

std::string Hudson::getClass() const
{
    return m__class;
}
void Hudson::setClass(std::string const& value)
{
    m__class = value;
    m__classIsSet = true;
}
bool Hudson::r_classIsSet() const
{
    return m__classIsSet;
}
void Hudson::unset_class()
{
    m__classIsSet = false;
}
std::vector<org::openapitools::server::model::HudsonassignedLabels> Hudson::getAssignedLabels() const
{
    return m_AssignedLabels;
}
void Hudson::setAssignedLabels(std::vector<org::openapitools::server::model::HudsonassignedLabels> const& value)
{
    m_AssignedLabels = value;
    m_AssignedLabelsIsSet = true;
}
bool Hudson::assignedLabelsIsSet() const
{
    return m_AssignedLabelsIsSet;
}
void Hudson::unsetAssignedLabels()
{
    m_AssignedLabelsIsSet = false;
}
std::string Hudson::getMode() const
{
    return m_Mode;
}
void Hudson::setMode(std::string const& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}
bool Hudson::modeIsSet() const
{
    return m_ModeIsSet;
}
void Hudson::unsetMode()
{
    m_ModeIsSet = false;
}
std::string Hudson::getNodeDescription() const
{
    return m_NodeDescription;
}
void Hudson::setNodeDescription(std::string const& value)
{
    m_NodeDescription = value;
    m_NodeDescriptionIsSet = true;
}
bool Hudson::nodeDescriptionIsSet() const
{
    return m_NodeDescriptionIsSet;
}
void Hudson::unsetNodeDescription()
{
    m_NodeDescriptionIsSet = false;
}
std::string Hudson::getNodeName() const
{
    return m_NodeName;
}
void Hudson::setNodeName(std::string const& value)
{
    m_NodeName = value;
    m_NodeNameIsSet = true;
}
bool Hudson::nodeNameIsSet() const
{
    return m_NodeNameIsSet;
}
void Hudson::unsetNodeName()
{
    m_NodeNameIsSet = false;
}
int32_t Hudson::getNumExecutors() const
{
    return m_NumExecutors;
}
void Hudson::setNumExecutors(int32_t const value)
{
    m_NumExecutors = value;
    m_NumExecutorsIsSet = true;
}
bool Hudson::numExecutorsIsSet() const
{
    return m_NumExecutorsIsSet;
}
void Hudson::unsetNumExecutors()
{
    m_NumExecutorsIsSet = false;
}
std::string Hudson::getDescription() const
{
    return m_Description;
}
void Hudson::setDescription(std::string const& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool Hudson::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void Hudson::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<org::openapitools::server::model::FreeStyleProject> Hudson::getJobs() const
{
    return m_Jobs;
}
void Hudson::setJobs(std::vector<org::openapitools::server::model::FreeStyleProject> const& value)
{
    m_Jobs = value;
    m_JobsIsSet = true;
}
bool Hudson::jobsIsSet() const
{
    return m_JobsIsSet;
}
void Hudson::unsetJobs()
{
    m_JobsIsSet = false;
}
org::openapitools::server::model::AllView Hudson::getPrimaryView() const
{
    return m_PrimaryView;
}
void Hudson::setPrimaryView(org::openapitools::server::model::AllView const& value)
{
    m_PrimaryView = value;
    m_PrimaryViewIsSet = true;
}
bool Hudson::primaryViewIsSet() const
{
    return m_PrimaryViewIsSet;
}
void Hudson::unsetPrimaryView()
{
    m_PrimaryViewIsSet = false;
}
bool Hudson::isQuietingDown() const
{
    return m_QuietingDown;
}
void Hudson::setQuietingDown(bool const value)
{
    m_QuietingDown = value;
    m_QuietingDownIsSet = true;
}
bool Hudson::quietingDownIsSet() const
{
    return m_QuietingDownIsSet;
}
void Hudson::unsetQuietingDown()
{
    m_QuietingDownIsSet = false;
}
int32_t Hudson::getSlaveAgentPort() const
{
    return m_SlaveAgentPort;
}
void Hudson::setSlaveAgentPort(int32_t const value)
{
    m_SlaveAgentPort = value;
    m_SlaveAgentPortIsSet = true;
}
bool Hudson::slaveAgentPortIsSet() const
{
    return m_SlaveAgentPortIsSet;
}
void Hudson::unsetSlaveAgentPort()
{
    m_SlaveAgentPortIsSet = false;
}
org::openapitools::server::model::UnlabeledLoadStatistics Hudson::getUnlabeledLoad() const
{
    return m_UnlabeledLoad;
}
void Hudson::setUnlabeledLoad(org::openapitools::server::model::UnlabeledLoadStatistics const& value)
{
    m_UnlabeledLoad = value;
    m_UnlabeledLoadIsSet = true;
}
bool Hudson::unlabeledLoadIsSet() const
{
    return m_UnlabeledLoadIsSet;
}
void Hudson::unsetUnlabeledLoad()
{
    m_UnlabeledLoadIsSet = false;
}
bool Hudson::isUseCrumbs() const
{
    return m_UseCrumbs;
}
void Hudson::setUseCrumbs(bool const value)
{
    m_UseCrumbs = value;
    m_UseCrumbsIsSet = true;
}
bool Hudson::useCrumbsIsSet() const
{
    return m_UseCrumbsIsSet;
}
void Hudson::unsetUseCrumbs()
{
    m_UseCrumbsIsSet = false;
}
bool Hudson::isUseSecurity() const
{
    return m_UseSecurity;
}
void Hudson::setUseSecurity(bool const value)
{
    m_UseSecurity = value;
    m_UseSecurityIsSet = true;
}
bool Hudson::useSecurityIsSet() const
{
    return m_UseSecurityIsSet;
}
void Hudson::unsetUseSecurity()
{
    m_UseSecurityIsSet = false;
}
std::vector<org::openapitools::server::model::AllView> Hudson::getViews() const
{
    return m_Views;
}
void Hudson::setViews(std::vector<org::openapitools::server::model::AllView> const& value)
{
    m_Views = value;
    m_ViewsIsSet = true;
}
bool Hudson::viewsIsSet() const
{
    return m_ViewsIsSet;
}
void Hudson::unsetViews()
{
    m_ViewsIsSet = false;
}


} // namespace org::openapitools::server::model

