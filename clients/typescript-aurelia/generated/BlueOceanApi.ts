/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  PipelineRun,
  User,
  Organisation,
  PipelineFolderImpl,
  PipelineImpl,
  GithubScm,
  GithubOrganization,
  FavoriteImpl,
  Pipeline,
  PipelineRunNode,
  PipelineActivity,
  QueueItemImpl,
  BranchImpl,
  PipelineStepImpl,
  MultibranchPipeline,
} from './models';

/**
 * deletePipelineQueueItem - parameters interface
 */
export interface IDeletePipelineQueueItemParams {
  organization: string;
  pipeline: string;
  queue: string;
}

/**
 * getAuthenticatedUser - parameters interface
 */
export interface IGetAuthenticatedUserParams {
  organization: string;
}

/**
 * getClasses - parameters interface
 */
export interface IGetClassesParams {
  _class: string;
}

/**
 * getJsonWebKey - parameters interface
 */
export interface IGetJsonWebKeyParams {
  key: number;
}

/**
 * getJsonWebToken - parameters interface
 */
export interface IGetJsonWebTokenParams {
  expiryTimeInMins?: number;
  maxExpiryTimeInMins?: number;
}

/**
 * getOrganisation - parameters interface
 */
export interface IGetOrganisationParams {
  organization: string;
}

/**
 * getOrganisations - parameters interface
 */
export interface IGetOrganisationsParams {
}

/**
 * getPipeline - parameters interface
 */
export interface IGetPipelineParams {
  organization: string;
  pipeline: string;
}

/**
 * getPipelineActivities - parameters interface
 */
export interface IGetPipelineActivitiesParams {
  organization: string;
  pipeline: string;
}

/**
 * getPipelineBranch - parameters interface
 */
export interface IGetPipelineBranchParams {
  organization: string;
  pipeline: string;
  branch: string;
}

/**
 * getPipelineBranchRun - parameters interface
 */
export interface IGetPipelineBranchRunParams {
  organization: string;
  pipeline: string;
  branch: string;
  run: string;
}

/**
 * getPipelineBranches - parameters interface
 */
export interface IGetPipelineBranchesParams {
  organization: string;
  pipeline: string;
}

/**
 * getPipelineFolder - parameters interface
 */
export interface IGetPipelineFolderParams {
  organization: string;
  folder: string;
}

/**
 * getPipelineFolderPipeline - parameters interface
 */
export interface IGetPipelineFolderPipelineParams {
  organization: string;
  pipeline: string;
  folder: string;
}

/**
 * getPipelineQueue - parameters interface
 */
export interface IGetPipelineQueueParams {
  organization: string;
  pipeline: string;
}

/**
 * getPipelineRun - parameters interface
 */
export interface IGetPipelineRunParams {
  organization: string;
  pipeline: string;
  run: string;
}

/**
 * getPipelineRunLog - parameters interface
 */
export interface IGetPipelineRunLogParams {
  organization: string;
  pipeline: string;
  run: string;
  start?: number;
  download?: boolean;
}

/**
 * getPipelineRunNode - parameters interface
 */
export interface IGetPipelineRunNodeParams {
  organization: string;
  pipeline: string;
  run: string;
  node: string;
}

/**
 * getPipelineRunNodeStep - parameters interface
 */
export interface IGetPipelineRunNodeStepParams {
  organization: string;
  pipeline: string;
  run: string;
  node: string;
  step: string;
}

/**
 * getPipelineRunNodeStepLog - parameters interface
 */
export interface IGetPipelineRunNodeStepLogParams {
  organization: string;
  pipeline: string;
  run: string;
  node: string;
  step: string;
}

/**
 * getPipelineRunNodeSteps - parameters interface
 */
export interface IGetPipelineRunNodeStepsParams {
  organization: string;
  pipeline: string;
  run: string;
  node: string;
}

/**
 * getPipelineRunNodes - parameters interface
 */
export interface IGetPipelineRunNodesParams {
  organization: string;
  pipeline: string;
  run: string;
}

/**
 * getPipelineRuns - parameters interface
 */
export interface IGetPipelineRunsParams {
  organization: string;
  pipeline: string;
}

/**
 * getPipelines - parameters interface
 */
export interface IGetPipelinesParams {
  organization: string;
}

/**
 * getSCM - parameters interface
 */
export interface IGetSCMParams {
  organization: string;
  scm: string;
}

/**
 * getSCMOrganisationRepositories - parameters interface
 */
export interface IGetSCMOrganisationRepositoriesParams {
  organization: string;
  scm: string;
  scmOrganisation: string;
  credentialId?: string;
  pageSize?: number;
  pageNumber?: number;
}

/**
 * getSCMOrganisationRepository - parameters interface
 */
export interface IGetSCMOrganisationRepositoryParams {
  organization: string;
  scm: string;
  scmOrganisation: string;
  repository: string;
  credentialId?: string;
}

/**
 * getSCMOrganisations - parameters interface
 */
export interface IGetSCMOrganisationsParams {
  organization: string;
  scm: string;
  credentialId?: string;
}

/**
 * getUser - parameters interface
 */
export interface IGetUserParams {
  organization: string;
  user: string;
}

/**
 * getUserFavorites - parameters interface
 */
export interface IGetUserFavoritesParams {
  user: string;
}

/**
 * getUsers - parameters interface
 */
export interface IGetUsersParams {
  organization: string;
}

/**
 * postPipelineRun - parameters interface
 */
export interface IPostPipelineRunParams {
  organization: string;
  pipeline: string;
  run: string;
}

/**
 * postPipelineRuns - parameters interface
 */
export interface IPostPipelineRunsParams {
  organization: string;
  pipeline: string;
}

/**
 * putPipelineFavorite - parameters interface
 */
export interface IPutPipelineFavoriteParams {
  organization: string;
  pipeline: string;
  body: boolean;
}

/**
 * putPipelineRun - parameters interface
 */
export interface IPutPipelineRunParams {
  organization: string;
  pipeline: string;
  run: string;
  blocking?: string;
  timeOutInSecs?: number;
}

/**
 * search - parameters interface
 */
export interface ISearchParams {
  q: string;
}

/**
 * searchClasses - parameters interface
 */
export interface ISearchClassesParams {
  q: string;
}

/**
 * BlueOceanApi - API class
 */
@autoinject()
export class BlueOceanApi extends Api {

  /**
   * Creates a new BlueOceanApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Delete queue item from an organization pipeline queue
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.queue Name of the queue item
   */
  async deletePipelineQueueItem(params: IDeletePipelineQueueItemParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('deletePipelineQueueItem', params, 'organization');
    this.ensureParamIsSet('deletePipelineQueueItem', params, 'pipeline');
    this.ensureParamIsSet('deletePipelineQueueItem', params, 'queue');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'queue'}}`, encodeURIComponent(`${params['queue']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve authenticated user details for an organization
   * @param params.organization Name of the organization
   */
  async getAuthenticatedUser(params: IGetAuthenticatedUserParams): Promise<User> {
    // Verify required parameters are set
    this.ensureParamIsSet('getAuthenticatedUser', params, 'organization');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/user/`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get a list of class names supported by a given class
   * @param params._class Name of the class
   */
  async getClasses(params: IGetClassesParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('getClasses', params, '_class');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/classes/{class}`
      .replace(`{${'class'}}`, encodeURIComponent(`${params['_class']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve JSON Web Key
   * @param params.key Key ID received as part of JWT header field kid
   */
  async getJsonWebKey(params: IGetJsonWebKeyParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('getJsonWebKey', params, 'key');

    // Create URL to call
    const url = `${this.basePath}/jwt-auth/jwks/{key}`
      .replace(`{${'key'}}`, encodeURIComponent(`${params['key']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve JSON Web Token
   * @param params.expiryTimeInMins Token expiry time in minutes, default: 30 minutes
   * @param params.maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
   */
  async getJsonWebToken(params: IGetJsonWebTokenParams): Promise<string> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/jwt-auth/token`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'expiryTimeInMins': params['expiryTimeInMins'],
        'maxExpiryTimeInMins': params['maxExpiryTimeInMins'],
      })

      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve organization details
   * @param params.organization Name of the organization
   */
  async getOrganisation(params: IGetOrganisationParams): Promise<Organisation> {
    // Verify required parameters are set
    this.ensureParamIsSet('getOrganisation', params, 'organization');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve all organizations details
   */
  async getOrganisations(): Promise<Array<Organisation>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve pipeline details for an organization
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   */
  async getPipeline(params: IGetPipelineParams): Promise<Pipeline> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipeline', params, 'organization');
    this.ensureParamIsSet('getPipeline', params, 'pipeline');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve all activities details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   */
  async getPipelineActivities(params: IGetPipelineActivitiesParams): Promise<Array<PipelineActivity>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineActivities', params, 'organization');
    this.ensureParamIsSet('getPipelineActivities', params, 'pipeline');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve branch details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.branch Name of the branch
   */
  async getPipelineBranch(params: IGetPipelineBranchParams): Promise<BranchImpl> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineBranch', params, 'organization');
    this.ensureParamIsSet('getPipelineBranch', params, 'pipeline');
    this.ensureParamIsSet('getPipelineBranch', params, 'branch');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'branch'}}`, encodeURIComponent(`${params['branch']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve branch run details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.branch Name of the branch
   * @param params.run Name of the run
   */
  async getPipelineBranchRun(params: IGetPipelineBranchRunParams): Promise<PipelineRun> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineBranchRun', params, 'organization');
    this.ensureParamIsSet('getPipelineBranchRun', params, 'pipeline');
    this.ensureParamIsSet('getPipelineBranchRun', params, 'branch');
    this.ensureParamIsSet('getPipelineBranchRun', params, 'run');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'branch'}}`, encodeURIComponent(`${params['branch']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve all branches details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   */
  async getPipelineBranches(params: IGetPipelineBranchesParams): Promise<MultibranchPipeline> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineBranches', params, 'organization');
    this.ensureParamIsSet('getPipelineBranches', params, 'pipeline');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve pipeline folder for an organization
   * @param params.organization Name of the organization
   * @param params.folder Name of the folder
   */
  async getPipelineFolder(params: IGetPipelineFolderParams): Promise<PipelineFolderImpl> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineFolder', params, 'organization');
    this.ensureParamIsSet('getPipelineFolder', params, 'folder');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{folder}/`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'folder'}}`, encodeURIComponent(`${params['folder']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve pipeline details for an organization folder
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.folder Name of the folder
   */
  async getPipelineFolderPipeline(params: IGetPipelineFolderPipelineParams): Promise<PipelineImpl> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineFolderPipeline', params, 'organization');
    this.ensureParamIsSet('getPipelineFolderPipeline', params, 'pipeline');
    this.ensureParamIsSet('getPipelineFolderPipeline', params, 'folder');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'folder'}}`, encodeURIComponent(`${params['folder']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve queue details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   */
  async getPipelineQueue(params: IGetPipelineQueueParams): Promise<Array<QueueItemImpl>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineQueue', params, 'organization');
    this.ensureParamIsSet('getPipelineQueue', params, 'pipeline');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve run details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   */
  async getPipelineRun(params: IGetPipelineRunParams): Promise<PipelineRun> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineRun', params, 'organization');
    this.ensureParamIsSet('getPipelineRun', params, 'pipeline');
    this.ensureParamIsSet('getPipelineRun', params, 'run');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get log for a pipeline run
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   * @param params.start Start position of the log
   * @param params.download Set to true in order to download the file, otherwise it\&#39;s passed as a response body
   */
  async getPipelineRunLog(params: IGetPipelineRunLogParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineRunLog', params, 'organization');
    this.ensureParamIsSet('getPipelineRunLog', params, 'pipeline');
    this.ensureParamIsSet('getPipelineRunLog', params, 'run');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'start': params['start'],
        'download': params['download'],
      })

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve run node details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   * @param params.node Name of the node
   */
  async getPipelineRunNode(params: IGetPipelineRunNodeParams): Promise<PipelineRunNode> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineRunNode', params, 'organization');
    this.ensureParamIsSet('getPipelineRunNode', params, 'pipeline');
    this.ensureParamIsSet('getPipelineRunNode', params, 'run');
    this.ensureParamIsSet('getPipelineRunNode', params, 'node');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`))
      .replace(`{${'node'}}`, encodeURIComponent(`${params['node']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve run node details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   * @param params.node Name of the node
   * @param params.step Name of the step
   */
  async getPipelineRunNodeStep(params: IGetPipelineRunNodeStepParams): Promise<PipelineStepImpl> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineRunNodeStep', params, 'organization');
    this.ensureParamIsSet('getPipelineRunNodeStep', params, 'pipeline');
    this.ensureParamIsSet('getPipelineRunNodeStep', params, 'run');
    this.ensureParamIsSet('getPipelineRunNodeStep', params, 'node');
    this.ensureParamIsSet('getPipelineRunNodeStep', params, 'step');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`))
      .replace(`{${'node'}}`, encodeURIComponent(`${params['node']}`))
      .replace(`{${'step'}}`, encodeURIComponent(`${params['step']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get log for a pipeline run node step
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   * @param params.node Name of the node
   * @param params.step Name of the step
   */
  async getPipelineRunNodeStepLog(params: IGetPipelineRunNodeStepLogParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineRunNodeStepLog', params, 'organization');
    this.ensureParamIsSet('getPipelineRunNodeStepLog', params, 'pipeline');
    this.ensureParamIsSet('getPipelineRunNodeStepLog', params, 'run');
    this.ensureParamIsSet('getPipelineRunNodeStepLog', params, 'node');
    this.ensureParamIsSet('getPipelineRunNodeStepLog', params, 'step');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`))
      .replace(`{${'node'}}`, encodeURIComponent(`${params['node']}`))
      .replace(`{${'step'}}`, encodeURIComponent(`${params['step']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve run node steps details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   * @param params.node Name of the node
   */
  async getPipelineRunNodeSteps(params: IGetPipelineRunNodeStepsParams): Promise<Array<PipelineStepImpl>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineRunNodeSteps', params, 'organization');
    this.ensureParamIsSet('getPipelineRunNodeSteps', params, 'pipeline');
    this.ensureParamIsSet('getPipelineRunNodeSteps', params, 'run');
    this.ensureParamIsSet('getPipelineRunNodeSteps', params, 'node');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`))
      .replace(`{${'node'}}`, encodeURIComponent(`${params['node']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve run nodes details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   */
  async getPipelineRunNodes(params: IGetPipelineRunNodesParams): Promise<Array<PipelineRunNode>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineRunNodes', params, 'organization');
    this.ensureParamIsSet('getPipelineRunNodes', params, 'pipeline');
    this.ensureParamIsSet('getPipelineRunNodes', params, 'run');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve all runs details for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   */
  async getPipelineRuns(params: IGetPipelineRunsParams): Promise<Array<PipelineRun>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelineRuns', params, 'organization');
    this.ensureParamIsSet('getPipelineRuns', params, 'pipeline');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve all pipelines details for an organization
   * @param params.organization Name of the organization
   */
  async getPipelines(params: IGetPipelinesParams): Promise<Array<Pipeline>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getPipelines', params, 'organization');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve SCM details for an organization
   * @param params.organization Name of the organization
   * @param params.scm Name of SCM
   */
  async getSCM(params: IGetSCMParams): Promise<GithubScm> {
    // Verify required parameters are set
    this.ensureParamIsSet('getSCM', params, 'organization');
    this.ensureParamIsSet('getSCM', params, 'scm');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/scm/{scm}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'scm'}}`, encodeURIComponent(`${params['scm']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve SCM organization repositories details for an organization
   * @param params.organization Name of the organization
   * @param params.scm Name of SCM
   * @param params.scmOrganisation Name of the SCM organization
   * @param params.credentialId Credential ID
   * @param params.pageSize Number of items in a page
   * @param params.pageNumber Page number
   */
  async getSCMOrganisationRepositories(params: IGetSCMOrganisationRepositoriesParams): Promise<Array<GithubOrganization>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getSCMOrganisationRepositories', params, 'organization');
    this.ensureParamIsSet('getSCMOrganisationRepositories', params, 'scm');
    this.ensureParamIsSet('getSCMOrganisationRepositories', params, 'scmOrganisation');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'scm'}}`, encodeURIComponent(`${params['scm']}`))
      .replace(`{${'scmOrganisation'}}`, encodeURIComponent(`${params['scmOrganisation']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'credentialId': params['credentialId'],
        'pageSize': params['pageSize'],
        'pageNumber': params['pageNumber'],
      })

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve SCM organization repository details for an organization
   * @param params.organization Name of the organization
   * @param params.scm Name of SCM
   * @param params.scmOrganisation Name of the SCM organization
   * @param params.repository Name of the SCM repository
   * @param params.credentialId Credential ID
   */
  async getSCMOrganisationRepository(params: IGetSCMOrganisationRepositoryParams): Promise<Array<GithubOrganization>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getSCMOrganisationRepository', params, 'organization');
    this.ensureParamIsSet('getSCMOrganisationRepository', params, 'scm');
    this.ensureParamIsSet('getSCMOrganisationRepository', params, 'scmOrganisation');
    this.ensureParamIsSet('getSCMOrganisationRepository', params, 'repository');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'scm'}}`, encodeURIComponent(`${params['scm']}`))
      .replace(`{${'scmOrganisation'}}`, encodeURIComponent(`${params['scmOrganisation']}`))
      .replace(`{${'repository'}}`, encodeURIComponent(`${params['repository']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'credentialId': params['credentialId'],
      })

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve SCM organizations details for an organization
   * @param params.organization Name of the organization
   * @param params.scm Name of SCM
   * @param params.credentialId Credential ID
   */
  async getSCMOrganisations(params: IGetSCMOrganisationsParams): Promise<Array<GithubOrganization>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getSCMOrganisations', params, 'organization');
    this.ensureParamIsSet('getSCMOrganisations', params, 'scm');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/scm/{scm}/organizations`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'scm'}}`, encodeURIComponent(`${params['scm']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'credentialId': params['credentialId'],
      })

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve user details for an organization
   * @param params.organization Name of the organization
   * @param params.user Name of the user
   */
  async getUser(params: IGetUserParams): Promise<User> {
    // Verify required parameters are set
    this.ensureParamIsSet('getUser', params, 'organization');
    this.ensureParamIsSet('getUser', params, 'user');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/users/{user}`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'user'}}`, encodeURIComponent(`${params['user']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve user favorites details for an organization
   * @param params.user Name of the user
   */
  async getUserFavorites(params: IGetUserFavoritesParams): Promise<Array<FavoriteImpl>> {
    // Verify required parameters are set
    this.ensureParamIsSet('getUserFavorites', params, 'user');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/users/{user}/favorites`
      .replace(`{${'user'}}`, encodeURIComponent(`${params['user']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Retrieve users details for an organization
   * @param params.organization Name of the organization
   */
  async getUsers(params: IGetUsersParams): Promise<User> {
    // Verify required parameters are set
    this.ensureParamIsSet('getUsers', params, 'organization');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/users/`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Replay an organization pipeline run
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   */
  async postPipelineRun(params: IPostPipelineRunParams): Promise<QueueItemImpl> {
    // Verify required parameters are set
    this.ensureParamIsSet('postPipelineRun', params, 'organization');
    this.ensureParamIsSet('postPipelineRun', params, 'pipeline');
    this.ensureParamIsSet('postPipelineRun', params, 'run');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Start a build for an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   */
  async postPipelineRuns(params: IPostPipelineRunsParams): Promise<QueueItemImpl> {
    // Verify required parameters are set
    this.ensureParamIsSet('postPipelineRuns', params, 'organization');
    this.ensureParamIsSet('postPipelineRuns', params, 'pipeline');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Favorite/unfavorite a pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
   */
  async putPipelineFavorite(params: IPutPipelineFavoriteParams): Promise<FavoriteImpl> {
    // Verify required parameters are set
    this.ensureParamIsSet('putPipelineFavorite', params, 'organization');
    this.ensureParamIsSet('putPipelineFavorite', params, 'pipeline');
    this.ensureParamIsSet('putPipelineFavorite', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Stop a build of an organization pipeline
   * @param params.organization Name of the organization
   * @param params.pipeline Name of the pipeline
   * @param params.run Name of the run
   * @param params.blocking Set to true to make blocking stop, default: false
   * @param params.timeOutInSecs Timeout in seconds, default: 10 seconds
   */
  async putPipelineRun(params: IPutPipelineRunParams): Promise<PipelineRun> {
    // Verify required parameters are set
    this.ensureParamIsSet('putPipelineRun', params, 'organization');
    this.ensureParamIsSet('putPipelineRun', params, 'pipeline');
    this.ensureParamIsSet('putPipelineRun', params, 'run');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop`
      .replace(`{${'organization'}}`, encodeURIComponent(`${params['organization']}`))
      .replace(`{${'pipeline'}}`, encodeURIComponent(`${params['pipeline']}`))
      .replace(`{${'run'}}`, encodeURIComponent(`${params['run']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPut()
      // Set query parameters
      .withParams({ 
        'blocking': params['blocking'],
        'timeOutInSecs': params['timeOutInSecs'],
      })

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Search for any resource details
   * @param params.q Query string
   */
  async search(params: ISearchParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('search', params, 'q');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/search/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'q': params['q'],
      })

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get classes details
   * @param params.q Query string containing an array of class names
   */
  async searchClasses(params: ISearchClassesParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('searchClasses', params, 'q');

    // Create URL to call
    const url = `${this.basePath}/blue/rest/classes/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'q': params['q'],
      })

      // Authentication 'jenkins_auth' required
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

