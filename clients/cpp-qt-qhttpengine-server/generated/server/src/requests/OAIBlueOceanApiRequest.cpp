/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIBlueOceanApiRequest.h"

namespace OpenAPI {

OAIBlueOceanApiRequest::OAIBlueOceanApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBlueOceanApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIBlueOceanApiRequest::~OAIBlueOceanApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIBlueOceanApiRequest::~OAIBlueOceanApiRequest()";
}

QMap<QString, QString>
OAIBlueOceanApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIBlueOceanApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIBlueOceanApiRequest::getRawSocket(){
    return socket;
}


void OAIBlueOceanApiRequest::deletePipelineQueueItemRequest(const QString& organizationstr, const QString& pipelinestr, const QString& queuestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}";
    connect(this, &OAIBlueOceanApiRequest::deletePipelineQueueItem, handler.data(), &OAIBlueOceanApiHandler::deletePipelineQueueItem);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString queue;
    fromStringValue(queuestr, queue);
    

    Q_EMIT deletePipelineQueueItem(organization, pipeline, queue);
}


void OAIBlueOceanApiRequest::getAuthenticatedUserRequest(const QString& organizationstr){
    qDebug() << "/blue/rest/organizations/{organization}/user/";
    connect(this, &OAIBlueOceanApiRequest::getAuthenticatedUser, handler.data(), &OAIBlueOceanApiHandler::getAuthenticatedUser);

    
    QString organization;
    fromStringValue(organizationstr, organization);
    

    Q_EMIT getAuthenticatedUser(organization);
}


void OAIBlueOceanApiRequest::getClassesRequest(const QString& r_classstr){
    qDebug() << "/blue/rest/classes/{class}";
    connect(this, &OAIBlueOceanApiRequest::getClasses, handler.data(), &OAIBlueOceanApiHandler::getClasses);

    
    QString r_class;
    fromStringValue(r_classstr, r_class);
    

    Q_EMIT getClasses(r_class);
}


void OAIBlueOceanApiRequest::getJsonWebKeyRequest(const QString& keystr){
    qDebug() << "/jwt-auth/jwks/{key}";
    connect(this, &OAIBlueOceanApiRequest::getJsonWebKey, handler.data(), &OAIBlueOceanApiHandler::getJsonWebKey);

    
    qint32 key;
    fromStringValue(keystr, key);
    

    Q_EMIT getJsonWebKey(key);
}


void OAIBlueOceanApiRequest::getJsonWebTokenRequest(){
    qDebug() << "/jwt-auth/token";
    connect(this, &OAIBlueOceanApiRequest::getJsonWebToken, handler.data(), &OAIBlueOceanApiHandler::getJsonWebToken);

    
    qint32 expiry_time_in_mins;
    if(socket->queryString().keys().contains("expiry_time_in_mins")){
        fromStringValue(socket->queryString().value("expiry_time_in_mins"), expiry_time_in_mins);
    }
    
    qint32 max_expiry_time_in_mins;
    if(socket->queryString().keys().contains("max_expiry_time_in_mins")){
        fromStringValue(socket->queryString().value("max_expiry_time_in_mins"), max_expiry_time_in_mins);
    }
    


    Q_EMIT getJsonWebToken(expiry_time_in_mins, max_expiry_time_in_mins);
}


void OAIBlueOceanApiRequest::getOrganisationRequest(const QString& organizationstr){
    qDebug() << "/blue/rest/organizations/{organization}";
    connect(this, &OAIBlueOceanApiRequest::getOrganisation, handler.data(), &OAIBlueOceanApiHandler::getOrganisation);

    
    QString organization;
    fromStringValue(organizationstr, organization);
    

    Q_EMIT getOrganisation(organization);
}


void OAIBlueOceanApiRequest::getOrganisationsRequest(){
    qDebug() << "/blue/rest/organizations/";
    connect(this, &OAIBlueOceanApiRequest::getOrganisations, handler.data(), &OAIBlueOceanApiHandler::getOrganisations);

    


    Q_EMIT getOrganisations();
}


void OAIBlueOceanApiRequest::getPipelineRequest(const QString& organizationstr, const QString& pipelinestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}";
    connect(this, &OAIBlueOceanApiRequest::getPipeline, handler.data(), &OAIBlueOceanApiHandler::getPipeline);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
    

    Q_EMIT getPipeline(organization, pipeline);
}


void OAIBlueOceanApiRequest::getPipelineActivitiesRequest(const QString& organizationstr, const QString& pipelinestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities";
    connect(this, &OAIBlueOceanApiRequest::getPipelineActivities, handler.data(), &OAIBlueOceanApiHandler::getPipelineActivities);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
    

    Q_EMIT getPipelineActivities(organization, pipeline);
}


void OAIBlueOceanApiRequest::getPipelineBranchRequest(const QString& organizationstr, const QString& pipelinestr, const QString& branchstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/";
    connect(this, &OAIBlueOceanApiRequest::getPipelineBranch, handler.data(), &OAIBlueOceanApiHandler::getPipelineBranch);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString branch;
    fromStringValue(branchstr, branch);
    

    Q_EMIT getPipelineBranch(organization, pipeline, branch);
}


void OAIBlueOceanApiRequest::getPipelineBranchRunRequest(const QString& organizationstr, const QString& pipelinestr, const QString& branchstr, const QString& runstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}";
    connect(this, &OAIBlueOceanApiRequest::getPipelineBranchRun, handler.data(), &OAIBlueOceanApiHandler::getPipelineBranchRun);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString branch;
    fromStringValue(branchstr, branch);
        QString run;
    fromStringValue(runstr, run);
    

    Q_EMIT getPipelineBranchRun(organization, pipeline, branch, run);
}


void OAIBlueOceanApiRequest::getPipelineBranchesRequest(const QString& organizationstr, const QString& pipelinestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches";
    connect(this, &OAIBlueOceanApiRequest::getPipelineBranches, handler.data(), &OAIBlueOceanApiHandler::getPipelineBranches);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
    

    Q_EMIT getPipelineBranches(organization, pipeline);
}


void OAIBlueOceanApiRequest::getPipelineFolderRequest(const QString& organizationstr, const QString& folderstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{folder}/";
    connect(this, &OAIBlueOceanApiRequest::getPipelineFolder, handler.data(), &OAIBlueOceanApiHandler::getPipelineFolder);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString folder;
    fromStringValue(folderstr, folder);
    

    Q_EMIT getPipelineFolder(organization, folder);
}


void OAIBlueOceanApiRequest::getPipelineFolderPipelineRequest(const QString& organizationstr, const QString& pipelinestr, const QString& folderstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}";
    connect(this, &OAIBlueOceanApiRequest::getPipelineFolderPipeline, handler.data(), &OAIBlueOceanApiHandler::getPipelineFolderPipeline);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString folder;
    fromStringValue(folderstr, folder);
    

    Q_EMIT getPipelineFolderPipeline(organization, pipeline, folder);
}


void OAIBlueOceanApiRequest::getPipelineQueueRequest(const QString& organizationstr, const QString& pipelinestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue";
    connect(this, &OAIBlueOceanApiRequest::getPipelineQueue, handler.data(), &OAIBlueOceanApiHandler::getPipelineQueue);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
    

    Q_EMIT getPipelineQueue(organization, pipeline);
}


void OAIBlueOceanApiRequest::getPipelineRunRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}";
    connect(this, &OAIBlueOceanApiRequest::getPipelineRun, handler.data(), &OAIBlueOceanApiHandler::getPipelineRun);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
    

    Q_EMIT getPipelineRun(organization, pipeline, run);
}


void OAIBlueOceanApiRequest::getPipelineRunLogRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log";
    connect(this, &OAIBlueOceanApiRequest::getPipelineRunLog, handler.data(), &OAIBlueOceanApiHandler::getPipelineRunLog);

    
    qint32 start;
    if(socket->queryString().keys().contains("start")){
        fromStringValue(socket->queryString().value("start"), start);
    }
    
    bool download;
    if(socket->queryString().keys().contains("download")){
        fromStringValue(socket->queryString().value("download"), download);
    }
    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
    

    Q_EMIT getPipelineRunLog(organization, pipeline, run, start, download);
}


void OAIBlueOceanApiRequest::getPipelineRunNodeRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr, const QString& nodestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}";
    connect(this, &OAIBlueOceanApiRequest::getPipelineRunNode, handler.data(), &OAIBlueOceanApiHandler::getPipelineRunNode);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
        QString node;
    fromStringValue(nodestr, node);
    

    Q_EMIT getPipelineRunNode(organization, pipeline, run, node);
}


void OAIBlueOceanApiRequest::getPipelineRunNodeStepRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr, const QString& nodestr, const QString& stepstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}";
    connect(this, &OAIBlueOceanApiRequest::getPipelineRunNodeStep, handler.data(), &OAIBlueOceanApiHandler::getPipelineRunNodeStep);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
        QString node;
    fromStringValue(nodestr, node);
        QString step;
    fromStringValue(stepstr, step);
    

    Q_EMIT getPipelineRunNodeStep(organization, pipeline, run, node, step);
}


void OAIBlueOceanApiRequest::getPipelineRunNodeStepLogRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr, const QString& nodestr, const QString& stepstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log";
    connect(this, &OAIBlueOceanApiRequest::getPipelineRunNodeStepLog, handler.data(), &OAIBlueOceanApiHandler::getPipelineRunNodeStepLog);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
        QString node;
    fromStringValue(nodestr, node);
        QString step;
    fromStringValue(stepstr, step);
    

    Q_EMIT getPipelineRunNodeStepLog(organization, pipeline, run, node, step);
}


void OAIBlueOceanApiRequest::getPipelineRunNodeStepsRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr, const QString& nodestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps";
    connect(this, &OAIBlueOceanApiRequest::getPipelineRunNodeSteps, handler.data(), &OAIBlueOceanApiHandler::getPipelineRunNodeSteps);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
        QString node;
    fromStringValue(nodestr, node);
    

    Q_EMIT getPipelineRunNodeSteps(organization, pipeline, run, node);
}


void OAIBlueOceanApiRequest::getPipelineRunNodesRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes";
    connect(this, &OAIBlueOceanApiRequest::getPipelineRunNodes, handler.data(), &OAIBlueOceanApiHandler::getPipelineRunNodes);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
    

    Q_EMIT getPipelineRunNodes(organization, pipeline, run);
}


void OAIBlueOceanApiRequest::getPipelineRunsRequest(const QString& organizationstr, const QString& pipelinestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs";
    connect(this, &OAIBlueOceanApiRequest::getPipelineRuns, handler.data(), &OAIBlueOceanApiHandler::getPipelineRuns);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
    

    Q_EMIT getPipelineRuns(organization, pipeline);
}


void OAIBlueOceanApiRequest::getPipelinesRequest(const QString& organizationstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/";
    connect(this, &OAIBlueOceanApiRequest::getPipelines, handler.data(), &OAIBlueOceanApiHandler::getPipelines);

    
    QString organization;
    fromStringValue(organizationstr, organization);
    

    Q_EMIT getPipelines(organization);
}


void OAIBlueOceanApiRequest::getSCMRequest(const QString& organizationstr, const QString& scmstr){
    qDebug() << "/blue/rest/organizations/{organization}/scm/{scm}";
    connect(this, &OAIBlueOceanApiRequest::getSCM, handler.data(), &OAIBlueOceanApiHandler::getSCM);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString scm;
    fromStringValue(scmstr, scm);
    

    Q_EMIT getSCM(organization, scm);
}


void OAIBlueOceanApiRequest::getSCMOrganisationRepositoriesRequest(const QString& organizationstr, const QString& scmstr, const QString& scm_organisationstr){
    qDebug() << "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories";
    connect(this, &OAIBlueOceanApiRequest::getSCMOrganisationRepositories, handler.data(), &OAIBlueOceanApiHandler::getSCMOrganisationRepositories);

    
    QString credential_id;
    if(socket->queryString().keys().contains("credential_id")){
        fromStringValue(socket->queryString().value("credential_id"), credential_id);
    }
    
    qint32 page_size;
    if(socket->queryString().keys().contains("page_size")){
        fromStringValue(socket->queryString().value("page_size"), page_size);
    }
    
    qint32 page_number;
    if(socket->queryString().keys().contains("page_number")){
        fromStringValue(socket->queryString().value("page_number"), page_number);
    }
    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString scm;
    fromStringValue(scmstr, scm);
        QString scm_organisation;
    fromStringValue(scm_organisationstr, scm_organisation);
    

    Q_EMIT getSCMOrganisationRepositories(organization, scm, scm_organisation, credential_id, page_size, page_number);
}


void OAIBlueOceanApiRequest::getSCMOrganisationRepositoryRequest(const QString& organizationstr, const QString& scmstr, const QString& scm_organisationstr, const QString& repositorystr){
    qDebug() << "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}";
    connect(this, &OAIBlueOceanApiRequest::getSCMOrganisationRepository, handler.data(), &OAIBlueOceanApiHandler::getSCMOrganisationRepository);

    
    QString credential_id;
    if(socket->queryString().keys().contains("credential_id")){
        fromStringValue(socket->queryString().value("credential_id"), credential_id);
    }
    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString scm;
    fromStringValue(scmstr, scm);
        QString scm_organisation;
    fromStringValue(scm_organisationstr, scm_organisation);
        QString repository;
    fromStringValue(repositorystr, repository);
    

    Q_EMIT getSCMOrganisationRepository(organization, scm, scm_organisation, repository, credential_id);
}


void OAIBlueOceanApiRequest::getSCMOrganisationsRequest(const QString& organizationstr, const QString& scmstr){
    qDebug() << "/blue/rest/organizations/{organization}/scm/{scm}/organizations";
    connect(this, &OAIBlueOceanApiRequest::getSCMOrganisations, handler.data(), &OAIBlueOceanApiHandler::getSCMOrganisations);

    
    QString credential_id;
    if(socket->queryString().keys().contains("credential_id")){
        fromStringValue(socket->queryString().value("credential_id"), credential_id);
    }
    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString scm;
    fromStringValue(scmstr, scm);
    

    Q_EMIT getSCMOrganisations(organization, scm, credential_id);
}


void OAIBlueOceanApiRequest::getUserRequest(const QString& organizationstr, const QString& userstr){
    qDebug() << "/blue/rest/organizations/{organization}/users/{user}";
    connect(this, &OAIBlueOceanApiRequest::getUser, handler.data(), &OAIBlueOceanApiHandler::getUser);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString user;
    fromStringValue(userstr, user);
    

    Q_EMIT getUser(organization, user);
}


void OAIBlueOceanApiRequest::getUserFavoritesRequest(const QString& userstr){
    qDebug() << "/blue/rest/users/{user}/favorites";
    connect(this, &OAIBlueOceanApiRequest::getUserFavorites, handler.data(), &OAIBlueOceanApiHandler::getUserFavorites);

    
    QString user;
    fromStringValue(userstr, user);
    

    Q_EMIT getUserFavorites(user);
}


void OAIBlueOceanApiRequest::getUsersRequest(const QString& organizationstr){
    qDebug() << "/blue/rest/organizations/{organization}/users/";
    connect(this, &OAIBlueOceanApiRequest::getUsers, handler.data(), &OAIBlueOceanApiHandler::getUsers);

    
    QString organization;
    fromStringValue(organizationstr, organization);
    

    Q_EMIT getUsers(organization);
}


void OAIBlueOceanApiRequest::postPipelineRunRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay";
    connect(this, &OAIBlueOceanApiRequest::postPipelineRun, handler.data(), &OAIBlueOceanApiHandler::postPipelineRun);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
    

    Q_EMIT postPipelineRun(organization, pipeline, run);
}


void OAIBlueOceanApiRequest::postPipelineRunsRequest(const QString& organizationstr, const QString& pipelinestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs";
    connect(this, &OAIBlueOceanApiRequest::postPipelineRuns, handler.data(), &OAIBlueOceanApiHandler::postPipelineRuns);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
    

    Q_EMIT postPipelineRuns(organization, pipeline);
}


void OAIBlueOceanApiRequest::putPipelineFavoriteRequest(const QString& organizationstr, const QString& pipelinestr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite";
    connect(this, &OAIBlueOceanApiRequest::putPipelineFavorite, handler.data(), &OAIBlueOceanApiHandler::putPipelineFavorite);

    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
     
    
    bool body;
    ::OpenAPI::fromStringValue(QString(socket->readAll()), body);
    
    

    Q_EMIT putPipelineFavorite(organization, pipeline, body);
}


void OAIBlueOceanApiRequest::putPipelineRunRequest(const QString& organizationstr, const QString& pipelinestr, const QString& runstr){
    qDebug() << "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop";
    connect(this, &OAIBlueOceanApiRequest::putPipelineRun, handler.data(), &OAIBlueOceanApiHandler::putPipelineRun);

    
    QString blocking;
    if(socket->queryString().keys().contains("blocking")){
        fromStringValue(socket->queryString().value("blocking"), blocking);
    }
    
    qint32 time_out_in_secs;
    if(socket->queryString().keys().contains("time_out_in_secs")){
        fromStringValue(socket->queryString().value("time_out_in_secs"), time_out_in_secs);
    }
    
    QString organization;
    fromStringValue(organizationstr, organization);
        QString pipeline;
    fromStringValue(pipelinestr, pipeline);
        QString run;
    fromStringValue(runstr, run);
    

    Q_EMIT putPipelineRun(organization, pipeline, run, blocking, time_out_in_secs);
}


void OAIBlueOceanApiRequest::searchRequest(){
    qDebug() << "/blue/rest/search/";
    connect(this, &OAIBlueOceanApiRequest::search, handler.data(), &OAIBlueOceanApiHandler::search);

    
    QString q;
    if(socket->queryString().keys().contains("q")){
        fromStringValue(socket->queryString().value("q"), q);
    }
    


    Q_EMIT search(q);
}


void OAIBlueOceanApiRequest::searchClassesRequest(){
    qDebug() << "/blue/rest/classes/";
    connect(this, &OAIBlueOceanApiRequest::searchClasses, handler.data(), &OAIBlueOceanApiHandler::searchClasses);

    
    QString q;
    if(socket->queryString().keys().contains("q")){
        fromStringValue(socket->queryString().value("q"), q);
    }
    


    Q_EMIT searchClasses(q);
}



void OAIBlueOceanApiRequest::deletePipelineQueueItemResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getAuthenticatedUserResponse(const OAIUser& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getClassesResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getJsonWebKeyResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getJsonWebTokenResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getOrganisationResponse(const OAIOrganisation& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getOrganisationsResponse(const QList<OAIOrganisation>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineResponse(const OAIPipeline& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineActivitiesResponse(const QList<OAIPipelineActivity>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineBranchResponse(const OAIBranchImpl& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineBranchRunResponse(const OAIPipelineRun& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineBranchesResponse(const OAIMultibranchPipeline& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineFolderResponse(const OAIPipelineFolderImpl& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineFolderPipelineResponse(const OAIPipelineImpl& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineQueueResponse(const QList<OAIQueueItemImpl>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunResponse(const OAIPipelineRun& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunLogResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodeResponse(const OAIPipelineRunNode& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodeStepResponse(const OAIPipelineStepImpl& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodeStepLogResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodeStepsResponse(const QList<OAIPipelineStepImpl>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodesResponse(const QList<OAIPipelineRunNode>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunsResponse(const QList<OAIPipelineRun>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelinesResponse(const QList<OAIPipeline>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getSCMResponse(const OAIGithubScm& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getSCMOrganisationRepositoriesResponse(const QList<OAIGithubOrganization>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getSCMOrganisationRepositoryResponse(const QList<OAIGithubOrganization>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getSCMOrganisationsResponse(const QList<OAIGithubOrganization>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getUserResponse(const OAIUser& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getUserFavoritesResponse(const QList<OAIFavoriteImpl>& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getUsersResponse(const OAIUser& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::postPipelineRunResponse(const OAIQueueItemImpl& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::postPipelineRunsResponse(const OAIQueueItemImpl& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::putPipelineFavoriteResponse(const OAIFavoriteImpl& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::putPipelineRunResponse(const OAIPipelineRun& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::searchResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::searchClassesResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBlueOceanApiRequest::deletePipelineQueueItemError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getAuthenticatedUserError(const OAIUser& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getClassesError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getJsonWebKeyError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getJsonWebTokenError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getOrganisationError(const OAIOrganisation& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getOrganisationsError(const QList<OAIOrganisation>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineError(const OAIPipeline& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineActivitiesError(const QList<OAIPipelineActivity>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineBranchError(const OAIBranchImpl& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineBranchRunError(const OAIPipelineRun& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineBranchesError(const OAIMultibranchPipeline& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineFolderError(const OAIPipelineFolderImpl& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineFolderPipelineError(const OAIPipelineImpl& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineQueueError(const QList<OAIQueueItemImpl>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunError(const OAIPipelineRun& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunLogError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodeError(const OAIPipelineRunNode& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodeStepError(const OAIPipelineStepImpl& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodeStepLogError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodeStepsError(const QList<OAIPipelineStepImpl>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunNodesError(const QList<OAIPipelineRunNode>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelineRunsError(const QList<OAIPipelineRun>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getPipelinesError(const QList<OAIPipeline>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getSCMError(const OAIGithubScm& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getSCMOrganisationRepositoriesError(const QList<OAIGithubOrganization>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getSCMOrganisationRepositoryError(const QList<OAIGithubOrganization>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getSCMOrganisationsError(const QList<OAIGithubOrganization>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getUserError(const OAIUser& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getUserFavoritesError(const QList<OAIFavoriteImpl>& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toArray());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::getUsersError(const OAIUser& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::postPipelineRunError(const OAIQueueItemImpl& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::postPipelineRunsError(const OAIQueueItemImpl& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::putPipelineFavoriteError(const OAIFavoriteImpl& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::putPipelineRunError(const OAIPipelineRun& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::searchError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::searchClassesError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIBlueOceanApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIBlueOceanApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
