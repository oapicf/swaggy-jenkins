/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include <QJsonArray>
#include <QJsonDocument>
#include <QJsonObject>
#include <QVariantMap>
#include <QDebug>

#include "OAIHelpers.h"
#include "OAIRemoteAccessApiRequest.h"

namespace OpenAPI {

OAIRemoteAccessApiRequest::OAIRemoteAccessApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIRemoteAccessApiHandler> hdl) : QObject(s), socket(s), handler(hdl) {
    auto headers = s->headers();
    for(auto itr = headers.begin(); itr != headers.end(); itr++) {
        requestHeaders.insert(QString(itr.key()), QString(itr.value()));
    }
}

OAIRemoteAccessApiRequest::~OAIRemoteAccessApiRequest(){
    disconnect(this, nullptr, nullptr, nullptr);
    qDebug() << "OAIRemoteAccessApiRequest::~OAIRemoteAccessApiRequest()";
}

QMap<QString, QString>
OAIRemoteAccessApiRequest::getRequestHeaders() const {
    return requestHeaders;
}

void OAIRemoteAccessApiRequest::setResponseHeaders(const QMultiMap<QString, QString>& headers){
    for(auto itr = headers.begin(); itr != headers.end(); ++itr) {
        responseHeaders.insert(itr.key(), itr.value());
    }
}


QHttpEngine::Socket* OAIRemoteAccessApiRequest::getRawSocket(){
    return socket;
}


void OAIRemoteAccessApiRequest::getComputerRequest(){
    qDebug() << "/computer/api/json";
    connect(this, &OAIRemoteAccessApiRequest::getComputer, handler.data(), &OAIRemoteAccessApiHandler::getComputer);

    
    qint32 depth;
    if(socket->queryString().keys().contains("depth")){
        fromStringValue(socket->queryString().value("depth"), depth);
    }
    


    Q_EMIT getComputer(depth);
}


void OAIRemoteAccessApiRequest::getJenkinsRequest(){
    qDebug() << "/api/json";
    connect(this, &OAIRemoteAccessApiRequest::getJenkins, handler.data(), &OAIRemoteAccessApiHandler::getJenkins);

    


    Q_EMIT getJenkins();
}


void OAIRemoteAccessApiRequest::getJobRequest(const QString& namestr){
    qDebug() << "/job/{name}/api/json";
    connect(this, &OAIRemoteAccessApiRequest::getJob, handler.data(), &OAIRemoteAccessApiHandler::getJob);

    
    QString name;
    fromStringValue(namestr, name);
    

    Q_EMIT getJob(name);
}


void OAIRemoteAccessApiRequest::getJobConfigRequest(const QString& namestr){
    qDebug() << "/job/{name}/config.xml";
    connect(this, &OAIRemoteAccessApiRequest::getJobConfig, handler.data(), &OAIRemoteAccessApiHandler::getJobConfig);

    
    QString name;
    fromStringValue(namestr, name);
    

    Q_EMIT getJobConfig(name);
}


void OAIRemoteAccessApiRequest::getJobLastBuildRequest(const QString& namestr){
    qDebug() << "/job/{name}/lastBuild/api/json";
    connect(this, &OAIRemoteAccessApiRequest::getJobLastBuild, handler.data(), &OAIRemoteAccessApiHandler::getJobLastBuild);

    
    QString name;
    fromStringValue(namestr, name);
    

    Q_EMIT getJobLastBuild(name);
}


void OAIRemoteAccessApiRequest::getJobProgressiveTextRequest(const QString& namestr, const QString& numberstr){
    qDebug() << "/job/{name}/{number}/logText/progressiveText";
    connect(this, &OAIRemoteAccessApiRequest::getJobProgressiveText, handler.data(), &OAIRemoteAccessApiHandler::getJobProgressiveText);

    
    QString start;
    if(socket->queryString().keys().contains("start")){
        fromStringValue(socket->queryString().value("start"), start);
    }
    
    QString name;
    fromStringValue(namestr, name);
        QString number;
    fromStringValue(numberstr, number);
    

    Q_EMIT getJobProgressiveText(name, number, start);
}


void OAIRemoteAccessApiRequest::getQueueRequest(){
    qDebug() << "/queue/api/json";
    connect(this, &OAIRemoteAccessApiRequest::getQueue, handler.data(), &OAIRemoteAccessApiHandler::getQueue);

    


    Q_EMIT getQueue();
}


void OAIRemoteAccessApiRequest::getQueueItemRequest(const QString& numberstr){
    qDebug() << "/queue/item/{number}/api/json";
    connect(this, &OAIRemoteAccessApiRequest::getQueueItem, handler.data(), &OAIRemoteAccessApiHandler::getQueueItem);

    
    QString number;
    fromStringValue(numberstr, number);
    

    Q_EMIT getQueueItem(number);
}


void OAIRemoteAccessApiRequest::getViewRequest(const QString& namestr){
    qDebug() << "/view/{name}/api/json";
    connect(this, &OAIRemoteAccessApiRequest::getView, handler.data(), &OAIRemoteAccessApiHandler::getView);

    
    QString name;
    fromStringValue(namestr, name);
    

    Q_EMIT getView(name);
}


void OAIRemoteAccessApiRequest::getViewConfigRequest(const QString& namestr){
    qDebug() << "/view/{name}/config.xml";
    connect(this, &OAIRemoteAccessApiRequest::getViewConfig, handler.data(), &OAIRemoteAccessApiHandler::getViewConfig);

    
    QString name;
    fromStringValue(namestr, name);
    

    Q_EMIT getViewConfig(name);
}


void OAIRemoteAccessApiRequest::headJenkinsRequest(){
    qDebug() << "/api/json";
    connect(this, &OAIRemoteAccessApiRequest::headJenkins, handler.data(), &OAIRemoteAccessApiHandler::headJenkins);

    


    Q_EMIT headJenkins();
}


void OAIRemoteAccessApiRequest::postCreateItemRequest(){
    qDebug() << "/createItem";
    connect(this, &OAIRemoteAccessApiRequest::postCreateItem, handler.data(), &OAIRemoteAccessApiHandler::postCreateItem);

    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    
    QString from;
    if(socket->queryString().keys().contains("from")){
        fromStringValue(socket->queryString().value("from"), from);
    }
    
    QString mode;
    if(socket->queryString().keys().contains("mode")){
        fromStringValue(socket->queryString().value("mode"), mode);
    }
    

    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
    
    QString content_type;
    if(socket->headers().keys().contains("content_type")){
        fromStringValue(socket->queryString().value("content_type"), content_type);
    }
     
    
    QString body;
    ::OpenAPI::fromStringValue(QString(socket->readAll()), body);
    
    

    Q_EMIT postCreateItem(name, from, mode, jenkins_crumb, content_type, body);
}


void OAIRemoteAccessApiRequest::postCreateViewRequest(){
    qDebug() << "/createView";
    connect(this, &OAIRemoteAccessApiRequest::postCreateView, handler.data(), &OAIRemoteAccessApiHandler::postCreateView);

    
    QString name;
    if(socket->queryString().keys().contains("name")){
        fromStringValue(socket->queryString().value("name"), name);
    }
    

    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
    
    QString content_type;
    if(socket->headers().keys().contains("content_type")){
        fromStringValue(socket->queryString().value("content_type"), content_type);
    }
     
    
    QString body;
    ::OpenAPI::fromStringValue(QString(socket->readAll()), body);
    
    

    Q_EMIT postCreateView(name, jenkins_crumb, content_type, body);
}


void OAIRemoteAccessApiRequest::postJobBuildRequest(const QString& namestr){
    qDebug() << "/job/{name}/build";
    connect(this, &OAIRemoteAccessApiRequest::postJobBuild, handler.data(), &OAIRemoteAccessApiHandler::postJobBuild);

    
    QString json;
    if(socket->queryString().keys().contains("json")){
        fromStringValue(socket->queryString().value("json"), json);
    }
    
    QString token;
    if(socket->queryString().keys().contains("token")){
        fromStringValue(socket->queryString().value("token"), token);
    }
    
    QString name;
    fromStringValue(namestr, name);
    
    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
    

    Q_EMIT postJobBuild(name, json, token, jenkins_crumb);
}


void OAIRemoteAccessApiRequest::postJobConfigRequest(const QString& namestr){
    qDebug() << "/job/{name}/config.xml";
    connect(this, &OAIRemoteAccessApiRequest::postJobConfig, handler.data(), &OAIRemoteAccessApiHandler::postJobConfig);

    
    QString name;
    fromStringValue(namestr, name);
    
    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
     
    
    QString body;
    ::OpenAPI::fromStringValue(QString(socket->readAll()), body);
    
    

    Q_EMIT postJobConfig(name, body, jenkins_crumb);
}


void OAIRemoteAccessApiRequest::postJobDeleteRequest(const QString& namestr){
    qDebug() << "/job/{name}/doDelete";
    connect(this, &OAIRemoteAccessApiRequest::postJobDelete, handler.data(), &OAIRemoteAccessApiHandler::postJobDelete);

    
    QString name;
    fromStringValue(namestr, name);
    
    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
    

    Q_EMIT postJobDelete(name, jenkins_crumb);
}


void OAIRemoteAccessApiRequest::postJobDisableRequest(const QString& namestr){
    qDebug() << "/job/{name}/disable";
    connect(this, &OAIRemoteAccessApiRequest::postJobDisable, handler.data(), &OAIRemoteAccessApiHandler::postJobDisable);

    
    QString name;
    fromStringValue(namestr, name);
    
    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
    

    Q_EMIT postJobDisable(name, jenkins_crumb);
}


void OAIRemoteAccessApiRequest::postJobEnableRequest(const QString& namestr){
    qDebug() << "/job/{name}/enable";
    connect(this, &OAIRemoteAccessApiRequest::postJobEnable, handler.data(), &OAIRemoteAccessApiHandler::postJobEnable);

    
    QString name;
    fromStringValue(namestr, name);
    
    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
    

    Q_EMIT postJobEnable(name, jenkins_crumb);
}


void OAIRemoteAccessApiRequest::postJobLastBuildStopRequest(const QString& namestr){
    qDebug() << "/job/{name}/lastBuild/stop";
    connect(this, &OAIRemoteAccessApiRequest::postJobLastBuildStop, handler.data(), &OAIRemoteAccessApiHandler::postJobLastBuildStop);

    
    QString name;
    fromStringValue(namestr, name);
    
    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
    

    Q_EMIT postJobLastBuildStop(name, jenkins_crumb);
}


void OAIRemoteAccessApiRequest::postViewConfigRequest(const QString& namestr){
    qDebug() << "/view/{name}/config.xml";
    connect(this, &OAIRemoteAccessApiRequest::postViewConfig, handler.data(), &OAIRemoteAccessApiHandler::postViewConfig);

    
    QString name;
    fromStringValue(namestr, name);
    
    QString jenkins_crumb;
    if(socket->headers().keys().contains("jenkins_crumb")){
        fromStringValue(socket->queryString().value("jenkins_crumb"), jenkins_crumb);
    }
     
    
    QString body;
    ::OpenAPI::fromStringValue(QString(socket->readAll()), body);
    
    

    Q_EMIT postViewConfig(name, body, jenkins_crumb);
}



void OAIRemoteAccessApiRequest::getComputerResponse(const OAIComputerSet& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJenkinsResponse(const OAIHudson& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJobResponse(const OAIFreeStyleProject& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJobConfigResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJobLastBuildResponse(const OAIFreeStyleBuild& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJobProgressiveTextResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getQueueResponse(const OAIQueue& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getQueueItemResponse(const OAIQueue& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getViewResponse(const OAIListView& res){
    setSocketResponseHeaders();
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getViewConfigResponse(const QString& res){
    setSocketResponseHeaders();
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::headJenkinsResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postCreateItemResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postCreateViewResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobBuildResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobConfigResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobDeleteResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobDisableResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobEnableResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobLastBuildStopResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postViewConfigResponse(){
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::OK);
    socket->writeHeaders();
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIRemoteAccessApiRequest::getComputerError(const OAIComputerSet& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJenkinsError(const OAIHudson& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJobError(const OAIFreeStyleProject& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJobConfigError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJobLastBuildError(const OAIFreeStyleBuild& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getJobProgressiveTextError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getQueueError(const OAIQueue& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getQueueItemError(const OAIQueue& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getViewError(const OAIListView& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    QJsonDocument resDoc(::OpenAPI::toJsonValue(res).toObject());
    socket->writeJson(resDoc);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::getViewConfigError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    Q_UNUSED(error_str);  // response will be used instead of error string
    socket->write(::OpenAPI::toStringValue(res).toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::headJenkinsError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postCreateItemError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postCreateViewError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobBuildError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobConfigError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobDeleteError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobDisableError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobEnableError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postJobLastBuildStopError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::postViewConfigError(QNetworkReply::NetworkError error_type, QString& error_str){
    Q_UNUSED(error_type); // TODO: Remap error_type to QHttpEngine::Socket errors
    setSocketResponseHeaders();
    socket->setStatusCode(QHttpEngine::Socket::NotFound);
    socket->write(error_str.toUtf8());
    if(socket->isOpen()){
        socket->close();
    }
}


void OAIRemoteAccessApiRequest::sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type); // TODO
    socket->write(res);
    if(socket->isOpen()){
        socket->close();
    }
}

void OAIRemoteAccessApiRequest::sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type){
    Q_UNUSED(error_type);  // TODO
    socket->write(res->readAll());
    if(socket->isOpen()){
        socket->close();
    }
}

}
