/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBlueOceanApiRequest_H
#define OAI_OAIBlueOceanApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIBranchImpl.h"
#include "OAIFavoriteImpl.h"
#include "OAIGithubOrganization.h"
#include "OAIGithubScm.h"
#include "OAIMultibranchPipeline.h"
#include "OAIOrganisation.h"
#include "OAIPipeline.h"
#include "OAIPipelineActivity.h"
#include "OAIPipelineFolderImpl.h"
#include "OAIPipelineImpl.h"
#include "OAIPipelineRun.h"
#include "OAIPipelineRunNode.h"
#include "OAIPipelineStepImpl.h"
#include "OAIQueueItemImpl.h"
#include "OAIUser.h"
#include <QList>
#include <QString>
#include "OAIBlueOceanApiHandler.h"

namespace OpenAPI {

class OAIBlueOceanApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIBlueOceanApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIBlueOceanApiHandler> handler);
    virtual ~OAIBlueOceanApiRequest();

    void deletePipelineQueueItemRequest(const QString& organization, const QString& pipeline, const QString& queue);
    void getAuthenticatedUserRequest(const QString& organization);
    void getClassesRequest(const QString& r_class);
    void getJsonWebKeyRequest(const QString& key);
    void getJsonWebTokenRequest();
    void getOrganisationRequest(const QString& organization);
    void getOrganisationsRequest();
    void getPipelineRequest(const QString& organization, const QString& pipeline);
    void getPipelineActivitiesRequest(const QString& organization, const QString& pipeline);
    void getPipelineBranchRequest(const QString& organization, const QString& pipeline, const QString& branch);
    void getPipelineBranchRunRequest(const QString& organization, const QString& pipeline, const QString& branch, const QString& run);
    void getPipelineBranchesRequest(const QString& organization, const QString& pipeline);
    void getPipelineFolderRequest(const QString& organization, const QString& folder);
    void getPipelineFolderPipelineRequest(const QString& organization, const QString& pipeline, const QString& folder);
    void getPipelineQueueRequest(const QString& organization, const QString& pipeline);
    void getPipelineRunRequest(const QString& organization, const QString& pipeline, const QString& run);
    void getPipelineRunLogRequest(const QString& organization, const QString& pipeline, const QString& run);
    void getPipelineRunNodeRequest(const QString& organization, const QString& pipeline, const QString& run, const QString& node);
    void getPipelineRunNodeStepRequest(const QString& organization, const QString& pipeline, const QString& run, const QString& node, const QString& step);
    void getPipelineRunNodeStepLogRequest(const QString& organization, const QString& pipeline, const QString& run, const QString& node, const QString& step);
    void getPipelineRunNodeStepsRequest(const QString& organization, const QString& pipeline, const QString& run, const QString& node);
    void getPipelineRunNodesRequest(const QString& organization, const QString& pipeline, const QString& run);
    void getPipelineRunsRequest(const QString& organization, const QString& pipeline);
    void getPipelinesRequest(const QString& organization);
    void getSCMRequest(const QString& organization, const QString& scm);
    void getSCMOrganisationRepositoriesRequest(const QString& organization, const QString& scm, const QString& scm_organisation);
    void getSCMOrganisationRepositoryRequest(const QString& organization, const QString& scm, const QString& scm_organisation, const QString& repository);
    void getSCMOrganisationsRequest(const QString& organization, const QString& scm);
    void getUserRequest(const QString& organization, const QString& user);
    void getUserFavoritesRequest(const QString& user);
    void getUsersRequest(const QString& organization);
    void postPipelineRunRequest(const QString& organization, const QString& pipeline, const QString& run);
    void postPipelineRunsRequest(const QString& organization, const QString& pipeline);
    void putPipelineFavoriteRequest(const QString& organization, const QString& pipeline);
    void putPipelineRunRequest(const QString& organization, const QString& pipeline, const QString& run);
    void searchRequest();
    void searchClassesRequest();
    

    void deletePipelineQueueItemResponse();
    void getAuthenticatedUserResponse(const OAIUser& res);
    void getClassesResponse(const QString& res);
    void getJsonWebKeyResponse(const QString& res);
    void getJsonWebTokenResponse(const QString& res);
    void getOrganisationResponse(const OAIOrganisation& res);
    void getOrganisationsResponse(const QList<OAIOrganisation>& res);
    void getPipelineResponse(const OAIPipeline& res);
    void getPipelineActivitiesResponse(const QList<OAIPipelineActivity>& res);
    void getPipelineBranchResponse(const OAIBranchImpl& res);
    void getPipelineBranchRunResponse(const OAIPipelineRun& res);
    void getPipelineBranchesResponse(const OAIMultibranchPipeline& res);
    void getPipelineFolderResponse(const OAIPipelineFolderImpl& res);
    void getPipelineFolderPipelineResponse(const OAIPipelineImpl& res);
    void getPipelineQueueResponse(const QList<OAIQueueItemImpl>& res);
    void getPipelineRunResponse(const OAIPipelineRun& res);
    void getPipelineRunLogResponse(const QString& res);
    void getPipelineRunNodeResponse(const OAIPipelineRunNode& res);
    void getPipelineRunNodeStepResponse(const OAIPipelineStepImpl& res);
    void getPipelineRunNodeStepLogResponse(const QString& res);
    void getPipelineRunNodeStepsResponse(const QList<OAIPipelineStepImpl>& res);
    void getPipelineRunNodesResponse(const QList<OAIPipelineRunNode>& res);
    void getPipelineRunsResponse(const QList<OAIPipelineRun>& res);
    void getPipelinesResponse(const QList<OAIPipeline>& res);
    void getSCMResponse(const OAIGithubScm& res);
    void getSCMOrganisationRepositoriesResponse(const QList<OAIGithubOrganization>& res);
    void getSCMOrganisationRepositoryResponse(const QList<OAIGithubOrganization>& res);
    void getSCMOrganisationsResponse(const QList<OAIGithubOrganization>& res);
    void getUserResponse(const OAIUser& res);
    void getUserFavoritesResponse(const QList<OAIFavoriteImpl>& res);
    void getUsersResponse(const OAIUser& res);
    void postPipelineRunResponse(const OAIQueueItemImpl& res);
    void postPipelineRunsResponse(const OAIQueueItemImpl& res);
    void putPipelineFavoriteResponse(const OAIFavoriteImpl& res);
    void putPipelineRunResponse(const OAIPipelineRun& res);
    void searchResponse(const QString& res);
    void searchClassesResponse(const QString& res);
    

    void deletePipelineQueueItemError(QNetworkReply::NetworkError error_type, QString& error_str);
    void getAuthenticatedUserError(const OAIUser& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getClassesError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJsonWebKeyError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJsonWebTokenError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrganisationError(const OAIOrganisation& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrganisationsError(const QList<OAIOrganisation>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineError(const OAIPipeline& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineActivitiesError(const QList<OAIPipelineActivity>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchError(const OAIBranchImpl& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchRunError(const OAIPipelineRun& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchesError(const OAIMultibranchPipeline& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineFolderError(const OAIPipelineFolderImpl& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineFolderPipelineError(const OAIPipelineImpl& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineQueueError(const QList<OAIQueueItemImpl>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunError(const OAIPipelineRun& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunLogError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeError(const OAIPipelineRunNode& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepError(const OAIPipelineStepImpl& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepLogError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodeStepsError(const QList<OAIPipelineStepImpl>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunNodesError(const QList<OAIPipelineRunNode>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineRunsError(const QList<OAIPipelineRun>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelinesError(const QList<OAIPipeline>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMError(const OAIGithubScm& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationRepositoriesError(const QList<OAIGithubOrganization>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationRepositoryError(const QList<OAIGithubOrganization>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getSCMOrganisationsError(const QList<OAIGithubOrganization>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserError(const OAIUser& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserFavoritesError(const QList<OAIFavoriteImpl>& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUsersError(const OAIUser& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPipelineRunError(const OAIQueueItemImpl& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void postPipelineRunsError(const OAIQueueItemImpl& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void putPipelineFavoriteError(const OAIFavoriteImpl& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void putPipelineRunError(const OAIPipelineRun& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchClassesError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void deletePipelineQueueItem(QString organization, QString pipeline, QString queue);
    void getAuthenticatedUser(QString organization);
    void getClasses(QString r_class);
    void getJsonWebKey(qint32 key);
    void getJsonWebToken(qint32 expiry_time_in_mins, qint32 max_expiry_time_in_mins);
    void getOrganisation(QString organization);
    void getOrganisations();
    void getPipeline(QString organization, QString pipeline);
    void getPipelineActivities(QString organization, QString pipeline);
    void getPipelineBranch(QString organization, QString pipeline, QString branch);
    void getPipelineBranchRun(QString organization, QString pipeline, QString branch, QString run);
    void getPipelineBranches(QString organization, QString pipeline);
    void getPipelineFolder(QString organization, QString folder);
    void getPipelineFolderPipeline(QString organization, QString pipeline, QString folder);
    void getPipelineQueue(QString organization, QString pipeline);
    void getPipelineRun(QString organization, QString pipeline, QString run);
    void getPipelineRunLog(QString organization, QString pipeline, QString run, qint32 start, bool download);
    void getPipelineRunNode(QString organization, QString pipeline, QString run, QString node);
    void getPipelineRunNodeStep(QString organization, QString pipeline, QString run, QString node, QString step);
    void getPipelineRunNodeStepLog(QString organization, QString pipeline, QString run, QString node, QString step);
    void getPipelineRunNodeSteps(QString organization, QString pipeline, QString run, QString node);
    void getPipelineRunNodes(QString organization, QString pipeline, QString run);
    void getPipelineRuns(QString organization, QString pipeline);
    void getPipelines(QString organization);
    void getSCM(QString organization, QString scm);
    void getSCMOrganisationRepositories(QString organization, QString scm, QString scm_organisation, QString credential_id, qint32 page_size, qint32 page_number);
    void getSCMOrganisationRepository(QString organization, QString scm, QString scm_organisation, QString repository, QString credential_id);
    void getSCMOrganisations(QString organization, QString scm, QString credential_id);
    void getUser(QString organization, QString user);
    void getUserFavorites(QString user);
    void getUsers(QString organization);
    void postPipelineRun(QString organization, QString pipeline, QString run);
    void postPipelineRuns(QString organization, QString pipeline);
    void putPipelineFavorite(QString organization, QString pipeline, bool body);
    void putPipelineRun(QString organization, QString pipeline, QString run, QString blocking, qint32 time_out_in_secs);
    void search(QString q);
    void searchClasses(QString q);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIBlueOceanApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIBlueOceanApiRequest_H
