/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRemoteAccessApiRequest_H
#define OAI_OAIRemoteAccessApiRequest_H

#include <QObject>
#include <QStringList>
#include <QMultiMap>
#include <QNetworkReply>
#include <QSharedPointer>

#include <qhttpengine/socket.h>
#include "OAIComputerSet.h"
#include "OAIFreeStyleBuild.h"
#include "OAIFreeStyleProject.h"
#include "OAIHudson.h"
#include "OAIListView.h"
#include "OAIQueue.h"
#include <QString>
#include "OAIRemoteAccessApiHandler.h"

namespace OpenAPI {

class OAIRemoteAccessApiRequest : public QObject
{
    Q_OBJECT

public:
    OAIRemoteAccessApiRequest(QHttpEngine::Socket *s, QSharedPointer<OAIRemoteAccessApiHandler> handler);
    virtual ~OAIRemoteAccessApiRequest();

    void getComputerRequest();
    void getJenkinsRequest();
    void getJobRequest(const QString& name);
    void getJobConfigRequest(const QString& name);
    void getJobLastBuildRequest(const QString& name);
    void getJobProgressiveTextRequest(const QString& name, const QString& number);
    void getQueueRequest();
    void getQueueItemRequest(const QString& number);
    void getViewRequest(const QString& name);
    void getViewConfigRequest(const QString& name);
    void headJenkinsRequest();
    void postCreateItemRequest();
    void postCreateViewRequest();
    void postJobBuildRequest(const QString& name);
    void postJobConfigRequest(const QString& name);
    void postJobDeleteRequest(const QString& name);
    void postJobDisableRequest(const QString& name);
    void postJobEnableRequest(const QString& name);
    void postJobLastBuildStopRequest(const QString& name);
    void postViewConfigRequest(const QString& name);
    

    void getComputerResponse(const OAIComputerSet& res);
    void getJenkinsResponse(const OAIHudson& res);
    void getJobResponse(const OAIFreeStyleProject& res);
    void getJobConfigResponse(const QString& res);
    void getJobLastBuildResponse(const OAIFreeStyleBuild& res);
    void getJobProgressiveTextResponse();
    void getQueueResponse(const OAIQueue& res);
    void getQueueItemResponse(const OAIQueue& res);
    void getViewResponse(const OAIListView& res);
    void getViewConfigResponse(const QString& res);
    void headJenkinsResponse();
    void postCreateItemResponse();
    void postCreateViewResponse();
    void postJobBuildResponse();
    void postJobConfigResponse();
    void postJobDeleteResponse();
    void postJobDisableResponse();
    void postJobEnableResponse();
    void postJobLastBuildStopResponse();
    void postViewConfigResponse();
    

    void getComputerError(const OAIComputerSet& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJenkinsError(const OAIHudson& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobError(const OAIFreeStyleProject& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobConfigError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobLastBuildError(const OAIFreeStyleBuild& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getJobProgressiveTextError(QNetworkReply::NetworkError error_type, QString& error_str);
    void getQueueError(const OAIQueue& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getQueueItemError(const OAIQueue& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getViewError(const OAIListView& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void getViewConfigError(const QString& res, QNetworkReply::NetworkError error_type, QString& error_str);
    void headJenkinsError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postCreateItemError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postCreateViewError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobBuildError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobConfigError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobDeleteError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobDisableError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobEnableError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postJobLastBuildStopError(QNetworkReply::NetworkError error_type, QString& error_str);
    void postViewConfigError(QNetworkReply::NetworkError error_type, QString& error_str);
    

    void sendCustomResponse(QByteArray & res, QNetworkReply::NetworkError error_type);

    void sendCustomResponse(QIODevice *res, QNetworkReply::NetworkError error_type);

    QMap<QString, QString> getRequestHeaders() const;

    QHttpEngine::Socket* getRawSocket();

    void setResponseHeaders(const QMultiMap<QString,QString>& headers);

Q_SIGNALS:
    void getComputer(qint32 depth);
    void getJenkins();
    void getJob(QString name);
    void getJobConfig(QString name);
    void getJobLastBuild(QString name);
    void getJobProgressiveText(QString name, QString number, QString start);
    void getQueue();
    void getQueueItem(QString number);
    void getView(QString name);
    void getViewConfig(QString name);
    void headJenkins();
    void postCreateItem(QString name, QString from, QString mode, QString jenkins_crumb, QString content_type, QString body);
    void postCreateView(QString name, QString jenkins_crumb, QString content_type, QString body);
    void postJobBuild(QString name, QString json, QString token, QString jenkins_crumb);
    void postJobConfig(QString name, QString body, QString jenkins_crumb);
    void postJobDelete(QString name, QString jenkins_crumb);
    void postJobDisable(QString name, QString jenkins_crumb);
    void postJobEnable(QString name, QString jenkins_crumb);
    void postJobLastBuildStop(QString name, QString jenkins_crumb);
    void postViewConfig(QString name, QString body, QString jenkins_crumb);
    

private:
    QMap<QString, QString> requestHeaders;
    QMap<QString, QString> responseHeaders;
    QHttpEngine::Socket  *socket;
    QSharedPointer<OAIRemoteAccessApiHandler> handler;

    inline void setSocketResponseHeaders(){
        QHttpEngine::Socket::HeaderMap resHeaders;
        for(auto itr = responseHeaders.begin(); itr != responseHeaders.end(); ++itr) {
            resHeaders.insert(itr.key().toUtf8(), itr.value().toUtf8());
        }
        socket->setHeaders(resHeaders);
    }
};

}

#endif // OAI_OAIRemoteAccessApiRequest_H
