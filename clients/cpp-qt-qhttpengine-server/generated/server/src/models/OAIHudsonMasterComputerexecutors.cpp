/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHudsonMasterComputerexecutors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHudsonMasterComputerexecutors::OAIHudsonMasterComputerexecutors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHudsonMasterComputerexecutors::OAIHudsonMasterComputerexecutors() {
    this->initializeModel();
}

OAIHudsonMasterComputerexecutors::~OAIHudsonMasterComputerexecutors() {}

void OAIHudsonMasterComputerexecutors::initializeModel() {

    m_current_executable_isSet = false;
    m_current_executable_isValid = false;

    m_idle_isSet = false;
    m_idle_isValid = false;

    m_likely_stuck_isSet = false;
    m_likely_stuck_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m__class_isSet = false;
    m__class_isValid = false;
}

void OAIHudsonMasterComputerexecutors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHudsonMasterComputerexecutors::fromJsonObject(QJsonObject json) {

    m_current_executable_isValid = ::OpenAPI::fromJsonValue(current_executable, json[QString("currentExecutable")]);
    m_current_executable_isSet = !json[QString("currentExecutable")].isNull() && m_current_executable_isValid;

    m_idle_isValid = ::OpenAPI::fromJsonValue(idle, json[QString("idle")]);
    m_idle_isSet = !json[QString("idle")].isNull() && m_idle_isValid;

    m_likely_stuck_isValid = ::OpenAPI::fromJsonValue(likely_stuck, json[QString("likelyStuck")]);
    m_likely_stuck_isSet = !json[QString("likelyStuck")].isNull() && m_likely_stuck_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m__class_isValid = ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    m__class_isSet = !json[QString("_class")].isNull() && m__class_isValid;
}

QString OAIHudsonMasterComputerexecutors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHudsonMasterComputerexecutors::asJsonObject() const {
    QJsonObject obj;
    if (current_executable.isSet()) {
        obj.insert(QString("currentExecutable"), ::OpenAPI::toJsonValue(current_executable));
    }
    if (m_idle_isSet) {
        obj.insert(QString("idle"), ::OpenAPI::toJsonValue(idle));
    }
    if (m_likely_stuck_isSet) {
        obj.insert(QString("likelyStuck"), ::OpenAPI::toJsonValue(likely_stuck));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(number));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(progress));
    }
    if (m__class_isSet) {
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
    return obj;
}

OAIFreeStyleBuild OAIHudsonMasterComputerexecutors::getCurrentExecutable() const {
    return current_executable;
}
void OAIHudsonMasterComputerexecutors::setCurrentExecutable(const OAIFreeStyleBuild &current_executable) {
    this->current_executable = current_executable;
    this->m_current_executable_isSet = true;
}

bool OAIHudsonMasterComputerexecutors::is_current_executable_Set() const{
    return m_current_executable_isSet;
}

bool OAIHudsonMasterComputerexecutors::is_current_executable_Valid() const{
    return m_current_executable_isValid;
}

bool OAIHudsonMasterComputerexecutors::isIdle() const {
    return idle;
}
void OAIHudsonMasterComputerexecutors::setIdle(const bool &idle) {
    this->idle = idle;
    this->m_idle_isSet = true;
}

bool OAIHudsonMasterComputerexecutors::is_idle_Set() const{
    return m_idle_isSet;
}

bool OAIHudsonMasterComputerexecutors::is_idle_Valid() const{
    return m_idle_isValid;
}

bool OAIHudsonMasterComputerexecutors::isLikelyStuck() const {
    return likely_stuck;
}
void OAIHudsonMasterComputerexecutors::setLikelyStuck(const bool &likely_stuck) {
    this->likely_stuck = likely_stuck;
    this->m_likely_stuck_isSet = true;
}

bool OAIHudsonMasterComputerexecutors::is_likely_stuck_Set() const{
    return m_likely_stuck_isSet;
}

bool OAIHudsonMasterComputerexecutors::is_likely_stuck_Valid() const{
    return m_likely_stuck_isValid;
}

qint32 OAIHudsonMasterComputerexecutors::getNumber() const {
    return number;
}
void OAIHudsonMasterComputerexecutors::setNumber(const qint32 &number) {
    this->number = number;
    this->m_number_isSet = true;
}

bool OAIHudsonMasterComputerexecutors::is_number_Set() const{
    return m_number_isSet;
}

bool OAIHudsonMasterComputerexecutors::is_number_Valid() const{
    return m_number_isValid;
}

qint32 OAIHudsonMasterComputerexecutors::getProgress() const {
    return progress;
}
void OAIHudsonMasterComputerexecutors::setProgress(const qint32 &progress) {
    this->progress = progress;
    this->m_progress_isSet = true;
}

bool OAIHudsonMasterComputerexecutors::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIHudsonMasterComputerexecutors::is_progress_Valid() const{
    return m_progress_isValid;
}

QString OAIHudsonMasterComputerexecutors::getClass() const {
    return _class;
}
void OAIHudsonMasterComputerexecutors::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

bool OAIHudsonMasterComputerexecutors::is__class_Set() const{
    return m__class_isSet;
}

bool OAIHudsonMasterComputerexecutors::is__class_Valid() const{
    return m__class_isValid;
}

bool OAIHudsonMasterComputerexecutors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (current_executable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_idle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_likely_stuck_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__class_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHudsonMasterComputerexecutors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
