/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHudsonMasterComputermonitorData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHudsonMasterComputermonitorData::OAIHudsonMasterComputermonitorData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHudsonMasterComputermonitorData::OAIHudsonMasterComputermonitorData() {
    this->initializeModel();
}

OAIHudsonMasterComputermonitorData::~OAIHudsonMasterComputermonitorData() {}

void OAIHudsonMasterComputermonitorData::initializeModel() {

    m_hudson_node_monitors_swap_space_monitor_isSet = false;
    m_hudson_node_monitors_swap_space_monitor_isValid = false;

    m_hudson_node_monitors_temporary_space_monitor_isSet = false;
    m_hudson_node_monitors_temporary_space_monitor_isValid = false;

    m_hudson_node_monitors_disk_space_monitor_isSet = false;
    m_hudson_node_monitors_disk_space_monitor_isValid = false;

    m_hudson_node_monitors_architecture_monitor_isSet = false;
    m_hudson_node_monitors_architecture_monitor_isValid = false;

    m_hudson_node_monitors_response_time_monitor_isSet = false;
    m_hudson_node_monitors_response_time_monitor_isValid = false;

    m_hudson_node_monitors_clock_monitor_isSet = false;
    m_hudson_node_monitors_clock_monitor_isValid = false;

    m__class_isSet = false;
    m__class_isValid = false;
}

void OAIHudsonMasterComputermonitorData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHudsonMasterComputermonitorData::fromJsonObject(QJsonObject json) {

    m_hudson_node_monitors_swap_space_monitor_isValid = ::OpenAPI::fromJsonValue(hudson_node_monitors_swap_space_monitor, json[QString("hudson.node_monitors.SwapSpaceMonitor")]);
    m_hudson_node_monitors_swap_space_monitor_isSet = !json[QString("hudson.node_monitors.SwapSpaceMonitor")].isNull() && m_hudson_node_monitors_swap_space_monitor_isValid;

    m_hudson_node_monitors_temporary_space_monitor_isValid = ::OpenAPI::fromJsonValue(hudson_node_monitors_temporary_space_monitor, json[QString("hudson.node_monitors.TemporarySpaceMonitor")]);
    m_hudson_node_monitors_temporary_space_monitor_isSet = !json[QString("hudson.node_monitors.TemporarySpaceMonitor")].isNull() && m_hudson_node_monitors_temporary_space_monitor_isValid;

    m_hudson_node_monitors_disk_space_monitor_isValid = ::OpenAPI::fromJsonValue(hudson_node_monitors_disk_space_monitor, json[QString("hudson.node_monitors.DiskSpaceMonitor")]);
    m_hudson_node_monitors_disk_space_monitor_isSet = !json[QString("hudson.node_monitors.DiskSpaceMonitor")].isNull() && m_hudson_node_monitors_disk_space_monitor_isValid;

    m_hudson_node_monitors_architecture_monitor_isValid = ::OpenAPI::fromJsonValue(hudson_node_monitors_architecture_monitor, json[QString("hudson.node_monitors.ArchitectureMonitor")]);
    m_hudson_node_monitors_architecture_monitor_isSet = !json[QString("hudson.node_monitors.ArchitectureMonitor")].isNull() && m_hudson_node_monitors_architecture_monitor_isValid;

    m_hudson_node_monitors_response_time_monitor_isValid = ::OpenAPI::fromJsonValue(hudson_node_monitors_response_time_monitor, json[QString("hudson.node_monitors.ResponseTimeMonitor")]);
    m_hudson_node_monitors_response_time_monitor_isSet = !json[QString("hudson.node_monitors.ResponseTimeMonitor")].isNull() && m_hudson_node_monitors_response_time_monitor_isValid;

    m_hudson_node_monitors_clock_monitor_isValid = ::OpenAPI::fromJsonValue(hudson_node_monitors_clock_monitor, json[QString("hudson.node_monitors.ClockMonitor")]);
    m_hudson_node_monitors_clock_monitor_isSet = !json[QString("hudson.node_monitors.ClockMonitor")].isNull() && m_hudson_node_monitors_clock_monitor_isValid;

    m__class_isValid = ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    m__class_isSet = !json[QString("_class")].isNull() && m__class_isValid;
}

QString OAIHudsonMasterComputermonitorData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHudsonMasterComputermonitorData::asJsonObject() const {
    QJsonObject obj;
    if (hudson_node_monitors_swap_space_monitor.isSet()) {
        obj.insert(QString("hudson.node_monitors.SwapSpaceMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_swap_space_monitor));
    }
    if (hudson_node_monitors_temporary_space_monitor.isSet()) {
        obj.insert(QString("hudson.node_monitors.TemporarySpaceMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_temporary_space_monitor));
    }
    if (hudson_node_monitors_disk_space_monitor.isSet()) {
        obj.insert(QString("hudson.node_monitors.DiskSpaceMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_disk_space_monitor));
    }
    if (m_hudson_node_monitors_architecture_monitor_isSet) {
        obj.insert(QString("hudson.node_monitors.ArchitectureMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_architecture_monitor));
    }
    if (hudson_node_monitors_response_time_monitor.isSet()) {
        obj.insert(QString("hudson.node_monitors.ResponseTimeMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_response_time_monitor));
    }
    if (hudson_node_monitors_clock_monitor.isSet()) {
        obj.insert(QString("hudson.node_monitors.ClockMonitor"), ::OpenAPI::toJsonValue(hudson_node_monitors_clock_monitor));
    }
    if (m__class_isSet) {
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
    return obj;
}

OAISwapSpaceMonitorMemoryUsage2 OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const {
    return hudson_node_monitors_swap_space_monitor;
}
void OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsSwapSpaceMonitor(const OAISwapSpaceMonitorMemoryUsage2 &hudson_node_monitors_swap_space_monitor) {
    this->hudson_node_monitors_swap_space_monitor = hudson_node_monitors_swap_space_monitor;
    this->m_hudson_node_monitors_swap_space_monitor_isSet = true;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_swap_space_monitor_Set() const{
    return m_hudson_node_monitors_swap_space_monitor_isSet;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_swap_space_monitor_Valid() const{
    return m_hudson_node_monitors_swap_space_monitor_isValid;
}

OAIDiskSpaceMonitorDescriptorDiskSpace OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const {
    return hudson_node_monitors_temporary_space_monitor;
}
void OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(const OAIDiskSpaceMonitorDescriptorDiskSpace &hudson_node_monitors_temporary_space_monitor) {
    this->hudson_node_monitors_temporary_space_monitor = hudson_node_monitors_temporary_space_monitor;
    this->m_hudson_node_monitors_temporary_space_monitor_isSet = true;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_temporary_space_monitor_Set() const{
    return m_hudson_node_monitors_temporary_space_monitor_isSet;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_temporary_space_monitor_Valid() const{
    return m_hudson_node_monitors_temporary_space_monitor_isValid;
}

OAIDiskSpaceMonitorDescriptorDiskSpace OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const {
    return hudson_node_monitors_disk_space_monitor;
}
void OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsDiskSpaceMonitor(const OAIDiskSpaceMonitorDescriptorDiskSpace &hudson_node_monitors_disk_space_monitor) {
    this->hudson_node_monitors_disk_space_monitor = hudson_node_monitors_disk_space_monitor;
    this->m_hudson_node_monitors_disk_space_monitor_isSet = true;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_disk_space_monitor_Set() const{
    return m_hudson_node_monitors_disk_space_monitor_isSet;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_disk_space_monitor_Valid() const{
    return m_hudson_node_monitors_disk_space_monitor_isValid;
}

QString OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsArchitectureMonitor() const {
    return hudson_node_monitors_architecture_monitor;
}
void OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsArchitectureMonitor(const QString &hudson_node_monitors_architecture_monitor) {
    this->hudson_node_monitors_architecture_monitor = hudson_node_monitors_architecture_monitor;
    this->m_hudson_node_monitors_architecture_monitor_isSet = true;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_architecture_monitor_Set() const{
    return m_hudson_node_monitors_architecture_monitor_isSet;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_architecture_monitor_Valid() const{
    return m_hudson_node_monitors_architecture_monitor_isValid;
}

OAIResponseTimeMonitorData OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsResponseTimeMonitor() const {
    return hudson_node_monitors_response_time_monitor;
}
void OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsResponseTimeMonitor(const OAIResponseTimeMonitorData &hudson_node_monitors_response_time_monitor) {
    this->hudson_node_monitors_response_time_monitor = hudson_node_monitors_response_time_monitor;
    this->m_hudson_node_monitors_response_time_monitor_isSet = true;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_response_time_monitor_Set() const{
    return m_hudson_node_monitors_response_time_monitor_isSet;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_response_time_monitor_Valid() const{
    return m_hudson_node_monitors_response_time_monitor_isValid;
}

OAIClockDifference OAIHudsonMasterComputermonitorData::getHudsonNodeMonitorsClockMonitor() const {
    return hudson_node_monitors_clock_monitor;
}
void OAIHudsonMasterComputermonitorData::setHudsonNodeMonitorsClockMonitor(const OAIClockDifference &hudson_node_monitors_clock_monitor) {
    this->hudson_node_monitors_clock_monitor = hudson_node_monitors_clock_monitor;
    this->m_hudson_node_monitors_clock_monitor_isSet = true;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_clock_monitor_Set() const{
    return m_hudson_node_monitors_clock_monitor_isSet;
}

bool OAIHudsonMasterComputermonitorData::is_hudson_node_monitors_clock_monitor_Valid() const{
    return m_hudson_node_monitors_clock_monitor_isValid;
}

QString OAIHudsonMasterComputermonitorData::getClass() const {
    return _class;
}
void OAIHudsonMasterComputermonitorData::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

bool OAIHudsonMasterComputermonitorData::is__class_Set() const{
    return m__class_isSet;
}

bool OAIHudsonMasterComputermonitorData::is__class_Valid() const{
    return m__class_isValid;
}

bool OAIHudsonMasterComputermonitorData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (hudson_node_monitors_swap_space_monitor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (hudson_node_monitors_temporary_space_monitor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (hudson_node_monitors_disk_space_monitor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hudson_node_monitors_architecture_monitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (hudson_node_monitors_response_time_monitor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (hudson_node_monitors_clock_monitor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m__class_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHudsonMasterComputermonitorData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
