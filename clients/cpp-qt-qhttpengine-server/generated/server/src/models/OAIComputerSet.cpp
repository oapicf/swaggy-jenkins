/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComputerSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComputerSet::OAIComputerSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComputerSet::OAIComputerSet() {
    this->initializeModel();
}

OAIComputerSet::~OAIComputerSet() {}

void OAIComputerSet::initializeModel() {

    m__class_isSet = false;
    m__class_isValid = false;

    m_busy_executors_isSet = false;
    m_busy_executors_isValid = false;

    m_computer_isSet = false;
    m_computer_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_total_executors_isSet = false;
    m_total_executors_isValid = false;
}

void OAIComputerSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComputerSet::fromJsonObject(QJsonObject json) {

    m__class_isValid = ::OpenAPI::fromJsonValue(_class, json[QString("_class")]);
    m__class_isSet = !json[QString("_class")].isNull() && m__class_isValid;

    m_busy_executors_isValid = ::OpenAPI::fromJsonValue(busy_executors, json[QString("busyExecutors")]);
    m_busy_executors_isSet = !json[QString("busyExecutors")].isNull() && m_busy_executors_isValid;

    m_computer_isValid = ::OpenAPI::fromJsonValue(computer, json[QString("computer")]);
    m_computer_isSet = !json[QString("computer")].isNull() && m_computer_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_total_executors_isValid = ::OpenAPI::fromJsonValue(total_executors, json[QString("totalExecutors")]);
    m_total_executors_isSet = !json[QString("totalExecutors")].isNull() && m_total_executors_isValid;
}

QString OAIComputerSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComputerSet::asJsonObject() const {
    QJsonObject obj;
    if (m__class_isSet) {
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(_class));
    }
    if (m_busy_executors_isSet) {
        obj.insert(QString("busyExecutors"), ::OpenAPI::toJsonValue(busy_executors));
    }
    if (computer.size() > 0) {
        obj.insert(QString("computer"), ::OpenAPI::toJsonValue(computer));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(display_name));
    }
    if (m_total_executors_isSet) {
        obj.insert(QString("totalExecutors"), ::OpenAPI::toJsonValue(total_executors));
    }
    return obj;
}

QString OAIComputerSet::getClass() const {
    return _class;
}
void OAIComputerSet::setClass(const QString &_class) {
    this->_class = _class;
    this->m__class_isSet = true;
}

bool OAIComputerSet::is__class_Set() const{
    return m__class_isSet;
}

bool OAIComputerSet::is__class_Valid() const{
    return m__class_isValid;
}

qint32 OAIComputerSet::getBusyExecutors() const {
    return busy_executors;
}
void OAIComputerSet::setBusyExecutors(const qint32 &busy_executors) {
    this->busy_executors = busy_executors;
    this->m_busy_executors_isSet = true;
}

bool OAIComputerSet::is_busy_executors_Set() const{
    return m_busy_executors_isSet;
}

bool OAIComputerSet::is_busy_executors_Valid() const{
    return m_busy_executors_isValid;
}

QList<OAIHudsonMasterComputer> OAIComputerSet::getComputer() const {
    return computer;
}
void OAIComputerSet::setComputer(const QList<OAIHudsonMasterComputer> &computer) {
    this->computer = computer;
    this->m_computer_isSet = true;
}

bool OAIComputerSet::is_computer_Set() const{
    return m_computer_isSet;
}

bool OAIComputerSet::is_computer_Valid() const{
    return m_computer_isValid;
}

QString OAIComputerSet::getDisplayName() const {
    return display_name;
}
void OAIComputerSet::setDisplayName(const QString &display_name) {
    this->display_name = display_name;
    this->m_display_name_isSet = true;
}

bool OAIComputerSet::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIComputerSet::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIComputerSet::getTotalExecutors() const {
    return total_executors;
}
void OAIComputerSet::setTotalExecutors(const qint32 &total_executors) {
    this->total_executors = total_executors;
    this->m_total_executors_isSet = true;
}

bool OAIComputerSet::is_total_executors_Set() const{
    return m_total_executors_isSet;
}

bool OAIComputerSet::is_total_executors_Valid() const{
    return m_total_executors_isValid;
}

bool OAIComputerSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_busy_executors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (computer.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_executors_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComputerSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
