/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-15T14:20:32.264295314Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "remoteAccess", description = "the remoteAccess API")
public interface CreateViewApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /createView
     * Create a new view using view configuration
     *
     * @param name Name of the new view (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @param contentType Content type header application/xml (optional)
     * @param body View configuration in config.xml format (optional)
     * @return Successfully created the view (status code 200)
     *         or An error has occurred - error message is embedded inside the HTML response (status code 400)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "postCreateView",
        description = "Create a new view using view configuration",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully created the view"),
            @ApiResponse(responseCode = "400", description = "An error has occurred - error message is embedded inside the HTML response", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/createView",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> postCreateView(
        @NotNull @Parameter(name = "name", description = "Name of the new view", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "name", required = true) String name,
        @Parameter(name = "Jenkins-Crumb", description = "CSRF protection token", in = ParameterIn.HEADER) @RequestHeader(value = "Jenkins-Crumb", required = false) String jenkinsCrumb,
        @Parameter(name = "Content-Type", description = "Content type header application/xml", in = ParameterIn.HEADER) @RequestHeader(value = "Content-Type", required = false) String contentType,
        @Parameter(name = "body", description = "View configuration in config.xml format") @Valid @RequestBody(required = false) String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
