/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.BranchImpl;
import org.openapitools.model.FavoriteImpl;
import org.openapitools.model.GithubOrganization;
import org.openapitools.model.GithubScm;
import org.openapitools.model.MultibranchPipeline;
import org.openapitools.model.Organisation;
import org.openapitools.model.Pipeline;
import org.openapitools.model.PipelineActivity;
import org.openapitools.model.PipelineFolderImpl;
import org.openapitools.model.PipelineImpl;
import org.openapitools.model.PipelineRun;
import org.openapitools.model.PipelineRunNode;
import org.openapitools.model.PipelineStepImpl;
import org.openapitools.model.QueueItemImpl;
import org.openapitools.model.User;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-15T14:20:32.264295314Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "blueOcean", description = "the blueOcean API")
public interface BlueApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}
     * Delete queue item from an organization pipeline queue
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param queue Name of the queue item (required)
     * @return Successfully deleted queue item (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "deletePipelineQueueItem",
        description = "Delete queue item from an organization pipeline queue",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted queue item"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}"
    )
    
    default ResponseEntity<Void> deletePipelineQueueItem(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "queue", description = "Name of the queue item", required = true, in = ParameterIn.PATH) @PathVariable("queue") String queue
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/user/
     * Retrieve authenticated user details for an organization
     *
     * @param organization Name of the organization (required)
     * @return Successfully retrieved authenticated user details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getAuthenticatedUser",
        description = "Retrieve authenticated user details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved authenticated user details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/user/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getAuthenticatedUser(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"fullName\" : \"fullName\", \"_class\" : \"_class\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/classes/{class}
     * Get a list of class names supported by a given class
     *
     * @param propertyClass Name of the class (required)
     * @return Successfully retrieved class names (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getClasses",
        description = "Get a list of class names supported by a given class",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved class names", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/classes/{class}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> getClasses(
        @Parameter(name = "class", description = "Name of the class", required = true, in = ParameterIn.PATH) @PathVariable("class") String propertyClass
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}
     * Retrieve organization details
     *
     * @param organization Name of the organization (required)
     * @return Successfully retrieved pipeline details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Pipeline cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "getOrganisation",
        description = "Retrieve organization details",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Organisation.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Pipeline cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Organisation> getOrganisation(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"_class\" : \"_class\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/
     * Retrieve all organizations details
     *
     * @return Successfully retrieved pipelines details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getOrganisations",
        description = "Retrieve all organizations details",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipelines details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Organisation.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Organisation>> getOrganisations(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"_class\" : \"_class\" }, { \"name\" : \"name\", \"_class\" : \"_class\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}
     * Retrieve pipeline details for an organization
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Successfully retrieved pipeline details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Pipeline cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "getPipeline",
        description = "Retrieve pipeline details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Pipeline.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Pipeline cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Pipeline> getPipeline(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"weatherScore\" : 0, \"latestRun\" : { \"runSummary\" : \"runSummary\", \"durationInMillis\" : 5, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 5, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"_class\" : \"_class\", \"artifacts\" : [ { \"size\" : 1, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] }, \"displayName\" : \"displayName\", \"organization\" : \"organization\", \"name\" : \"name\", \"estimatedDurationInMillis\" : 6, \"fullName\" : \"fullName\", \"_class\" : \"_class\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/activities
     * Retrieve all activities details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Successfully retrieved all activities details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineActivities",
        description = "Retrieve all activities details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved all activities details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PipelineActivity.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PipelineActivity>> getPipelineActivities(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"runSummary\" : \"runSummary\", \"durationInMillis\" : 6, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 1, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"artifacts\" : [ { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] }, { \"runSummary\" : \"runSummary\", \"durationInMillis\" : 6, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 1, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"artifacts\" : [ { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/
     * Retrieve branch details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return Successfully retrieved branch details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineBranch",
        description = "Retrieve branch details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved branch details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BranchImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<BranchImpl> getPipelineBranch(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "branch", description = "Name of the branch", required = true, in = ParameterIn.PATH) @PathVariable("branch") String branch
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"weatherScore\" : 6, \"latestRun\" : { \"runSummary\" : \"runSummary\", \"_links\" : { \"nodes\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"log\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"steps\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"durationInMillis\" : 1, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"enQueueTime\" : \"enQueueTime\", \"estimatedDurationInMillis\" : 5, \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\" }, \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"runs\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"queue\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"displayName\" : \"displayName\", \"fullDisplayName\" : \"fullDisplayName\", \"fullName\" : \"fullName\", \"pullRequest\" : \"pullRequest\", \"permissions\" : { \"read\" : true, \"stop\" : true, \"start\" : true, \"create\" : true, \"_class\" : \"_class\" }, \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"parameters\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"_class\" : \"_class\", \"type\" : \"type\", \"defaultParameterValue\" : { \"name\" : \"name\", \"_class\" : \"_class\", \"value\" : \"value\" } }, { \"name\" : \"name\", \"description\" : \"description\", \"_class\" : \"_class\", \"type\" : \"type\", \"defaultParameterValue\" : { \"name\" : \"name\", \"_class\" : \"_class\", \"value\" : \"value\" } } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}
     * Retrieve branch run details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param run Name of the run (required)
     * @return Successfully retrieved run details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineBranchRun",
        description = "Retrieve branch run details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRun.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PipelineRun> getPipelineBranchRun(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "branch", description = "Name of the branch", required = true, in = ParameterIn.PATH) @PathVariable("branch") String branch,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"runSummary\" : \"runSummary\", \"durationInMillis\" : 6, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 1, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"artifacts\" : [ { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/branches
     * Retrieve all branches details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Successfully retrieved all branches details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineBranches",
        description = "Retrieve all branches details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved all branches details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = MultibranchPipeline.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches",
        produces = { "application/json" }
    )
    
    default ResponseEntity<MultibranchPipeline> getPipelineBranches(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"weatherScore\" : 6, \"latestRun\" : \"latestRun\", \"displayName\" : \"displayName\", \"totalNumberOfPullRequests\" : 9, \"numberOfFailingPullRequests\" : 5, \"branchNames\" : [ \"branchNames\", \"branchNames\" ], \"organization\" : \"organization\", \"totalNumberOfBranches\" : 7, \"estimatedDurationInMillis\" : 0, \"name\" : \"name\", \"numberOfSuccessfulPullRequests\" : 2, \"numberOfSuccessfulBranches\" : 5, \"numberOfFailingBranches\" : 1, \"_class\" : \"_class\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{folder}/
     * Retrieve pipeline folder for an organization
     *
     * @param organization Name of the organization (required)
     * @param folder Name of the folder (required)
     * @return Successfully retrieved folder details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineFolder",
        description = "Retrieve pipeline folder for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved folder details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineFolderImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{folder}/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PipelineFolderImpl> getPipelineFolder(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "folder", description = "Name of the folder", required = true, in = ParameterIn.PATH) @PathVariable("folder") String folder
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"numberOfPipelines\" : 6, \"displayName\" : \"displayName\", \"numberOfFolders\" : 0, \"organization\" : \"organization\", \"name\" : \"name\", \"fullName\" : \"fullName\", \"_class\" : \"_class\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}
     * Retrieve pipeline details for an organization folder
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return Successfully retrieved pipeline details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineFolderPipeline",
        description = "Retrieve pipeline details for an organization folder",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PipelineImpl> getPipelineFolderPipeline(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "folder", description = "Name of the folder", required = true, in = ParameterIn.PATH) @PathVariable("folder") String folder
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"weatherScore\" : 6, \"latestRun\" : \"latestRun\", \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"runs\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"queue\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"displayName\" : \"displayName\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 0, \"name\" : \"name\", \"fullName\" : \"fullName\", \"_class\" : \"_class\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/queue
     * Retrieve queue details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Successfully retrieved queue details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineQueue",
        description = "Retrieve queue details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved queue details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = QueueItemImpl.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<QueueItemImpl>> getPipelineQueue(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"pipeline\" : \"pipeline\", \"expectedBuildNumber\" : 0, \"queuedTime\" : 6, \"_class\" : \"_class\", \"id\" : \"id\" }, { \"pipeline\" : \"pipeline\", \"expectedBuildNumber\" : 0, \"queuedTime\" : 6, \"_class\" : \"_class\", \"id\" : \"id\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}
     * Retrieve run details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return Successfully retrieved run details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineRun",
        description = "Retrieve run details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRun.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PipelineRun> getPipelineRun(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"runSummary\" : \"runSummary\", \"durationInMillis\" : 6, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 1, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"artifacts\" : [ { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log
     * Get log for a pipeline run
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param start Start position of the log (optional)
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body (optional)
     * @return Successfully retrieved pipeline run log (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineRunLog",
        description = "Get log for a pipeline run",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline run log", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> getPipelineRunLog(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run,
        @Parameter(name = "start", description = "Start position of the log", in = ParameterIn.QUERY) @Valid @RequestParam(value = "start", required = false) Integer start,
        @Parameter(name = "download", description = "Set to true in order to download the file, otherwise it's passed as a response body", in = ParameterIn.QUERY) @Valid @RequestParam(value = "download", required = false) Boolean download
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}
     * Retrieve run node details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return Successfully retrieved run node details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineRunNode",
        description = "Retrieve run node details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run node details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRunNode.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PipelineRunNode> getPipelineRunNode(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run,
        @Parameter(name = "node", description = "Name of the node", required = true, in = ParameterIn.PATH) @PathVariable("node") String node
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : \"result\", \"durationInMillis\" : 0, \"displayName\" : \"displayName\", \"edges\" : [ { \"id\" : \"id\", \"_class\" : \"_class\" }, { \"id\" : \"id\", \"_class\" : \"_class\" } ], \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"id\" : \"id\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}
     * Retrieve run node details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return Successfully retrieved run node step details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineRunNodeStep",
        description = "Retrieve run node details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run node step details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineStepImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PipelineStepImpl> getPipelineRunNodeStep(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run,
        @Parameter(name = "node", description = "Name of the node", required = true, in = ParameterIn.PATH) @PathVariable("node") String node,
        @Parameter(name = "step", description = "Name of the step", required = true, in = ParameterIn.PATH) @PathVariable("step") String step
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"result\" : \"result\", \"input\" : { \"submitter\" : \"submitter\", \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"_class\" : \"_class\", \"id\" : \"id\", \"message\" : \"message\", \"ok\" : \"ok\", \"parameters\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"_class\" : \"_class\", \"type\" : \"type\", \"defaultParameterValue\" : { \"name\" : \"name\", \"_class\" : \"_class\", \"value\" : \"value\" } }, { \"name\" : \"name\", \"description\" : \"description\", \"_class\" : \"_class\", \"type\" : \"type\", \"defaultParameterValue\" : { \"name\" : \"name\", \"_class\" : \"_class\", \"value\" : \"value\" } } ] }, \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"durationInMillis\" : 0, \"displayName\" : \"displayName\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"id\" : \"id\", \"state\" : \"state\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log
     * Get log for a pipeline run node step
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return Successfully retrieved pipeline run node step log (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineRunNodeStepLog",
        description = "Get log for a pipeline run node step",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipeline run node step log", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> getPipelineRunNodeStepLog(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run,
        @Parameter(name = "node", description = "Name of the node", required = true, in = ParameterIn.PATH) @PathVariable("node") String node,
        @Parameter(name = "step", description = "Name of the step", required = true, in = ParameterIn.PATH) @PathVariable("step") String step
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps
     * Retrieve run node steps details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return Successfully retrieved run node steps details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineRunNodeSteps",
        description = "Retrieve run node steps details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run node steps details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PipelineStepImpl.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PipelineStepImpl>> getPipelineRunNodeSteps(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run,
        @Parameter(name = "node", description = "Name of the node", required = true, in = ParameterIn.PATH) @PathVariable("node") String node
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"result\" : \"result\", \"input\" : { \"submitter\" : \"submitter\", \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"_class\" : \"_class\", \"id\" : \"id\", \"message\" : \"message\", \"ok\" : \"ok\", \"parameters\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"_class\" : \"_class\", \"type\" : \"type\", \"defaultParameterValue\" : { \"name\" : \"name\", \"_class\" : \"_class\", \"value\" : \"value\" } }, { \"name\" : \"name\", \"description\" : \"description\", \"_class\" : \"_class\", \"type\" : \"type\", \"defaultParameterValue\" : { \"name\" : \"name\", \"_class\" : \"_class\", \"value\" : \"value\" } } ] }, \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"durationInMillis\" : 0, \"displayName\" : \"displayName\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"id\" : \"id\", \"state\" : \"state\" }, { \"result\" : \"result\", \"input\" : { \"submitter\" : \"submitter\", \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"_class\" : \"_class\", \"id\" : \"id\", \"message\" : \"message\", \"ok\" : \"ok\", \"parameters\" : [ { \"name\" : \"name\", \"description\" : \"description\", \"_class\" : \"_class\", \"type\" : \"type\", \"defaultParameterValue\" : { \"name\" : \"name\", \"_class\" : \"_class\", \"value\" : \"value\" } }, { \"name\" : \"name\", \"description\" : \"description\", \"_class\" : \"_class\", \"type\" : \"type\", \"defaultParameterValue\" : { \"name\" : \"name\", \"_class\" : \"_class\", \"value\" : \"value\" } } ] }, \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"durationInMillis\" : 0, \"displayName\" : \"displayName\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"id\" : \"id\", \"state\" : \"state\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes
     * Retrieve run nodes details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return Successfully retrieved run nodes details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineRunNodes",
        description = "Retrieve run nodes details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved run nodes details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PipelineRunNode.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PipelineRunNode>> getPipelineRunNodes(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"result\" : \"result\", \"durationInMillis\" : 0, \"displayName\" : \"displayName\", \"edges\" : [ { \"id\" : \"id\", \"_class\" : \"_class\" }, { \"id\" : \"id\", \"_class\" : \"_class\" } ], \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"id\" : \"id\", \"state\" : \"state\" }, { \"result\" : \"result\", \"durationInMillis\" : 0, \"displayName\" : \"displayName\", \"edges\" : [ { \"id\" : \"id\", \"_class\" : \"_class\" }, { \"id\" : \"id\", \"_class\" : \"_class\" } ], \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"id\" : \"id\", \"state\" : \"state\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs
     * Retrieve all runs details for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Successfully retrieved runs details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelineRuns",
        description = "Retrieve all runs details for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved runs details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = PipelineRun.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<PipelineRun>> getPipelineRuns(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"runSummary\" : \"runSummary\", \"durationInMillis\" : 6, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 1, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"artifacts\" : [ { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] }, { \"runSummary\" : \"runSummary\", \"durationInMillis\" : 6, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 1, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"artifacts\" : [ { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/pipelines/
     * Retrieve all pipelines details for an organization
     *
     * @param organization Name of the organization (required)
     * @return Successfully retrieved pipelines details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getPipelines",
        description = "Retrieve all pipelines details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved pipelines details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Pipeline.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Pipeline>> getPipelines(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"weatherScore\" : 0, \"latestRun\" : { \"runSummary\" : \"runSummary\", \"durationInMillis\" : 5, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 5, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"_class\" : \"_class\", \"artifacts\" : [ { \"size\" : 1, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] }, \"displayName\" : \"displayName\", \"organization\" : \"organization\", \"name\" : \"name\", \"estimatedDurationInMillis\" : 6, \"fullName\" : \"fullName\", \"_class\" : \"_class\" }, { \"weatherScore\" : 0, \"latestRun\" : { \"runSummary\" : \"runSummary\", \"durationInMillis\" : 5, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 5, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"_class\" : \"_class\", \"artifacts\" : [ { \"size\" : 1, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 1, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] }, \"displayName\" : \"displayName\", \"organization\" : \"organization\", \"name\" : \"name\", \"estimatedDurationInMillis\" : 6, \"fullName\" : \"fullName\", \"_class\" : \"_class\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/scm/{scm}
     * Retrieve SCM details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @return Successfully retrieved SCM details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getSCM",
        description = "Retrieve SCM details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved SCM details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GithubScm.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/scm/{scm}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GithubScm> getSCM(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "scm", description = "Name of SCM", required = true, in = ParameterIn.PATH) @PathVariable("scm") String scm
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"credentialId\" : \"credentialId\", \"_class\" : \"_class\", \"id\" : \"id\", \"uri\" : \"uri\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories
     * Retrieve SCM organization repositories details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param credentialId Credential ID (optional)
     * @param pageSize Number of items in a page (optional)
     * @param pageNumber Page number (optional)
     * @return Successfully retrieved SCM organization repositories details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getSCMOrganisationRepositories",
        description = "Retrieve SCM organization repositories details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved SCM organization repositories details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GithubOrganization.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GithubOrganization>> getSCMOrganisationRepositories(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "scm", description = "Name of SCM", required = true, in = ParameterIn.PATH) @PathVariable("scm") String scm,
        @Parameter(name = "scmOrganisation", description = "Name of the SCM organization", required = true, in = ParameterIn.PATH) @PathVariable("scmOrganisation") String scmOrganisation,
        @Parameter(name = "credentialId", description = "Credential ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "credentialId", required = false) String credentialId,
        @Parameter(name = "pageSize", description = "Number of items in a page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,
        @Parameter(name = "pageNumber", description = "Page number", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"_links\" : { \"repositories\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"name\" : \"name\", \"_class\" : \"_class\", \"jenkinsOrganizationPipeline\" : true }, { \"_links\" : { \"repositories\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"name\" : \"name\", \"_class\" : \"_class\", \"jenkinsOrganizationPipeline\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}
     * Retrieve SCM organization repository details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param repository Name of the SCM repository (required)
     * @param credentialId Credential ID (optional)
     * @return Successfully retrieved SCM organizations details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getSCMOrganisationRepository",
        description = "Retrieve SCM organization repository details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved SCM organizations details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GithubOrganization.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GithubOrganization>> getSCMOrganisationRepository(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "scm", description = "Name of SCM", required = true, in = ParameterIn.PATH) @PathVariable("scm") String scm,
        @Parameter(name = "scmOrganisation", description = "Name of the SCM organization", required = true, in = ParameterIn.PATH) @PathVariable("scmOrganisation") String scmOrganisation,
        @Parameter(name = "repository", description = "Name of the SCM repository", required = true, in = ParameterIn.PATH) @PathVariable("repository") String repository,
        @Parameter(name = "credentialId", description = "Credential ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "credentialId", required = false) String credentialId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"_links\" : { \"repositories\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"name\" : \"name\", \"_class\" : \"_class\", \"jenkinsOrganizationPipeline\" : true }, { \"_links\" : { \"repositories\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"name\" : \"name\", \"_class\" : \"_class\", \"jenkinsOrganizationPipeline\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/scm/{scm}/organizations
     * Retrieve SCM organizations details for an organization
     *
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param credentialId Credential ID (optional)
     * @return Successfully retrieved SCM organizations details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getSCMOrganisations",
        description = "Retrieve SCM organizations details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved SCM organizations details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GithubOrganization.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GithubOrganization>> getSCMOrganisations(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "scm", description = "Name of SCM", required = true, in = ParameterIn.PATH) @PathVariable("scm") String scm,
        @Parameter(name = "credentialId", description = "Credential ID", in = ParameterIn.QUERY) @Valid @RequestParam(value = "credentialId", required = false) String credentialId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"_links\" : { \"repositories\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"name\" : \"name\", \"_class\" : \"_class\", \"jenkinsOrganizationPipeline\" : true }, { \"_links\" : { \"repositories\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"name\" : \"name\", \"_class\" : \"_class\", \"jenkinsOrganizationPipeline\" : true } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/users/{user}
     * Retrieve user details for an organization
     *
     * @param organization Name of the organization (required)
     * @param user Name of the user (required)
     * @return Successfully retrieved users details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getUser",
        description = "Retrieve user details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved users details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/users/{user}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getUser(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "user", description = "Name of the user", required = true, in = ParameterIn.PATH) @PathVariable("user") String user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"fullName\" : \"fullName\", \"_class\" : \"_class\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/users/{user}/favorites
     * Retrieve user favorites details for an organization
     *
     * @param user Name of the user (required)
     * @return Successfully retrieved users favorites details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getUserFavorites",
        description = "Retrieve user favorites details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved users favorites details", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = FavoriteImpl.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/users/{user}/favorites",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<FavoriteImpl>> getUserFavorites(
        @Parameter(name = "user", description = "Name of the user", required = true, in = ParameterIn.PATH) @PathVariable("user") String user
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"item\" : { \"weatherScore\" : 6, \"latestRun\" : \"latestRun\", \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"runs\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"queue\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"displayName\" : \"displayName\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 0, \"name\" : \"name\", \"fullName\" : \"fullName\", \"_class\" : \"_class\" }, \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"_class\" : \"_class\" }, { \"item\" : { \"weatherScore\" : 6, \"latestRun\" : \"latestRun\", \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"runs\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"queue\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"displayName\" : \"displayName\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 0, \"name\" : \"name\", \"fullName\" : \"fullName\", \"_class\" : \"_class\" }, \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"_class\" : \"_class\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/organizations/{organization}/users/
     * Retrieve users details for an organization
     *
     * @param organization Name of the organization (required)
     * @return Successfully retrieved users details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "getUsers",
        description = "Retrieve users details for an organization",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved users details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = User.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/users/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<User> getUsers(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"fullName\" : \"fullName\", \"_class\" : \"_class\", \"id\" : \"id\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay
     * Replay an organization pipeline run
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return Successfully replayed a pipeline run (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "postPipelineRun",
        description = "Replay an organization pipeline run",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully replayed a pipeline run", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueueItemImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay",
        produces = { "application/json" }
    )
    
    default ResponseEntity<QueueItemImpl> postPipelineRun(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pipeline\" : \"pipeline\", \"expectedBuildNumber\" : 0, \"queuedTime\" : 6, \"_class\" : \"_class\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs
     * Start a build for an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return Successfully started a build (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "postPipelineRuns",
        description = "Start a build for an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully started a build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = QueueItemImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
        produces = { "application/json" }
    )
    
    default ResponseEntity<QueueItemImpl> postPipelineRuns(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"pipeline\" : \"pipeline\", \"expectedBuildNumber\" : 0, \"queuedTime\" : 6, \"_class\" : \"_class\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite
     * Favorite/unfavorite a pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite (required)
     * @return Successfully favorited/unfavorited a pipeline (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "putPipelineFavorite",
        description = "Favorite/unfavorite a pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully favorited/unfavorited a pipeline", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FavoriteImpl.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<FavoriteImpl> putPipelineFavorite(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "body", description = "Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite", required = true) @Valid @RequestBody Boolean body
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"item\" : { \"weatherScore\" : 6, \"latestRun\" : \"latestRun\", \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\", \"runs\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"actions\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"queue\" : { \"_class\" : \"_class\", \"href\" : \"href\" } }, \"displayName\" : \"displayName\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 0, \"name\" : \"name\", \"fullName\" : \"fullName\", \"_class\" : \"_class\" }, \"_links\" : { \"self\" : { \"_class\" : \"_class\", \"href\" : \"href\" }, \"_class\" : \"_class\" }, \"_class\" : \"_class\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop
     * Stop a build of an organization pipeline
     *
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param blocking Set to true to make blocking stop, default: false (optional)
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds (optional)
     * @return Successfully stopped a build (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "putPipelineRun",
        description = "Stop a build of an organization pipeline",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully stopped a build", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PipelineRun.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop",
        produces = { "application/json" }
    )
    
    default ResponseEntity<PipelineRun> putPipelineRun(
        @Parameter(name = "organization", description = "Name of the organization", required = true, in = ParameterIn.PATH) @PathVariable("organization") String organization,
        @Parameter(name = "pipeline", description = "Name of the pipeline", required = true, in = ParameterIn.PATH) @PathVariable("pipeline") String pipeline,
        @Parameter(name = "run", description = "Name of the run", required = true, in = ParameterIn.PATH) @PathVariable("run") String run,
        @Parameter(name = "blocking", description = "Set to true to make blocking stop, default: false", in = ParameterIn.QUERY) @Valid @RequestParam(value = "blocking", required = false) String blocking,
        @Parameter(name = "timeOutInSecs", description = "Timeout in seconds, default: 10 seconds", in = ParameterIn.QUERY) @Valid @RequestParam(value = "timeOutInSecs", required = false) Integer timeOutInSecs
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"runSummary\" : \"runSummary\", \"durationInMillis\" : 6, \"commitId\" : \"commitId\", \"type\" : \"type\", \"pipeline\" : \"pipeline\", \"result\" : \"result\", \"organization\" : \"organization\", \"estimatedDurationInMillis\" : 1, \"enQueueTime\" : \"enQueueTime\", \"startTime\" : \"startTime\", \"_class\" : \"_class\", \"endTime\" : \"endTime\", \"id\" : \"id\", \"state\" : \"state\", \"artifacts\" : [ { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" }, { \"size\" : 0, \"name\" : \"name\", \"_class\" : \"_class\", \"url\" : \"url\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/search/
     * Search for any resource details
     *
     * @param q Query string (required)
     * @return Successfully retrieved search result (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "search",
        description = "Search for any resource details",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved search result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/search/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> search(
        @NotNull @Parameter(name = "q", description = "Query string", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = true) String q
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /blue/rest/classes/
     * Get classes details
     *
     * @param q Query string containing an array of class names (required)
     * @return Successfully retrieved search result (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     */
    @Operation(
        operationId = "searchClasses",
        description = "Get classes details",
        tags = { "blueOcean" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved search result", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/classes/",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> searchClasses(
        @NotNull @Parameter(name = "q", description = "Query string containing an array of class names", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "q", required = true) String q
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
