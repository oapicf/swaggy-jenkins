/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.FreeStyleBuild;
import org.openapitools.model.FreeStyleProject;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-03-15T14:20:32.264295314Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "remoteAccess", description = "the remoteAccess API")
public interface JobApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /job/{name}/api/json
     * Retrieve job details
     *
     * @param name Name of the job (required)
     * @return Successfully retrieved job details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "getJob",
        description = "Retrieve job details",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FreeStyleProject.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/{name}/api/json",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FreeStyleProject> getJob(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"color\" : \"color\", \"displayName\" : \"displayName\", \"lastSuccessfulBuild\" : { \"queueId\" : 5, \"displayName\" : \"displayName\", \"keepLog\" : true, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"estimatedDuration\" : 5, \"url\" : \"url\", \"building\" : true, \"changeSet\" : { \"kind\" : \"kind\", \"_class\" : \"_class\" }, \"duration\" : 1, \"result\" : \"result\", \"number\" : 6, \"executor\" : \"executor\", \"builtOn\" : \"builtOn\", \"_class\" : \"_class\", \"id\" : \"id\", \"actions\" : [ { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" }, { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" } ], \"timestamp\" : 2 }, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"lastUnstableBuild\" : \"lastUnstableBuild\", \"queueItem\" : \"queueItem\", \"buildable\" : true, \"firstBuild\" : { \"queueId\" : 5, \"displayName\" : \"displayName\", \"keepLog\" : true, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"estimatedDuration\" : 5, \"url\" : \"url\", \"building\" : true, \"changeSet\" : { \"kind\" : \"kind\", \"_class\" : \"_class\" }, \"duration\" : 1, \"result\" : \"result\", \"number\" : 6, \"executor\" : \"executor\", \"builtOn\" : \"builtOn\", \"_class\" : \"_class\", \"id\" : \"id\", \"actions\" : [ { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" }, { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" } ], \"timestamp\" : 2 }, \"lastFailedBuild\" : \"lastFailedBuild\", \"lastBuild\" : { \"queueId\" : 5, \"displayName\" : \"displayName\", \"keepLog\" : true, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"estimatedDuration\" : 5, \"url\" : \"url\", \"building\" : true, \"changeSet\" : { \"kind\" : \"kind\", \"_class\" : \"_class\" }, \"duration\" : 1, \"result\" : \"result\", \"number\" : 6, \"executor\" : \"executor\", \"builtOn\" : \"builtOn\", \"_class\" : \"_class\", \"id\" : \"id\", \"actions\" : [ { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" }, { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" } ], \"timestamp\" : 2 }, \"nextBuildNumber\" : 9, \"builds\" : [ { \"queueId\" : 5, \"displayName\" : \"displayName\", \"keepLog\" : true, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"estimatedDuration\" : 5, \"url\" : \"url\", \"building\" : true, \"changeSet\" : { \"kind\" : \"kind\", \"_class\" : \"_class\" }, \"duration\" : 1, \"result\" : \"result\", \"number\" : 6, \"executor\" : \"executor\", \"builtOn\" : \"builtOn\", \"_class\" : \"_class\", \"id\" : \"id\", \"actions\" : [ { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" }, { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" } ], \"timestamp\" : 2 }, { \"queueId\" : 5, \"displayName\" : \"displayName\", \"keepLog\" : true, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"estimatedDuration\" : 5, \"url\" : \"url\", \"building\" : true, \"changeSet\" : { \"kind\" : \"kind\", \"_class\" : \"_class\" }, \"duration\" : 1, \"result\" : \"result\", \"number\" : 6, \"executor\" : \"executor\", \"builtOn\" : \"builtOn\", \"_class\" : \"_class\", \"id\" : \"id\", \"actions\" : [ { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" }, { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" } ], \"timestamp\" : 2 } ], \"scm\" : { \"_class\" : \"_class\" }, \"keepDependencies\" : true, \"displayNameOrNull\" : \"displayNameOrNull\", \"inQueue\" : true, \"lastCompletedBuild\" : { \"queueId\" : 5, \"displayName\" : \"displayName\", \"keepLog\" : true, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"estimatedDuration\" : 5, \"url\" : \"url\", \"building\" : true, \"changeSet\" : { \"kind\" : \"kind\", \"_class\" : \"_class\" }, \"duration\" : 1, \"result\" : \"result\", \"number\" : 6, \"executor\" : \"executor\", \"builtOn\" : \"builtOn\", \"_class\" : \"_class\", \"id\" : \"id\", \"actions\" : [ { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" }, { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" } ], \"timestamp\" : 2 }, \"fullName\" : \"fullName\", \"healthReport\" : [ { \"score\" : 7, \"description\" : \"description\", \"iconClassName\" : \"iconClassName\", \"iconUrl\" : \"iconUrl\", \"_class\" : \"_class\" }, { \"score\" : 7, \"description\" : \"description\", \"iconClassName\" : \"iconClassName\", \"iconUrl\" : \"iconUrl\", \"_class\" : \"_class\" } ], \"lastStableBuild\" : { \"queueId\" : 5, \"displayName\" : \"displayName\", \"keepLog\" : true, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"estimatedDuration\" : 5, \"url\" : \"url\", \"building\" : true, \"changeSet\" : { \"kind\" : \"kind\", \"_class\" : \"_class\" }, \"duration\" : 1, \"result\" : \"result\", \"number\" : 6, \"executor\" : \"executor\", \"builtOn\" : \"builtOn\", \"_class\" : \"_class\", \"id\" : \"id\", \"actions\" : [ { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" }, { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" } ], \"timestamp\" : 2 }, \"lastUnsuccessfulBuild\" : \"lastUnsuccessfulBuild\", \"url\" : \"url\", \"concurrentBuild\" : true, \"name\" : \"name\", \"_class\" : \"_class\", \"actions\" : [ { \"_class\" : \"_class\" }, { \"_class\" : \"_class\" } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /job/{name}/config.xml
     * Retrieve job configuration
     *
     * @param name Name of the job (required)
     * @return Successfully retrieved job configuration in config.xml format (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "getJobConfig",
        description = "Retrieve job configuration",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job configuration in config.xml format", content = {
                @Content(mediaType = "text/xml", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/{name}/config.xml",
        produces = { "text/xml" }
    )
    
    default ResponseEntity<String> getJobConfig(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /job/{name}/lastBuild/api/json
     * Retrieve job&#39;s last build details
     *
     * @param name Name of the job (required)
     * @return Successfully retrieved job&#39;s last build details (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "getJobLastBuild",
        description = "Retrieve job's last build details",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job's last build details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = FreeStyleBuild.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/{name}/lastBuild/api/json",
        produces = { "application/json" }
    )
    
    default ResponseEntity<FreeStyleBuild> getJobLastBuild(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"queueId\" : 5, \"displayName\" : \"displayName\", \"keepLog\" : true, \"description\" : \"description\", \"fullDisplayName\" : \"fullDisplayName\", \"estimatedDuration\" : 5, \"url\" : \"url\", \"building\" : true, \"changeSet\" : { \"kind\" : \"kind\", \"_class\" : \"_class\" }, \"duration\" : 1, \"result\" : \"result\", \"number\" : 6, \"executor\" : \"executor\", \"builtOn\" : \"builtOn\", \"_class\" : \"_class\", \"id\" : \"id\", \"actions\" : [ { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" }, { \"causes\" : [ { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" }, { \"_class\" : \"_class\", \"shortDescription\" : \"shortDescription\", \"userName\" : \"userName\", \"userId\" : \"userId\" } ], \"_class\" : \"_class\" } ], \"timestamp\" : 2 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /job/{name}/{number}/logText/progressiveText
     * Retrieve job&#39;s build progressive text output
     *
     * @param name Name of the job (required)
     * @param number Build number (required)
     * @param start Starting point of progressive text output (required)
     * @return Successfully retrieved job&#39;s build progressive text output (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "getJobProgressiveText",
        description = "Retrieve job's build progressive text output",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job's build progressive text output"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/job/{name}/{number}/logText/progressiveText"
    )
    
    default ResponseEntity<Void> getJobProgressiveText(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "number", description = "Build number", required = true, in = ParameterIn.PATH) @PathVariable("number") String number,
        @NotNull @Parameter(name = "start", description = "Starting point of progressive text output", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "start", required = true) String start
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /job/{name}/build
     * Build a job
     *
     * @param name Name of the job (required)
     * @param json  (required)
     * @param token  (optional)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return Successfully built the job (backward compatibility for older versions of Jenkins) (status code 200)
     *         or Successfully built the job (status code 201)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "postJobBuild",
        description = "Build a job",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully built the job (backward compatibility for older versions of Jenkins)"),
            @ApiResponse(responseCode = "201", description = "Successfully built the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/{name}/build"
    )
    
    default ResponseEntity<Void> postJobBuild(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @NotNull @Parameter(name = "json", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "json", required = true) String json,
        @Parameter(name = "token", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "token", required = false) String token,
        @Parameter(name = "Jenkins-Crumb", description = "CSRF protection token", in = ParameterIn.HEADER) @RequestHeader(value = "Jenkins-Crumb", required = false) String jenkinsCrumb
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /job/{name}/config.xml
     * Update job configuration
     *
     * @param name Name of the job (required)
     * @param body Job configuration in config.xml format (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return Successfully retrieved job configuration in config.xml format (status code 200)
     *         or An error has occurred - error message is embedded inside the HTML response (status code 400)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "postJobConfig",
        description = "Update job configuration",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully retrieved job configuration in config.xml format"),
            @ApiResponse(responseCode = "400", description = "An error has occurred - error message is embedded inside the HTML response", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/{name}/config.xml",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> postJobConfig(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "body", description = "Job configuration in config.xml format", required = true) @Valid @RequestBody String body,
        @Parameter(name = "Jenkins-Crumb", description = "CSRF protection token", in = ParameterIn.HEADER) @RequestHeader(value = "Jenkins-Crumb", required = false) String jenkinsCrumb
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /job/{name}/doDelete
     * Delete a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return Successfully deleted the job (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "postJobDelete",
        description = "Delete a job",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/{name}/doDelete"
    )
    
    default ResponseEntity<Void> postJobDelete(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "Jenkins-Crumb", description = "CSRF protection token", in = ParameterIn.HEADER) @RequestHeader(value = "Jenkins-Crumb", required = false) String jenkinsCrumb
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /job/{name}/disable
     * Disable a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return Successfully disabled the job (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "postJobDisable",
        description = "Disable a job",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully disabled the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/{name}/disable"
    )
    
    default ResponseEntity<Void> postJobDisable(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "Jenkins-Crumb", description = "CSRF protection token", in = ParameterIn.HEADER) @RequestHeader(value = "Jenkins-Crumb", required = false) String jenkinsCrumb
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /job/{name}/enable
     * Enable a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return Successfully enabled the job (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "postJobEnable",
        description = "Enable a job",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully enabled the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/{name}/enable"
    )
    
    default ResponseEntity<Void> postJobEnable(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "Jenkins-Crumb", description = "CSRF protection token", in = ParameterIn.HEADER) @RequestHeader(value = "Jenkins-Crumb", required = false) String jenkinsCrumb
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /job/{name}/lastBuild/stop
     * Stop a job
     *
     * @param name Name of the job (required)
     * @param jenkinsCrumb CSRF protection token (optional)
     * @return Successfully stopped the job (status code 200)
     *         or Authentication failed - incorrect username and/or password (status code 401)
     *         or Jenkins requires authentication - please set username and password (status code 403)
     *         or Job cannot be found on Jenkins instance (status code 404)
     */
    @Operation(
        operationId = "postJobLastBuildStop",
        description = "Stop a job",
        tags = { "remoteAccess" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully stopped the job"),
            @ApiResponse(responseCode = "401", description = "Authentication failed - incorrect username and/or password"),
            @ApiResponse(responseCode = "403", description = "Jenkins requires authentication - please set username and password"),
            @ApiResponse(responseCode = "404", description = "Job cannot be found on Jenkins instance")
        },
        security = {
            @SecurityRequirement(name = "jenkins_auth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/job/{name}/lastBuild/stop"
    )
    
    default ResponseEntity<Void> postJobLastBuildStop(
        @Parameter(name = "name", description = "Name of the job", required = true, in = ParameterIn.PATH) @PathVariable("name") String name,
        @Parameter(name = "Jenkins-Crumb", description = "CSRF protection token", in = ParameterIn.HEADER) @RequestHeader(value = "Jenkins-Crumb", required = false) String jenkinsCrumb
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
