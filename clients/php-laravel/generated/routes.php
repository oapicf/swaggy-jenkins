<?php declare(strict_types=1);

/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


use Illuminate\Support\Facades\Route;

/**
 * GET getCrumb
 * Summary: 
 * Notes: Retrieve CSRF protection token
 */
Route::GET('/crumbIssuer/api/json', [\OpenAPI\Server\Http\Controllers\BaseController::class, 'getCrumb'])->name('base.get.crumb');

/**
 * DELETE deletePipelineQueueItem
 * Summary: 
 * Notes: Delete queue item from an organization pipeline queue
 */
Route::DELETE('/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'deletePipelineQueueItem'])->name('blueOcean.delete.pipeline.queue.item');

/**
 * GET getAuthenticatedUser
 * Summary: 
 * Notes: Retrieve authenticated user details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/user/', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getAuthenticatedUser'])->name('blueOcean.get.authenticated.user');

/**
 * GET getClasses
 * Summary: 
 * Notes: Get a list of class names supported by a given class
 */
Route::GET('/blue/rest/classes/{class}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getClasses'])->name('blueOcean.get.classes');

/**
 * GET getJsonWebKey
 * Summary: 
 * Notes: Retrieve JSON Web Key
 */
Route::GET('/jwt-auth/jwks/{key}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getJsonWebKey'])->name('blueOcean.get.json.web.key');

/**
 * GET getJsonWebToken
 * Summary: 
 * Notes: Retrieve JSON Web Token
 */
Route::GET('/jwt-auth/token', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getJsonWebToken'])->name('blueOcean.get.json.web.token');

/**
 * GET getOrganisation
 * Summary: 
 * Notes: Retrieve organization details
 */
Route::GET('/blue/rest/organizations/{organization}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getOrganisation'])->name('blueOcean.get.organisation');

/**
 * GET getOrganisations
 * Summary: 
 * Notes: Retrieve all organizations details
 */
Route::GET('/blue/rest/organizations/', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getOrganisations'])->name('blueOcean.get.organisations');

/**
 * GET getPipeline
 * Summary: 
 * Notes: Retrieve pipeline details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipeline'])->name('blueOcean.get.pipeline');

/**
 * GET getPipelineActivities
 * Summary: 
 * Notes: Retrieve all activities details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineActivities'])->name('blueOcean.get.pipeline.activities');

/**
 * GET getPipelineBranch
 * Summary: 
 * Notes: Retrieve branch details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineBranch'])->name('blueOcean.get.pipeline.branch');

/**
 * GET getPipelineBranchRun
 * Summary: 
 * Notes: Retrieve branch run details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineBranchRun'])->name('blueOcean.get.pipeline.branch.run');

/**
 * GET getPipelineBranches
 * Summary: 
 * Notes: Retrieve all branches details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineBranches'])->name('blueOcean.get.pipeline.branches');

/**
 * GET getPipelineFolder
 * Summary: 
 * Notes: Retrieve pipeline folder for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{folder}/', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineFolder'])->name('blueOcean.get.pipeline.folder');

/**
 * GET getPipelineFolderPipeline
 * Summary: 
 * Notes: Retrieve pipeline details for an organization folder
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineFolderPipeline'])->name('blueOcean.get.pipeline.folder.pipeline');

/**
 * GET getPipelineQueue
 * Summary: 
 * Notes: Retrieve queue details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineQueue'])->name('blueOcean.get.pipeline.queue');

/**
 * GET getPipelineRun
 * Summary: 
 * Notes: Retrieve run details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineRun'])->name('blueOcean.get.pipeline.run');

/**
 * GET getPipelineRunLog
 * Summary: 
 * Notes: Get log for a pipeline run
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineRunLog'])->name('blueOcean.get.pipeline.run.log');

/**
 * GET getPipelineRunNode
 * Summary: 
 * Notes: Retrieve run node details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineRunNode'])->name('blueOcean.get.pipeline.run.node');

/**
 * GET getPipelineRunNodeStep
 * Summary: 
 * Notes: Retrieve run node details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineRunNodeStep'])->name('blueOcean.get.pipeline.run.node.step');

/**
 * GET getPipelineRunNodeStepLog
 * Summary: 
 * Notes: Get log for a pipeline run node step
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineRunNodeStepLog'])->name('blueOcean.get.pipeline.run.node.step.log');

/**
 * GET getPipelineRunNodeSteps
 * Summary: 
 * Notes: Retrieve run node steps details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineRunNodeSteps'])->name('blueOcean.get.pipeline.run.node.steps');

/**
 * GET getPipelineRunNodes
 * Summary: 
 * Notes: Retrieve run nodes details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineRunNodes'])->name('blueOcean.get.pipeline.run.nodes');

/**
 * GET getPipelineRuns
 * Summary: 
 * Notes: Retrieve all runs details for an organization pipeline
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelineRuns'])->name('blueOcean.get.pipeline.runs');

/**
 * GET getPipelines
 * Summary: 
 * Notes: Retrieve all pipelines details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/pipelines/', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getPipelines'])->name('blueOcean.get.pipelines');

/**
 * GET getSCM
 * Summary: 
 * Notes: Retrieve SCM details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/scm/{scm}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getSCM'])->name('blueOcean.get.scm');

/**
 * GET getSCMOrganisationRepositories
 * Summary: 
 * Notes: Retrieve SCM organization repositories details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getSCMOrganisationRepositories'])->name('blueOcean.get.scm.organisation.repositories');

/**
 * GET getSCMOrganisationRepository
 * Summary: 
 * Notes: Retrieve SCM organization repository details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getSCMOrganisationRepository'])->name('blueOcean.get.scm.organisation.repository');

/**
 * GET getSCMOrganisations
 * Summary: 
 * Notes: Retrieve SCM organizations details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/scm/{scm}/organizations', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getSCMOrganisations'])->name('blueOcean.get.scm.organisations');

/**
 * GET getUser
 * Summary: 
 * Notes: Retrieve user details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/users/{user}', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getUser'])->name('blueOcean.get.user');

/**
 * GET getUserFavorites
 * Summary: 
 * Notes: Retrieve user favorites details for an organization
 */
Route::GET('/blue/rest/users/{user}/favorites', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getUserFavorites'])->name('blueOcean.get.user.favorites');

/**
 * GET getUsers
 * Summary: 
 * Notes: Retrieve users details for an organization
 */
Route::GET('/blue/rest/organizations/{organization}/users/', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'getUsers'])->name('blueOcean.get.users');

/**
 * POST postPipelineRun
 * Summary: 
 * Notes: Replay an organization pipeline run
 */
Route::POST('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'postPipelineRun'])->name('blueOcean.post.pipeline.run');

/**
 * POST postPipelineRuns
 * Summary: 
 * Notes: Start a build for an organization pipeline
 */
Route::POST('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'postPipelineRuns'])->name('blueOcean.post.pipeline.runs');

/**
 * PUT putPipelineFavorite
 * Summary: 
 * Notes: Favorite/unfavorite a pipeline
 */
Route::PUT('/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'putPipelineFavorite'])->name('blueOcean.put.pipeline.favorite');

/**
 * PUT putPipelineRun
 * Summary: 
 * Notes: Stop a build of an organization pipeline
 */
Route::PUT('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'putPipelineRun'])->name('blueOcean.put.pipeline.run');

/**
 * GET search
 * Summary: 
 * Notes: Search for any resource details
 */
Route::GET('/blue/rest/search/', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'search'])->name('blueOcean.search');

/**
 * GET searchClasses
 * Summary: 
 * Notes: Get classes details
 */
Route::GET('/blue/rest/classes/', [\OpenAPI\Server\Http\Controllers\BlueOceanController::class, 'searchClasses'])->name('blueOcean.search.classes');

/**
 * GET getComputer
 * Summary: 
 * Notes: Retrieve computer details
 */
Route::GET('/computer/api/json', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getComputer'])->name('remoteAccess.get.computer');

/**
 * GET getJenkins
 * Summary: 
 * Notes: Retrieve Jenkins details
 */
Route::GET('/api/json', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getJenkins'])->name('remoteAccess.get.jenkins');

/**
 * GET getJob
 * Summary: 
 * Notes: Retrieve job details
 */
Route::GET('/job/{name}/api/json', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getJob'])->name('remoteAccess.get.job');

/**
 * GET getJobConfig
 * Summary: 
 * Notes: Retrieve job configuration
 */
Route::GET('/job/{name}/config.xml', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getJobConfig'])->name('remoteAccess.get.job.config');

/**
 * GET getJobLastBuild
 * Summary: 
 * Notes: Retrieve job&#39;s last build details
 */
Route::GET('/job/{name}/lastBuild/api/json', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getJobLastBuild'])->name('remoteAccess.get.job.last.build');

/**
 * GET getJobProgressiveText
 * Summary: 
 * Notes: Retrieve job&#39;s build progressive text output
 */
Route::GET('/job/{name}/{number}/logText/progressiveText', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getJobProgressiveText'])->name('remoteAccess.get.job.progressive.text');

/**
 * GET getQueue
 * Summary: 
 * Notes: Retrieve queue details
 */
Route::GET('/queue/api/json', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getQueue'])->name('remoteAccess.get.queue');

/**
 * GET getQueueItem
 * Summary: 
 * Notes: Retrieve queued item details
 */
Route::GET('/queue/item/{number}/api/json', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getQueueItem'])->name('remoteAccess.get.queue.item');

/**
 * GET getView
 * Summary: 
 * Notes: Retrieve view details
 */
Route::GET('/view/{name}/api/json', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getView'])->name('remoteAccess.get.view');

/**
 * GET getViewConfig
 * Summary: 
 * Notes: Retrieve view configuration
 */
Route::GET('/view/{name}/config.xml', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'getViewConfig'])->name('remoteAccess.get.view.config');

/**
 * HEAD headJenkins
 * Summary: 
 * Notes: Retrieve Jenkins headers
 */
Route::HEAD('/api/json', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'headJenkins'])->name('remoteAccess.head.jenkins');

/**
 * POST postCreateItem
 * Summary: 
 * Notes: Create a new job using job configuration, or copied from an existing job
 */
Route::POST('/createItem', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postCreateItem'])->name('remoteAccess.post.create.item');

/**
 * POST postCreateView
 * Summary: 
 * Notes: Create a new view using view configuration
 */
Route::POST('/createView', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postCreateView'])->name('remoteAccess.post.create.view');

/**
 * POST postJobBuild
 * Summary: 
 * Notes: Build a job
 */
Route::POST('/job/{name}/build', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postJobBuild'])->name('remoteAccess.post.job.build');

/**
 * POST postJobConfig
 * Summary: 
 * Notes: Update job configuration
 */
Route::POST('/job/{name}/config.xml', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postJobConfig'])->name('remoteAccess.post.job.config');

/**
 * POST postJobDelete
 * Summary: 
 * Notes: Delete a job
 */
Route::POST('/job/{name}/doDelete', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postJobDelete'])->name('remoteAccess.post.job.delete');

/**
 * POST postJobDisable
 * Summary: 
 * Notes: Disable a job
 */
Route::POST('/job/{name}/disable', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postJobDisable'])->name('remoteAccess.post.job.disable');

/**
 * POST postJobEnable
 * Summary: 
 * Notes: Enable a job
 */
Route::POST('/job/{name}/enable', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postJobEnable'])->name('remoteAccess.post.job.enable');

/**
 * POST postJobLastBuildStop
 * Summary: 
 * Notes: Stop a job
 */
Route::POST('/job/{name}/lastBuild/stop', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postJobLastBuildStop'])->name('remoteAccess.post.job.last.build.stop');

/**
 * POST postViewConfig
 * Summary: 
 * Notes: Update view configuration
 */
Route::POST('/view/{name}/config.xml', [\OpenAPI\Server\Http\Controllers\RemoteAccessController::class, 'postViewConfig'])->name('remoteAccess.post.view.config');

