<?php declare(strict_types=1);

/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use OpenAPI\Server\Api\BlueOceanApiInterface;

class BlueOceanController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly BlueOceanApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation deletePipelineQueueItem
     *
     * .
     *
     */
    public function deletePipelineQueueItem(Request $request, string $organization, string $pipeline, string $queue): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'queue' => $queue,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'queue' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        try {
            $apiResult = $this->api->deletePipelineQueueItem($organization, $pipeline, $queue);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getAuthenticatedUser
     *
     * .
     *
     */
    public function getAuthenticatedUser(Request $request, string $organization): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getAuthenticatedUser($organization);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\User) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getClasses
     *
     * .
     *
     */
    public function getClasses(Request $request, string $class): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'class' => $class,
                ],
                $request->all(),
            ),
            [
                'class' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getClasses($class);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getJsonWebKey
     *
     * .
     *
     */
    public function getJsonWebKey(Request $request, int $key): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'key' => $key,
                ],
                $request->all(),
            ),
            [
                'key' => [
                    'required',
                    'integer',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getJsonWebKey($key);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getJsonWebToken
     *
     * .
     *
     */
    public function getJsonWebToken(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'expiryTimeInMins' => [
                    'integer',
                ],
                'maxExpiryTimeInMins' => [
                    'integer',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $expiryTimeInMins = $request->integer('expiryTimeInMins');

        $maxExpiryTimeInMins = $request->integer('maxExpiryTimeInMins');

        try {
            $apiResult = $this->api->getJsonWebToken($expiryTimeInMins, $maxExpiryTimeInMins);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getOrganisation
     *
     * .
     *
     */
    public function getOrganisation(Request $request, string $organization): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getOrganisation($organization);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\Organisation) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getOrganisations
     *
     * .
     *
     */
    public function getOrganisations(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->getOrganisations();
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipeline
     *
     * .
     *
     */
    public function getPipeline(Request $request, string $organization, string $pipeline): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getPipeline($organization, $pipeline);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\Pipeline) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineActivities
     *
     * .
     *
     */
    public function getPipelineActivities(Request $request, string $organization, string $pipeline): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getPipelineActivities($organization, $pipeline);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineBranch
     *
     * .
     *
     */
    public function getPipelineBranch(Request $request, string $organization, string $pipeline, string $branch): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'branch' => $branch,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'branch' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        try {
            $apiResult = $this->api->getPipelineBranch($organization, $pipeline, $branch);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\BranchImpl) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineBranchRun
     *
     * .
     *
     */
    public function getPipelineBranchRun(Request $request, string $organization, string $pipeline, string $branch, string $run): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'branch' => $branch,'run' => $run,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'branch' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }





        try {
            $apiResult = $this->api->getPipelineBranchRun($organization, $pipeline, $branch, $run);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\PipelineRun) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineBranches
     *
     * .
     *
     */
    public function getPipelineBranches(Request $request, string $organization, string $pipeline): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getPipelineBranches($organization, $pipeline);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\MultibranchPipeline) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineFolder
     *
     * .
     *
     */
    public function getPipelineFolder(Request $request, string $organization, string $folder): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'folder' => $folder,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'folder' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getPipelineFolder($organization, $folder);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\PipelineFolderImpl) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineFolderPipeline
     *
     * .
     *
     */
    public function getPipelineFolderPipeline(Request $request, string $organization, string $pipeline, string $folder): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'folder' => $folder,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'folder' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        try {
            $apiResult = $this->api->getPipelineFolderPipeline($organization, $pipeline, $folder);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\PipelineImpl) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineQueue
     *
     * .
     *
     */
    public function getPipelineQueue(Request $request, string $organization, string $pipeline): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getPipelineQueue($organization, $pipeline);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineRun
     *
     * .
     *
     */
    public function getPipelineRun(Request $request, string $organization, string $pipeline, string $run): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        try {
            $apiResult = $this->api->getPipelineRun($organization, $pipeline, $run);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\PipelineRun) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineRunLog
     *
     * .
     *
     */
    public function getPipelineRunLog(Request $request, string $organization, string $pipeline, string $run): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
                'start' => [
                    'integer',
                ],
                'download' => [
                    'boolean',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $start = $request->integer('start');

        $download = $request->bool('download');

        try {
            $apiResult = $this->api->getPipelineRunLog($organization, $pipeline, $run, $start, $download);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineRunNode
     *
     * .
     *
     */
    public function getPipelineRunNode(Request $request, string $organization, string $pipeline, string $run, string $node): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,'node' => $node,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
                'node' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }





        try {
            $apiResult = $this->api->getPipelineRunNode($organization, $pipeline, $run, $node);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\PipelineRunNode) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineRunNodeStep
     *
     * .
     *
     */
    public function getPipelineRunNodeStep(Request $request, string $organization, string $pipeline, string $run, string $node, string $step): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,'node' => $node,'step' => $step,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
                'node' => [
                    'required',
                    'string',
                ],
                'step' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }






        try {
            $apiResult = $this->api->getPipelineRunNodeStep($organization, $pipeline, $run, $node, $step);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\PipelineStepImpl) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineRunNodeStepLog
     *
     * .
     *
     */
    public function getPipelineRunNodeStepLog(Request $request, string $organization, string $pipeline, string $run, string $node, string $step): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,'node' => $node,'step' => $step,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
                'node' => [
                    'required',
                    'string',
                ],
                'step' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }






        try {
            $apiResult = $this->api->getPipelineRunNodeStepLog($organization, $pipeline, $run, $node, $step);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineRunNodeSteps
     *
     * .
     *
     */
    public function getPipelineRunNodeSteps(Request $request, string $organization, string $pipeline, string $run, string $node): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,'node' => $node,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
                'node' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }





        try {
            $apiResult = $this->api->getPipelineRunNodeSteps($organization, $pipeline, $run, $node);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineRunNodes
     *
     * .
     *
     */
    public function getPipelineRunNodes(Request $request, string $organization, string $pipeline, string $run): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        try {
            $apiResult = $this->api->getPipelineRunNodes($organization, $pipeline, $run);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelineRuns
     *
     * .
     *
     */
    public function getPipelineRuns(Request $request, string $organization, string $pipeline): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getPipelineRuns($organization, $pipeline);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getPipelines
     *
     * .
     *
     */
    public function getPipelines(Request $request, string $organization): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getPipelines($organization);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSCM
     *
     * .
     *
     */
    public function getSCM(Request $request, string $organization, string $scm): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'scm' => $scm,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'scm' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getSCM($organization, $scm);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\GithubScm) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSCMOrganisationRepositories
     *
     * .
     *
     */
    public function getSCMOrganisationRepositories(Request $request, string $organization, string $scm, string $scmOrganisation): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'scm' => $scm,'scmOrganisation' => $scmOrganisation,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'scm' => [
                    'required',
                    'string',
                ],
                'scmOrganisation' => [
                    'required',
                    'string',
                ],
                'credentialId' => [
                    'string',
                ],
                'pageSize' => [
                    'integer',
                ],
                'pageNumber' => [
                    'integer',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $credentialId = $request->string('credentialId')->value();

        $pageSize = $request->integer('pageSize');

        $pageNumber = $request->integer('pageNumber');

        try {
            $apiResult = $this->api->getSCMOrganisationRepositories($organization, $scm, $scmOrganisation, $credentialId, $pageSize, $pageNumber);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSCMOrganisationRepository
     *
     * .
     *
     */
    public function getSCMOrganisationRepository(Request $request, string $organization, string $scm, string $scmOrganisation, string $repository): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'scm' => $scm,'scmOrganisation' => $scmOrganisation,'repository' => $repository,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'scm' => [
                    'required',
                    'string',
                ],
                'scmOrganisation' => [
                    'required',
                    'string',
                ],
                'repository' => [
                    'required',
                    'string',
                ],
                'credentialId' => [
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }





        $credentialId = $request->string('credentialId')->value();

        try {
            $apiResult = $this->api->getSCMOrganisationRepository($organization, $scm, $scmOrganisation, $repository, $credentialId);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getSCMOrganisations
     *
     * .
     *
     */
    public function getSCMOrganisations(Request $request, string $organization, string $scm): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'scm' => $scm,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'scm' => [
                    'required',
                    'string',
                ],
                'credentialId' => [
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $credentialId = $request->string('credentialId')->value();

        try {
            $apiResult = $this->api->getSCMOrganisations($organization, $scm, $credentialId);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getUser
     *
     * .
     *
     */
    public function getUser(Request $request, string $organization, string $user): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'user' => $user,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'user' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->getUser($organization, $user);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\User) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getUserFavorites
     *
     * .
     *
     */
    public function getUserFavorites(Request $request, string $user): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'user' => $user,
                ],
                $request->all(),
            ),
            [
                'user' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getUserFavorites($user);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if (is_array($apiResult)) {
            $serialized = array_map(fn ($item) => $this->serde->serialize($item, format: 'array'), $apiResult);
            return response()->json($serialized, 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getUsers
     *
     * .
     *
     */
    public function getUsers(Request $request, string $organization): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getUsers($organization);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\User) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postPipelineRun
     *
     * .
     *
     */
    public function postPipelineRun(Request $request, string $organization, string $pipeline, string $run): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        try {
            $apiResult = $this->api->postPipelineRun($organization, $pipeline, $run);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\QueueItemImpl) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postPipelineRuns
     *
     * .
     *
     */
    public function postPipelineRuns(Request $request, string $organization, string $pipeline): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        try {
            $apiResult = $this->api->postPipelineRuns($organization, $pipeline);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\QueueItemImpl) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation putPipelineFavorite
     *
     * .
     *
     */
    public function putPipelineFavorite(Request $request, string $organization, string $pipeline): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $body = $request->bool('body');

        try {
            $apiResult = $this->api->putPipelineFavorite($organization, $pipeline, $body);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\FavoriteImpl) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation putPipelineRun
     *
     * .
     *
     */
    public function putPipelineRun(Request $request, string $organization, string $pipeline, string $run): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'organization' => $organization,'pipeline' => $pipeline,'run' => $run,
                ],
                $request->all(),
            ),
            [
                'organization' => [
                    'required',
                    'string',
                ],
                'pipeline' => [
                    'required',
                    'string',
                ],
                'run' => [
                    'required',
                    'string',
                ],
                'blocking' => [
                    'string',
                ],
                'timeOutInSecs' => [
                    'integer',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }




        $blocking = $request->string('blocking')->value();

        $timeOutInSecs = $request->integer('timeOutInSecs');

        try {
            $apiResult = $this->api->putPipelineRun($organization, $pipeline, $run, $blocking, $timeOutInSecs);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\PipelineRun) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation search
     *
     * .
     *
     */
    public function search(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'q' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $q = $request->string('q')->value();

        try {
            $apiResult = $this->api->search($q);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation searchClasses
     *
     * .
     *
     */
    public function searchClasses(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'q' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $q = $request->string('q')->value();

        try {
            $apiResult = $this->api->searchClasses($q);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
