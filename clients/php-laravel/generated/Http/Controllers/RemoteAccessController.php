<?php declare(strict_types=1);

/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 * PHP version 8.1
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel/
 */


namespace OpenAPI\Server\Http\Controllers;

use Crell\Serde\SerdeCommon;
use Illuminate\Routing\Controller;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;


use OpenAPI\Server\Api\RemoteAccessApiInterface;

class RemoteAccessController extends Controller
{
    /**
     * Constructor
     */
    public function __construct(
        private readonly RemoteAccessApiInterface $api,
        private readonly SerdeCommon $serde = new SerdeCommon(),
    )
    {
    }

    /**
     * Operation getComputer
     *
     * .
     *
     */
    public function getComputer(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
                'depth' => [
                    'required',
                    'integer',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $depth = $request->integer('depth');

        try {
            $apiResult = $this->api->getComputer($depth);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ComputerSet) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getJenkins
     *
     * .
     *
     */
    public function getJenkins(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->getJenkins();
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\Hudson) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getJob
     *
     * .
     *
     */
    public function getJob(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getJob($name);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\FreeStyleProject) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getJobConfig
     *
     * .
     *
     */
    public function getJobConfig(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getJobConfig($name);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getJobLastBuild
     *
     * .
     *
     */
    public function getJobLastBuild(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getJobLastBuild($name);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\FreeStyleBuild) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getJobProgressiveText
     *
     * .
     *
     */
    public function getJobProgressiveText(Request $request, string $name, string $number): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,'number' => $number,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
                'number' => [
                    'required',
                    'string',
                ],
                'start' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }



        $start = $request->string('start')->value();

        try {
            $apiResult = $this->api->getJobProgressiveText($name, $number, $start);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getQueue
     *
     * .
     *
     */
    public function getQueue(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->getQueue();
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\Queue) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getQueueItem
     *
     * .
     *
     */
    public function getQueueItem(Request $request, string $number): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'number' => $number,
                ],
                $request->all(),
            ),
            [
                'number' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getQueueItem($number);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\Queue) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getView
     *
     * .
     *
     */
    public function getView(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getView($name);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\ListView) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation getViewConfig
     *
     * .
     *
     */
    public function getViewConfig(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        try {
            $apiResult = $this->api->getViewConfig($name);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation headJenkins
     *
     * .
     *
     */
    public function headJenkins(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        try {
            $apiResult = $this->api->headJenkins();
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postCreateItem
     *
     * .
     *
     */
    public function postCreateItem(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $name = $request->string('name')->value();

        $from = $request->string('from')->value();

        $mode = $request->string('mode')->value();

        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        $contentType = $request->string('contentType')->value();

        $body = $request->string('body')->value();

        try {
            $apiResult = $this->api->postCreateItem($name, $from, $mode, $jenkinsCrumb, $contentType, $body);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postCreateView
     *
     * .
     *
     */
    public function postCreateView(Request $request): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }

        $name = $request->string('name')->value();

        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        $contentType = $request->string('contentType')->value();

        $body = $request->string('body')->value();

        try {
            $apiResult = $this->api->postCreateView($name, $jenkinsCrumb, $contentType, $body);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postJobBuild
     *
     * .
     *
     */
    public function postJobBuild(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
                'json' => [
                    'required',
                    'string',
                ],
                'token' => [
                    'string',
                ],
                'jenkinsCrumb' => [
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $json = $request->string('json')->value();

        $token = $request->string('token')->value();

        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        try {
            $apiResult = $this->api->postJobBuild($name, $json, $token, $jenkinsCrumb);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent201) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 201);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postJobConfig
     *
     * .
     *
     */
    public function postJobConfig(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $body = $request->string('body')->value();

        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        try {
            $apiResult = $this->api->postJobConfig($name, $body, $jenkinsCrumb);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postJobDelete
     *
     * .
     *
     */
    public function postJobDelete(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
                'jenkinsCrumb' => [
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        try {
            $apiResult = $this->api->postJobDelete($name, $jenkinsCrumb);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postJobDisable
     *
     * .
     *
     */
    public function postJobDisable(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
                'jenkinsCrumb' => [
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        try {
            $apiResult = $this->api->postJobDisable($name, $jenkinsCrumb);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postJobEnable
     *
     * .
     *
     */
    public function postJobEnable(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
                'jenkinsCrumb' => [
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        try {
            $apiResult = $this->api->postJobEnable($name, $jenkinsCrumb);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postJobLastBuildStop
     *
     * .
     *
     */
    public function postJobLastBuildStop(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
                'name' => [
                    'required',
                    'string',
                ],
                'jenkinsCrumb' => [
                    'string',
                ],
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        try {
            $apiResult = $this->api->postJobLastBuildStop($name, $jenkinsCrumb);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
    /**
     * Operation postViewConfig
     *
     * .
     *
     */
    public function postViewConfig(Request $request, string $name): JsonResponse
    {
        $validator = Validator::make(
            array_merge(
                [
                    'name' => $name,
                ],
                $request->all(),
            ),
            [
            ],
        );

        if ($validator->fails()) {
            return response()->json(['error' => 'Invalid input'], 400);
        }


        $body = $request->string('body')->value();

        $jenkinsCrumb = $request->string('jenkinsCrumb')->value();

        try {
            $apiResult = $this->api->postViewConfig($name, $body, $jenkinsCrumb);
        } catch (\Exception $exception) {
            // This shouldn't happen
            return response()->json(['error' => $exception->getMessage()], 500);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent200) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 200);
        }

        if ($apiResult instanceof string) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 400);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent401) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 401);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent403) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 403);
        }

        if ($apiResult instanceof \OpenAPI\Server\Model\NoContent404) {
            return response()->json($this->serde->serialize($apiResult, format: 'array'), 404);
        }


        // This shouldn't happen
        return response()->abort(500);
    }
}
