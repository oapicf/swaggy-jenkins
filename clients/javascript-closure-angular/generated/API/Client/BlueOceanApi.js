/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.BlueOceanApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Jenkins API clients generated from Swagger / Open API specification
 * Version: 3.0.2-pre.0
* Generator version: 7.12.0
 * Generated by: org.openapitools.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.BlueOceanApi');

goog.require('API.Client.BranchImpl');
goog.require('API.Client.FavoriteImpl');
goog.require('API.Client.GithubOrganization');
goog.require('API.Client.GithubScm');
goog.require('API.Client.MultibranchPipeline');
goog.require('API.Client.Organisation');
goog.require('API.Client.Pipeline');
goog.require('API.Client.PipelineActivity');
goog.require('API.Client.PipelineFolderImpl');
goog.require('API.Client.PipelineImpl');
goog.require('API.Client.PipelineRun');
goog.require('API.Client.PipelineRunNode');
goog.require('API.Client.PipelineStepImpl');
goog.require('API.Client.QueueItemImpl');
goog.require('API.Client.User');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.BlueOceanApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('BlueOceanApiBasePath') ?
                   /** @type {!string} */ ($injector.get('BlueOceanApiBasePath')) :
                   'http://localhost';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('BlueOceanApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('BlueOceanApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.BlueOceanApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Delete queue item from an organization pipeline queue
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} queue Name of the queue item
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.BlueOceanApi.prototype.deletePipelineQueueItem = function(organization, pipeline, queue, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'queue' + '}', String(queue));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling deletePipelineQueueItem');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling deletePipelineQueueItem');
  }
  // verify required parameter 'queue' is set
  if (!queue) {
    throw new Error('Missing required parameter queue when calling deletePipelineQueueItem');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve authenticated user details for an organization
 * @param {!string} organization Name of the organization
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.User>}
 */
API.Client.BlueOceanApi.prototype.getAuthenticatedUser = function(organization, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/user/'
      .replace('{' + 'organization' + '}', String(organization));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getAuthenticatedUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of class names supported by a given class
 * @param {!string} _class Name of the class
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.getClasses = function(_class, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/classes/{class}'
      .replace('{' + 'class' + '}', String(_class));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter '_class' is set
  if (!_class) {
    throw new Error('Missing required parameter _class when calling getClasses');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve JSON Web Key
 * @param {!number} key Key ID received as part of JWT header field kid
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.getJsonWebKey = function(key, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/jwt-auth/jwks/{key}'
      .replace('{' + 'key' + '}', String(key));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'key' is set
  if (!key) {
    throw new Error('Missing required parameter key when calling getJsonWebKey');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve JSON Web Token
 * @param {!number=} opt_expiryTimeInMins Token expiry time in minutes, default: 30 minutes
 * @param {!number=} opt_maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.getJsonWebToken = function(opt_expiryTimeInMins, opt_maxExpiryTimeInMins, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/jwt-auth/token';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_expiryTimeInMins !== undefined) {
    queryParameters['expiryTimeInMins'] = opt_expiryTimeInMins;
  }

  if (opt_maxExpiryTimeInMins !== undefined) {
    queryParameters['maxExpiryTimeInMins'] = opt_maxExpiryTimeInMins;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve organization details
 * @param {!string} organization Name of the organization
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Organisation>}
 */
API.Client.BlueOceanApi.prototype.getOrganisation = function(organization, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}'
      .replace('{' + 'organization' + '}', String(organization));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getOrganisation');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve all organizations details
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Organisation>>}
 */
API.Client.BlueOceanApi.prototype.getOrganisations = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve pipeline details for an organization
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.Pipeline>}
 */
API.Client.BlueOceanApi.prototype.getPipeline = function(organization, pipeline, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipeline');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipeline');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve all activities details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PipelineActivity>>}
 */
API.Client.BlueOceanApi.prototype.getPipelineActivities = function(organization, pipeline, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineActivities');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineActivities');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve branch details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} branch Name of the branch
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.BranchImpl>}
 */
API.Client.BlueOceanApi.prototype.getPipelineBranch = function(organization, pipeline, branch, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'branch' + '}', String(branch));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineBranch');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineBranch');
  }
  // verify required parameter 'branch' is set
  if (!branch) {
    throw new Error('Missing required parameter branch when calling getPipelineBranch');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve branch run details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} branch Name of the branch
 * @param {!string} run Name of the run
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PipelineRun>}
 */
API.Client.BlueOceanApi.prototype.getPipelineBranchRun = function(organization, pipeline, branch, run, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'branch' + '}', String(branch))
      .replace('{' + 'run' + '}', String(run));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineBranchRun');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineBranchRun');
  }
  // verify required parameter 'branch' is set
  if (!branch) {
    throw new Error('Missing required parameter branch when calling getPipelineBranchRun');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling getPipelineBranchRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve all branches details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.MultibranchPipeline>}
 */
API.Client.BlueOceanApi.prototype.getPipelineBranches = function(organization, pipeline, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineBranches');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineBranches');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve pipeline folder for an organization
 * @param {!string} organization Name of the organization
 * @param {!string} folder Name of the folder
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PipelineFolderImpl>}
 */
API.Client.BlueOceanApi.prototype.getPipelineFolder = function(organization, folder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{folder}/'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'folder' + '}', String(folder));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineFolder');
  }
  // verify required parameter 'folder' is set
  if (!folder) {
    throw new Error('Missing required parameter folder when calling getPipelineFolder');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve pipeline details for an organization folder
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} folder Name of the folder
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PipelineImpl>}
 */
API.Client.BlueOceanApi.prototype.getPipelineFolderPipeline = function(organization, pipeline, folder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'folder' + '}', String(folder));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineFolderPipeline');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineFolderPipeline');
  }
  // verify required parameter 'folder' is set
  if (!folder) {
    throw new Error('Missing required parameter folder when calling getPipelineFolderPipeline');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve queue details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.QueueItemImpl>>}
 */
API.Client.BlueOceanApi.prototype.getPipelineQueue = function(organization, pipeline, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineQueue');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineQueue');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve run details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PipelineRun>}
 */
API.Client.BlueOceanApi.prototype.getPipelineRun = function(organization, pipeline, run, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineRun');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineRun');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling getPipelineRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get log for a pipeline run
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!number=} opt_start Start position of the log
 * @param {!boolean=} opt_download Set to true in order to download the file, otherwise it&#39;s passed as a response body
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.getPipelineRunLog = function(organization, pipeline, run, opt_start, opt_download, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineRunLog');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineRunLog');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling getPipelineRunLog');
  }
  if (opt_start !== undefined) {
    queryParameters['start'] = opt_start;
  }

  if (opt_download !== undefined) {
    queryParameters['download'] = opt_download;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve run node details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!string} node Name of the node
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PipelineRunNode>}
 */
API.Client.BlueOceanApi.prototype.getPipelineRunNode = function(organization, pipeline, run, node, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run))
      .replace('{' + 'node' + '}', String(node));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineRunNode');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineRunNode');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling getPipelineRunNode');
  }
  // verify required parameter 'node' is set
  if (!node) {
    throw new Error('Missing required parameter node when calling getPipelineRunNode');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve run node details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!string} node Name of the node
 * @param {!string} step Name of the step
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PipelineStepImpl>}
 */
API.Client.BlueOceanApi.prototype.getPipelineRunNodeStep = function(organization, pipeline, run, node, step, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run))
      .replace('{' + 'node' + '}', String(node))
      .replace('{' + 'step' + '}', String(step));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineRunNodeStep');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineRunNodeStep');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling getPipelineRunNodeStep');
  }
  // verify required parameter 'node' is set
  if (!node) {
    throw new Error('Missing required parameter node when calling getPipelineRunNodeStep');
  }
  // verify required parameter 'step' is set
  if (!step) {
    throw new Error('Missing required parameter step when calling getPipelineRunNodeStep');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get log for a pipeline run node step
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!string} node Name of the node
 * @param {!string} step Name of the step
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.getPipelineRunNodeStepLog = function(organization, pipeline, run, node, step, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run))
      .replace('{' + 'node' + '}', String(node))
      .replace('{' + 'step' + '}', String(step));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineRunNodeStepLog');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineRunNodeStepLog');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling getPipelineRunNodeStepLog');
  }
  // verify required parameter 'node' is set
  if (!node) {
    throw new Error('Missing required parameter node when calling getPipelineRunNodeStepLog');
  }
  // verify required parameter 'step' is set
  if (!step) {
    throw new Error('Missing required parameter step when calling getPipelineRunNodeStepLog');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve run node steps details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!string} node Name of the node
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PipelineStepImpl>>}
 */
API.Client.BlueOceanApi.prototype.getPipelineRunNodeSteps = function(organization, pipeline, run, node, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run))
      .replace('{' + 'node' + '}', String(node));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineRunNodeSteps');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineRunNodeSteps');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling getPipelineRunNodeSteps');
  }
  // verify required parameter 'node' is set
  if (!node) {
    throw new Error('Missing required parameter node when calling getPipelineRunNodeSteps');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve run nodes details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PipelineRunNode>>}
 */
API.Client.BlueOceanApi.prototype.getPipelineRunNodes = function(organization, pipeline, run, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineRunNodes');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineRunNodes');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling getPipelineRunNodes');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve all runs details for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.PipelineRun>>}
 */
API.Client.BlueOceanApi.prototype.getPipelineRuns = function(organization, pipeline, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelineRuns');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineRuns');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve all pipelines details for an organization
 * @param {!string} organization Name of the organization
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.Pipeline>>}
 */
API.Client.BlueOceanApi.prototype.getPipelines = function(organization, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/'
      .replace('{' + 'organization' + '}', String(organization));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getPipelines');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve SCM details for an organization
 * @param {!string} organization Name of the organization
 * @param {!string} scm Name of SCM
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.GithubScm>}
 */
API.Client.BlueOceanApi.prototype.getSCM = function(organization, scm, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/scm/{scm}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'scm' + '}', String(scm));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getSCM');
  }
  // verify required parameter 'scm' is set
  if (!scm) {
    throw new Error('Missing required parameter scm when calling getSCM');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve SCM organization repositories details for an organization
 * @param {!string} organization Name of the organization
 * @param {!string} scm Name of SCM
 * @param {!string} scmOrganisation Name of the SCM organization
 * @param {!string=} opt_credentialId Credential ID
 * @param {!number=} opt_pageSize Number of items in a page
 * @param {!number=} opt_pageNumber Page number
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.GithubOrganization>>}
 */
API.Client.BlueOceanApi.prototype.getSCMOrganisationRepositories = function(organization, scm, scmOrganisation, opt_credentialId, opt_pageSize, opt_pageNumber, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'scm' + '}', String(scm))
      .replace('{' + 'scmOrganisation' + '}', String(scmOrganisation));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getSCMOrganisationRepositories');
  }
  // verify required parameter 'scm' is set
  if (!scm) {
    throw new Error('Missing required parameter scm when calling getSCMOrganisationRepositories');
  }
  // verify required parameter 'scmOrganisation' is set
  if (!scmOrganisation) {
    throw new Error('Missing required parameter scmOrganisation when calling getSCMOrganisationRepositories');
  }
  if (opt_credentialId !== undefined) {
    queryParameters['credentialId'] = opt_credentialId;
  }

  if (opt_pageSize !== undefined) {
    queryParameters['pageSize'] = opt_pageSize;
  }

  if (opt_pageNumber !== undefined) {
    queryParameters['pageNumber'] = opt_pageNumber;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve SCM organization repository details for an organization
 * @param {!string} organization Name of the organization
 * @param {!string} scm Name of SCM
 * @param {!string} scmOrganisation Name of the SCM organization
 * @param {!string} repository Name of the SCM repository
 * @param {!string=} opt_credentialId Credential ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.GithubOrganization>>}
 */
API.Client.BlueOceanApi.prototype.getSCMOrganisationRepository = function(organization, scm, scmOrganisation, repository, opt_credentialId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'scm' + '}', String(scm))
      .replace('{' + 'scmOrganisation' + '}', String(scmOrganisation))
      .replace('{' + 'repository' + '}', String(repository));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getSCMOrganisationRepository');
  }
  // verify required parameter 'scm' is set
  if (!scm) {
    throw new Error('Missing required parameter scm when calling getSCMOrganisationRepository');
  }
  // verify required parameter 'scmOrganisation' is set
  if (!scmOrganisation) {
    throw new Error('Missing required parameter scmOrganisation when calling getSCMOrganisationRepository');
  }
  // verify required parameter 'repository' is set
  if (!repository) {
    throw new Error('Missing required parameter repository when calling getSCMOrganisationRepository');
  }
  if (opt_credentialId !== undefined) {
    queryParameters['credentialId'] = opt_credentialId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve SCM organizations details for an organization
 * @param {!string} organization Name of the organization
 * @param {!string} scm Name of SCM
 * @param {!string=} opt_credentialId Credential ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.GithubOrganization>>}
 */
API.Client.BlueOceanApi.prototype.getSCMOrganisations = function(organization, scm, opt_credentialId, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/scm/{scm}/organizations'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'scm' + '}', String(scm));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getSCMOrganisations');
  }
  // verify required parameter 'scm' is set
  if (!scm) {
    throw new Error('Missing required parameter scm when calling getSCMOrganisations');
  }
  if (opt_credentialId !== undefined) {
    queryParameters['credentialId'] = opt_credentialId;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve user details for an organization
 * @param {!string} organization Name of the organization
 * @param {!string} user Name of the user
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.User>}
 */
API.Client.BlueOceanApi.prototype.getUser = function(organization, user, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/users/{user}'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'user' + '}', String(user));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getUser');
  }
  // verify required parameter 'user' is set
  if (!user) {
    throw new Error('Missing required parameter user when calling getUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve user favorites details for an organization
 * @param {!string} user Name of the user
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.FavoriteImpl>>}
 */
API.Client.BlueOceanApi.prototype.getUserFavorites = function(user, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/users/{user}/favorites'
      .replace('{' + 'user' + '}', String(user));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'user' is set
  if (!user) {
    throw new Error('Missing required parameter user when calling getUserFavorites');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve users details for an organization
 * @param {!string} organization Name of the organization
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.User>}
 */
API.Client.BlueOceanApi.prototype.getUsers = function(organization, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/users/'
      .replace('{' + 'organization' + '}', String(organization));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling getUsers');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Replay an organization pipeline run
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.QueueItemImpl>}
 */
API.Client.BlueOceanApi.prototype.postPipelineRun = function(organization, pipeline, run, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling postPipelineRun');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling postPipelineRun');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling postPipelineRun');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Start a build for an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.QueueItemImpl>}
 */
API.Client.BlueOceanApi.prototype.postPipelineRuns = function(organization, pipeline, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling postPipelineRuns');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling postPipelineRuns');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Favorite/unfavorite a pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!boolean} body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.FavoriteImpl>}
 */
API.Client.BlueOceanApi.prototype.putPipelineFavorite = function(organization, pipeline, body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling putPipelineFavorite');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling putPipelineFavorite');
  }
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling putPipelineFavorite');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Stop a build of an organization pipeline
 * @param {!string} organization Name of the organization
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} run Name of the run
 * @param {!string=} opt_blocking Set to true to make blocking stop, default: false
 * @param {!number=} opt_timeOutInSecs Timeout in seconds, default: 10 seconds
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.PipelineRun>}
 */
API.Client.BlueOceanApi.prototype.putPipelineRun = function(organization, pipeline, run, opt_blocking, opt_timeOutInSecs, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop'
      .replace('{' + 'organization' + '}', String(organization))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'run' + '}', String(run));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organization' is set
  if (!organization) {
    throw new Error('Missing required parameter organization when calling putPipelineRun');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling putPipelineRun');
  }
  // verify required parameter 'run' is set
  if (!run) {
    throw new Error('Missing required parameter run when calling putPipelineRun');
  }
  if (opt_blocking !== undefined) {
    queryParameters['blocking'] = opt_blocking;
  }

  if (opt_timeOutInSecs !== undefined) {
    queryParameters['timeOutInSecs'] = opt_timeOutInSecs;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'PUT',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Search for any resource details
 * @param {!string} q Query string
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.search = function(q, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/search/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'q' is set
  if (!q) {
    throw new Error('Missing required parameter q when calling search');
  }
  if (q !== undefined) {
    queryParameters['q'] = q;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get classes details
 * @param {!string} q Query string containing an array of class names
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.searchClasses = function(q, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/classes/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'q' is set
  if (!q) {
    throw new Error('Missing required parameter q when calling searchClasses');
  }
  if (q !== undefined) {
    queryParameters['q'] = q;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
