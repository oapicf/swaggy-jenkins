/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * API version: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RemoteAccessAPIController binds http requests to an api service and writes the service results to the http response
type RemoteAccessAPIController struct {
	service RemoteAccessAPIServicer
	errorHandler ErrorHandler
}

// RemoteAccessAPIOption for how the controller is set up.
type RemoteAccessAPIOption func(*RemoteAccessAPIController)

// WithRemoteAccessAPIErrorHandler inject ErrorHandler into controller
func WithRemoteAccessAPIErrorHandler(h ErrorHandler) RemoteAccessAPIOption {
	return func(c *RemoteAccessAPIController) {
		c.errorHandler = h
	}
}

// NewRemoteAccessAPIController creates a default api controller
func NewRemoteAccessAPIController(s RemoteAccessAPIServicer, opts ...RemoteAccessAPIOption) Router {
	controller := &RemoteAccessAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RemoteAccessAPIController
func (c *RemoteAccessAPIController) Routes() Routes {
	return Routes{
		"GetComputer": Route{
			strings.ToUpper("Get"),
			"/computer/api/json",
			c.GetComputer,
		},
		"GetJenkins": Route{
			strings.ToUpper("Get"),
			"/api/json",
			c.GetJenkins,
		},
		"GetJob": Route{
			strings.ToUpper("Get"),
			"/job/{name}/api/json",
			c.GetJob,
		},
		"GetJobConfig": Route{
			strings.ToUpper("Get"),
			"/job/{name}/config.xml",
			c.GetJobConfig,
		},
		"GetJobLastBuild": Route{
			strings.ToUpper("Get"),
			"/job/{name}/lastBuild/api/json",
			c.GetJobLastBuild,
		},
		"GetJobProgressiveText": Route{
			strings.ToUpper("Get"),
			"/job/{name}/{number}/logText/progressiveText",
			c.GetJobProgressiveText,
		},
		"GetQueue": Route{
			strings.ToUpper("Get"),
			"/queue/api/json",
			c.GetQueue,
		},
		"GetQueueItem": Route{
			strings.ToUpper("Get"),
			"/queue/item/{number}/api/json",
			c.GetQueueItem,
		},
		"GetView": Route{
			strings.ToUpper("Get"),
			"/view/{name}/api/json",
			c.GetView,
		},
		"GetViewConfig": Route{
			strings.ToUpper("Get"),
			"/view/{name}/config.xml",
			c.GetViewConfig,
		},
		"HeadJenkins": Route{
			strings.ToUpper("Head"),
			"/api/json",
			c.HeadJenkins,
		},
		"PostCreateItem": Route{
			strings.ToUpper("Post"),
			"/createItem",
			c.PostCreateItem,
		},
		"PostCreateView": Route{
			strings.ToUpper("Post"),
			"/createView",
			c.PostCreateView,
		},
		"PostJobBuild": Route{
			strings.ToUpper("Post"),
			"/job/{name}/build",
			c.PostJobBuild,
		},
		"PostJobConfig": Route{
			strings.ToUpper("Post"),
			"/job/{name}/config.xml",
			c.PostJobConfig,
		},
		"PostJobDelete": Route{
			strings.ToUpper("Post"),
			"/job/{name}/doDelete",
			c.PostJobDelete,
		},
		"PostJobDisable": Route{
			strings.ToUpper("Post"),
			"/job/{name}/disable",
			c.PostJobDisable,
		},
		"PostJobEnable": Route{
			strings.ToUpper("Post"),
			"/job/{name}/enable",
			c.PostJobEnable,
		},
		"PostJobLastBuildStop": Route{
			strings.ToUpper("Post"),
			"/job/{name}/lastBuild/stop",
			c.PostJobLastBuildStop,
		},
		"PostViewConfig": Route{
			strings.ToUpper("Post"),
			"/view/{name}/config.xml",
			c.PostViewConfig,
		},
	}
}

// GetComputer - 
func (c *RemoteAccessAPIController) GetComputer(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var depthParam int32
	if query.Has("depth") {
		param, err := parseNumericParameter[int32](
			query.Get("depth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		depthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "depth"}, nil)
		return
	}
	result, err := c.service.GetComputer(r.Context(), depthParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJenkins - 
func (c *RemoteAccessAPIController) GetJenkins(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetJenkins(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJob - 
func (c *RemoteAccessAPIController) GetJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetJob(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJobConfig - 
func (c *RemoteAccessAPIController) GetJobConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetJobConfig(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJobLastBuild - 
func (c *RemoteAccessAPIController) GetJobLastBuild(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetJobLastBuild(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJobProgressiveText - 
func (c *RemoteAccessAPIController) GetJobProgressiveText(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	numberParam := params["number"]
	if numberParam == "" {
		c.errorHandler(w, r, &RequiredError{"number"}, nil)
		return
	}
	var startParam string
	if query.Has("start") {
		param := query.Get("start")

		startParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "start"}, nil)
		return
	}
	result, err := c.service.GetJobProgressiveText(r.Context(), nameParam, numberParam, startParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetQueue - 
func (c *RemoteAccessAPIController) GetQueue(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetQueue(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetQueueItem - 
func (c *RemoteAccessAPIController) GetQueueItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	numberParam := params["number"]
	if numberParam == "" {
		c.errorHandler(w, r, &RequiredError{"number"}, nil)
		return
	}
	result, err := c.service.GetQueueItem(r.Context(), numberParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetView - 
func (c *RemoteAccessAPIController) GetView(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetView(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetViewConfig - 
func (c *RemoteAccessAPIController) GetViewConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetViewConfig(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadJenkins - 
func (c *RemoteAccessAPIController) HeadJenkins(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HeadJenkins(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostCreateItem - 
func (c *RemoteAccessAPIController) PostCreateItem(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	var fromParam string
	if query.Has("from") {
		param := query.Get("from")

		fromParam = param
	} else {
	}
	var modeParam string
	if query.Has("mode") {
		param := query.Get("mode")

		modeParam = param
	} else {
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	contentTypeParam := r.Header.Get("Content-Type")
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PostCreateItem(r.Context(), nameParam, fromParam, modeParam, jenkinsCrumbParam, contentTypeParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostCreateView - 
func (c *RemoteAccessAPIController) PostCreateView(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	contentTypeParam := r.Header.Get("Content-Type")
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PostCreateView(r.Context(), nameParam, jenkinsCrumbParam, contentTypeParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostJobBuild - 
func (c *RemoteAccessAPIController) PostJobBuild(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var jsonParam string
	if query.Has("json") {
		param := query.Get("json")

		jsonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "json"}, nil)
		return
	}
	var tokenParam string
	if query.Has("token") {
		param := query.Get("token")

		tokenParam = param
	} else {
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	result, err := c.service.PostJobBuild(r.Context(), nameParam, jsonParam, tokenParam, jenkinsCrumbParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostJobConfig - 
func (c *RemoteAccessAPIController) PostJobConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	result, err := c.service.PostJobConfig(r.Context(), nameParam, bodyParam, jenkinsCrumbParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostJobDelete - 
func (c *RemoteAccessAPIController) PostJobDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	result, err := c.service.PostJobDelete(r.Context(), nameParam, jenkinsCrumbParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostJobDisable - 
func (c *RemoteAccessAPIController) PostJobDisable(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	result, err := c.service.PostJobDisable(r.Context(), nameParam, jenkinsCrumbParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostJobEnable - 
func (c *RemoteAccessAPIController) PostJobEnable(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	result, err := c.service.PostJobEnable(r.Context(), nameParam, jenkinsCrumbParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostJobLastBuildStop - 
func (c *RemoteAccessAPIController) PostJobLastBuildStop(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	result, err := c.service.PostJobLastBuildStop(r.Context(), nameParam, jenkinsCrumbParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostViewConfig - 
func (c *RemoteAccessAPIController) PostViewConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	jenkinsCrumbParam := r.Header.Get("Jenkins-Crumb")
	result, err := c.service.PostViewConfig(r.Context(), nameParam, bodyParam, jenkinsCrumbParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
