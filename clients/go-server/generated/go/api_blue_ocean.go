// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * API version: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BlueOceanAPIController binds http requests to an api service and writes the service results to the http response
type BlueOceanAPIController struct {
	service BlueOceanAPIServicer
	errorHandler ErrorHandler
}

// BlueOceanAPIOption for how the controller is set up.
type BlueOceanAPIOption func(*BlueOceanAPIController)

// WithBlueOceanAPIErrorHandler inject ErrorHandler into controller
func WithBlueOceanAPIErrorHandler(h ErrorHandler) BlueOceanAPIOption {
	return func(c *BlueOceanAPIController) {
		c.errorHandler = h
	}
}

// NewBlueOceanAPIController creates a default api controller
func NewBlueOceanAPIController(s BlueOceanAPIServicer, opts ...BlueOceanAPIOption) *BlueOceanAPIController {
	controller := &BlueOceanAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BlueOceanAPIController
func (c *BlueOceanAPIController) Routes() Routes {
	return Routes{
		"GetJsonWebToken": Route{
			strings.ToUpper("Get"),
			"/jwt-auth/token",
			c.GetJsonWebToken,
		},
		"GetJsonWebKey": Route{
			strings.ToUpper("Get"),
			"/jwt-auth/jwks/{key}",
			c.GetJsonWebKey,
		},
		"SearchClasses": Route{
			strings.ToUpper("Get"),
			"/blue/rest/classes/",
			c.SearchClasses,
		},
		"GetClasses": Route{
			strings.ToUpper("Get"),
			"/blue/rest/classes/{class}",
			c.GetClasses,
		},
		"Search": Route{
			strings.ToUpper("Get"),
			"/blue/rest/search/",
			c.Search,
		},
		"GetOrganisations": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/",
			c.GetOrganisations,
		},
		"GetOrganisation": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}",
			c.GetOrganisation,
		},
		"GetPipelines": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/",
			c.GetPipelines,
		},
		"GetPipeline": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}",
			c.GetPipeline,
		},
		"GetPipelineActivities": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities",
			c.GetPipelineActivities,
		},
		"GetPipelineBranches": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches",
			c.GetPipelineBranches,
		},
		"GetPipelineBranch": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/",
			c.GetPipelineBranch,
		},
		"GetPipelineBranchRun": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}",
			c.GetPipelineBranchRun,
		},
		"GetPipelineFolder": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{folder}/",
			c.GetPipelineFolder,
		},
		"GetPipelineFolderPipeline": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}",
			c.GetPipelineFolderPipeline,
		},
		"PutPipelineFavorite": Route{
			strings.ToUpper("Put"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite",
			c.PutPipelineFavorite,
		},
		"GetPipelineQueue": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue",
			c.GetPipelineQueue,
		},
		"DeletePipelineQueueItem": Route{
			strings.ToUpper("Delete"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}",
			c.DeletePipelineQueueItem,
		},
		"GetPipelineRuns": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
			c.GetPipelineRuns,
		},
		"PostPipelineRuns": Route{
			strings.ToUpper("Post"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
			c.PostPipelineRuns,
		},
		"GetPipelineRun": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}",
			c.GetPipelineRun,
		},
		"GetPipelineRunNodes": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes",
			c.GetPipelineRunNodes,
		},
		"GetPipelineRunNode": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}",
			c.GetPipelineRunNode,
		},
		"GetPipelineRunNodeSteps": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps",
			c.GetPipelineRunNodeSteps,
		},
		"GetPipelineRunNodeStep": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}",
			c.GetPipelineRunNodeStep,
		},
		"GetPipelineRunNodeStepLog": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log",
			c.GetPipelineRunNodeStepLog,
		},
		"GetPipelineRunLog": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log",
			c.GetPipelineRunLog,
		},
		"PostPipelineRun": Route{
			strings.ToUpper("Post"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay",
			c.PostPipelineRun,
		},
		"PutPipelineRun": Route{
			strings.ToUpper("Put"),
			"/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop",
			c.PutPipelineRun,
		},
		"GetSCM": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/scm/{scm}",
			c.GetSCM,
		},
		"GetSCMOrganisations": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/scm/{scm}/organizations",
			c.GetSCMOrganisations,
		},
		"GetSCMOrganisationRepositories": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories",
			c.GetSCMOrganisationRepositories,
		},
		"GetSCMOrganisationRepository": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}",
			c.GetSCMOrganisationRepository,
		},
		"GetAuthenticatedUser": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/user/",
			c.GetAuthenticatedUser,
		},
		"GetUsers": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/users/",
			c.GetUsers,
		},
		"GetUser": Route{
			strings.ToUpper("Get"),
			"/blue/rest/organizations/{organization}/users/{user}",
			c.GetUser,
		},
		"GetUserFavorites": Route{
			strings.ToUpper("Get"),
			"/blue/rest/users/{user}/favorites",
			c.GetUserFavorites,
		},
	}
}

// GetJsonWebToken - 
func (c *BlueOceanAPIController) GetJsonWebToken(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expiryTimeInMinsParam int32
	if query.Has("expiryTimeInMins") {
		param, err := parseNumericParameter[int32](
			query.Get("expiryTimeInMins"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "expiryTimeInMins", Err: err}, nil)
			return
		}

		expiryTimeInMinsParam = param
	} else {
	}
	var maxExpiryTimeInMinsParam int32
	if query.Has("maxExpiryTimeInMins") {
		param, err := parseNumericParameter[int32](
			query.Get("maxExpiryTimeInMins"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "maxExpiryTimeInMins", Err: err}, nil)
			return
		}

		maxExpiryTimeInMinsParam = param
	} else {
	}
	result, err := c.service.GetJsonWebToken(r.Context(), expiryTimeInMinsParam, maxExpiryTimeInMinsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetJsonWebKey - 
func (c *BlueOceanAPIController) GetJsonWebKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	keyParam, err := parseNumericParameter[int32](
		params["key"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Param: "key", Err: err}, nil)
		return
	}
	result, err := c.service.GetJsonWebKey(r.Context(), keyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchClasses - 
func (c *BlueOceanAPIController) SearchClasses(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "q"}, nil)
		return
	}
	result, err := c.service.SearchClasses(r.Context(), qParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetClasses - 
func (c *BlueOceanAPIController) GetClasses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	classParam := params["class"]
	if classParam == "" {
		c.errorHandler(w, r, &RequiredError{"class"}, nil)
		return
	}
	result, err := c.service.GetClasses(r.Context(), classParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// Search - 
func (c *BlueOceanAPIController) Search(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "q"}, nil)
		return
	}
	result, err := c.service.Search(r.Context(), qParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrganisations - 
func (c *BlueOceanAPIController) GetOrganisations(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetOrganisations(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOrganisation - 
func (c *BlueOceanAPIController) GetOrganisation(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	result, err := c.service.GetOrganisation(r.Context(), organizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelines - 
func (c *BlueOceanAPIController) GetPipelines(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	result, err := c.service.GetPipelines(r.Context(), organizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipeline - 
func (c *BlueOceanAPIController) GetPipeline(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	result, err := c.service.GetPipeline(r.Context(), organizationParam, pipelineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineActivities - 
func (c *BlueOceanAPIController) GetPipelineActivities(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	result, err := c.service.GetPipelineActivities(r.Context(), organizationParam, pipelineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineBranches - 
func (c *BlueOceanAPIController) GetPipelineBranches(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	result, err := c.service.GetPipelineBranches(r.Context(), organizationParam, pipelineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineBranch - 
func (c *BlueOceanAPIController) GetPipelineBranch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	branchParam := params["branch"]
	if branchParam == "" {
		c.errorHandler(w, r, &RequiredError{"branch"}, nil)
		return
	}
	result, err := c.service.GetPipelineBranch(r.Context(), organizationParam, pipelineParam, branchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineBranchRun - 
func (c *BlueOceanAPIController) GetPipelineBranchRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	branchParam := params["branch"]
	if branchParam == "" {
		c.errorHandler(w, r, &RequiredError{"branch"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	result, err := c.service.GetPipelineBranchRun(r.Context(), organizationParam, pipelineParam, branchParam, runParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineFolder - 
func (c *BlueOceanAPIController) GetPipelineFolder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	folderParam := params["folder"]
	if folderParam == "" {
		c.errorHandler(w, r, &RequiredError{"folder"}, nil)
		return
	}
	result, err := c.service.GetPipelineFolder(r.Context(), organizationParam, folderParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineFolderPipeline - 
func (c *BlueOceanAPIController) GetPipelineFolderPipeline(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	folderParam := params["folder"]
	if folderParam == "" {
		c.errorHandler(w, r, &RequiredError{"folder"}, nil)
		return
	}
	result, err := c.service.GetPipelineFolderPipeline(r.Context(), organizationParam, pipelineParam, folderParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutPipelineFavorite - 
func (c *BlueOceanAPIController) PutPipelineFavorite(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	var bodyParam bool
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PutPipelineFavorite(r.Context(), organizationParam, pipelineParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineQueue - 
func (c *BlueOceanAPIController) GetPipelineQueue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	result, err := c.service.GetPipelineQueue(r.Context(), organizationParam, pipelineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePipelineQueueItem - 
func (c *BlueOceanAPIController) DeletePipelineQueueItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	queueParam := params["queue"]
	if queueParam == "" {
		c.errorHandler(w, r, &RequiredError{"queue"}, nil)
		return
	}
	result, err := c.service.DeletePipelineQueueItem(r.Context(), organizationParam, pipelineParam, queueParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineRuns - 
func (c *BlueOceanAPIController) GetPipelineRuns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	result, err := c.service.GetPipelineRuns(r.Context(), organizationParam, pipelineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostPipelineRuns - 
func (c *BlueOceanAPIController) PostPipelineRuns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	result, err := c.service.PostPipelineRuns(r.Context(), organizationParam, pipelineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineRun - 
func (c *BlueOceanAPIController) GetPipelineRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	result, err := c.service.GetPipelineRun(r.Context(), organizationParam, pipelineParam, runParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineRunNodes - 
func (c *BlueOceanAPIController) GetPipelineRunNodes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	result, err := c.service.GetPipelineRunNodes(r.Context(), organizationParam, pipelineParam, runParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineRunNode - 
func (c *BlueOceanAPIController) GetPipelineRunNode(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	nodeParam := params["node"]
	if nodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"node"}, nil)
		return
	}
	result, err := c.service.GetPipelineRunNode(r.Context(), organizationParam, pipelineParam, runParam, nodeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineRunNodeSteps - 
func (c *BlueOceanAPIController) GetPipelineRunNodeSteps(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	nodeParam := params["node"]
	if nodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"node"}, nil)
		return
	}
	result, err := c.service.GetPipelineRunNodeSteps(r.Context(), organizationParam, pipelineParam, runParam, nodeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineRunNodeStep - 
func (c *BlueOceanAPIController) GetPipelineRunNodeStep(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	nodeParam := params["node"]
	if nodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"node"}, nil)
		return
	}
	stepParam := params["step"]
	if stepParam == "" {
		c.errorHandler(w, r, &RequiredError{"step"}, nil)
		return
	}
	result, err := c.service.GetPipelineRunNodeStep(r.Context(), organizationParam, pipelineParam, runParam, nodeParam, stepParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineRunNodeStepLog - 
func (c *BlueOceanAPIController) GetPipelineRunNodeStepLog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	nodeParam := params["node"]
	if nodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"node"}, nil)
		return
	}
	stepParam := params["step"]
	if stepParam == "" {
		c.errorHandler(w, r, &RequiredError{"step"}, nil)
		return
	}
	result, err := c.service.GetPipelineRunNodeStepLog(r.Context(), organizationParam, pipelineParam, runParam, nodeParam, stepParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPipelineRunLog - 
func (c *BlueOceanAPIController) GetPipelineRunLog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	var startParam int32
	if query.Has("start") {
		param, err := parseNumericParameter[int32](
			query.Get("start"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "start", Err: err}, nil)
			return
		}

		startParam = param
	} else {
	}
	var downloadParam bool
	if query.Has("download") {
		param, err := parseBoolParameter(
			query.Get("download"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "download", Err: err}, nil)
			return
		}

		downloadParam = param
	} else {
	}
	result, err := c.service.GetPipelineRunLog(r.Context(), organizationParam, pipelineParam, runParam, startParam, downloadParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostPipelineRun - 
func (c *BlueOceanAPIController) PostPipelineRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	result, err := c.service.PostPipelineRun(r.Context(), organizationParam, pipelineParam, runParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutPipelineRun - 
func (c *BlueOceanAPIController) PutPipelineRun(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	pipelineParam := params["pipeline"]
	if pipelineParam == "" {
		c.errorHandler(w, r, &RequiredError{"pipeline"}, nil)
		return
	}
	runParam := params["run"]
	if runParam == "" {
		c.errorHandler(w, r, &RequiredError{"run"}, nil)
		return
	}
	var blockingParam string
	if query.Has("blocking") {
		param := query.Get("blocking")

		blockingParam = param
	} else {
	}
	var timeOutInSecsParam int32
	if query.Has("timeOutInSecs") {
		param, err := parseNumericParameter[int32](
			query.Get("timeOutInSecs"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "timeOutInSecs", Err: err}, nil)
			return
		}

		timeOutInSecsParam = param
	} else {
	}
	result, err := c.service.PutPipelineRun(r.Context(), organizationParam, pipelineParam, runParam, blockingParam, timeOutInSecsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSCM - 
func (c *BlueOceanAPIController) GetSCM(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	scmParam := params["scm"]
	if scmParam == "" {
		c.errorHandler(w, r, &RequiredError{"scm"}, nil)
		return
	}
	result, err := c.service.GetSCM(r.Context(), organizationParam, scmParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSCMOrganisations - 
func (c *BlueOceanAPIController) GetSCMOrganisations(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	scmParam := params["scm"]
	if scmParam == "" {
		c.errorHandler(w, r, &RequiredError{"scm"}, nil)
		return
	}
	var credentialIdParam string
	if query.Has("credentialId") {
		param := query.Get("credentialId")

		credentialIdParam = param
	} else {
	}
	result, err := c.service.GetSCMOrganisations(r.Context(), organizationParam, scmParam, credentialIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSCMOrganisationRepositories - 
func (c *BlueOceanAPIController) GetSCMOrganisationRepositories(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	scmParam := params["scm"]
	if scmParam == "" {
		c.errorHandler(w, r, &RequiredError{"scm"}, nil)
		return
	}
	scmOrganisationParam := params["scmOrganisation"]
	if scmOrganisationParam == "" {
		c.errorHandler(w, r, &RequiredError{"scmOrganisation"}, nil)
		return
	}
	var credentialIdParam string
	if query.Has("credentialId") {
		param := query.Get("credentialId")

		credentialIdParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageSize", Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	var pageNumberParam int32
	if query.Has("pageNumber") {
		param, err := parseNumericParameter[int32](
			query.Get("pageNumber"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "pageNumber", Err: err}, nil)
			return
		}

		pageNumberParam = param
	} else {
	}
	result, err := c.service.GetSCMOrganisationRepositories(r.Context(), organizationParam, scmParam, scmOrganisationParam, credentialIdParam, pageSizeParam, pageNumberParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSCMOrganisationRepository - 
func (c *BlueOceanAPIController) GetSCMOrganisationRepository(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	scmParam := params["scm"]
	if scmParam == "" {
		c.errorHandler(w, r, &RequiredError{"scm"}, nil)
		return
	}
	scmOrganisationParam := params["scmOrganisation"]
	if scmOrganisationParam == "" {
		c.errorHandler(w, r, &RequiredError{"scmOrganisation"}, nil)
		return
	}
	repositoryParam := params["repository"]
	if repositoryParam == "" {
		c.errorHandler(w, r, &RequiredError{"repository"}, nil)
		return
	}
	var credentialIdParam string
	if query.Has("credentialId") {
		param := query.Get("credentialId")

		credentialIdParam = param
	} else {
	}
	result, err := c.service.GetSCMOrganisationRepository(r.Context(), organizationParam, scmParam, scmOrganisationParam, repositoryParam, credentialIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAuthenticatedUser - 
func (c *BlueOceanAPIController) GetAuthenticatedUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	result, err := c.service.GetAuthenticatedUser(r.Context(), organizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUsers - 
func (c *BlueOceanAPIController) GetUsers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	result, err := c.service.GetUsers(r.Context(), organizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUser - 
func (c *BlueOceanAPIController) GetUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	organizationParam := params["organization"]
	if organizationParam == "" {
		c.errorHandler(w, r, &RequiredError{"organization"}, nil)
		return
	}
	userParam := params["user"]
	if userParam == "" {
		c.errorHandler(w, r, &RequiredError{"user"}, nil)
		return
	}
	result, err := c.service.GetUser(r.Context(), organizationParam, userParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserFavorites - 
func (c *BlueOceanAPIController) GetUserFavorites(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userParam := params["user"]
	if userParam == "" {
		c.errorHandler(w, r, &RequiredError{"user"}, nil)
		return
	}
	result, err := c.service.GetUserFavorites(r.Context(), userParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
