/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HudsonMasterComputer from './HudsonMasterComputer';

/**
 * The ComputerSet model module.
 * @module model/ComputerSet
 * @version 2.0.1
 */
class ComputerSet {
    /**
     * Constructs a new <code>ComputerSet</code>.
     * @alias module:model/ComputerSet
     */
    constructor() { 
        
        ComputerSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComputerSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComputerSet} obj Optional instance to populate.
     * @return {module:model/ComputerSet} The populated <code>ComputerSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComputerSet();

            if (data.hasOwnProperty('_class')) {
                obj['_class'] = ApiClient.convertToType(data['_class'], 'String');
            }
            if (data.hasOwnProperty('busyExecutors')) {
                obj['busyExecutors'] = ApiClient.convertToType(data['busyExecutors'], 'Number');
            }
            if (data.hasOwnProperty('computer')) {
                obj['computer'] = ApiClient.convertToType(data['computer'], [HudsonMasterComputer]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('totalExecutors')) {
                obj['totalExecutors'] = ApiClient.convertToType(data['totalExecutors'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComputerSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComputerSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['_class'] && !(typeof data['_class'] === 'string' || data['_class'] instanceof String)) {
            throw new Error("Expected the field `_class` to be a primitive type in the JSON string but got " + data['_class']);
        }
        if (data['computer']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['computer'])) {
                throw new Error("Expected the field `computer` to be an array in the JSON data but got " + data['computer']);
            }
            // validate the optional field `computer` (array)
            for (const item of data['computer']) {
                HudsonMasterComputer.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }

        return true;
    }


}



/**
 * @member {String} _class
 */
ComputerSet.prototype['_class'] = undefined;

/**
 * @member {Number} busyExecutors
 */
ComputerSet.prototype['busyExecutors'] = undefined;

/**
 * @member {Array.<module:model/HudsonMasterComputer>} computer
 */
ComputerSet.prototype['computer'] = undefined;

/**
 * @member {String} displayName
 */
ComputerSet.prototype['displayName'] = undefined;

/**
 * @member {Number} totalExecutors
 */
ComputerSet.prototype['totalExecutors'] = undefined;






export default ComputerSet;

