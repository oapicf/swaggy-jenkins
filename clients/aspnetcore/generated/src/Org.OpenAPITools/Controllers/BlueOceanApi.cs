/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class BlueOceanApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Delete queue item from an organization pipeline queue</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="queue">Name of the queue item</param>
        /// <response code="200">Successfully deleted queue item</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpDelete]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePipelineQueueItem")]
        public virtual IActionResult DeletePipelineQueueItem([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "queue")][Required]string queue)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve authenticated user details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <response code="200">Successfully retrieved authenticated user details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/user/")]
        [ValidateModelState]
        [SwaggerOperation("GetAuthenticatedUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Successfully retrieved authenticated user details")]
        public virtual IActionResult GetAuthenticatedUser([FromRoute (Name = "organization")][Required]string organization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"fullName\" : \"fullName\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"email\" : \"email\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get a list of class names supported by a given class</remarks>
        /// <param name="varClass">Name of the class</param>
        /// <response code="200">Successfully retrieved class names</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/classes/{class}")]
        [ValidateModelState]
        [SwaggerOperation("GetClasses")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Successfully retrieved class names")]
        public virtual IActionResult GetClasses([FromRoute (Name = "class")][Required]string varClass)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve JSON Web Key</remarks>
        /// <param name="key">Key ID received as part of JWT header field kid</param>
        /// <response code="200">Successfully retrieved JWT token</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/jwt-auth/jwks/{key}")]
        [ValidateModelState]
        [SwaggerOperation("GetJsonWebKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Successfully retrieved JWT token")]
        public virtual IActionResult GetJsonWebKey([FromRoute (Name = "key")][Required]int key)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve JSON Web Token</remarks>
        /// <param name="expiryTimeInMins">Token expiry time in minutes, default: 30 minutes</param>
        /// <param name="maxExpiryTimeInMins">Maximum token expiry time in minutes, default: 480 minutes</param>
        /// <response code="200">Successfully retrieved JWT token</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/jwt-auth/token")]
        [ValidateModelState]
        [SwaggerOperation("GetJsonWebToken")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Successfully retrieved JWT token")]
        public virtual IActionResult GetJsonWebToken([FromQuery (Name = "expiryTimeInMins")]int? expiryTimeInMins, [FromQuery (Name = "maxExpiryTimeInMins")]int? maxExpiryTimeInMins)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve organization details</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <response code="200">Successfully retrieved pipeline details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        /// <response code="404">Pipeline cannot be found on Jenkins instance</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}")]
        [ValidateModelState]
        [SwaggerOperation("GetOrganisation")]
        [SwaggerResponse(statusCode: 200, type: typeof(Organisation), description: "Successfully retrieved pipeline details")]
        public virtual IActionResult GetOrganisation([FromRoute (Name = "organization")][Required]string organization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Organisation));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"_class\" : \"_class\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Organisation>(exampleJson)
            : default(Organisation);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve all organizations details</remarks>
        /// <response code="200">Successfully retrieved pipelines details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/")]
        [ValidateModelState]
        [SwaggerOperation("GetOrganisations")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Organisation>), description: "Successfully retrieved pipelines details")]
        public virtual IActionResult GetOrganisations()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Organisation>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"_class\" : \"_class\"\n}, {\n  \"name\" : \"name\",\n  \"_class\" : \"_class\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Organisation>>(exampleJson)
            : default(List<Organisation>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve pipeline details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <response code="200">Successfully retrieved pipeline details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        /// <response code="404">Pipeline cannot be found on Jenkins instance</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}")]
        [ValidateModelState]
        [SwaggerOperation("GetPipeline")]
        [SwaggerResponse(statusCode: 200, type: typeof(Pipeline), description: "Successfully retrieved pipeline details")]
        public virtual IActionResult GetPipeline([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Pipeline));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"weatherScore\" : 0,\n  \"latestRun\" : {\n    \"runSummary\" : \"runSummary\",\n    \"durationInMillis\" : 5,\n    \"commitId\" : \"commitId\",\n    \"type\" : \"type\",\n    \"pipeline\" : \"pipeline\",\n    \"result\" : \"result\",\n    \"organization\" : \"organization\",\n    \"estimatedDurationInMillis\" : 5,\n    \"enQueueTime\" : \"enQueueTime\",\n    \"startTime\" : \"startTime\",\n    \"endTime\" : \"endTime\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"_class\" : \"_class\",\n    \"artifacts\" : [ {\n      \"size\" : 1,\n      \"name\" : \"name\",\n      \"_class\" : \"_class\",\n      \"url\" : \"url\"\n    }, {\n      \"size\" : 1,\n      \"name\" : \"name\",\n      \"_class\" : \"_class\",\n      \"url\" : \"url\"\n    } ]\n  },\n  \"displayName\" : \"displayName\",\n  \"organization\" : \"organization\",\n  \"name\" : \"name\",\n  \"estimatedDurationInMillis\" : 6,\n  \"fullName\" : \"fullName\",\n  \"_class\" : \"_class\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Pipeline>(exampleJson)
            : default(Pipeline);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve all activities details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <response code="200">Successfully retrieved all activities details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineActivities")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PipelineActivity>), description: "Successfully retrieved all activities details")]
        public virtual IActionResult GetPipelineActivities([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PipelineActivity>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"runSummary\" : \"runSummary\",\n  \"durationInMillis\" : 6,\n  \"commitId\" : \"commitId\",\n  \"type\" : \"type\",\n  \"pipeline\" : \"pipeline\",\n  \"result\" : \"result\",\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 1,\n  \"enQueueTime\" : \"enQueueTime\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"endTime\" : \"endTime\",\n  \"id\" : \"id\",\n  \"state\" : \"state\",\n  \"artifacts\" : [ {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  }, {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  } ]\n}, {\n  \"runSummary\" : \"runSummary\",\n  \"durationInMillis\" : 6,\n  \"commitId\" : \"commitId\",\n  \"type\" : \"type\",\n  \"pipeline\" : \"pipeline\",\n  \"result\" : \"result\",\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 1,\n  \"enQueueTime\" : \"enQueueTime\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"endTime\" : \"endTime\",\n  \"id\" : \"id\",\n  \"state\" : \"state\",\n  \"artifacts\" : [ {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  }, {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  } ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PipelineActivity>>(exampleJson)
            : default(List<PipelineActivity>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve branch details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <response code="200">Successfully retrieved branch details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineBranch")]
        [SwaggerResponse(statusCode: 200, type: typeof(BranchImpl), description: "Successfully retrieved branch details")]
        public virtual IActionResult GetPipelineBranch([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "branch")][Required]string branch)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BranchImpl));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"weatherScore\" : 6,\n  \"latestRun\" : {\n    \"runSummary\" : \"runSummary\",\n    \"_links\" : {\n      \"nodes\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"log\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"self\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"_class\" : \"_class\",\n      \"actions\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"steps\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      }\n    },\n    \"durationInMillis\" : 1,\n    \"commitId\" : \"commitId\",\n    \"type\" : \"type\",\n    \"pipeline\" : \"pipeline\",\n    \"result\" : \"result\",\n    \"organization\" : \"organization\",\n    \"enQueueTime\" : \"enQueueTime\",\n    \"estimatedDurationInMillis\" : 5,\n    \"startTime\" : \"startTime\",\n    \"_class\" : \"_class\",\n    \"endTime\" : \"endTime\",\n    \"id\" : \"id\",\n    \"state\" : \"state\"\n  },\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\",\n    \"actions\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"runs\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"queue\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    }\n  },\n  \"displayName\" : \"displayName\",\n  \"fullDisplayName\" : \"fullDisplayName\",\n  \"fullName\" : \"fullName\",\n  \"pullRequest\" : \"pullRequest\",\n  \"permissions\" : {\n    \"read\" : true,\n    \"stop\" : true,\n    \"start\" : true,\n    \"create\" : true,\n    \"_class\" : \"_class\"\n  },\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 0,\n  \"name\" : \"name\",\n  \"_class\" : \"_class\",\n  \"parameters\" : [ {\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"_class\" : \"_class\",\n    \"type\" : \"type\",\n    \"defaultParameterValue\" : {\n      \"name\" : \"name\",\n      \"_class\" : \"_class\",\n      \"value\" : \"value\"\n    }\n  }, {\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"_class\" : \"_class\",\n    \"type\" : \"type\",\n    \"defaultParameterValue\" : {\n      \"name\" : \"name\",\n      \"_class\" : \"_class\",\n      \"value\" : \"value\"\n    }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BranchImpl>(exampleJson)
            : default(BranchImpl);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve branch run details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <param name="run">Name of the run</param>
        /// <response code="200">Successfully retrieved run details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineBranchRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(PipelineRun), description: "Successfully retrieved run details")]
        public virtual IActionResult GetPipelineBranchRun([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "branch")][Required]string branch, [FromRoute (Name = "run")][Required]string run)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PipelineRun));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"runSummary\" : \"runSummary\",\n  \"durationInMillis\" : 6,\n  \"commitId\" : \"commitId\",\n  \"type\" : \"type\",\n  \"pipeline\" : \"pipeline\",\n  \"result\" : \"result\",\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 1,\n  \"enQueueTime\" : \"enQueueTime\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"endTime\" : \"endTime\",\n  \"id\" : \"id\",\n  \"state\" : \"state\",\n  \"artifacts\" : [ {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  }, {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PipelineRun>(exampleJson)
            : default(PipelineRun);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve all branches details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <response code="200">Successfully retrieved all branches details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineBranches")]
        [SwaggerResponse(statusCode: 200, type: typeof(MultibranchPipeline), description: "Successfully retrieved all branches details")]
        public virtual IActionResult GetPipelineBranches([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MultibranchPipeline));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"weatherScore\" : 6,\n  \"latestRun\" : \"latestRun\",\n  \"displayName\" : \"displayName\",\n  \"totalNumberOfPullRequests\" : 9,\n  \"numberOfFailingPullRequests\" : 5,\n  \"branchNames\" : [ \"branchNames\", \"branchNames\" ],\n  \"organization\" : \"organization\",\n  \"totalNumberOfBranches\" : 7,\n  \"estimatedDurationInMillis\" : 0,\n  \"name\" : \"name\",\n  \"numberOfSuccessfulPullRequests\" : 2,\n  \"numberOfSuccessfulBranches\" : 5,\n  \"numberOfFailingBranches\" : 1,\n  \"_class\" : \"_class\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MultibranchPipeline>(exampleJson)
            : default(MultibranchPipeline);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve pipeline folder for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="folder">Name of the folder</param>
        /// <response code="200">Successfully retrieved folder details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{folder}/")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineFolder")]
        [SwaggerResponse(statusCode: 200, type: typeof(PipelineFolderImpl), description: "Successfully retrieved folder details")]
        public virtual IActionResult GetPipelineFolder([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "folder")][Required]string folder)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PipelineFolderImpl));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"numberOfPipelines\" : 6,\n  \"displayName\" : \"displayName\",\n  \"numberOfFolders\" : 0,\n  \"organization\" : \"organization\",\n  \"name\" : \"name\",\n  \"fullName\" : \"fullName\",\n  \"_class\" : \"_class\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PipelineFolderImpl>(exampleJson)
            : default(PipelineFolderImpl);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve pipeline details for an organization folder</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <response code="200">Successfully retrieved pipeline details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineFolderPipeline")]
        [SwaggerResponse(statusCode: 200, type: typeof(PipelineImpl), description: "Successfully retrieved pipeline details")]
        public virtual IActionResult GetPipelineFolderPipeline([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "folder")][Required]string folder)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PipelineImpl));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"weatherScore\" : 6,\n  \"latestRun\" : \"latestRun\",\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\",\n    \"runs\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"actions\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"queue\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    }\n  },\n  \"displayName\" : \"displayName\",\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 0,\n  \"name\" : \"name\",\n  \"fullName\" : \"fullName\",\n  \"_class\" : \"_class\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PipelineImpl>(exampleJson)
            : default(PipelineImpl);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve queue details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <response code="200">Successfully retrieved queue details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineQueue")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<QueueItemImpl>), description: "Successfully retrieved queue details")]
        public virtual IActionResult GetPipelineQueue([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<QueueItemImpl>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"pipeline\" : \"pipeline\",\n  \"expectedBuildNumber\" : 0,\n  \"queuedTime\" : 6,\n  \"_class\" : \"_class\",\n  \"id\" : \"id\"\n}, {\n  \"pipeline\" : \"pipeline\",\n  \"expectedBuildNumber\" : 0,\n  \"queuedTime\" : 6,\n  \"_class\" : \"_class\",\n  \"id\" : \"id\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<QueueItemImpl>>(exampleJson)
            : default(List<QueueItemImpl>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve run details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <response code="200">Successfully retrieved run details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(PipelineRun), description: "Successfully retrieved run details")]
        public virtual IActionResult GetPipelineRun([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PipelineRun));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"runSummary\" : \"runSummary\",\n  \"durationInMillis\" : 6,\n  \"commitId\" : \"commitId\",\n  \"type\" : \"type\",\n  \"pipeline\" : \"pipeline\",\n  \"result\" : \"result\",\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 1,\n  \"enQueueTime\" : \"enQueueTime\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"endTime\" : \"endTime\",\n  \"id\" : \"id\",\n  \"state\" : \"state\",\n  \"artifacts\" : [ {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  }, {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PipelineRun>(exampleJson)
            : default(PipelineRun);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get log for a pipeline run</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="start">Start position of the log</param>
        /// <param name="download">Set to true in order to download the file, otherwise it&#39;s passed as a response body</param>
        /// <response code="200">Successfully retrieved pipeline run log</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineRunLog")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Successfully retrieved pipeline run log")]
        public virtual IActionResult GetPipelineRunLog([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run, [FromQuery (Name = "start")]int? start, [FromQuery (Name = "download")]bool? download)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve run node details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <response code="200">Successfully retrieved run node details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineRunNode")]
        [SwaggerResponse(statusCode: 200, type: typeof(PipelineRunNode), description: "Successfully retrieved run node details")]
        public virtual IActionResult GetPipelineRunNode([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run, [FromRoute (Name = "node")][Required]string node)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PipelineRunNode));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"result\",\n  \"durationInMillis\" : 0,\n  \"displayName\" : \"displayName\",\n  \"edges\" : [ {\n    \"id\" : \"id\",\n    \"_class\" : \"_class\"\n  }, {\n    \"id\" : \"id\",\n    \"_class\" : \"_class\"\n  } ],\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"state\" : \"state\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PipelineRunNode>(exampleJson)
            : default(PipelineRunNode);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve run node details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <response code="200">Successfully retrieved run node step details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineRunNodeStep")]
        [SwaggerResponse(statusCode: 200, type: typeof(PipelineStepImpl), description: "Successfully retrieved run node step details")]
        public virtual IActionResult GetPipelineRunNodeStep([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run, [FromRoute (Name = "node")][Required]string node, [FromRoute (Name = "step")][Required]string step)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PipelineStepImpl));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"result\" : \"result\",\n  \"input\" : {\n    \"submitter\" : \"submitter\",\n    \"_links\" : {\n      \"self\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"_class\" : \"_class\"\n    },\n    \"_class\" : \"_class\",\n    \"id\" : \"id\",\n    \"message\" : \"message\",\n    \"ok\" : \"ok\",\n    \"parameters\" : [ {\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"_class\" : \"_class\",\n      \"type\" : \"type\",\n      \"defaultParameterValue\" : {\n        \"name\" : \"name\",\n        \"_class\" : \"_class\",\n        \"value\" : \"value\"\n      }\n    }, {\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"_class\" : \"_class\",\n      \"type\" : \"type\",\n      \"defaultParameterValue\" : {\n        \"name\" : \"name\",\n        \"_class\" : \"_class\",\n        \"value\" : \"value\"\n      }\n    } ]\n  },\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\",\n    \"actions\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    }\n  },\n  \"durationInMillis\" : 0,\n  \"displayName\" : \"displayName\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"state\" : \"state\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PipelineStepImpl>(exampleJson)
            : default(PipelineStepImpl);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get log for a pipeline run node step</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <param name="step">Name of the step</param>
        /// <response code="200">Successfully retrieved pipeline run node step log</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineRunNodeStepLog")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Successfully retrieved pipeline run node step log")]
        public virtual IActionResult GetPipelineRunNodeStepLog([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run, [FromRoute (Name = "node")][Required]string node, [FromRoute (Name = "step")][Required]string step)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve run node steps details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="node">Name of the node</param>
        /// <response code="200">Successfully retrieved run node steps details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineRunNodeSteps")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PipelineStepImpl>), description: "Successfully retrieved run node steps details")]
        public virtual IActionResult GetPipelineRunNodeSteps([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run, [FromRoute (Name = "node")][Required]string node)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PipelineStepImpl>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"result\" : \"result\",\n  \"input\" : {\n    \"submitter\" : \"submitter\",\n    \"_links\" : {\n      \"self\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"_class\" : \"_class\"\n    },\n    \"_class\" : \"_class\",\n    \"id\" : \"id\",\n    \"message\" : \"message\",\n    \"ok\" : \"ok\",\n    \"parameters\" : [ {\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"_class\" : \"_class\",\n      \"type\" : \"type\",\n      \"defaultParameterValue\" : {\n        \"name\" : \"name\",\n        \"_class\" : \"_class\",\n        \"value\" : \"value\"\n      }\n    }, {\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"_class\" : \"_class\",\n      \"type\" : \"type\",\n      \"defaultParameterValue\" : {\n        \"name\" : \"name\",\n        \"_class\" : \"_class\",\n        \"value\" : \"value\"\n      }\n    } ]\n  },\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\",\n    \"actions\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    }\n  },\n  \"durationInMillis\" : 0,\n  \"displayName\" : \"displayName\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"state\" : \"state\"\n}, {\n  \"result\" : \"result\",\n  \"input\" : {\n    \"submitter\" : \"submitter\",\n    \"_links\" : {\n      \"self\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"_class\" : \"_class\"\n    },\n    \"_class\" : \"_class\",\n    \"id\" : \"id\",\n    \"message\" : \"message\",\n    \"ok\" : \"ok\",\n    \"parameters\" : [ {\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"_class\" : \"_class\",\n      \"type\" : \"type\",\n      \"defaultParameterValue\" : {\n        \"name\" : \"name\",\n        \"_class\" : \"_class\",\n        \"value\" : \"value\"\n      }\n    }, {\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"_class\" : \"_class\",\n      \"type\" : \"type\",\n      \"defaultParameterValue\" : {\n        \"name\" : \"name\",\n        \"_class\" : \"_class\",\n        \"value\" : \"value\"\n      }\n    } ]\n  },\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\",\n    \"actions\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    }\n  },\n  \"durationInMillis\" : 0,\n  \"displayName\" : \"displayName\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"state\" : \"state\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PipelineStepImpl>>(exampleJson)
            : default(List<PipelineStepImpl>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve run nodes details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <response code="200">Successfully retrieved run nodes details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineRunNodes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PipelineRunNode>), description: "Successfully retrieved run nodes details")]
        public virtual IActionResult GetPipelineRunNodes([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PipelineRunNode>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"result\" : \"result\",\n  \"durationInMillis\" : 0,\n  \"displayName\" : \"displayName\",\n  \"edges\" : [ {\n    \"id\" : \"id\",\n    \"_class\" : \"_class\"\n  }, {\n    \"id\" : \"id\",\n    \"_class\" : \"_class\"\n  } ],\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"state\" : \"state\"\n}, {\n  \"result\" : \"result\",\n  \"durationInMillis\" : 0,\n  \"displayName\" : \"displayName\",\n  \"edges\" : [ {\n    \"id\" : \"id\",\n    \"_class\" : \"_class\"\n  }, {\n    \"id\" : \"id\",\n    \"_class\" : \"_class\"\n  } ],\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"state\" : \"state\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PipelineRunNode>>(exampleJson)
            : default(List<PipelineRunNode>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve all runs details for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <response code="200">Successfully retrieved runs details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelineRuns")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<PipelineRun>), description: "Successfully retrieved runs details")]
        public virtual IActionResult GetPipelineRuns([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<PipelineRun>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"runSummary\" : \"runSummary\",\n  \"durationInMillis\" : 6,\n  \"commitId\" : \"commitId\",\n  \"type\" : \"type\",\n  \"pipeline\" : \"pipeline\",\n  \"result\" : \"result\",\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 1,\n  \"enQueueTime\" : \"enQueueTime\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"endTime\" : \"endTime\",\n  \"id\" : \"id\",\n  \"state\" : \"state\",\n  \"artifacts\" : [ {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  }, {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  } ]\n}, {\n  \"runSummary\" : \"runSummary\",\n  \"durationInMillis\" : 6,\n  \"commitId\" : \"commitId\",\n  \"type\" : \"type\",\n  \"pipeline\" : \"pipeline\",\n  \"result\" : \"result\",\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 1,\n  \"enQueueTime\" : \"enQueueTime\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"endTime\" : \"endTime\",\n  \"id\" : \"id\",\n  \"state\" : \"state\",\n  \"artifacts\" : [ {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  }, {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  } ]\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<PipelineRun>>(exampleJson)
            : default(List<PipelineRun>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve all pipelines details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <response code="200">Successfully retrieved pipelines details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/pipelines/")]
        [ValidateModelState]
        [SwaggerOperation("GetPipelines")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Pipeline>), description: "Successfully retrieved pipelines details")]
        public virtual IActionResult GetPipelines([FromRoute (Name = "organization")][Required]string organization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Pipeline>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"weatherScore\" : 0,\n  \"latestRun\" : {\n    \"runSummary\" : \"runSummary\",\n    \"durationInMillis\" : 5,\n    \"commitId\" : \"commitId\",\n    \"type\" : \"type\",\n    \"pipeline\" : \"pipeline\",\n    \"result\" : \"result\",\n    \"organization\" : \"organization\",\n    \"estimatedDurationInMillis\" : 5,\n    \"enQueueTime\" : \"enQueueTime\",\n    \"startTime\" : \"startTime\",\n    \"endTime\" : \"endTime\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"_class\" : \"_class\",\n    \"artifacts\" : [ {\n      \"size\" : 1,\n      \"name\" : \"name\",\n      \"_class\" : \"_class\",\n      \"url\" : \"url\"\n    }, {\n      \"size\" : 1,\n      \"name\" : \"name\",\n      \"_class\" : \"_class\",\n      \"url\" : \"url\"\n    } ]\n  },\n  \"displayName\" : \"displayName\",\n  \"organization\" : \"organization\",\n  \"name\" : \"name\",\n  \"estimatedDurationInMillis\" : 6,\n  \"fullName\" : \"fullName\",\n  \"_class\" : \"_class\"\n}, {\n  \"weatherScore\" : 0,\n  \"latestRun\" : {\n    \"runSummary\" : \"runSummary\",\n    \"durationInMillis\" : 5,\n    \"commitId\" : \"commitId\",\n    \"type\" : \"type\",\n    \"pipeline\" : \"pipeline\",\n    \"result\" : \"result\",\n    \"organization\" : \"organization\",\n    \"estimatedDurationInMillis\" : 5,\n    \"enQueueTime\" : \"enQueueTime\",\n    \"startTime\" : \"startTime\",\n    \"endTime\" : \"endTime\",\n    \"id\" : \"id\",\n    \"state\" : \"state\",\n    \"_class\" : \"_class\",\n    \"artifacts\" : [ {\n      \"size\" : 1,\n      \"name\" : \"name\",\n      \"_class\" : \"_class\",\n      \"url\" : \"url\"\n    }, {\n      \"size\" : 1,\n      \"name\" : \"name\",\n      \"_class\" : \"_class\",\n      \"url\" : \"url\"\n    } ]\n  },\n  \"displayName\" : \"displayName\",\n  \"organization\" : \"organization\",\n  \"name\" : \"name\",\n  \"estimatedDurationInMillis\" : 6,\n  \"fullName\" : \"fullName\",\n  \"_class\" : \"_class\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Pipeline>>(exampleJson)
            : default(List<Pipeline>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve SCM details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <response code="200">Successfully retrieved SCM details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/scm/{scm}")]
        [ValidateModelState]
        [SwaggerOperation("GetSCM")]
        [SwaggerResponse(statusCode: 200, type: typeof(GithubScm), description: "Successfully retrieved SCM details")]
        public virtual IActionResult GetSCM([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "scm")][Required]string scm)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(GithubScm));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"credentialId\" : \"credentialId\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"uri\" : \"uri\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<GithubScm>(exampleJson)
            : default(GithubScm);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve SCM organization repositories details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="credentialId">Credential ID</param>
        /// <param name="pageSize">Number of items in a page</param>
        /// <param name="pageNumber">Page number</param>
        /// <response code="200">Successfully retrieved SCM organization repositories details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories")]
        [ValidateModelState]
        [SwaggerOperation("GetSCMOrganisationRepositories")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GithubOrganization>), description: "Successfully retrieved SCM organization repositories details")]
        public virtual IActionResult GetSCMOrganisationRepositories([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "scm")][Required]string scm, [FromRoute (Name = "scmOrganisation")][Required]string scmOrganisation, [FromQuery (Name = "credentialId")]string credentialId, [FromQuery (Name = "pageSize")]int? pageSize, [FromQuery (Name = "pageNumber")]int? pageNumber)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GithubOrganization>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"_links\" : {\n    \"repositories\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"name\" : \"name\",\n  \"_class\" : \"_class\",\n  \"jenkinsOrganizationPipeline\" : true\n}, {\n  \"_links\" : {\n    \"repositories\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"name\" : \"name\",\n  \"_class\" : \"_class\",\n  \"jenkinsOrganizationPipeline\" : true\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<GithubOrganization>>(exampleJson)
            : default(List<GithubOrganization>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve SCM organization repository details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="scmOrganisation">Name of the SCM organization</param>
        /// <param name="repository">Name of the SCM repository</param>
        /// <param name="credentialId">Credential ID</param>
        /// <response code="200">Successfully retrieved SCM organizations details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}")]
        [ValidateModelState]
        [SwaggerOperation("GetSCMOrganisationRepository")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GithubOrganization>), description: "Successfully retrieved SCM organizations details")]
        public virtual IActionResult GetSCMOrganisationRepository([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "scm")][Required]string scm, [FromRoute (Name = "scmOrganisation")][Required]string scmOrganisation, [FromRoute (Name = "repository")][Required]string repository, [FromQuery (Name = "credentialId")]string credentialId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GithubOrganization>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"_links\" : {\n    \"repositories\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"name\" : \"name\",\n  \"_class\" : \"_class\",\n  \"jenkinsOrganizationPipeline\" : true\n}, {\n  \"_links\" : {\n    \"repositories\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"name\" : \"name\",\n  \"_class\" : \"_class\",\n  \"jenkinsOrganizationPipeline\" : true\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<GithubOrganization>>(exampleJson)
            : default(List<GithubOrganization>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve SCM organizations details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="scm">Name of SCM</param>
        /// <param name="credentialId">Credential ID</param>
        /// <response code="200">Successfully retrieved SCM organizations details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/scm/{scm}/organizations")]
        [ValidateModelState]
        [SwaggerOperation("GetSCMOrganisations")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<GithubOrganization>), description: "Successfully retrieved SCM organizations details")]
        public virtual IActionResult GetSCMOrganisations([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "scm")][Required]string scm, [FromQuery (Name = "credentialId")]string credentialId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<GithubOrganization>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"_links\" : {\n    \"repositories\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"name\" : \"name\",\n  \"_class\" : \"_class\",\n  \"jenkinsOrganizationPipeline\" : true\n}, {\n  \"_links\" : {\n    \"repositories\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"name\" : \"name\",\n  \"_class\" : \"_class\",\n  \"jenkinsOrganizationPipeline\" : true\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<GithubOrganization>>(exampleJson)
            : default(List<GithubOrganization>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve user details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="user">Name of the user</param>
        /// <response code="200">Successfully retrieved users details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/users/{user}")]
        [ValidateModelState]
        [SwaggerOperation("GetUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Successfully retrieved users details")]
        public virtual IActionResult GetUser([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "user")][Required]string user)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"fullName\" : \"fullName\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"email\" : \"email\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve user favorites details for an organization</remarks>
        /// <param name="user">Name of the user</param>
        /// <response code="200">Successfully retrieved users favorites details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/users/{user}/favorites")]
        [ValidateModelState]
        [SwaggerOperation("GetUserFavorites")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<FavoriteImpl>), description: "Successfully retrieved users favorites details")]
        public virtual IActionResult GetUserFavorites([FromRoute (Name = "user")][Required]string user)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<FavoriteImpl>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "[ {\n  \"item\" : {\n    \"weatherScore\" : 6,\n    \"latestRun\" : \"latestRun\",\n    \"_links\" : {\n      \"self\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"_class\" : \"_class\",\n      \"runs\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"actions\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"queue\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      }\n    },\n    \"displayName\" : \"displayName\",\n    \"organization\" : \"organization\",\n    \"estimatedDurationInMillis\" : 0,\n    \"name\" : \"name\",\n    \"fullName\" : \"fullName\",\n    \"_class\" : \"_class\"\n  },\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"_class\" : \"_class\"\n}, {\n  \"item\" : {\n    \"weatherScore\" : 6,\n    \"latestRun\" : \"latestRun\",\n    \"_links\" : {\n      \"self\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"_class\" : \"_class\",\n      \"runs\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"actions\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"queue\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      }\n    },\n    \"displayName\" : \"displayName\",\n    \"organization\" : \"organization\",\n    \"estimatedDurationInMillis\" : 0,\n    \"name\" : \"name\",\n    \"fullName\" : \"fullName\",\n    \"_class\" : \"_class\"\n  },\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"_class\" : \"_class\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<FavoriteImpl>>(exampleJson)
            : default(List<FavoriteImpl>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve users details for an organization</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <response code="200">Successfully retrieved users details</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/organizations/{organization}/users/")]
        [ValidateModelState]
        [SwaggerOperation("GetUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(User), description: "Successfully retrieved users details")]
        public virtual IActionResult GetUsers([FromRoute (Name = "organization")][Required]string organization)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(User));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"fullName\" : \"fullName\",\n  \"_class\" : \"_class\",\n  \"id\" : \"id\",\n  \"email\" : \"email\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<User>(exampleJson)
            : default(User);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Replay an organization pipeline run</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <response code="200">Successfully replayed a pipeline run</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpPost]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay")]
        [ValidateModelState]
        [SwaggerOperation("PostPipelineRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(QueueItemImpl), description: "Successfully replayed a pipeline run")]
        public virtual IActionResult PostPipelineRun([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QueueItemImpl));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"pipeline\" : \"pipeline\",\n  \"expectedBuildNumber\" : 0,\n  \"queuedTime\" : 6,\n  \"_class\" : \"_class\",\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<QueueItemImpl>(exampleJson)
            : default(QueueItemImpl);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Start a build for an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <response code="200">Successfully started a build</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpPost]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs")]
        [ValidateModelState]
        [SwaggerOperation("PostPipelineRuns")]
        [SwaggerResponse(statusCode: 200, type: typeof(QueueItemImpl), description: "Successfully started a build")]
        public virtual IActionResult PostPipelineRuns([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(QueueItemImpl));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"pipeline\" : \"pipeline\",\n  \"expectedBuildNumber\" : 0,\n  \"queuedTime\" : 6,\n  \"_class\" : \"_class\",\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<QueueItemImpl>(exampleJson)
            : default(QueueItemImpl);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Favorite/unfavorite a pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="body">Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite</param>
        /// <response code="200">Successfully favorited/unfavorited a pipeline</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpPut]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PutPipelineFavorite")]
        [SwaggerResponse(statusCode: 200, type: typeof(FavoriteImpl), description: "Successfully favorited/unfavorited a pipeline")]
        public virtual IActionResult PutPipelineFavorite([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromBody]bool body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FavoriteImpl));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"item\" : {\n    \"weatherScore\" : 6,\n    \"latestRun\" : \"latestRun\",\n    \"_links\" : {\n      \"self\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"_class\" : \"_class\",\n      \"runs\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"actions\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      },\n      \"queue\" : {\n        \"_class\" : \"_class\",\n        \"href\" : \"href\"\n      }\n    },\n    \"displayName\" : \"displayName\",\n    \"organization\" : \"organization\",\n    \"estimatedDurationInMillis\" : 0,\n    \"name\" : \"name\",\n    \"fullName\" : \"fullName\",\n    \"_class\" : \"_class\"\n  },\n  \"_links\" : {\n    \"self\" : {\n      \"_class\" : \"_class\",\n      \"href\" : \"href\"\n    },\n    \"_class\" : \"_class\"\n  },\n  \"_class\" : \"_class\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FavoriteImpl>(exampleJson)
            : default(FavoriteImpl);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Stop a build of an organization pipeline</remarks>
        /// <param name="organization">Name of the organization</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="run">Name of the run</param>
        /// <param name="blocking">Set to true to make blocking stop, default: false</param>
        /// <param name="timeOutInSecs">Timeout in seconds, default: 10 seconds</param>
        /// <response code="200">Successfully stopped a build</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpPut]
        [Route("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop")]
        [ValidateModelState]
        [SwaggerOperation("PutPipelineRun")]
        [SwaggerResponse(statusCode: 200, type: typeof(PipelineRun), description: "Successfully stopped a build")]
        public virtual IActionResult PutPipelineRun([FromRoute (Name = "organization")][Required]string organization, [FromRoute (Name = "pipeline")][Required]string pipeline, [FromRoute (Name = "run")][Required]string run, [FromQuery (Name = "blocking")]string blocking, [FromQuery (Name = "timeOutInSecs")]int? timeOutInSecs)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PipelineRun));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"runSummary\" : \"runSummary\",\n  \"durationInMillis\" : 6,\n  \"commitId\" : \"commitId\",\n  \"type\" : \"type\",\n  \"pipeline\" : \"pipeline\",\n  \"result\" : \"result\",\n  \"organization\" : \"organization\",\n  \"estimatedDurationInMillis\" : 1,\n  \"enQueueTime\" : \"enQueueTime\",\n  \"startTime\" : \"startTime\",\n  \"_class\" : \"_class\",\n  \"endTime\" : \"endTime\",\n  \"id\" : \"id\",\n  \"state\" : \"state\",\n  \"artifacts\" : [ {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  }, {\n    \"size\" : 0,\n    \"name\" : \"name\",\n    \"_class\" : \"_class\",\n    \"url\" : \"url\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PipelineRun>(exampleJson)
            : default(PipelineRun);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Search for any resource details</remarks>
        /// <param name="q">Query string</param>
        /// <response code="200">Successfully retrieved search result</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/search/")]
        [ValidateModelState]
        [SwaggerOperation("Search")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Successfully retrieved search result")]
        public virtual IActionResult Search([FromQuery (Name = "q")][Required()]string q)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Get classes details</remarks>
        /// <param name="q">Query string containing an array of class names</param>
        /// <response code="200">Successfully retrieved search result</response>
        /// <response code="401">Authentication failed - incorrect username and/or password</response>
        /// <response code="403">Jenkins requires authentication - please set username and password</response>
        [HttpGet]
        [Route("/blue/rest/classes/")]
        [ValidateModelState]
        [SwaggerOperation("SearchClasses")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "Successfully retrieved search result")]
        public virtual IActionResult SearchClasses([FromQuery (Name = "q")][Required()]string q)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
