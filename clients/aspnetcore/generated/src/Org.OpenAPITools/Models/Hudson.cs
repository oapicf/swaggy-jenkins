/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Hudson : IEquatable<Hudson>
    {
        /// <summary>
        /// Gets or Sets VarClass
        /// </summary>
        [DataMember(Name="_class", EmitDefaultValue=false)]
        public string VarClass { get; set; }

        /// <summary>
        /// Gets or Sets AssignedLabels
        /// </summary>
        [DataMember(Name="assignedLabels", EmitDefaultValue=false)]
        public List<HudsonassignedLabels> AssignedLabels { get; set; }

        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or Sets NodeDescription
        /// </summary>
        [DataMember(Name="nodeDescription", EmitDefaultValue=false)]
        public string NodeDescription { get; set; }

        /// <summary>
        /// Gets or Sets NodeName
        /// </summary>
        [DataMember(Name="nodeName", EmitDefaultValue=false)]
        public string NodeName { get; set; }

        /// <summary>
        /// Gets or Sets NumExecutors
        /// </summary>
        [DataMember(Name="numExecutors", EmitDefaultValue=true)]
        public int NumExecutors { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Jobs
        /// </summary>
        [DataMember(Name="jobs", EmitDefaultValue=false)]
        public List<FreeStyleProject> Jobs { get; set; }

        /// <summary>
        /// Gets or Sets PrimaryView
        /// </summary>
        [DataMember(Name="primaryView", EmitDefaultValue=false)]
        public AllView PrimaryView { get; set; }

        /// <summary>
        /// Gets or Sets QuietingDown
        /// </summary>
        [DataMember(Name="quietingDown", EmitDefaultValue=true)]
        public bool QuietingDown { get; set; }

        /// <summary>
        /// Gets or Sets SlaveAgentPort
        /// </summary>
        [DataMember(Name="slaveAgentPort", EmitDefaultValue=true)]
        public int SlaveAgentPort { get; set; }

        /// <summary>
        /// Gets or Sets UnlabeledLoad
        /// </summary>
        [DataMember(Name="unlabeledLoad", EmitDefaultValue=false)]
        public UnlabeledLoadStatistics UnlabeledLoad { get; set; }

        /// <summary>
        /// Gets or Sets UseCrumbs
        /// </summary>
        [DataMember(Name="useCrumbs", EmitDefaultValue=true)]
        public bool UseCrumbs { get; set; }

        /// <summary>
        /// Gets or Sets UseSecurity
        /// </summary>
        [DataMember(Name="useSecurity", EmitDefaultValue=true)]
        public bool UseSecurity { get; set; }

        /// <summary>
        /// Gets or Sets Views
        /// </summary>
        [DataMember(Name="views", EmitDefaultValue=false)]
        public List<AllView> Views { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Hudson {\n");
            sb.Append("  VarClass: ").Append(VarClass).Append("\n");
            sb.Append("  AssignedLabels: ").Append(AssignedLabels).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  NodeDescription: ").Append(NodeDescription).Append("\n");
            sb.Append("  NodeName: ").Append(NodeName).Append("\n");
            sb.Append("  NumExecutors: ").Append(NumExecutors).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Jobs: ").Append(Jobs).Append("\n");
            sb.Append("  PrimaryView: ").Append(PrimaryView).Append("\n");
            sb.Append("  QuietingDown: ").Append(QuietingDown).Append("\n");
            sb.Append("  SlaveAgentPort: ").Append(SlaveAgentPort).Append("\n");
            sb.Append("  UnlabeledLoad: ").Append(UnlabeledLoad).Append("\n");
            sb.Append("  UseCrumbs: ").Append(UseCrumbs).Append("\n");
            sb.Append("  UseSecurity: ").Append(UseSecurity).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Hudson)obj);
        }

        /// <summary>
        /// Returns true if Hudson instances are equal
        /// </summary>
        /// <param name="other">Instance of Hudson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Hudson other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarClass == other.VarClass ||
                    VarClass != null &&
                    VarClass.Equals(other.VarClass)
                ) && 
                (
                    AssignedLabels == other.AssignedLabels ||
                    AssignedLabels != null &&
                    other.AssignedLabels != null &&
                    AssignedLabels.SequenceEqual(other.AssignedLabels)
                ) && 
                (
                    Mode == other.Mode ||
                    Mode != null &&
                    Mode.Equals(other.Mode)
                ) && 
                (
                    NodeDescription == other.NodeDescription ||
                    NodeDescription != null &&
                    NodeDescription.Equals(other.NodeDescription)
                ) && 
                (
                    NodeName == other.NodeName ||
                    NodeName != null &&
                    NodeName.Equals(other.NodeName)
                ) && 
                (
                    NumExecutors == other.NumExecutors ||
                    
                    NumExecutors.Equals(other.NumExecutors)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Jobs == other.Jobs ||
                    Jobs != null &&
                    other.Jobs != null &&
                    Jobs.SequenceEqual(other.Jobs)
                ) && 
                (
                    PrimaryView == other.PrimaryView ||
                    PrimaryView != null &&
                    PrimaryView.Equals(other.PrimaryView)
                ) && 
                (
                    QuietingDown == other.QuietingDown ||
                    
                    QuietingDown.Equals(other.QuietingDown)
                ) && 
                (
                    SlaveAgentPort == other.SlaveAgentPort ||
                    
                    SlaveAgentPort.Equals(other.SlaveAgentPort)
                ) && 
                (
                    UnlabeledLoad == other.UnlabeledLoad ||
                    UnlabeledLoad != null &&
                    UnlabeledLoad.Equals(other.UnlabeledLoad)
                ) && 
                (
                    UseCrumbs == other.UseCrumbs ||
                    
                    UseCrumbs.Equals(other.UseCrumbs)
                ) && 
                (
                    UseSecurity == other.UseSecurity ||
                    
                    UseSecurity.Equals(other.UseSecurity)
                ) && 
                (
                    Views == other.Views ||
                    Views != null &&
                    other.Views != null &&
                    Views.SequenceEqual(other.Views)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarClass != null)
                    hashCode = hashCode * 59 + VarClass.GetHashCode();
                    if (AssignedLabels != null)
                    hashCode = hashCode * 59 + AssignedLabels.GetHashCode();
                    if (Mode != null)
                    hashCode = hashCode * 59 + Mode.GetHashCode();
                    if (NodeDescription != null)
                    hashCode = hashCode * 59 + NodeDescription.GetHashCode();
                    if (NodeName != null)
                    hashCode = hashCode * 59 + NodeName.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumExecutors.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Jobs != null)
                    hashCode = hashCode * 59 + Jobs.GetHashCode();
                    if (PrimaryView != null)
                    hashCode = hashCode * 59 + PrimaryView.GetHashCode();
                    
                    hashCode = hashCode * 59 + QuietingDown.GetHashCode();
                    
                    hashCode = hashCode * 59 + SlaveAgentPort.GetHashCode();
                    if (UnlabeledLoad != null)
                    hashCode = hashCode * 59 + UnlabeledLoad.GetHashCode();
                    
                    hashCode = hashCode * 59 + UseCrumbs.GetHashCode();
                    
                    hashCode = hashCode * 59 + UseSecurity.GetHashCode();
                    if (Views != null)
                    hashCode = hashCode * 59 + Views.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Hudson left, Hudson right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Hudson left, Hudson right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
