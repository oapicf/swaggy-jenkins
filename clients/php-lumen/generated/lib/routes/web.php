<?php

/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 * PHP version 7.2.5
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * The Lumen framework is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).
 */

/**
 * Swaggy Jenkins
 * @version 2.0.1-pre.0
 */

/*
|--------------------------------------------------------------------------
| Application Routes
|--------------------------------------------------------------------------
|
| Here is where you can register all of the routes for an application.
| It is a breeze. Simply tell Lumen the URIs it should respond to
| and give it the Closure to call when that URI is requested.
|
*/

$router->get('/', function () use ($router) {
    return $router->app->version();
});

/**
 * get getCrumb
 * Summary: 
 * Notes: Retrieve CSRF protection token
 */
$router->get('/crumbIssuer/api/json', 'BaseApi@getCrumb');

/**
 * get searchClasses
 * Summary: 
 * Notes: Get classes details
 */
$router->get('/blue/rest/classes/', 'BlueOceanApi@searchClasses');

/**
 * get getClasses
 * Summary: 
 * Notes: Get a list of class names supported by a given class
 */
$router->get('/blue/rest/classes/{class}', 'BlueOceanApi@getClasses');

/**
 * get getOrganisations
 * Summary: 
 * Notes: Retrieve all organizations details
 */
$router->get('/blue/rest/organizations/', 'BlueOceanApi@getOrganisations');

/**
 * get getOrganisation
 * Summary: 
 * Notes: Retrieve organization details
 */
$router->get('/blue/rest/organizations/{organization}', 'BlueOceanApi@getOrganisation');

/**
 * get getPipelines
 * Summary: 
 * Notes: Retrieve all pipelines details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/', 'BlueOceanApi@getPipelines');

/**
 * get getPipelineFolder
 * Summary: 
 * Notes: Retrieve pipeline folder for an organization
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{folder}/', 'BlueOceanApi@getPipelineFolder');

/**
 * get getPipelineFolderPipeline
 * Summary: 
 * Notes: Retrieve pipeline details for an organization folder
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}', 'BlueOceanApi@getPipelineFolderPipeline');

/**
 * get getPipeline
 * Summary: 
 * Notes: Retrieve pipeline details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}', 'BlueOceanApi@getPipeline');

/**
 * get getPipelineActivities
 * Summary: 
 * Notes: Retrieve all activities details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities', 'BlueOceanApi@getPipelineActivities');

/**
 * get getPipelineBranches
 * Summary: 
 * Notes: Retrieve all branches details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches', 'BlueOceanApi@getPipelineBranches');

/**
 * get getPipelineBranch
 * Summary: 
 * Notes: Retrieve branch details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/', 'BlueOceanApi@getPipelineBranch');

/**
 * get getPipelineBranchRun
 * Summary: 
 * Notes: Retrieve branch run details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}', 'BlueOceanApi@getPipelineBranchRun');

/**
 * put putPipelineFavorite
 * Summary: 
 * Notes: Favorite/unfavorite a pipeline
 */
$router->put('/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite', 'BlueOceanApi@putPipelineFavorite');

/**
 * get getPipelineQueue
 * Summary: 
 * Notes: Retrieve queue details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue', 'BlueOceanApi@getPipelineQueue');

/**
 * delete deletePipelineQueueItem
 * Summary: 
 * Notes: Delete queue item from an organization pipeline queue
 */
$router->delete('/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}', 'BlueOceanApi@deletePipelineQueueItem');

/**
 * get getPipelineRuns
 * Summary: 
 * Notes: Retrieve all runs details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', 'BlueOceanApi@getPipelineRuns');

/**
 * post postPipelineRuns
 * Summary: 
 * Notes: Start a build for an organization pipeline
 */
$router->post('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', 'BlueOceanApi@postPipelineRuns');

/**
 * get getPipelineRun
 * Summary: 
 * Notes: Retrieve run details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}', 'BlueOceanApi@getPipelineRun');

/**
 * get getPipelineRunLog
 * Summary: 
 * Notes: Get log for a pipeline run
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log', 'BlueOceanApi@getPipelineRunLog');

/**
 * get getPipelineRunNodes
 * Summary: 
 * Notes: Retrieve run nodes details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes', 'BlueOceanApi@getPipelineRunNodes');

/**
 * get getPipelineRunNode
 * Summary: 
 * Notes: Retrieve run node details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}', 'BlueOceanApi@getPipelineRunNode');

/**
 * get getPipelineRunNodeSteps
 * Summary: 
 * Notes: Retrieve run node steps details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps', 'BlueOceanApi@getPipelineRunNodeSteps');

/**
 * get getPipelineRunNodeStep
 * Summary: 
 * Notes: Retrieve run node details for an organization pipeline
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}', 'BlueOceanApi@getPipelineRunNodeStep');

/**
 * get getPipelineRunNodeStepLog
 * Summary: 
 * Notes: Get log for a pipeline run node step
 */
$router->get('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log', 'BlueOceanApi@getPipelineRunNodeStepLog');

/**
 * post postPipelineRun
 * Summary: 
 * Notes: Replay an organization pipeline run
 */
$router->post('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay', 'BlueOceanApi@postPipelineRun');

/**
 * put putPipelineRun
 * Summary: 
 * Notes: Stop a build of an organization pipeline
 */
$router->put('/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop', 'BlueOceanApi@putPipelineRun');

/**
 * get getSCM
 * Summary: 
 * Notes: Retrieve SCM details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/scm/{scm}', 'BlueOceanApi@getSCM');

/**
 * get getSCMOrganisations
 * Summary: 
 * Notes: Retrieve SCM organizations details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/scm/{scm}/organizations', 'BlueOceanApi@getSCMOrganisations');

/**
 * get getSCMOrganisationRepositories
 * Summary: 
 * Notes: Retrieve SCM organization repositories details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories', 'BlueOceanApi@getSCMOrganisationRepositories');

/**
 * get getSCMOrganisationRepository
 * Summary: 
 * Notes: Retrieve SCM organization repository details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}', 'BlueOceanApi@getSCMOrganisationRepository');

/**
 * get getAuthenticatedUser
 * Summary: 
 * Notes: Retrieve authenticated user details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/user/', 'BlueOceanApi@getAuthenticatedUser');

/**
 * get getUsers
 * Summary: 
 * Notes: Retrieve users details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/users/', 'BlueOceanApi@getUsers');

/**
 * get getUser
 * Summary: 
 * Notes: Retrieve user details for an organization
 */
$router->get('/blue/rest/organizations/{organization}/users/{user}', 'BlueOceanApi@getUser');

/**
 * get search
 * Summary: 
 * Notes: Search for any resource details
 */
$router->get('/blue/rest/search/', 'BlueOceanApi@search');

/**
 * get getUserFavorites
 * Summary: 
 * Notes: Retrieve user favorites details for an organization
 */
$router->get('/blue/rest/users/{user}/favorites', 'BlueOceanApi@getUserFavorites');

/**
 * get getJsonWebKey
 * Summary: 
 * Notes: Retrieve JSON Web Key
 */
$router->get('/jwt-auth/jwks/{key}', 'BlueOceanApi@getJsonWebKey');

/**
 * get getJsonWebToken
 * Summary: 
 * Notes: Retrieve JSON Web Token
 */
$router->get('/jwt-auth/token', 'BlueOceanApi@getJsonWebToken');

/**
 * get getJenkins
 * Summary: 
 * Notes: Retrieve Jenkins details
 */
$router->get('/api/json', 'RemoteAccessApi@getJenkins');

/**
 * head headJenkins
 * Summary: 
 * Notes: Retrieve Jenkins headers
 */
$router->head('/api/json', 'RemoteAccessApi@headJenkins');

/**
 * get getComputer
 * Summary: 
 * Notes: Retrieve computer details
 */
$router->get('/computer/api/json', 'RemoteAccessApi@getComputer');

/**
 * post postCreateItem
 * Summary: 
 * Notes: Create a new job using job configuration, or copied from an existing job
 */
$router->post('/createItem', 'RemoteAccessApi@postCreateItem');

/**
 * post postCreateView
 * Summary: 
 * Notes: Create a new view using view configuration
 */
$router->post('/createView', 'RemoteAccessApi@postCreateView');

/**
 * get getJob
 * Summary: 
 * Notes: Retrieve job details
 */
$router->get('/job/{name}/api/json', 'RemoteAccessApi@getJob');

/**
 * post postJobBuild
 * Summary: 
 * Notes: Build a job
 */
$router->post('/job/{name}/build', 'RemoteAccessApi@postJobBuild');

/**
 * get getJobConfig
 * Summary: 
 * Notes: Retrieve job configuration
 */
$router->get('/job/{name}/config.xml', 'RemoteAccessApi@getJobConfig');

/**
 * post postJobConfig
 * Summary: 
 * Notes: Update job configuration
 */
$router->post('/job/{name}/config.xml', 'RemoteAccessApi@postJobConfig');

/**
 * post postJobDisable
 * Summary: 
 * Notes: Disable a job
 */
$router->post('/job/{name}/disable', 'RemoteAccessApi@postJobDisable');

/**
 * post postJobDelete
 * Summary: 
 * Notes: Delete a job
 */
$router->post('/job/{name}/doDelete', 'RemoteAccessApi@postJobDelete');

/**
 * post postJobEnable
 * Summary: 
 * Notes: Enable a job
 */
$router->post('/job/{name}/enable', 'RemoteAccessApi@postJobEnable');

/**
 * get getJobLastBuild
 * Summary: 
 * Notes: Retrieve job&#39;s last build details
 */
$router->get('/job/{name}/lastBuild/api/json', 'RemoteAccessApi@getJobLastBuild');

/**
 * post postJobLastBuildStop
 * Summary: 
 * Notes: Stop a job
 */
$router->post('/job/{name}/lastBuild/stop', 'RemoteAccessApi@postJobLastBuildStop');

/**
 * get getJobProgressiveText
 * Summary: 
 * Notes: Retrieve job&#39;s build progressive text output
 */
$router->get('/job/{name}/{number}/logText/progressiveText', 'RemoteAccessApi@getJobProgressiveText');

/**
 * get getQueue
 * Summary: 
 * Notes: Retrieve queue details
 */
$router->get('/queue/api/json', 'RemoteAccessApi@getQueue');

/**
 * get getQueueItem
 * Summary: 
 * Notes: Retrieve queued item details
 */
$router->get('/queue/item/{number}/api/json', 'RemoteAccessApi@getQueueItem');

/**
 * get getView
 * Summary: 
 * Notes: Retrieve view details
 */
$router->get('/view/{name}/api/json', 'RemoteAccessApi@getView');

/**
 * get getViewConfig
 * Summary: 
 * Notes: Retrieve view configuration
 */
$router->get('/view/{name}/config.xml', 'RemoteAccessApi@getViewConfig');

/**
 * post postViewConfig
 * Summary: 
 * Notes: Update view configuration
 */
$router->post('/view/{name}/config.xml', 'RemoteAccessApi@postViewConfig');

