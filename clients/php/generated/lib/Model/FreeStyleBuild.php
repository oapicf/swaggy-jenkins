<?php
/**
 * FreeStyleBuild
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * FreeStyleBuild Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class FreeStyleBuild implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FreeStyleBuild';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_class' => 'string',
        'number' => 'int',
        'url' => 'string',
        'actions' => '\OpenAPI\Client\Model\CauseAction[]',
        'building' => 'bool',
        'description' => 'string',
        'display_name' => 'string',
        'duration' => 'int',
        'estimated_duration' => 'int',
        'executor' => 'string',
        'full_display_name' => 'string',
        'id' => 'string',
        'keep_log' => 'bool',
        'queue_id' => 'int',
        'result' => 'string',
        'timestamp' => 'int',
        'built_on' => 'string',
        'change_set' => '\OpenAPI\Client\Model\EmptyChangeLogSet'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_class' => null,
        'number' => null,
        'url' => null,
        'actions' => null,
        'building' => null,
        'description' => null,
        'display_name' => null,
        'duration' => null,
        'estimated_duration' => null,
        'executor' => null,
        'full_display_name' => null,
        'id' => null,
        'keep_log' => null,
        'queue_id' => null,
        'result' => null,
        'timestamp' => null,
        'built_on' => null,
        'change_set' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_class' => false,
        'number' => false,
        'url' => false,
        'actions' => false,
        'building' => false,
        'description' => false,
        'display_name' => false,
        'duration' => false,
        'estimated_duration' => false,
        'executor' => false,
        'full_display_name' => false,
        'id' => false,
        'keep_log' => false,
        'queue_id' => false,
        'result' => false,
        'timestamp' => false,
        'built_on' => false,
        'change_set' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_class' => '_class',
        'number' => 'number',
        'url' => 'url',
        'actions' => 'actions',
        'building' => 'building',
        'description' => 'description',
        'display_name' => 'displayName',
        'duration' => 'duration',
        'estimated_duration' => 'estimatedDuration',
        'executor' => 'executor',
        'full_display_name' => 'fullDisplayName',
        'id' => 'id',
        'keep_log' => 'keepLog',
        'queue_id' => 'queueId',
        'result' => 'result',
        'timestamp' => 'timestamp',
        'built_on' => 'builtOn',
        'change_set' => 'changeSet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_class' => 'setClass',
        'number' => 'setNumber',
        'url' => 'setUrl',
        'actions' => 'setActions',
        'building' => 'setBuilding',
        'description' => 'setDescription',
        'display_name' => 'setDisplayName',
        'duration' => 'setDuration',
        'estimated_duration' => 'setEstimatedDuration',
        'executor' => 'setExecutor',
        'full_display_name' => 'setFullDisplayName',
        'id' => 'setId',
        'keep_log' => 'setKeepLog',
        'queue_id' => 'setQueueId',
        'result' => 'setResult',
        'timestamp' => 'setTimestamp',
        'built_on' => 'setBuiltOn',
        'change_set' => 'setChangeSet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_class' => 'getClass',
        'number' => 'getNumber',
        'url' => 'getUrl',
        'actions' => 'getActions',
        'building' => 'getBuilding',
        'description' => 'getDescription',
        'display_name' => 'getDisplayName',
        'duration' => 'getDuration',
        'estimated_duration' => 'getEstimatedDuration',
        'executor' => 'getExecutor',
        'full_display_name' => 'getFullDisplayName',
        'id' => 'getId',
        'keep_log' => 'getKeepLog',
        'queue_id' => 'getQueueId',
        'result' => 'getResult',
        'timestamp' => 'getTimestamp',
        'built_on' => 'getBuiltOn',
        'change_set' => 'getChangeSet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('_class', $data ?? [], null);
        $this->setIfExists('number', $data ?? [], null);
        $this->setIfExists('url', $data ?? [], null);
        $this->setIfExists('actions', $data ?? [], null);
        $this->setIfExists('building', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('display_name', $data ?? [], null);
        $this->setIfExists('duration', $data ?? [], null);
        $this->setIfExists('estimated_duration', $data ?? [], null);
        $this->setIfExists('executor', $data ?? [], null);
        $this->setIfExists('full_display_name', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('keep_log', $data ?? [], null);
        $this->setIfExists('queue_id', $data ?? [], null);
        $this->setIfExists('result', $data ?? [], null);
        $this->setIfExists('timestamp', $data ?? [], null);
        $this->setIfExists('built_on', $data ?? [], null);
        $this->setIfExists('change_set', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['_class'];
    }

    /**
     * Sets _class
     *
     * @param string|null $_class _class
     *
     * @return self
     */
    public function setClass($_class)
    {
        if (is_null($_class)) {
            throw new \InvalidArgumentException('non-nullable _class cannot be null');
        }
        $this->container['_class'] = $_class;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int|null $number number
     *
     * @return self
     */
    public function setNumber($number)
    {
        if (is_null($number)) {
            throw new \InvalidArgumentException('non-nullable number cannot be null');
        }
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (is_null($url)) {
            throw new \InvalidArgumentException('non-nullable url cannot be null');
        }
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets actions
     *
     * @return \OpenAPI\Client\Model\CauseAction[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \OpenAPI\Client\Model\CauseAction[]|null $actions actions
     *
     * @return self
     */
    public function setActions($actions)
    {
        if (is_null($actions)) {
            throw new \InvalidArgumentException('non-nullable actions cannot be null');
        }
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets building
     *
     * @return bool|null
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     *
     * @param bool|null $building building
     *
     * @return self
     */
    public function setBuilding($building)
    {
        if (is_null($building)) {
            throw new \InvalidArgumentException('non-nullable building cannot be null');
        }
        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return self
     */
    public function setDisplayName($display_name)
    {
        if (is_null($display_name)) {
            throw new \InvalidArgumentException('non-nullable display_name cannot be null');
        }
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int|null
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int|null $duration duration
     *
     * @return self
     */
    public function setDuration($duration)
    {
        if (is_null($duration)) {
            throw new \InvalidArgumentException('non-nullable duration cannot be null');
        }
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets estimated_duration
     *
     * @return int|null
     */
    public function getEstimatedDuration()
    {
        return $this->container['estimated_duration'];
    }

    /**
     * Sets estimated_duration
     *
     * @param int|null $estimated_duration estimated_duration
     *
     * @return self
     */
    public function setEstimatedDuration($estimated_duration)
    {
        if (is_null($estimated_duration)) {
            throw new \InvalidArgumentException('non-nullable estimated_duration cannot be null');
        }
        $this->container['estimated_duration'] = $estimated_duration;

        return $this;
    }

    /**
     * Gets executor
     *
     * @return string|null
     */
    public function getExecutor()
    {
        return $this->container['executor'];
    }

    /**
     * Sets executor
     *
     * @param string|null $executor executor
     *
     * @return self
     */
    public function setExecutor($executor)
    {
        if (is_null($executor)) {
            throw new \InvalidArgumentException('non-nullable executor cannot be null');
        }
        $this->container['executor'] = $executor;

        return $this;
    }

    /**
     * Gets full_display_name
     *
     * @return string|null
     */
    public function getFullDisplayName()
    {
        return $this->container['full_display_name'];
    }

    /**
     * Sets full_display_name
     *
     * @param string|null $full_display_name full_display_name
     *
     * @return self
     */
    public function setFullDisplayName($full_display_name)
    {
        if (is_null($full_display_name)) {
            throw new \InvalidArgumentException('non-nullable full_display_name cannot be null');
        }
        $this->container['full_display_name'] = $full_display_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keep_log
     *
     * @return bool|null
     */
    public function getKeepLog()
    {
        return $this->container['keep_log'];
    }

    /**
     * Sets keep_log
     *
     * @param bool|null $keep_log keep_log
     *
     * @return self
     */
    public function setKeepLog($keep_log)
    {
        if (is_null($keep_log)) {
            throw new \InvalidArgumentException('non-nullable keep_log cannot be null');
        }
        $this->container['keep_log'] = $keep_log;

        return $this;
    }

    /**
     * Gets queue_id
     *
     * @return int|null
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     *
     * @param int|null $queue_id queue_id
     *
     * @return self
     */
    public function setQueueId($queue_id)
    {
        if (is_null($queue_id)) {
            throw new \InvalidArgumentException('non-nullable queue_id cannot be null');
        }
        $this->container['queue_id'] = $queue_id;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string|null
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string|null $result result
     *
     * @return self
     */
    public function setResult($result)
    {
        if (is_null($result)) {
            throw new \InvalidArgumentException('non-nullable result cannot be null');
        }
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets timestamp
     *
     * @return int|null
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     *
     * @param int|null $timestamp timestamp
     *
     * @return self
     */
    public function setTimestamp($timestamp)
    {
        if (is_null($timestamp)) {
            throw new \InvalidArgumentException('non-nullable timestamp cannot be null');
        }
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets built_on
     *
     * @return string|null
     */
    public function getBuiltOn()
    {
        return $this->container['built_on'];
    }

    /**
     * Sets built_on
     *
     * @param string|null $built_on built_on
     *
     * @return self
     */
    public function setBuiltOn($built_on)
    {
        if (is_null($built_on)) {
            throw new \InvalidArgumentException('non-nullable built_on cannot be null');
        }
        $this->container['built_on'] = $built_on;

        return $this;
    }

    /**
     * Gets change_set
     *
     * @return \OpenAPI\Client\Model\EmptyChangeLogSet|null
     */
    public function getChangeSet()
    {
        return $this->container['change_set'];
    }

    /**
     * Sets change_set
     *
     * @param \OpenAPI\Client\Model\EmptyChangeLogSet|null $change_set change_set
     *
     * @return self
     */
    public function setChangeSet($change_set)
    {
        if (is_null($change_set)) {
            throw new \InvalidArgumentException('non-nullable change_set cannot be null');
        }
        $this->container['change_set'] = $change_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


