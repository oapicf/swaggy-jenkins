<?php
/**
 * Hudson
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Hudson Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Hudson implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Hudson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_class' => 'string',
        'assigned_labels' => '\OpenAPI\Client\Model\HudsonassignedLabels[]',
        'mode' => 'string',
        'node_description' => 'string',
        'node_name' => 'string',
        'num_executors' => 'int',
        'description' => 'string',
        'jobs' => '\OpenAPI\Client\Model\FreeStyleProject[]',
        'primary_view' => '\OpenAPI\Client\Model\AllView',
        'quieting_down' => 'bool',
        'slave_agent_port' => 'int',
        'unlabeled_load' => '\OpenAPI\Client\Model\UnlabeledLoadStatistics',
        'use_crumbs' => 'bool',
        'use_security' => 'bool',
        'views' => '\OpenAPI\Client\Model\AllView[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_class' => null,
        'assigned_labels' => null,
        'mode' => null,
        'node_description' => null,
        'node_name' => null,
        'num_executors' => null,
        'description' => null,
        'jobs' => null,
        'primary_view' => null,
        'quieting_down' => null,
        'slave_agent_port' => null,
        'unlabeled_load' => null,
        'use_crumbs' => null,
        'use_security' => null,
        'views' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_class' => false,
        'assigned_labels' => false,
        'mode' => false,
        'node_description' => false,
        'node_name' => false,
        'num_executors' => false,
        'description' => false,
        'jobs' => false,
        'primary_view' => false,
        'quieting_down' => false,
        'slave_agent_port' => false,
        'unlabeled_load' => false,
        'use_crumbs' => false,
        'use_security' => false,
        'views' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_class' => '_class',
        'assigned_labels' => 'assignedLabels',
        'mode' => 'mode',
        'node_description' => 'nodeDescription',
        'node_name' => 'nodeName',
        'num_executors' => 'numExecutors',
        'description' => 'description',
        'jobs' => 'jobs',
        'primary_view' => 'primaryView',
        'quieting_down' => 'quietingDown',
        'slave_agent_port' => 'slaveAgentPort',
        'unlabeled_load' => 'unlabeledLoad',
        'use_crumbs' => 'useCrumbs',
        'use_security' => 'useSecurity',
        'views' => 'views'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_class' => 'setClass',
        'assigned_labels' => 'setAssignedLabels',
        'mode' => 'setMode',
        'node_description' => 'setNodeDescription',
        'node_name' => 'setNodeName',
        'num_executors' => 'setNumExecutors',
        'description' => 'setDescription',
        'jobs' => 'setJobs',
        'primary_view' => 'setPrimaryView',
        'quieting_down' => 'setQuietingDown',
        'slave_agent_port' => 'setSlaveAgentPort',
        'unlabeled_load' => 'setUnlabeledLoad',
        'use_crumbs' => 'setUseCrumbs',
        'use_security' => 'setUseSecurity',
        'views' => 'setViews'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_class' => 'getClass',
        'assigned_labels' => 'getAssignedLabels',
        'mode' => 'getMode',
        'node_description' => 'getNodeDescription',
        'node_name' => 'getNodeName',
        'num_executors' => 'getNumExecutors',
        'description' => 'getDescription',
        'jobs' => 'getJobs',
        'primary_view' => 'getPrimaryView',
        'quieting_down' => 'getQuietingDown',
        'slave_agent_port' => 'getSlaveAgentPort',
        'unlabeled_load' => 'getUnlabeledLoad',
        'use_crumbs' => 'getUseCrumbs',
        'use_security' => 'getUseSecurity',
        'views' => 'getViews'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_class', $data ?? [], null);
        $this->setIfExists('assigned_labels', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('node_description', $data ?? [], null);
        $this->setIfExists('node_name', $data ?? [], null);
        $this->setIfExists('num_executors', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('jobs', $data ?? [], null);
        $this->setIfExists('primary_view', $data ?? [], null);
        $this->setIfExists('quieting_down', $data ?? [], null);
        $this->setIfExists('slave_agent_port', $data ?? [], null);
        $this->setIfExists('unlabeled_load', $data ?? [], null);
        $this->setIfExists('use_crumbs', $data ?? [], null);
        $this->setIfExists('use_security', $data ?? [], null);
        $this->setIfExists('views', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _class
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->container['_class'];
    }

    /**
     * Sets _class
     *
     * @param string|null $_class _class
     *
     * @return self
     */
    public function setClass($_class)
    {
        if (is_null($_class)) {
            throw new \InvalidArgumentException('non-nullable _class cannot be null');
        }
        $this->container['_class'] = $_class;

        return $this;
    }

    /**
     * Gets assigned_labels
     *
     * @return \OpenAPI\Client\Model\HudsonassignedLabels[]|null
     */
    public function getAssignedLabels()
    {
        return $this->container['assigned_labels'];
    }

    /**
     * Sets assigned_labels
     *
     * @param \OpenAPI\Client\Model\HudsonassignedLabels[]|null $assigned_labels assigned_labels
     *
     * @return self
     */
    public function setAssignedLabels($assigned_labels)
    {
        if (is_null($assigned_labels)) {
            throw new \InvalidArgumentException('non-nullable assigned_labels cannot be null');
        }
        $this->container['assigned_labels'] = $assigned_labels;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string|null $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets node_description
     *
     * @return string|null
     */
    public function getNodeDescription()
    {
        return $this->container['node_description'];
    }

    /**
     * Sets node_description
     *
     * @param string|null $node_description node_description
     *
     * @return self
     */
    public function setNodeDescription($node_description)
    {
        if (is_null($node_description)) {
            throw new \InvalidArgumentException('non-nullable node_description cannot be null');
        }
        $this->container['node_description'] = $node_description;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string|null
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string|null $node_name node_name
     *
     * @return self
     */
    public function setNodeName($node_name)
    {
        if (is_null($node_name)) {
            throw new \InvalidArgumentException('non-nullable node_name cannot be null');
        }
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets num_executors
     *
     * @return int|null
     */
    public function getNumExecutors()
    {
        return $this->container['num_executors'];
    }

    /**
     * Sets num_executors
     *
     * @param int|null $num_executors num_executors
     *
     * @return self
     */
    public function setNumExecutors($num_executors)
    {
        if (is_null($num_executors)) {
            throw new \InvalidArgumentException('non-nullable num_executors cannot be null');
        }
        $this->container['num_executors'] = $num_executors;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets jobs
     *
     * @return \OpenAPI\Client\Model\FreeStyleProject[]|null
     */
    public function getJobs()
    {
        return $this->container['jobs'];
    }

    /**
     * Sets jobs
     *
     * @param \OpenAPI\Client\Model\FreeStyleProject[]|null $jobs jobs
     *
     * @return self
     */
    public function setJobs($jobs)
    {
        if (is_null($jobs)) {
            throw new \InvalidArgumentException('non-nullable jobs cannot be null');
        }
        $this->container['jobs'] = $jobs;

        return $this;
    }

    /**
     * Gets primary_view
     *
     * @return \OpenAPI\Client\Model\AllView|null
     */
    public function getPrimaryView()
    {
        return $this->container['primary_view'];
    }

    /**
     * Sets primary_view
     *
     * @param \OpenAPI\Client\Model\AllView|null $primary_view primary_view
     *
     * @return self
     */
    public function setPrimaryView($primary_view)
    {
        if (is_null($primary_view)) {
            throw new \InvalidArgumentException('non-nullable primary_view cannot be null');
        }
        $this->container['primary_view'] = $primary_view;

        return $this;
    }

    /**
     * Gets quieting_down
     *
     * @return bool|null
     */
    public function getQuietingDown()
    {
        return $this->container['quieting_down'];
    }

    /**
     * Sets quieting_down
     *
     * @param bool|null $quieting_down quieting_down
     *
     * @return self
     */
    public function setQuietingDown($quieting_down)
    {
        if (is_null($quieting_down)) {
            throw new \InvalidArgumentException('non-nullable quieting_down cannot be null');
        }
        $this->container['quieting_down'] = $quieting_down;

        return $this;
    }

    /**
     * Gets slave_agent_port
     *
     * @return int|null
     */
    public function getSlaveAgentPort()
    {
        return $this->container['slave_agent_port'];
    }

    /**
     * Sets slave_agent_port
     *
     * @param int|null $slave_agent_port slave_agent_port
     *
     * @return self
     */
    public function setSlaveAgentPort($slave_agent_port)
    {
        if (is_null($slave_agent_port)) {
            throw new \InvalidArgumentException('non-nullable slave_agent_port cannot be null');
        }
        $this->container['slave_agent_port'] = $slave_agent_port;

        return $this;
    }

    /**
     * Gets unlabeled_load
     *
     * @return \OpenAPI\Client\Model\UnlabeledLoadStatistics|null
     */
    public function getUnlabeledLoad()
    {
        return $this->container['unlabeled_load'];
    }

    /**
     * Sets unlabeled_load
     *
     * @param \OpenAPI\Client\Model\UnlabeledLoadStatistics|null $unlabeled_load unlabeled_load
     *
     * @return self
     */
    public function setUnlabeledLoad($unlabeled_load)
    {
        if (is_null($unlabeled_load)) {
            throw new \InvalidArgumentException('non-nullable unlabeled_load cannot be null');
        }
        $this->container['unlabeled_load'] = $unlabeled_load;

        return $this;
    }

    /**
     * Gets use_crumbs
     *
     * @return bool|null
     */
    public function getUseCrumbs()
    {
        return $this->container['use_crumbs'];
    }

    /**
     * Sets use_crumbs
     *
     * @param bool|null $use_crumbs use_crumbs
     *
     * @return self
     */
    public function setUseCrumbs($use_crumbs)
    {
        if (is_null($use_crumbs)) {
            throw new \InvalidArgumentException('non-nullable use_crumbs cannot be null');
        }
        $this->container['use_crumbs'] = $use_crumbs;

        return $this;
    }

    /**
     * Gets use_security
     *
     * @return bool|null
     */
    public function getUseSecurity()
    {
        return $this->container['use_security'];
    }

    /**
     * Sets use_security
     *
     * @param bool|null $use_security use_security
     *
     * @return self
     */
    public function setUseSecurity($use_security)
    {
        if (is_null($use_security)) {
            throw new \InvalidArgumentException('non-nullable use_security cannot be null');
        }
        $this->container['use_security'] = $use_security;

        return $this;
    }

    /**
     * Gets views
     *
     * @return \OpenAPI\Client\Model\AllView[]|null
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param \OpenAPI\Client\Model\AllView[]|null $views views
     *
     * @return self
     */
    public function setViews($views)
    {
        if (is_null($views)) {
            throw new \InvalidArgumentException('non-nullable views cannot be null');
        }
        $this->container['views'] = $views;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


