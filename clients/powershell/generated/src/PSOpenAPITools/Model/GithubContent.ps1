#
# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# Version: 3.0.2-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Name
No description available.
.PARAMETER Sha
No description available.
.PARAMETER Class
No description available.
.PARAMETER Repo
No description available.
.PARAMETER Size
No description available.
.PARAMETER Owner
No description available.
.PARAMETER Path
No description available.
.PARAMETER Base64Data
No description available.
.OUTPUTS

GithubContent<PSCustomObject>
#>

function Initialize-GithubContent {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Sha},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Repo},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Size},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Owner},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Path},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Base64Data}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GithubContent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "sha" = ${Sha}
            "_class" = ${Class}
            "repo" = ${Repo}
            "size" = ${Size}
            "owner" = ${Owner}
            "path" = ${Path}
            "base64Data" = ${Base64Data}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GithubContent<PSCustomObject>

.DESCRIPTION

Convert from JSON to GithubContent<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GithubContent<PSCustomObject>
#>
function ConvertFrom-JsonToGithubContent {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GithubContent' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GithubContent
        $AllProperties = ("name", "sha", "_class", "repo", "size", "owner", "path", "base64Data")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "sha"))) { #optional property not found
            $Sha = $null
        } else {
            $Sha = $JsonParameters.PSobject.Properties["sha"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "repo"))) { #optional property not found
            $Repo = $null
        } else {
            $Repo = $JsonParameters.PSobject.Properties["repo"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "size"))) { #optional property not found
            $Size = $null
        } else {
            $Size = $JsonParameters.PSobject.Properties["size"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "owner"))) { #optional property not found
            $Owner = $null
        } else {
            $Owner = $JsonParameters.PSobject.Properties["owner"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "path"))) { #optional property not found
            $Path = $null
        } else {
            $Path = $JsonParameters.PSobject.Properties["path"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "base64Data"))) { #optional property not found
            $Base64Data = $null
        } else {
            $Base64Data = $JsonParameters.PSobject.Properties["base64Data"].value
        }

        $PSO = [PSCustomObject]@{
            "name" = ${Name}
            "sha" = ${Sha}
            "_class" = ${Class}
            "repo" = ${Repo}
            "size" = ${Size}
            "owner" = ${Owner}
            "path" = ${Path}
            "base64Data" = ${Base64Data}
        }

        return $PSO
    }

}

