#
# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# Version: 3.0.2-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Class
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER DurationInMillis
No description available.
.PARAMETER Id
No description available.
.PARAMETER Result
No description available.
.PARAMETER StartTime
No description available.
.OUTPUTS

GenericResource<PSCustomObject>
#>

function Initialize-GenericResource {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${DurationInMillis},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Id},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Result},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${StartTime}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GenericResource' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "displayName" = ${DisplayName}
            "durationInMillis" = ${DurationInMillis}
            "id" = ${Id}
            "result" = ${Result}
            "startTime" = ${StartTime}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GenericResource<PSCustomObject>

.DESCRIPTION

Convert from JSON to GenericResource<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GenericResource<PSCustomObject>
#>
function ConvertFrom-JsonToGenericResource {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GenericResource' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GenericResource
        $AllProperties = ("_class", "displayName", "durationInMillis", "id", "result", "startTime")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "durationInMillis"))) { #optional property not found
            $DurationInMillis = $null
        } else {
            $DurationInMillis = $JsonParameters.PSobject.Properties["durationInMillis"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "id"))) { #optional property not found
            $Id = $null
        } else {
            $Id = $JsonParameters.PSobject.Properties["id"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "result"))) { #optional property not found
            $Result = $null
        } else {
            $Result = $JsonParameters.PSobject.Properties["result"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "startTime"))) { #optional property not found
            $StartTime = $null
        } else {
            $StartTime = $JsonParameters.PSobject.Properties["startTime"].value
        }

        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "displayName" = ${DisplayName}
            "durationInMillis" = ${DurationInMillis}
            "id" = ${Id}
            "result" = ${Result}
            "startTime" = ${StartTime}
        }

        return $PSO
    }

}

