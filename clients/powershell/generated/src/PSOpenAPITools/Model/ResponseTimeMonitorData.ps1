#
# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# Version: 3.0.2-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Class
No description available.
.PARAMETER Timestamp
No description available.
.PARAMETER Average
No description available.
.OUTPUTS

ResponseTimeMonitorData<PSCustomObject>
#>

function Initialize-ResponseTimeMonitorData {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Timestamp},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Average}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => ResponseTimeMonitorData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "timestamp" = ${Timestamp}
            "average" = ${Average}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to ResponseTimeMonitorData<PSCustomObject>

.DESCRIPTION

Convert from JSON to ResponseTimeMonitorData<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

ResponseTimeMonitorData<PSCustomObject>
#>
function ConvertFrom-JsonToResponseTimeMonitorData {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => ResponseTimeMonitorData' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in ResponseTimeMonitorData
        $AllProperties = ("_class", "timestamp", "average")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "timestamp"))) { #optional property not found
            $Timestamp = $null
        } else {
            $Timestamp = $JsonParameters.PSobject.Properties["timestamp"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "average"))) { #optional property not found
            $Average = $null
        } else {
            $Average = $JsonParameters.PSobject.Properties["average"].value
        }

        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "timestamp" = ${Timestamp}
            "average" = ${Average}
        }

        return $PSO
    }

}

