#
# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# Version: 3.0.2-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Class
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER FullName
No description available.
.PARAMETER Name
No description available.
.PARAMETER Organization
No description available.
.PARAMETER NumberOfFolders
No description available.
.PARAMETER NumberOfPipelines
No description available.
.OUTPUTS

PipelineFolderImpl<PSCustomObject>
#>

function Initialize-PipelineFolderImpl {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullName},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Organization},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberOfFolders},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumberOfPipelines}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => PipelineFolderImpl' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "displayName" = ${DisplayName}
            "fullName" = ${FullName}
            "name" = ${Name}
            "organization" = ${Organization}
            "numberOfFolders" = ${NumberOfFolders}
            "numberOfPipelines" = ${NumberOfPipelines}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to PipelineFolderImpl<PSCustomObject>

.DESCRIPTION

Convert from JSON to PipelineFolderImpl<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

PipelineFolderImpl<PSCustomObject>
#>
function ConvertFrom-JsonToPipelineFolderImpl {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => PipelineFolderImpl' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in PipelineFolderImpl
        $AllProperties = ("_class", "displayName", "fullName", "name", "organization", "numberOfFolders", "numberOfPipelines")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fullName"))) { #optional property not found
            $FullName = $null
        } else {
            $FullName = $JsonParameters.PSobject.Properties["fullName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "organization"))) { #optional property not found
            $Organization = $null
        } else {
            $Organization = $JsonParameters.PSobject.Properties["organization"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfFolders"))) { #optional property not found
            $NumberOfFolders = $null
        } else {
            $NumberOfFolders = $JsonParameters.PSobject.Properties["numberOfFolders"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numberOfPipelines"))) { #optional property not found
            $NumberOfPipelines = $null
        } else {
            $NumberOfPipelines = $JsonParameters.PSobject.Properties["numberOfPipelines"].value
        }

        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "displayName" = ${DisplayName}
            "fullName" = ${FullName}
            "name" = ${Name}
            "organization" = ${Organization}
            "numberOfFolders" = ${NumberOfFolders}
            "numberOfPipelines" = ${NumberOfPipelines}
        }

        return $PSO
    }

}

