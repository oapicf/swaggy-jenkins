#
# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# Version: 2.0.1-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Class
No description available.
.PARAMETER Links
No description available.
.PARAMETER DefaultBranch
No description available.
.PARAMETER Description
No description available.
.PARAMETER Name
No description available.
.PARAMETER Permissions
No description available.
.PARAMETER VarPrivate
No description available.
.PARAMETER FullName
No description available.
.OUTPUTS

GithubRepository<PSCustomObject>
#>

function Initialize-GithubRepository {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Links},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DefaultBranch},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Name},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${Permissions},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${VarPrivate},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${FullName}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => GithubRepository' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "_links" = ${Links}
            "defaultBranch" = ${DefaultBranch}
            "description" = ${Description}
            "name" = ${Name}
            "permissions" = ${Permissions}
            "private" = ${VarPrivate}
            "fullName" = ${FullName}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to GithubRepository<PSCustomObject>

.DESCRIPTION

Convert from JSON to GithubRepository<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

GithubRepository<PSCustomObject>
#>
function ConvertFrom-JsonToGithubRepository {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => GithubRepository' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in GithubRepository
        $AllProperties = ("_class", "_links", "defaultBranch", "description", "name", "permissions", "private", "fullName")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_links"))) { #optional property not found
            $Links = $null
        } else {
            $Links = $JsonParameters.PSobject.Properties["_links"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "defaultBranch"))) { #optional property not found
            $DefaultBranch = $null
        } else {
            $DefaultBranch = $JsonParameters.PSobject.Properties["defaultBranch"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "name"))) { #optional property not found
            $Name = $null
        } else {
            $Name = $JsonParameters.PSobject.Properties["name"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "permissions"))) { #optional property not found
            $Permissions = $null
        } else {
            $Permissions = $JsonParameters.PSobject.Properties["permissions"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "private"))) { #optional property not found
            $VarPrivate = $null
        } else {
            $VarPrivate = $JsonParameters.PSobject.Properties["private"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "fullName"))) { #optional property not found
            $FullName = $null
        } else {
            $FullName = $JsonParameters.PSobject.Properties["fullName"].value
        }

        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "_links" = ${Links}
            "defaultBranch" = ${DefaultBranch}
            "description" = ${Description}
            "name" = ${Name}
            "permissions" = ${Permissions}
            "private" = ${VarPrivate}
            "fullName" = ${FullName}
        }

        return $PSO
    }

}

