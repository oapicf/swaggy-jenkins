#
# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# Version: 2.0.1-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Class
No description available.
.PARAMETER DisplayName
No description available.
.PARAMETER Executors
No description available.
.PARAMETER Icon
No description available.
.PARAMETER IconClassName
No description available.
.PARAMETER Idle
No description available.
.PARAMETER JnlpAgent
No description available.
.PARAMETER LaunchSupported
No description available.
.PARAMETER LoadStatistics
No description available.
.PARAMETER ManualLaunchAllowed
No description available.
.PARAMETER MonitorData
No description available.
.PARAMETER NumExecutors
No description available.
.PARAMETER Offline
No description available.
.PARAMETER OfflineCause
No description available.
.PARAMETER OfflineCauseReason
No description available.
.PARAMETER TemporarilyOffline
No description available.
.OUTPUTS

HudsonMasterComputer<PSCustomObject>
#>

function Initialize-HudsonMasterComputer {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${DisplayName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Executors},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Icon},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IconClassName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Idle},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${JnlpAgent},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${LaunchSupported},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${LoadStatistics},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${ManualLaunchAllowed},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${MonitorData},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumExecutors},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${Offline},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OfflineCause},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${OfflineCauseReason},
        [Parameter(Position = 15, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${TemporarilyOffline}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => HudsonMasterComputer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "displayName" = ${DisplayName}
            "executors" = ${Executors}
            "icon" = ${Icon}
            "iconClassName" = ${IconClassName}
            "idle" = ${Idle}
            "jnlpAgent" = ${JnlpAgent}
            "launchSupported" = ${LaunchSupported}
            "loadStatistics" = ${LoadStatistics}
            "manualLaunchAllowed" = ${ManualLaunchAllowed}
            "monitorData" = ${MonitorData}
            "numExecutors" = ${NumExecutors}
            "offline" = ${Offline}
            "offlineCause" = ${OfflineCause}
            "offlineCauseReason" = ${OfflineCauseReason}
            "temporarilyOffline" = ${TemporarilyOffline}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to HudsonMasterComputer<PSCustomObject>

.DESCRIPTION

Convert from JSON to HudsonMasterComputer<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

HudsonMasterComputer<PSCustomObject>
#>
function ConvertFrom-JsonToHudsonMasterComputer {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => HudsonMasterComputer' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in HudsonMasterComputer
        $AllProperties = ("_class", "displayName", "executors", "icon", "iconClassName", "idle", "jnlpAgent", "launchSupported", "loadStatistics", "manualLaunchAllowed", "monitorData", "numExecutors", "offline", "offlineCause", "offlineCauseReason", "temporarilyOffline")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "displayName"))) { #optional property not found
            $DisplayName = $null
        } else {
            $DisplayName = $JsonParameters.PSobject.Properties["displayName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "executors"))) { #optional property not found
            $Executors = $null
        } else {
            $Executors = $JsonParameters.PSobject.Properties["executors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "icon"))) { #optional property not found
            $Icon = $null
        } else {
            $Icon = $JsonParameters.PSobject.Properties["icon"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iconClassName"))) { #optional property not found
            $IconClassName = $null
        } else {
            $IconClassName = $JsonParameters.PSobject.Properties["iconClassName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "idle"))) { #optional property not found
            $Idle = $null
        } else {
            $Idle = $JsonParameters.PSobject.Properties["idle"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jnlpAgent"))) { #optional property not found
            $JnlpAgent = $null
        } else {
            $JnlpAgent = $JsonParameters.PSobject.Properties["jnlpAgent"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "launchSupported"))) { #optional property not found
            $LaunchSupported = $null
        } else {
            $LaunchSupported = $JsonParameters.PSobject.Properties["launchSupported"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "loadStatistics"))) { #optional property not found
            $LoadStatistics = $null
        } else {
            $LoadStatistics = $JsonParameters.PSobject.Properties["loadStatistics"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "manualLaunchAllowed"))) { #optional property not found
            $ManualLaunchAllowed = $null
        } else {
            $ManualLaunchAllowed = $JsonParameters.PSobject.Properties["manualLaunchAllowed"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "monitorData"))) { #optional property not found
            $MonitorData = $null
        } else {
            $MonitorData = $JsonParameters.PSobject.Properties["monitorData"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numExecutors"))) { #optional property not found
            $NumExecutors = $null
        } else {
            $NumExecutors = $JsonParameters.PSobject.Properties["numExecutors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offline"))) { #optional property not found
            $Offline = $null
        } else {
            $Offline = $JsonParameters.PSobject.Properties["offline"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offlineCause"))) { #optional property not found
            $OfflineCause = $null
        } else {
            $OfflineCause = $JsonParameters.PSobject.Properties["offlineCause"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "offlineCauseReason"))) { #optional property not found
            $OfflineCauseReason = $null
        } else {
            $OfflineCauseReason = $JsonParameters.PSobject.Properties["offlineCauseReason"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "temporarilyOffline"))) { #optional property not found
            $TemporarilyOffline = $null
        } else {
            $TemporarilyOffline = $JsonParameters.PSobject.Properties["temporarilyOffline"].value
        }

        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "displayName" = ${DisplayName}
            "executors" = ${Executors}
            "icon" = ${Icon}
            "iconClassName" = ${IconClassName}
            "idle" = ${Idle}
            "jnlpAgent" = ${JnlpAgent}
            "launchSupported" = ${LaunchSupported}
            "loadStatistics" = ${LoadStatistics}
            "manualLaunchAllowed" = ${ManualLaunchAllowed}
            "monitorData" = ${MonitorData}
            "numExecutors" = ${NumExecutors}
            "offline" = ${Offline}
            "offlineCause" = ${OfflineCause}
            "offlineCauseReason" = ${OfflineCauseReason}
            "temporarilyOffline" = ${TemporarilyOffline}
        }

        return $PSO
    }

}

