#
# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# Version: 2.0.1-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Description
No description available.
.PARAMETER IconClassName
No description available.
.PARAMETER IconUrl
No description available.
.PARAMETER Score
No description available.
.PARAMETER Class
No description available.
.OUTPUTS

FreeStyleProjecthealthReport<PSCustomObject>
#>

function Initialize-FreeStyleProjecthealthReport {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IconClassName},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${IconUrl},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${Score},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => FreeStyleProjecthealthReport' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "iconClassName" = ${IconClassName}
            "iconUrl" = ${IconUrl}
            "score" = ${Score}
            "_class" = ${Class}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to FreeStyleProjecthealthReport<PSCustomObject>

.DESCRIPTION

Convert from JSON to FreeStyleProjecthealthReport<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

FreeStyleProjecthealthReport<PSCustomObject>
#>
function ConvertFrom-JsonToFreeStyleProjecthealthReport {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => FreeStyleProjecthealthReport' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in FreeStyleProjecthealthReport
        $AllProperties = ("description", "iconClassName", "iconUrl", "score", "_class")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iconClassName"))) { #optional property not found
            $IconClassName = $null
        } else {
            $IconClassName = $JsonParameters.PSobject.Properties["iconClassName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "iconUrl"))) { #optional property not found
            $IconUrl = $null
        } else {
            $IconUrl = $JsonParameters.PSobject.Properties["iconUrl"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "score"))) { #optional property not found
            $Score = $null
        } else {
            $Score = $JsonParameters.PSobject.Properties["score"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["_class"].value
        }

        $PSO = [PSCustomObject]@{
            "description" = ${Description}
            "iconClassName" = ${IconClassName}
            "iconUrl" = ${IconUrl}
            "score" = ${Score}
            "_class" = ${Class}
        }

        return $PSO
    }

}

