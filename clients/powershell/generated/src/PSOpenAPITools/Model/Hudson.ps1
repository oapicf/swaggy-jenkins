#
# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# Version: 3.0.2-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

<#
.SYNOPSIS

No summary available.

.DESCRIPTION

No description available.

.PARAMETER Class
No description available.
.PARAMETER AssignedLabels
No description available.
.PARAMETER Mode
No description available.
.PARAMETER NodeDescription
No description available.
.PARAMETER NodeName
No description available.
.PARAMETER NumExecutors
No description available.
.PARAMETER Description
No description available.
.PARAMETER Jobs
No description available.
.PARAMETER PrimaryView
No description available.
.PARAMETER QuietingDown
No description available.
.PARAMETER SlaveAgentPort
No description available.
.PARAMETER UnlabeledLoad
No description available.
.PARAMETER UseCrumbs
No description available.
.PARAMETER UseSecurity
No description available.
.PARAMETER Views
No description available.
.OUTPUTS

Hudson<PSCustomObject>
#>

function Initialize-Hudson {
    [CmdletBinding()]
    Param (
        [Parameter(Position = 0, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Class},
        [Parameter(Position = 1, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${AssignedLabels},
        [Parameter(Position = 2, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Mode},
        [Parameter(Position = 3, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeDescription},
        [Parameter(Position = 4, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${NodeName},
        [Parameter(Position = 5, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${NumExecutors},
        [Parameter(Position = 6, ValueFromPipelineByPropertyName = $true)]
        [String]
        ${Description},
        [Parameter(Position = 7, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Jobs},
        [Parameter(Position = 8, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${PrimaryView},
        [Parameter(Position = 9, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${QuietingDown},
        [Parameter(Position = 10, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Int32]]
        ${SlaveAgentPort},
        [Parameter(Position = 11, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject]
        ${UnlabeledLoad},
        [Parameter(Position = 12, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UseCrumbs},
        [Parameter(Position = 13, ValueFromPipelineByPropertyName = $true)]
        [System.Nullable[Boolean]]
        ${UseSecurity},
        [Parameter(Position = 14, ValueFromPipelineByPropertyName = $true)]
        [PSCustomObject[]]
        ${Views}
    )

    Process {
        'Creating PSCustomObject: PSOpenAPITools => Hudson' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug


        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "assignedLabels" = ${AssignedLabels}
            "mode" = ${Mode}
            "nodeDescription" = ${NodeDescription}
            "nodeName" = ${NodeName}
            "numExecutors" = ${NumExecutors}
            "description" = ${Description}
            "jobs" = ${Jobs}
            "primaryView" = ${PrimaryView}
            "quietingDown" = ${QuietingDown}
            "slaveAgentPort" = ${SlaveAgentPort}
            "unlabeledLoad" = ${UnlabeledLoad}
            "useCrumbs" = ${UseCrumbs}
            "useSecurity" = ${UseSecurity}
            "views" = ${Views}
        }


        return $PSO
    }
}

<#
.SYNOPSIS

Convert from JSON to Hudson<PSCustomObject>

.DESCRIPTION

Convert from JSON to Hudson<PSCustomObject>

.PARAMETER Json

Json object

.OUTPUTS

Hudson<PSCustomObject>
#>
function ConvertFrom-JsonToHudson {
    Param(
        [AllowEmptyString()]
        [string]$Json
    )

    Process {
        'Converting JSON to PSCustomObject: PSOpenAPITools => Hudson' | Write-Debug
        $PSBoundParameters | Out-DebugParameter | Write-Debug

        $JsonParameters = ConvertFrom-Json -InputObject $Json

        # check if Json contains properties not defined in Hudson
        $AllProperties = ("_class", "assignedLabels", "mode", "nodeDescription", "nodeName", "numExecutors", "description", "jobs", "primaryView", "quietingDown", "slaveAgentPort", "unlabeledLoad", "useCrumbs", "useSecurity", "views")
        foreach ($name in $JsonParameters.PsObject.Properties.Name) {
            if (!($AllProperties.Contains($name))) {
                throw "Error! JSON key '$name' not found in the properties: $($AllProperties)"
            }
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "_class"))) { #optional property not found
            $Class = $null
        } else {
            $Class = $JsonParameters.PSobject.Properties["_class"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "assignedLabels"))) { #optional property not found
            $AssignedLabels = $null
        } else {
            $AssignedLabels = $JsonParameters.PSobject.Properties["assignedLabels"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "mode"))) { #optional property not found
            $Mode = $null
        } else {
            $Mode = $JsonParameters.PSobject.Properties["mode"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeDescription"))) { #optional property not found
            $NodeDescription = $null
        } else {
            $NodeDescription = $JsonParameters.PSobject.Properties["nodeDescription"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "nodeName"))) { #optional property not found
            $NodeName = $null
        } else {
            $NodeName = $JsonParameters.PSobject.Properties["nodeName"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "numExecutors"))) { #optional property not found
            $NumExecutors = $null
        } else {
            $NumExecutors = $JsonParameters.PSobject.Properties["numExecutors"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "description"))) { #optional property not found
            $Description = $null
        } else {
            $Description = $JsonParameters.PSobject.Properties["description"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "jobs"))) { #optional property not found
            $Jobs = $null
        } else {
            $Jobs = $JsonParameters.PSobject.Properties["jobs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "primaryView"))) { #optional property not found
            $PrimaryView = $null
        } else {
            $PrimaryView = $JsonParameters.PSobject.Properties["primaryView"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "quietingDown"))) { #optional property not found
            $QuietingDown = $null
        } else {
            $QuietingDown = $JsonParameters.PSobject.Properties["quietingDown"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "slaveAgentPort"))) { #optional property not found
            $SlaveAgentPort = $null
        } else {
            $SlaveAgentPort = $JsonParameters.PSobject.Properties["slaveAgentPort"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "unlabeledLoad"))) { #optional property not found
            $UnlabeledLoad = $null
        } else {
            $UnlabeledLoad = $JsonParameters.PSobject.Properties["unlabeledLoad"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useCrumbs"))) { #optional property not found
            $UseCrumbs = $null
        } else {
            $UseCrumbs = $JsonParameters.PSobject.Properties["useCrumbs"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "useSecurity"))) { #optional property not found
            $UseSecurity = $null
        } else {
            $UseSecurity = $JsonParameters.PSobject.Properties["useSecurity"].value
        }

        if (!([bool]($JsonParameters.PSobject.Properties.name -match "views"))) { #optional property not found
            $Views = $null
        } else {
            $Views = $JsonParameters.PSobject.Properties["views"].value
        }

        $PSO = [PSCustomObject]@{
            "_class" = ${Class}
            "assignedLabels" = ${AssignedLabels}
            "mode" = ${Mode}
            "nodeDescription" = ${NodeDescription}
            "nodeName" = ${NodeName}
            "numExecutors" = ${NumExecutors}
            "description" = ${Description}
            "jobs" = ${Jobs}
            "primaryView" = ${PrimaryView}
            "quietingDown" = ${QuietingDown}
            "slaveAgentPort" = ${SlaveAgentPort}
            "unlabeledLoad" = ${UnlabeledLoad}
            "useCrumbs" = ${UseCrumbs}
            "useSecurity" = ${UseSecurity}
            "views" = ${Views}
        }

        return $PSO
    }

}

