/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBlueOceanApi_H
#define OAI_OAIBlueOceanApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBranchImpl.h"
#include "OAIFavoriteImpl.h"
#include "OAIGithubOrganization.h"
#include "OAIGithubScm.h"
#include "OAIMultibranchPipeline.h"
#include "OAIOrganisation.h"
#include "OAIPipeline.h"
#include "OAIPipelineActivity.h"
#include "OAIPipelineFolderImpl.h"
#include "OAIPipelineImpl.h"
#include "OAIPipelineRun.h"
#include "OAIPipelineRunNode.h"
#include "OAIPipelineStepImpl.h"
#include "OAIQueueItemImpl.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBlueOceanApi : public QObject {
    Q_OBJECT

public:
    OAIBlueOceanApi(const int timeOut = 0);
    ~OAIBlueOceanApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  queue QString [required]
    */
    void deletePipelineQueueItem(const QString &organization, const QString &pipeline, const QString &queue);

    /**
    * @param[in]  organization QString [required]
    */
    void getAuthenticatedUser(const QString &organization);

    /**
    * @param[in]  r_class QString [required]
    */
    void getClasses(const QString &r_class);

    /**
    * @param[in]  key qint32 [required]
    */
    void getJsonWebKey(const qint32 &key);

    /**
    * @param[in]  expiry_time_in_mins qint32 [optional]
    * @param[in]  max_expiry_time_in_mins qint32 [optional]
    */
    void getJsonWebToken(const ::OpenAPI::OptionalParam<qint32> &expiry_time_in_mins = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_expiry_time_in_mins = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization QString [required]
    */
    void getOrganisation(const QString &organization);


    void getOrganisations();

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    */
    void getPipeline(const QString &organization, const QString &pipeline);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    */
    void getPipelineActivities(const QString &organization, const QString &pipeline);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  branch QString [required]
    */
    void getPipelineBranch(const QString &organization, const QString &pipeline, const QString &branch);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  branch QString [required]
    * @param[in]  run QString [required]
    */
    void getPipelineBranchRun(const QString &organization, const QString &pipeline, const QString &branch, const QString &run);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    */
    void getPipelineBranches(const QString &organization, const QString &pipeline);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  folder QString [required]
    */
    void getPipelineFolder(const QString &organization, const QString &folder);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  folder QString [required]
    */
    void getPipelineFolderPipeline(const QString &organization, const QString &pipeline, const QString &folder);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    */
    void getPipelineQueue(const QString &organization, const QString &pipeline);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    */
    void getPipelineRun(const QString &organization, const QString &pipeline, const QString &run);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    * @param[in]  start qint32 [optional]
    * @param[in]  download bool [optional]
    */
    void getPipelineRunLog(const QString &organization, const QString &pipeline, const QString &run, const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &download = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    * @param[in]  node QString [required]
    */
    void getPipelineRunNode(const QString &organization, const QString &pipeline, const QString &run, const QString &node);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    * @param[in]  node QString [required]
    * @param[in]  step QString [required]
    */
    void getPipelineRunNodeStep(const QString &organization, const QString &pipeline, const QString &run, const QString &node, const QString &step);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    * @param[in]  node QString [required]
    * @param[in]  step QString [required]
    */
    void getPipelineRunNodeStepLog(const QString &organization, const QString &pipeline, const QString &run, const QString &node, const QString &step);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    * @param[in]  node QString [required]
    */
    void getPipelineRunNodeSteps(const QString &organization, const QString &pipeline, const QString &run, const QString &node);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    */
    void getPipelineRunNodes(const QString &organization, const QString &pipeline, const QString &run);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    */
    void getPipelineRuns(const QString &organization, const QString &pipeline);

    /**
    * @param[in]  organization QString [required]
    */
    void getPipelines(const QString &organization);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  scm QString [required]
    */
    void getSCM(const QString &organization, const QString &scm);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  scm QString [required]
    * @param[in]  scm_organisation QString [required]
    * @param[in]  credential_id QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_number qint32 [optional]
    */
    void getSCMOrganisationRepositories(const QString &organization, const QString &scm, const QString &scm_organisation, const ::OpenAPI::OptionalParam<QString> &credential_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page_number = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  organization QString [required]
    * @param[in]  scm QString [required]
    * @param[in]  scm_organisation QString [required]
    * @param[in]  repository QString [required]
    * @param[in]  credential_id QString [optional]
    */
    void getSCMOrganisationRepository(const QString &organization, const QString &scm, const QString &scm_organisation, const QString &repository, const ::OpenAPI::OptionalParam<QString> &credential_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization QString [required]
    * @param[in]  scm QString [required]
    * @param[in]  credential_id QString [optional]
    */
    void getSCMOrganisations(const QString &organization, const QString &scm, const ::OpenAPI::OptionalParam<QString> &credential_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  organization QString [required]
    * @param[in]  user QString [required]
    */
    void getUser(const QString &organization, const QString &user);

    /**
    * @param[in]  user QString [required]
    */
    void getUserFavorites(const QString &user);

    /**
    * @param[in]  organization QString [required]
    */
    void getUsers(const QString &organization);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    */
    void postPipelineRun(const QString &organization, const QString &pipeline, const QString &run);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    */
    void postPipelineRuns(const QString &organization, const QString &pipeline);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  body bool [required]
    */
    void putPipelineFavorite(const QString &organization, const QString &pipeline, const bool &body);

    /**
    * @param[in]  organization QString [required]
    * @param[in]  pipeline QString [required]
    * @param[in]  run QString [required]
    * @param[in]  blocking QString [optional]
    * @param[in]  time_out_in_secs qint32 [optional]
    */
    void putPipelineRun(const QString &organization, const QString &pipeline, const QString &run, const ::OpenAPI::OptionalParam<QString> &blocking = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &time_out_in_secs = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  q QString [required]
    */
    void search(const QString &q);

    /**
    * @param[in]  q QString [required]
    */
    void searchClasses(const QString &q);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deletePipelineQueueItemCallback(OAIHttpRequestWorker *worker);
    void getAuthenticatedUserCallback(OAIHttpRequestWorker *worker);
    void getClassesCallback(OAIHttpRequestWorker *worker);
    void getJsonWebKeyCallback(OAIHttpRequestWorker *worker);
    void getJsonWebTokenCallback(OAIHttpRequestWorker *worker);
    void getOrganisationCallback(OAIHttpRequestWorker *worker);
    void getOrganisationsCallback(OAIHttpRequestWorker *worker);
    void getPipelineCallback(OAIHttpRequestWorker *worker);
    void getPipelineActivitiesCallback(OAIHttpRequestWorker *worker);
    void getPipelineBranchCallback(OAIHttpRequestWorker *worker);
    void getPipelineBranchRunCallback(OAIHttpRequestWorker *worker);
    void getPipelineBranchesCallback(OAIHttpRequestWorker *worker);
    void getPipelineFolderCallback(OAIHttpRequestWorker *worker);
    void getPipelineFolderPipelineCallback(OAIHttpRequestWorker *worker);
    void getPipelineQueueCallback(OAIHttpRequestWorker *worker);
    void getPipelineRunCallback(OAIHttpRequestWorker *worker);
    void getPipelineRunLogCallback(OAIHttpRequestWorker *worker);
    void getPipelineRunNodeCallback(OAIHttpRequestWorker *worker);
    void getPipelineRunNodeStepCallback(OAIHttpRequestWorker *worker);
    void getPipelineRunNodeStepLogCallback(OAIHttpRequestWorker *worker);
    void getPipelineRunNodeStepsCallback(OAIHttpRequestWorker *worker);
    void getPipelineRunNodesCallback(OAIHttpRequestWorker *worker);
    void getPipelineRunsCallback(OAIHttpRequestWorker *worker);
    void getPipelinesCallback(OAIHttpRequestWorker *worker);
    void getSCMCallback(OAIHttpRequestWorker *worker);
    void getSCMOrganisationRepositoriesCallback(OAIHttpRequestWorker *worker);
    void getSCMOrganisationRepositoryCallback(OAIHttpRequestWorker *worker);
    void getSCMOrganisationsCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserFavoritesCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void postPipelineRunCallback(OAIHttpRequestWorker *worker);
    void postPipelineRunsCallback(OAIHttpRequestWorker *worker);
    void putPipelineFavoriteCallback(OAIHttpRequestWorker *worker);
    void putPipelineRunCallback(OAIHttpRequestWorker *worker);
    void searchCallback(OAIHttpRequestWorker *worker);
    void searchClassesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deletePipelineQueueItemSignal();
    void getAuthenticatedUserSignal(OAIUser summary);
    void getClassesSignal(QString summary);
    void getJsonWebKeySignal(QString summary);
    void getJsonWebTokenSignal(QString summary);
    void getOrganisationSignal(OAIOrganisation summary);
    void getOrganisationsSignal(QList<OAIOrganisation> summary);
    void getPipelineSignal(OAIPipeline summary);
    void getPipelineActivitiesSignal(QList<OAIPipelineActivity> summary);
    void getPipelineBranchSignal(OAIBranchImpl summary);
    void getPipelineBranchRunSignal(OAIPipelineRun summary);
    void getPipelineBranchesSignal(OAIMultibranchPipeline summary);
    void getPipelineFolderSignal(OAIPipelineFolderImpl summary);
    void getPipelineFolderPipelineSignal(OAIPipelineImpl summary);
    void getPipelineQueueSignal(QList<OAIQueueItemImpl> summary);
    void getPipelineRunSignal(OAIPipelineRun summary);
    void getPipelineRunLogSignal(QString summary);
    void getPipelineRunNodeSignal(OAIPipelineRunNode summary);
    void getPipelineRunNodeStepSignal(OAIPipelineStepImpl summary);
    void getPipelineRunNodeStepLogSignal(QString summary);
    void getPipelineRunNodeStepsSignal(QList<OAIPipelineStepImpl> summary);
    void getPipelineRunNodesSignal(QList<OAIPipelineRunNode> summary);
    void getPipelineRunsSignal(QList<OAIPipelineRun> summary);
    void getPipelinesSignal(QList<OAIPipeline> summary);
    void getSCMSignal(OAIGithubScm summary);
    void getSCMOrganisationRepositoriesSignal(QList<OAIGithubOrganization> summary);
    void getSCMOrganisationRepositorySignal(QList<OAIGithubOrganization> summary);
    void getSCMOrganisationsSignal(QList<OAIGithubOrganization> summary);
    void getUserSignal(OAIUser summary);
    void getUserFavoritesSignal(QList<OAIFavoriteImpl> summary);
    void getUsersSignal(OAIUser summary);
    void postPipelineRunSignal(OAIQueueItemImpl summary);
    void postPipelineRunsSignal(OAIQueueItemImpl summary);
    void putPipelineFavoriteSignal(OAIFavoriteImpl summary);
    void putPipelineRunSignal(OAIPipelineRun summary);
    void searchSignal(QString summary);
    void searchClassesSignal(QString summary);

    void deletePipelineQueueItemSignalFull(OAIHttpRequestWorker *worker);
    void getAuthenticatedUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getClassesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getJsonWebKeySignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getJsonWebTokenSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getOrganisationSignalFull(OAIHttpRequestWorker *worker, OAIOrganisation summary);
    void getOrganisationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganisation> summary);
    void getPipelineSignalFull(OAIHttpRequestWorker *worker, OAIPipeline summary);
    void getPipelineActivitiesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPipelineActivity> summary);
    void getPipelineBranchSignalFull(OAIHttpRequestWorker *worker, OAIBranchImpl summary);
    void getPipelineBranchRunSignalFull(OAIHttpRequestWorker *worker, OAIPipelineRun summary);
    void getPipelineBranchesSignalFull(OAIHttpRequestWorker *worker, OAIMultibranchPipeline summary);
    void getPipelineFolderSignalFull(OAIHttpRequestWorker *worker, OAIPipelineFolderImpl summary);
    void getPipelineFolderPipelineSignalFull(OAIHttpRequestWorker *worker, OAIPipelineImpl summary);
    void getPipelineQueueSignalFull(OAIHttpRequestWorker *worker, QList<OAIQueueItemImpl> summary);
    void getPipelineRunSignalFull(OAIHttpRequestWorker *worker, OAIPipelineRun summary);
    void getPipelineRunLogSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getPipelineRunNodeSignalFull(OAIHttpRequestWorker *worker, OAIPipelineRunNode summary);
    void getPipelineRunNodeStepSignalFull(OAIHttpRequestWorker *worker, OAIPipelineStepImpl summary);
    void getPipelineRunNodeStepLogSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getPipelineRunNodeStepsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPipelineStepImpl> summary);
    void getPipelineRunNodesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPipelineRunNode> summary);
    void getPipelineRunsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPipelineRun> summary);
    void getPipelinesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPipeline> summary);
    void getSCMSignalFull(OAIHttpRequestWorker *worker, OAIGithubScm summary);
    void getSCMOrganisationRepositoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIGithubOrganization> summary);
    void getSCMOrganisationRepositorySignalFull(OAIHttpRequestWorker *worker, QList<OAIGithubOrganization> summary);
    void getSCMOrganisationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIGithubOrganization> summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUserFavoritesSignalFull(OAIHttpRequestWorker *worker, QList<OAIFavoriteImpl> summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void postPipelineRunSignalFull(OAIHttpRequestWorker *worker, OAIQueueItemImpl summary);
    void postPipelineRunsSignalFull(OAIHttpRequestWorker *worker, OAIQueueItemImpl summary);
    void putPipelineFavoriteSignalFull(OAIHttpRequestWorker *worker, OAIFavoriteImpl summary);
    void putPipelineRunSignalFull(OAIHttpRequestWorker *worker, OAIPipelineRun summary);
    void searchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void searchClassesSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use deletePipelineQueueItemSignalError() instead")
    void deletePipelineQueueItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePipelineQueueItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthenticatedUserSignalError() instead")
    void getAuthenticatedUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthenticatedUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassesSignalError() instead")
    void getClassesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJsonWebKeySignalError() instead")
    void getJsonWebKeySignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJsonWebKeySignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJsonWebTokenSignalError() instead")
    void getJsonWebTokenSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJsonWebTokenSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationSignalError() instead")
    void getOrganisationSignalE(OAIOrganisation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationSignalError(OAIOrganisation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsSignalError() instead")
    void getOrganisationsSignalE(QList<OAIOrganisation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsSignalError(QList<OAIOrganisation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineSignalError() instead")
    void getPipelineSignalE(OAIPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineSignalError(OAIPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineActivitiesSignalError() instead")
    void getPipelineActivitiesSignalE(QList<OAIPipelineActivity> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineActivitiesSignalError(QList<OAIPipelineActivity> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineBranchSignalError() instead")
    void getPipelineBranchSignalE(OAIBranchImpl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineBranchSignalError(OAIBranchImpl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineBranchRunSignalError() instead")
    void getPipelineBranchRunSignalE(OAIPipelineRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineBranchRunSignalError(OAIPipelineRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineBranchesSignalError() instead")
    void getPipelineBranchesSignalE(OAIMultibranchPipeline summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineBranchesSignalError(OAIMultibranchPipeline summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineFolderSignalError() instead")
    void getPipelineFolderSignalE(OAIPipelineFolderImpl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineFolderSignalError(OAIPipelineFolderImpl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineFolderPipelineSignalError() instead")
    void getPipelineFolderPipelineSignalE(OAIPipelineImpl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineFolderPipelineSignalError(OAIPipelineImpl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineQueueSignalError() instead")
    void getPipelineQueueSignalE(QList<OAIQueueItemImpl> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineQueueSignalError(QList<OAIQueueItemImpl> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunSignalError() instead")
    void getPipelineRunSignalE(OAIPipelineRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunSignalError(OAIPipelineRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunLogSignalError() instead")
    void getPipelineRunLogSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunLogSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodeSignalError() instead")
    void getPipelineRunNodeSignalE(OAIPipelineRunNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodeSignalError(OAIPipelineRunNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodeStepSignalError() instead")
    void getPipelineRunNodeStepSignalE(OAIPipelineStepImpl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodeStepSignalError(OAIPipelineStepImpl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodeStepLogSignalError() instead")
    void getPipelineRunNodeStepLogSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodeStepLogSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodeStepsSignalError() instead")
    void getPipelineRunNodeStepsSignalE(QList<OAIPipelineStepImpl> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodeStepsSignalError(QList<OAIPipelineStepImpl> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodesSignalError() instead")
    void getPipelineRunNodesSignalE(QList<OAIPipelineRunNode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodesSignalError(QList<OAIPipelineRunNode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunsSignalError() instead")
    void getPipelineRunsSignalE(QList<OAIPipelineRun> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunsSignalError(QList<OAIPipelineRun> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelinesSignalError() instead")
    void getPipelinesSignalE(QList<OAIPipeline> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelinesSignalError(QList<OAIPipeline> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSCMSignalError() instead")
    void getSCMSignalE(OAIGithubScm summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSCMSignalError(OAIGithubScm summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSCMOrganisationRepositoriesSignalError() instead")
    void getSCMOrganisationRepositoriesSignalE(QList<OAIGithubOrganization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSCMOrganisationRepositoriesSignalError(QList<OAIGithubOrganization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSCMOrganisationRepositorySignalError() instead")
    void getSCMOrganisationRepositorySignalE(QList<OAIGithubOrganization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSCMOrganisationRepositorySignalError(QList<OAIGithubOrganization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSCMOrganisationsSignalError() instead")
    void getSCMOrganisationsSignalE(QList<OAIGithubOrganization> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSCMOrganisationsSignalError(QList<OAIGithubOrganization> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserFavoritesSignalError() instead")
    void getUserFavoritesSignalE(QList<OAIFavoriteImpl> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserFavoritesSignalError(QList<OAIFavoriteImpl> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPipelineRunSignalError() instead")
    void postPipelineRunSignalE(OAIQueueItemImpl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPipelineRunSignalError(OAIQueueItemImpl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPipelineRunsSignalError() instead")
    void postPipelineRunsSignalE(OAIQueueItemImpl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postPipelineRunsSignalError(OAIQueueItemImpl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPipelineFavoriteSignalError() instead")
    void putPipelineFavoriteSignalE(OAIFavoriteImpl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPipelineFavoriteSignalError(OAIFavoriteImpl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPipelineRunSignalError() instead")
    void putPipelineRunSignalE(OAIPipelineRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putPipelineRunSignalError(OAIPipelineRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalError() instead")
    void searchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchClassesSignalError() instead")
    void searchClassesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchClassesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deletePipelineQueueItemSignalErrorFull() instead")
    void deletePipelineQueueItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePipelineQueueItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAuthenticatedUserSignalErrorFull() instead")
    void getAuthenticatedUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAuthenticatedUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getClassesSignalErrorFull() instead")
    void getClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJsonWebKeySignalErrorFull() instead")
    void getJsonWebKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJsonWebKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJsonWebTokenSignalErrorFull() instead")
    void getJsonWebTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJsonWebTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationSignalErrorFull() instead")
    void getOrganisationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisationsSignalErrorFull() instead")
    void getOrganisationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineSignalErrorFull() instead")
    void getPipelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineActivitiesSignalErrorFull() instead")
    void getPipelineActivitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineActivitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineBranchSignalErrorFull() instead")
    void getPipelineBranchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineBranchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineBranchRunSignalErrorFull() instead")
    void getPipelineBranchRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineBranchRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineBranchesSignalErrorFull() instead")
    void getPipelineBranchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineBranchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineFolderSignalErrorFull() instead")
    void getPipelineFolderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineFolderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineFolderPipelineSignalErrorFull() instead")
    void getPipelineFolderPipelineSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineFolderPipelineSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineQueueSignalErrorFull() instead")
    void getPipelineQueueSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineQueueSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunSignalErrorFull() instead")
    void getPipelineRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunLogSignalErrorFull() instead")
    void getPipelineRunLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodeSignalErrorFull() instead")
    void getPipelineRunNodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodeStepSignalErrorFull() instead")
    void getPipelineRunNodeStepSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodeStepSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodeStepLogSignalErrorFull() instead")
    void getPipelineRunNodeStepLogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodeStepLogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodeStepsSignalErrorFull() instead")
    void getPipelineRunNodeStepsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodeStepsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunNodesSignalErrorFull() instead")
    void getPipelineRunNodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunNodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelineRunsSignalErrorFull() instead")
    void getPipelineRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelineRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPipelinesSignalErrorFull() instead")
    void getPipelinesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPipelinesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSCMSignalErrorFull() instead")
    void getSCMSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSCMSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSCMOrganisationRepositoriesSignalErrorFull() instead")
    void getSCMOrganisationRepositoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSCMOrganisationRepositoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSCMOrganisationRepositorySignalErrorFull() instead")
    void getSCMOrganisationRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSCMOrganisationRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSCMOrganisationsSignalErrorFull() instead")
    void getSCMOrganisationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSCMOrganisationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserFavoritesSignalErrorFull() instead")
    void getUserFavoritesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserFavoritesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPipelineRunSignalErrorFull() instead")
    void postPipelineRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPipelineRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postPipelineRunsSignalErrorFull() instead")
    void postPipelineRunsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postPipelineRunsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPipelineFavoriteSignalErrorFull() instead")
    void putPipelineFavoriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPipelineFavoriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putPipelineRunSignalErrorFull() instead")
    void putPipelineRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putPipelineRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSignalErrorFull() instead")
    void searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchClassesSignalErrorFull() instead")
    void searchClassesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchClassesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
