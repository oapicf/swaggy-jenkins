/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHudson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHudson::OAIHudson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHudson::OAIHudson() {
    this->initializeModel();
}

OAIHudson::~OAIHudson() {}

void OAIHudson::initializeModel() {

    m__class_isSet = false;
    m__class_isValid = false;

    m_assigned_labels_isSet = false;
    m_assigned_labels_isValid = false;

    m_mode_isSet = false;
    m_mode_isValid = false;

    m_node_description_isSet = false;
    m_node_description_isValid = false;

    m_node_name_isSet = false;
    m_node_name_isValid = false;

    m_num_executors_isSet = false;
    m_num_executors_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_jobs_isSet = false;
    m_jobs_isValid = false;

    m_primary_view_isSet = false;
    m_primary_view_isValid = false;

    m_quieting_down_isSet = false;
    m_quieting_down_isValid = false;

    m_slave_agent_port_isSet = false;
    m_slave_agent_port_isValid = false;

    m_unlabeled_load_isSet = false;
    m_unlabeled_load_isValid = false;

    m_use_crumbs_isSet = false;
    m_use_crumbs_isValid = false;

    m_use_security_isSet = false;
    m_use_security_isValid = false;

    m_views_isSet = false;
    m_views_isValid = false;
}

void OAIHudson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHudson::fromJsonObject(QJsonObject json) {

    m__class_isValid = ::OpenAPI::fromJsonValue(m__class, json[QString("_class")]);
    m__class_isSet = !json[QString("_class")].isNull() && m__class_isValid;

    m_assigned_labels_isValid = ::OpenAPI::fromJsonValue(m_assigned_labels, json[QString("assignedLabels")]);
    m_assigned_labels_isSet = !json[QString("assignedLabels")].isNull() && m_assigned_labels_isValid;

    m_mode_isValid = ::OpenAPI::fromJsonValue(m_mode, json[QString("mode")]);
    m_mode_isSet = !json[QString("mode")].isNull() && m_mode_isValid;

    m_node_description_isValid = ::OpenAPI::fromJsonValue(m_node_description, json[QString("nodeDescription")]);
    m_node_description_isSet = !json[QString("nodeDescription")].isNull() && m_node_description_isValid;

    m_node_name_isValid = ::OpenAPI::fromJsonValue(m_node_name, json[QString("nodeName")]);
    m_node_name_isSet = !json[QString("nodeName")].isNull() && m_node_name_isValid;

    m_num_executors_isValid = ::OpenAPI::fromJsonValue(m_num_executors, json[QString("numExecutors")]);
    m_num_executors_isSet = !json[QString("numExecutors")].isNull() && m_num_executors_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_jobs_isValid = ::OpenAPI::fromJsonValue(m_jobs, json[QString("jobs")]);
    m_jobs_isSet = !json[QString("jobs")].isNull() && m_jobs_isValid;

    m_primary_view_isValid = ::OpenAPI::fromJsonValue(m_primary_view, json[QString("primaryView")]);
    m_primary_view_isSet = !json[QString("primaryView")].isNull() && m_primary_view_isValid;

    m_quieting_down_isValid = ::OpenAPI::fromJsonValue(m_quieting_down, json[QString("quietingDown")]);
    m_quieting_down_isSet = !json[QString("quietingDown")].isNull() && m_quieting_down_isValid;

    m_slave_agent_port_isValid = ::OpenAPI::fromJsonValue(m_slave_agent_port, json[QString("slaveAgentPort")]);
    m_slave_agent_port_isSet = !json[QString("slaveAgentPort")].isNull() && m_slave_agent_port_isValid;

    m_unlabeled_load_isValid = ::OpenAPI::fromJsonValue(m_unlabeled_load, json[QString("unlabeledLoad")]);
    m_unlabeled_load_isSet = !json[QString("unlabeledLoad")].isNull() && m_unlabeled_load_isValid;

    m_use_crumbs_isValid = ::OpenAPI::fromJsonValue(m_use_crumbs, json[QString("useCrumbs")]);
    m_use_crumbs_isSet = !json[QString("useCrumbs")].isNull() && m_use_crumbs_isValid;

    m_use_security_isValid = ::OpenAPI::fromJsonValue(m_use_security, json[QString("useSecurity")]);
    m_use_security_isSet = !json[QString("useSecurity")].isNull() && m_use_security_isValid;

    m_views_isValid = ::OpenAPI::fromJsonValue(m_views, json[QString("views")]);
    m_views_isSet = !json[QString("views")].isNull() && m_views_isValid;
}

QString OAIHudson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHudson::asJsonObject() const {
    QJsonObject obj;
    if (m__class_isSet) {
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(m__class));
    }
    if (m_assigned_labels.size() > 0) {
        obj.insert(QString("assignedLabels"), ::OpenAPI::toJsonValue(m_assigned_labels));
    }
    if (m_mode_isSet) {
        obj.insert(QString("mode"), ::OpenAPI::toJsonValue(m_mode));
    }
    if (m_node_description_isSet) {
        obj.insert(QString("nodeDescription"), ::OpenAPI::toJsonValue(m_node_description));
    }
    if (m_node_name_isSet) {
        obj.insert(QString("nodeName"), ::OpenAPI::toJsonValue(m_node_name));
    }
    if (m_num_executors_isSet) {
        obj.insert(QString("numExecutors"), ::OpenAPI::toJsonValue(m_num_executors));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_jobs.size() > 0) {
        obj.insert(QString("jobs"), ::OpenAPI::toJsonValue(m_jobs));
    }
    if (m_primary_view.isSet()) {
        obj.insert(QString("primaryView"), ::OpenAPI::toJsonValue(m_primary_view));
    }
    if (m_quieting_down_isSet) {
        obj.insert(QString("quietingDown"), ::OpenAPI::toJsonValue(m_quieting_down));
    }
    if (m_slave_agent_port_isSet) {
        obj.insert(QString("slaveAgentPort"), ::OpenAPI::toJsonValue(m_slave_agent_port));
    }
    if (m_unlabeled_load.isSet()) {
        obj.insert(QString("unlabeledLoad"), ::OpenAPI::toJsonValue(m_unlabeled_load));
    }
    if (m_use_crumbs_isSet) {
        obj.insert(QString("useCrumbs"), ::OpenAPI::toJsonValue(m_use_crumbs));
    }
    if (m_use_security_isSet) {
        obj.insert(QString("useSecurity"), ::OpenAPI::toJsonValue(m_use_security));
    }
    if (m_views.size() > 0) {
        obj.insert(QString("views"), ::OpenAPI::toJsonValue(m_views));
    }
    return obj;
}

QString OAIHudson::getClass() const {
    return m__class;
}
void OAIHudson::setClass(const QString &_class) {
    m__class = _class;
    m__class_isSet = true;
}

bool OAIHudson::is__class_Set() const{
    return m__class_isSet;
}

bool OAIHudson::is__class_Valid() const{
    return m__class_isValid;
}

QList<OAIHudsonassignedLabels> OAIHudson::getAssignedLabels() const {
    return m_assigned_labels;
}
void OAIHudson::setAssignedLabels(const QList<OAIHudsonassignedLabels> &assigned_labels) {
    m_assigned_labels = assigned_labels;
    m_assigned_labels_isSet = true;
}

bool OAIHudson::is_assigned_labels_Set() const{
    return m_assigned_labels_isSet;
}

bool OAIHudson::is_assigned_labels_Valid() const{
    return m_assigned_labels_isValid;
}

QString OAIHudson::getMode() const {
    return m_mode;
}
void OAIHudson::setMode(const QString &mode) {
    m_mode = mode;
    m_mode_isSet = true;
}

bool OAIHudson::is_mode_Set() const{
    return m_mode_isSet;
}

bool OAIHudson::is_mode_Valid() const{
    return m_mode_isValid;
}

QString OAIHudson::getNodeDescription() const {
    return m_node_description;
}
void OAIHudson::setNodeDescription(const QString &node_description) {
    m_node_description = node_description;
    m_node_description_isSet = true;
}

bool OAIHudson::is_node_description_Set() const{
    return m_node_description_isSet;
}

bool OAIHudson::is_node_description_Valid() const{
    return m_node_description_isValid;
}

QString OAIHudson::getNodeName() const {
    return m_node_name;
}
void OAIHudson::setNodeName(const QString &node_name) {
    m_node_name = node_name;
    m_node_name_isSet = true;
}

bool OAIHudson::is_node_name_Set() const{
    return m_node_name_isSet;
}

bool OAIHudson::is_node_name_Valid() const{
    return m_node_name_isValid;
}

qint32 OAIHudson::getNumExecutors() const {
    return m_num_executors;
}
void OAIHudson::setNumExecutors(const qint32 &num_executors) {
    m_num_executors = num_executors;
    m_num_executors_isSet = true;
}

bool OAIHudson::is_num_executors_Set() const{
    return m_num_executors_isSet;
}

bool OAIHudson::is_num_executors_Valid() const{
    return m_num_executors_isValid;
}

QString OAIHudson::getDescription() const {
    return m_description;
}
void OAIHudson::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHudson::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHudson::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIFreeStyleProject> OAIHudson::getJobs() const {
    return m_jobs;
}
void OAIHudson::setJobs(const QList<OAIFreeStyleProject> &jobs) {
    m_jobs = jobs;
    m_jobs_isSet = true;
}

bool OAIHudson::is_jobs_Set() const{
    return m_jobs_isSet;
}

bool OAIHudson::is_jobs_Valid() const{
    return m_jobs_isValid;
}

OAIAllView OAIHudson::getPrimaryView() const {
    return m_primary_view;
}
void OAIHudson::setPrimaryView(const OAIAllView &primary_view) {
    m_primary_view = primary_view;
    m_primary_view_isSet = true;
}

bool OAIHudson::is_primary_view_Set() const{
    return m_primary_view_isSet;
}

bool OAIHudson::is_primary_view_Valid() const{
    return m_primary_view_isValid;
}

bool OAIHudson::isQuietingDown() const {
    return m_quieting_down;
}
void OAIHudson::setQuietingDown(const bool &quieting_down) {
    m_quieting_down = quieting_down;
    m_quieting_down_isSet = true;
}

bool OAIHudson::is_quieting_down_Set() const{
    return m_quieting_down_isSet;
}

bool OAIHudson::is_quieting_down_Valid() const{
    return m_quieting_down_isValid;
}

qint32 OAIHudson::getSlaveAgentPort() const {
    return m_slave_agent_port;
}
void OAIHudson::setSlaveAgentPort(const qint32 &slave_agent_port) {
    m_slave_agent_port = slave_agent_port;
    m_slave_agent_port_isSet = true;
}

bool OAIHudson::is_slave_agent_port_Set() const{
    return m_slave_agent_port_isSet;
}

bool OAIHudson::is_slave_agent_port_Valid() const{
    return m_slave_agent_port_isValid;
}

OAIUnlabeledLoadStatistics OAIHudson::getUnlabeledLoad() const {
    return m_unlabeled_load;
}
void OAIHudson::setUnlabeledLoad(const OAIUnlabeledLoadStatistics &unlabeled_load) {
    m_unlabeled_load = unlabeled_load;
    m_unlabeled_load_isSet = true;
}

bool OAIHudson::is_unlabeled_load_Set() const{
    return m_unlabeled_load_isSet;
}

bool OAIHudson::is_unlabeled_load_Valid() const{
    return m_unlabeled_load_isValid;
}

bool OAIHudson::isUseCrumbs() const {
    return m_use_crumbs;
}
void OAIHudson::setUseCrumbs(const bool &use_crumbs) {
    m_use_crumbs = use_crumbs;
    m_use_crumbs_isSet = true;
}

bool OAIHudson::is_use_crumbs_Set() const{
    return m_use_crumbs_isSet;
}

bool OAIHudson::is_use_crumbs_Valid() const{
    return m_use_crumbs_isValid;
}

bool OAIHudson::isUseSecurity() const {
    return m_use_security;
}
void OAIHudson::setUseSecurity(const bool &use_security) {
    m_use_security = use_security;
    m_use_security_isSet = true;
}

bool OAIHudson::is_use_security_Set() const{
    return m_use_security_isSet;
}

bool OAIHudson::is_use_security_Valid() const{
    return m_use_security_isValid;
}

QList<OAIAllView> OAIHudson::getViews() const {
    return m_views;
}
void OAIHudson::setViews(const QList<OAIAllView> &views) {
    m_views = views;
    m_views_isSet = true;
}

bool OAIHudson::is_views_Set() const{
    return m_views_isSet;
}

bool OAIHudson::is_views_Valid() const{
    return m_views_isValid;
}

bool OAIHudson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_executors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jobs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_view.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_quieting_down_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slave_agent_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unlabeled_load.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_crumbs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHudson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
