/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGithubContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGithubContent::OAIGithubContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGithubContent::OAIGithubContent() {
    this->initializeModel();
}

OAIGithubContent::~OAIGithubContent() {}

void OAIGithubContent::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_sha_isSet = false;
    m_sha_isValid = false;

    m__class_isSet = false;
    m__class_isValid = false;

    m_repo_isSet = false;
    m_repo_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_base64_data_isSet = false;
    m_base64_data_isValid = false;
}

void OAIGithubContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGithubContent::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_sha_isValid = ::OpenAPI::fromJsonValue(m_sha, json[QString("sha")]);
    m_sha_isSet = !json[QString("sha")].isNull() && m_sha_isValid;

    m__class_isValid = ::OpenAPI::fromJsonValue(m__class, json[QString("_class")]);
    m__class_isSet = !json[QString("_class")].isNull() && m__class_isValid;

    m_repo_isValid = ::OpenAPI::fromJsonValue(m_repo, json[QString("repo")]);
    m_repo_isSet = !json[QString("repo")].isNull() && m_repo_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_base64_data_isValid = ::OpenAPI::fromJsonValue(m_base64_data, json[QString("base64Data")]);
    m_base64_data_isSet = !json[QString("base64Data")].isNull() && m_base64_data_isValid;
}

QString OAIGithubContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGithubContent::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_sha_isSet) {
        obj.insert(QString("sha"), ::OpenAPI::toJsonValue(m_sha));
    }
    if (m__class_isSet) {
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(m__class));
    }
    if (m_repo_isSet) {
        obj.insert(QString("repo"), ::OpenAPI::toJsonValue(m_repo));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_owner_isSet) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_base64_data_isSet) {
        obj.insert(QString("base64Data"), ::OpenAPI::toJsonValue(m_base64_data));
    }
    return obj;
}

QString OAIGithubContent::getName() const {
    return m_name;
}
void OAIGithubContent::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGithubContent::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGithubContent::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIGithubContent::getSha() const {
    return m_sha;
}
void OAIGithubContent::setSha(const QString &sha) {
    m_sha = sha;
    m_sha_isSet = true;
}

bool OAIGithubContent::is_sha_Set() const{
    return m_sha_isSet;
}

bool OAIGithubContent::is_sha_Valid() const{
    return m_sha_isValid;
}

QString OAIGithubContent::getClass() const {
    return m__class;
}
void OAIGithubContent::setClass(const QString &_class) {
    m__class = _class;
    m__class_isSet = true;
}

bool OAIGithubContent::is__class_Set() const{
    return m__class_isSet;
}

bool OAIGithubContent::is__class_Valid() const{
    return m__class_isValid;
}

QString OAIGithubContent::getRepo() const {
    return m_repo;
}
void OAIGithubContent::setRepo(const QString &repo) {
    m_repo = repo;
    m_repo_isSet = true;
}

bool OAIGithubContent::is_repo_Set() const{
    return m_repo_isSet;
}

bool OAIGithubContent::is_repo_Valid() const{
    return m_repo_isValid;
}

qint32 OAIGithubContent::getSize() const {
    return m_size;
}
void OAIGithubContent::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIGithubContent::is_size_Set() const{
    return m_size_isSet;
}

bool OAIGithubContent::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIGithubContent::getOwner() const {
    return m_owner;
}
void OAIGithubContent::setOwner(const QString &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIGithubContent::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIGithubContent::is_owner_Valid() const{
    return m_owner_isValid;
}

QString OAIGithubContent::getPath() const {
    return m_path;
}
void OAIGithubContent::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIGithubContent::is_path_Set() const{
    return m_path_isSet;
}

bool OAIGithubContent::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIGithubContent::getBase64Data() const {
    return m_base64_data;
}
void OAIGithubContent::setBase64Data(const QString &base64_data) {
    m_base64_data = base64_data;
    m_base64_data_isSet = true;
}

bool OAIGithubContent::is_base64_data_Set() const{
    return m_base64_data_isSet;
}

bool OAIGithubContent::is_base64_data_Valid() const{
    return m_base64_data_isValid;
}

bool OAIGithubContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base64_data_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGithubContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
