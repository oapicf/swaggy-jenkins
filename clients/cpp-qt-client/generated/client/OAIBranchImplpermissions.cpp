/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBranchImplpermissions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBranchImplpermissions::OAIBranchImplpermissions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBranchImplpermissions::OAIBranchImplpermissions() {
    this->initializeModel();
}

OAIBranchImplpermissions::~OAIBranchImplpermissions() {}

void OAIBranchImplpermissions::initializeModel() {

    m_create_isSet = false;
    m_create_isValid = false;

    m_read_isSet = false;
    m_read_isValid = false;

    m_start_isSet = false;
    m_start_isValid = false;

    m_stop_isSet = false;
    m_stop_isValid = false;

    m__class_isSet = false;
    m__class_isValid = false;
}

void OAIBranchImplpermissions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBranchImplpermissions::fromJsonObject(QJsonObject json) {

    m_create_isValid = ::OpenAPI::fromJsonValue(m_create, json[QString("create")]);
    m_create_isSet = !json[QString("create")].isNull() && m_create_isValid;

    m_read_isValid = ::OpenAPI::fromJsonValue(m_read, json[QString("read")]);
    m_read_isSet = !json[QString("read")].isNull() && m_read_isValid;

    m_start_isValid = ::OpenAPI::fromJsonValue(m_start, json[QString("start")]);
    m_start_isSet = !json[QString("start")].isNull() && m_start_isValid;

    m_stop_isValid = ::OpenAPI::fromJsonValue(m_stop, json[QString("stop")]);
    m_stop_isSet = !json[QString("stop")].isNull() && m_stop_isValid;

    m__class_isValid = ::OpenAPI::fromJsonValue(m__class, json[QString("_class")]);
    m__class_isSet = !json[QString("_class")].isNull() && m__class_isValid;
}

QString OAIBranchImplpermissions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBranchImplpermissions::asJsonObject() const {
    QJsonObject obj;
    if (m_create_isSet) {
        obj.insert(QString("create"), ::OpenAPI::toJsonValue(m_create));
    }
    if (m_read_isSet) {
        obj.insert(QString("read"), ::OpenAPI::toJsonValue(m_read));
    }
    if (m_start_isSet) {
        obj.insert(QString("start"), ::OpenAPI::toJsonValue(m_start));
    }
    if (m_stop_isSet) {
        obj.insert(QString("stop"), ::OpenAPI::toJsonValue(m_stop));
    }
    if (m__class_isSet) {
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(m__class));
    }
    return obj;
}

bool OAIBranchImplpermissions::isCreate() const {
    return m_create;
}
void OAIBranchImplpermissions::setCreate(const bool &create) {
    m_create = create;
    m_create_isSet = true;
}

bool OAIBranchImplpermissions::is_create_Set() const{
    return m_create_isSet;
}

bool OAIBranchImplpermissions::is_create_Valid() const{
    return m_create_isValid;
}

bool OAIBranchImplpermissions::isRead() const {
    return m_read;
}
void OAIBranchImplpermissions::setRead(const bool &read) {
    m_read = read;
    m_read_isSet = true;
}

bool OAIBranchImplpermissions::is_read_Set() const{
    return m_read_isSet;
}

bool OAIBranchImplpermissions::is_read_Valid() const{
    return m_read_isValid;
}

bool OAIBranchImplpermissions::isStart() const {
    return m_start;
}
void OAIBranchImplpermissions::setStart(const bool &start) {
    m_start = start;
    m_start_isSet = true;
}

bool OAIBranchImplpermissions::is_start_Set() const{
    return m_start_isSet;
}

bool OAIBranchImplpermissions::is_start_Valid() const{
    return m_start_isValid;
}

bool OAIBranchImplpermissions::isStop() const {
    return m_stop;
}
void OAIBranchImplpermissions::setStop(const bool &stop) {
    m_stop = stop;
    m_stop_isSet = true;
}

bool OAIBranchImplpermissions::is_stop_Set() const{
    return m_stop_isSet;
}

bool OAIBranchImplpermissions::is_stop_Valid() const{
    return m_stop_isValid;
}

QString OAIBranchImplpermissions::getClass() const {
    return m__class;
}
void OAIBranchImplpermissions::setClass(const QString &_class) {
    m__class = _class;
    m__class_isSet = true;
}

bool OAIBranchImplpermissions::is__class_Set() const{
    return m__class_isSet;
}

bool OAIBranchImplpermissions::is__class_Valid() const{
    return m__class_isValid;
}

bool OAIBranchImplpermissions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__class_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBranchImplpermissions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
