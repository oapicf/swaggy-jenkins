/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGithubRepositories.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGithubRepositories::OAIGithubRepositories(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGithubRepositories::OAIGithubRepositories() {
    this->initializeModel();
}

OAIGithubRepositories::~OAIGithubRepositories() {}

void OAIGithubRepositories::initializeModel() {

    m__class_isSet = false;
    m__class_isValid = false;

    m__links_isSet = false;
    m__links_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_last_page_isSet = false;
    m_last_page_isValid = false;

    m_next_page_isSet = false;
    m_next_page_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;
}

void OAIGithubRepositories::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGithubRepositories::fromJsonObject(QJsonObject json) {

    m__class_isValid = ::OpenAPI::fromJsonValue(m__class, json[QString("_class")]);
    m__class_isSet = !json[QString("_class")].isNull() && m__class_isValid;

    m__links_isValid = ::OpenAPI::fromJsonValue(m__links, json[QString("_links")]);
    m__links_isSet = !json[QString("_links")].isNull() && m__links_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_last_page_isValid = ::OpenAPI::fromJsonValue(m_last_page, json[QString("lastPage")]);
    m_last_page_isSet = !json[QString("lastPage")].isNull() && m_last_page_isValid;

    m_next_page_isValid = ::OpenAPI::fromJsonValue(m_next_page, json[QString("nextPage")]);
    m_next_page_isSet = !json[QString("nextPage")].isNull() && m_next_page_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;
}

QString OAIGithubRepositories::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGithubRepositories::asJsonObject() const {
    QJsonObject obj;
    if (m__class_isSet) {
        obj.insert(QString("_class"), ::OpenAPI::toJsonValue(m__class));
    }
    if (m__links.isSet()) {
        obj.insert(QString("_links"), ::OpenAPI::toJsonValue(m__links));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_last_page_isSet) {
        obj.insert(QString("lastPage"), ::OpenAPI::toJsonValue(m_last_page));
    }
    if (m_next_page_isSet) {
        obj.insert(QString("nextPage"), ::OpenAPI::toJsonValue(m_next_page));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    return obj;
}

QString OAIGithubRepositories::getClass() const {
    return m__class;
}
void OAIGithubRepositories::setClass(const QString &_class) {
    m__class = _class;
    m__class_isSet = true;
}

bool OAIGithubRepositories::is__class_Set() const{
    return m__class_isSet;
}

bool OAIGithubRepositories::is__class_Valid() const{
    return m__class_isValid;
}

OAIGithubRepositorieslinks OAIGithubRepositories::getLinks() const {
    return m__links;
}
void OAIGithubRepositories::setLinks(const OAIGithubRepositorieslinks &_links) {
    m__links = _links;
    m__links_isSet = true;
}

bool OAIGithubRepositories::is__links_Set() const{
    return m__links_isSet;
}

bool OAIGithubRepositories::is__links_Valid() const{
    return m__links_isValid;
}

QList<OAIGithubRepository> OAIGithubRepositories::getItems() const {
    return m_items;
}
void OAIGithubRepositories::setItems(const QList<OAIGithubRepository> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIGithubRepositories::is_items_Set() const{
    return m_items_isSet;
}

bool OAIGithubRepositories::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAIGithubRepositories::getLastPage() const {
    return m_last_page;
}
void OAIGithubRepositories::setLastPage(const qint32 &last_page) {
    m_last_page = last_page;
    m_last_page_isSet = true;
}

bool OAIGithubRepositories::is_last_page_Set() const{
    return m_last_page_isSet;
}

bool OAIGithubRepositories::is_last_page_Valid() const{
    return m_last_page_isValid;
}

qint32 OAIGithubRepositories::getNextPage() const {
    return m_next_page;
}
void OAIGithubRepositories::setNextPage(const qint32 &next_page) {
    m_next_page = next_page;
    m_next_page_isSet = true;
}

bool OAIGithubRepositories::is_next_page_Set() const{
    return m_next_page_isSet;
}

bool OAIGithubRepositories::is_next_page_Valid() const{
    return m_next_page_isValid;
}

qint32 OAIGithubRepositories::getPageSize() const {
    return m_page_size;
}
void OAIGithubRepositories::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIGithubRepositories::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIGithubRepositories::is_page_size_Valid() const{
    return m_page_size_isValid;
}

bool OAIGithubRepositories::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m__links.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGithubRepositories::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
