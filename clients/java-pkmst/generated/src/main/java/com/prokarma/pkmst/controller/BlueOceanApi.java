/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.prokarma.pkmst.controller;

import com.prokarma.pkmst.model.BranchImpl;
import com.prokarma.pkmst.model.FavoriteImpl;
import com.prokarma.pkmst.model.GithubOrganization;
import com.prokarma.pkmst.model.GithubScm;
import java.util.List;
import com.prokarma.pkmst.model.MultibranchPipeline;
import com.prokarma.pkmst.model.Organisation;
import com.prokarma.pkmst.model.Pipeline;
import com.prokarma.pkmst.model.PipelineActivity;
import com.prokarma.pkmst.model.PipelineFolderImpl;
import com.prokarma.pkmst.model.PipelineImpl;
import com.prokarma.pkmst.model.PipelineRun;
import com.prokarma.pkmst.model.PipelineRunNode;
import com.prokarma.pkmst.model.PipelineStepImpl;
import com.prokarma.pkmst.model.QueueItemImpl;
import com.prokarma.pkmst.model.User;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
/**
 * Provides the info about api methods
 * @author pkmst
 *
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaPKMSTServerCodegen", date = "2024-03-15T14:12:42.279581335Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Api(value = "BlueOcean", description = "the BlueOcean API")
public interface BlueOceanApi {

    @ApiOperation(value = "", notes = "Delete queue item from an organization pipeline queue", response = Void.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully deleted queue item"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}"
    )
    ResponseEntity<Void> deletePipelineQueueItem(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the queue item",required=true ) @PathVariable("queue") String queue, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve authenticated user details for an organization", response = User.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved authenticated user details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/user/",
        produces = { "application/json" }
    )
    ResponseEntity<User> getAuthenticatedUser(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Get a list of class names supported by a given class", response = String.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved class names", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/classes/{class}",
        produces = { "application/json" }
    )
    ResponseEntity<String> getClasses(@ApiParam(value = "Name of the class",required=true ) @PathVariable("class") String propertyClass, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve JSON Web Key", response = String.class, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved JWT token", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/jwt-auth/jwks/{key}",
        produces = { "application/json" }
    )
    ResponseEntity<String> getJsonWebKey(@ApiParam(value = "Key ID received as part of JWT header field kid",required=true ) @PathVariable("key") Integer key, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve JSON Web Token", response = String.class, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved JWT token", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/jwt-auth/token",
        produces = { "application/json" }
    )
    ResponseEntity<String> getJsonWebToken(@ApiParam(value = "Token expiry time in minutes, default: 30 minutes")  @RequestParam(value = "expiryTimeInMins", required = false) Integer expiryTimeInMins,@ApiParam(value = "Maximum token expiry time in minutes, default: 480 minutes")  @RequestParam(value = "maxExpiryTimeInMins", required = false) Integer maxExpiryTimeInMins, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve organization details", response = Organisation.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = Organisation.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Pipeline cannot be found on Jenkins instance") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}",
        produces = { "application/json" }
    )
    ResponseEntity<Organisation> getOrganisation(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve all organizations details", response = Organisation.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipelines details", response = Organisation.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/",
        produces = { "application/json" }
    )
    ResponseEntity<List<Organisation>> getOrganisations( @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve pipeline details for an organization", response = Pipeline.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = Pipeline.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password"),
        @ApiResponse(code = 404, message = "Pipeline cannot be found on Jenkins instance") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}",
        produces = { "application/json" }
    )
    ResponseEntity<Pipeline> getPipeline(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve all activities details for an organization pipeline", response = PipelineActivity.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved all activities details", response = PipelineActivity.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities",
        produces = { "application/json" }
    )
    ResponseEntity<List<PipelineActivity>> getPipelineActivities(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve branch details for an organization pipeline", response = BranchImpl.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved branch details", response = BranchImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/",
        produces = { "application/json" }
    )
    ResponseEntity<BranchImpl> getPipelineBranch(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the branch",required=true ) @PathVariable("branch") String branch, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve branch run details for an organization pipeline", response = PipelineRun.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run details", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}",
        produces = { "application/json" }
    )
    ResponseEntity<PipelineRun> getPipelineBranchRun(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the branch",required=true ) @PathVariable("branch") String branch,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve all branches details for an organization pipeline", response = MultibranchPipeline.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved all branches details", response = MultibranchPipeline.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches",
        produces = { "application/json" }
    )
    ResponseEntity<MultibranchPipeline> getPipelineBranches(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve pipeline folder for an organization", response = PipelineFolderImpl.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved folder details", response = PipelineFolderImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{folder}/",
        produces = { "application/json" }
    )
    ResponseEntity<PipelineFolderImpl> getPipelineFolder(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the folder",required=true ) @PathVariable("folder") String folder, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve pipeline details for an organization folder", response = PipelineImpl.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline details", response = PipelineImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}",
        produces = { "application/json" }
    )
    ResponseEntity<PipelineImpl> getPipelineFolderPipeline(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the folder",required=true ) @PathVariable("folder") String folder, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve queue details for an organization pipeline", response = QueueItemImpl.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved queue details", response = QueueItemImpl.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue",
        produces = { "application/json" }
    )
    ResponseEntity<List<QueueItemImpl>> getPipelineQueue(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve run details for an organization pipeline", response = PipelineRun.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run details", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}",
        produces = { "application/json" }
    )
    ResponseEntity<PipelineRun> getPipelineRun(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Get log for a pipeline run", response = String.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline run log", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log",
        produces = { "application/json" }
    )
    ResponseEntity<String> getPipelineRunLog(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run,@ApiParam(value = "Start position of the log")  @RequestParam(value = "start", required = false) Integer start,@ApiParam(value = "Set to true in order to download the file, otherwise it's passed as a response body")  @RequestParam(value = "download", required = false) Boolean download, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve run node details for an organization pipeline", response = PipelineRunNode.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run node details", response = PipelineRunNode.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}",
        produces = { "application/json" }
    )
    ResponseEntity<PipelineRunNode> getPipelineRunNode(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run,@ApiParam(value = "Name of the node",required=true ) @PathVariable("node") String node, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve run node details for an organization pipeline", response = PipelineStepImpl.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run node step details", response = PipelineStepImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}",
        produces = { "application/json" }
    )
    ResponseEntity<PipelineStepImpl> getPipelineRunNodeStep(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run,@ApiParam(value = "Name of the node",required=true ) @PathVariable("node") String node,@ApiParam(value = "Name of the step",required=true ) @PathVariable("step") String step, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Get log for a pipeline run node step", response = String.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipeline run node step log", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log",
        produces = { "application/json" }
    )
    ResponseEntity<String> getPipelineRunNodeStepLog(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run,@ApiParam(value = "Name of the node",required=true ) @PathVariable("node") String node,@ApiParam(value = "Name of the step",required=true ) @PathVariable("step") String step, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve run node steps details for an organization pipeline", response = PipelineStepImpl.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run node steps details", response = PipelineStepImpl.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps",
        produces = { "application/json" }
    )
    ResponseEntity<List<PipelineStepImpl>> getPipelineRunNodeSteps(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run,@ApiParam(value = "Name of the node",required=true ) @PathVariable("node") String node, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve run nodes details for an organization pipeline", response = PipelineRunNode.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved run nodes details", response = PipelineRunNode.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes",
        produces = { "application/json" }
    )
    ResponseEntity<List<PipelineRunNode>> getPipelineRunNodes(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve all runs details for an organization pipeline", response = PipelineRun.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved runs details", response = PipelineRun.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
        produces = { "application/json" }
    )
    ResponseEntity<List<PipelineRun>> getPipelineRuns(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve all pipelines details for an organization", response = Pipeline.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved pipelines details", response = Pipeline.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/pipelines/",
        produces = { "application/json" }
    )
    ResponseEntity<List<Pipeline>> getPipelines(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve SCM details for an organization", response = GithubScm.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved SCM details", response = GithubScm.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/scm/{scm}",
        produces = { "application/json" }
    )
    ResponseEntity<GithubScm> getSCM(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of SCM",required=true ) @PathVariable("scm") String scm, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve SCM organization repositories details for an organization", response = GithubOrganization.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organization repositories details", response = GithubOrganization.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories",
        produces = { "application/json" }
    )
    ResponseEntity<List<GithubOrganization>> getSCMOrganisationRepositories(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of SCM",required=true ) @PathVariable("scm") String scm,@ApiParam(value = "Name of the SCM organization",required=true ) @PathVariable("scmOrganisation") String scmOrganisation,@ApiParam(value = "Credential ID")  @RequestParam(value = "credentialId", required = false) String credentialId,@ApiParam(value = "Number of items in a page")  @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "Page number")  @RequestParam(value = "pageNumber", required = false) Integer pageNumber, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve SCM organization repository details for an organization", response = GithubOrganization.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organizations details", response = GithubOrganization.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}",
        produces = { "application/json" }
    )
    ResponseEntity<List<GithubOrganization>> getSCMOrganisationRepository(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of SCM",required=true ) @PathVariable("scm") String scm,@ApiParam(value = "Name of the SCM organization",required=true ) @PathVariable("scmOrganisation") String scmOrganisation,@ApiParam(value = "Name of the SCM repository",required=true ) @PathVariable("repository") String repository,@ApiParam(value = "Credential ID")  @RequestParam(value = "credentialId", required = false) String credentialId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve SCM organizations details for an organization", response = GithubOrganization.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved SCM organizations details", response = GithubOrganization.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/scm/{scm}/organizations",
        produces = { "application/json" }
    )
    ResponseEntity<List<GithubOrganization>> getSCMOrganisations(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of SCM",required=true ) @PathVariable("scm") String scm,@ApiParam(value = "Credential ID")  @RequestParam(value = "credentialId", required = false) String credentialId, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve user details for an organization", response = User.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved users details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/users/{user}",
        produces = { "application/json" }
    )
    ResponseEntity<User> getUser(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the user",required=true ) @PathVariable("user") String user, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve user favorites details for an organization", response = FavoriteImpl.class, responseContainer = "List", authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved users favorites details", response = FavoriteImpl.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/users/{user}/favorites",
        produces = { "application/json" }
    )
    ResponseEntity<List<FavoriteImpl>> getUserFavorites(@ApiParam(value = "Name of the user",required=true ) @PathVariable("user") String user, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Retrieve users details for an organization", response = User.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved users details", response = User.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/organizations/{organization}/users/",
        produces = { "application/json" }
    )
    ResponseEntity<User> getUsers(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Replay an organization pipeline run", response = QueueItemImpl.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully replayed a pipeline run", response = QueueItemImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay",
        produces = { "application/json" }
    )
    ResponseEntity<QueueItemImpl> postPipelineRun(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Start a build for an organization pipeline", response = QueueItemImpl.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully started a build", response = QueueItemImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs",
        produces = { "application/json" }
    )
    ResponseEntity<QueueItemImpl> postPipelineRuns(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Favorite/unfavorite a pipeline", response = FavoriteImpl.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully favorited/unfavorited a pipeline", response = FavoriteImpl.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<FavoriteImpl> putPipelineFavorite(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Set JSON string body to {\"favorite\": true} to favorite, set value to false to unfavorite" ,required=true )   @RequestBody Boolean body, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Stop a build of an organization pipeline", response = PipelineRun.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully stopped a build", response = PipelineRun.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop",
        produces = { "application/json" }
    )
    ResponseEntity<PipelineRun> putPipelineRun(@ApiParam(value = "Name of the organization",required=true ) @PathVariable("organization") String organization,@ApiParam(value = "Name of the pipeline",required=true ) @PathVariable("pipeline") String pipeline,@ApiParam(value = "Name of the run",required=true ) @PathVariable("run") String run,@ApiParam(value = "Set to true to make blocking stop, default: false")  @RequestParam(value = "blocking", required = false) String blocking,@ApiParam(value = "Timeout in seconds, default: 10 seconds")  @RequestParam(value = "timeOutInSecs", required = false) Integer timeOutInSecs, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Search for any resource details", response = String.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved search result", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/search/",
        produces = { "application/json" }
    )
    ResponseEntity<String> search(@ApiParam(value = "Query string", required = true)  @RequestParam(value = "q", required = true) String q, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "", notes = "Get classes details", response = String.class, authorizations = {
        
        @Authorization(value = "jenkins_auth")
         }, tags={ "blueOcean", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully retrieved search result", response = String.class),
        @ApiResponse(code = 401, message = "Authentication failed - incorrect username and/or password"),
        @ApiResponse(code = 403, message = "Jenkins requires authentication - please set username and password") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/blue/rest/classes/",
        produces = { "application/json" }
    )
    ResponseEntity<String> searchClasses(@ApiParam(value = "Query string containing an array of class names", required = true)  @RequestParam(value = "q", required = true) String q, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
