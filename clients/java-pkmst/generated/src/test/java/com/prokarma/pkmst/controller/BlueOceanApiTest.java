/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.BranchImpl;
import com.prokarma.pkmst.model.FavoriteImpl;
import com.prokarma.pkmst.model.GithubOrganization;
import com.prokarma.pkmst.model.GithubScm;
import java.util.List;
import com.prokarma.pkmst.model.MultibranchPipeline;
import com.prokarma.pkmst.model.Organisation;
import com.prokarma.pkmst.model.Pipeline;
import com.prokarma.pkmst.model.PipelineActivity;
import com.prokarma.pkmst.model.PipelineFolderImpl;
import com.prokarma.pkmst.model.PipelineImpl;
import com.prokarma.pkmst.model.PipelineRun;
import com.prokarma.pkmst.model.PipelineRunNode;
import com.prokarma.pkmst.model.PipelineStepImpl;
import com.prokarma.pkmst.model.QueueItemImpl;
import com.prokarma.pkmst.model.User;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for BlueOceanApi
 */
@Ignore
public class BlueOceanApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final BlueOceanApi api = new BlueOceanApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * 
     *
     * Delete queue item from an organization pipeline queue
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void deletePipelineQueueItemTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String queue = null;
    ResponseEntity<Void> response = api.deletePipelineQueueItem(organization, pipeline, queue , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve authenticated user details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAuthenticatedUserTest() throws Exception {
        String organization = null;
    ResponseEntity<User> response = api.getAuthenticatedUser(organization , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get a list of class names supported by a given class
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getClassesTest() throws Exception {
        String propertyClass = null;
    ResponseEntity<String> response = api.getClasses(propertyClass , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve JSON Web Key
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJsonWebKeyTest() throws Exception {
        Integer key = null;
    ResponseEntity<String> response = api.getJsonWebKey(key , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve JSON Web Token
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJsonWebTokenTest() throws Exception {
        Integer expiryTimeInMins = null;
        Integer maxExpiryTimeInMins = null;
    ResponseEntity<String> response = api.getJsonWebToken(expiryTimeInMins, maxExpiryTimeInMins , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve organization details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrganisationTest() throws Exception {
        String organization = null;
    ResponseEntity<Organisation> response = api.getOrganisation(organization , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all organizations details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getOrganisationsTest() throws Exception {
    ResponseEntity<List<Organisation>> response = api.getOrganisations(  accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve pipeline details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineTest() throws Exception {
        String organization = null;
        String pipeline = null;
    ResponseEntity<Pipeline> response = api.getPipeline(organization, pipeline , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all activities details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineActivitiesTest() throws Exception {
        String organization = null;
        String pipeline = null;
    ResponseEntity<List<PipelineActivity>> response = api.getPipelineActivities(organization, pipeline , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve branch details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineBranchTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String branch = null;
    ResponseEntity<BranchImpl> response = api.getPipelineBranch(organization, pipeline, branch , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve branch run details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineBranchRunTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String branch = null;
        String run = null;
    ResponseEntity<PipelineRun> response = api.getPipelineBranchRun(organization, pipeline, branch, run , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all branches details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineBranchesTest() throws Exception {
        String organization = null;
        String pipeline = null;
    ResponseEntity<MultibranchPipeline> response = api.getPipelineBranches(organization, pipeline , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve pipeline folder for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineFolderTest() throws Exception {
        String organization = null;
        String folder = null;
    ResponseEntity<PipelineFolderImpl> response = api.getPipelineFolder(organization, folder , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve pipeline details for an organization folder
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineFolderPipelineTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String folder = null;
    ResponseEntity<PipelineImpl> response = api.getPipelineFolderPipeline(organization, pipeline, folder , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve queue details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineQueueTest() throws Exception {
        String organization = null;
        String pipeline = null;
    ResponseEntity<List<QueueItemImpl>> response = api.getPipelineQueue(organization, pipeline , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve run details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineRunTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
    ResponseEntity<PipelineRun> response = api.getPipelineRun(organization, pipeline, run , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get log for a pipeline run
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineRunLogTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
        Integer start = null;
        Boolean download = null;
    ResponseEntity<String> response = api.getPipelineRunLog(organization, pipeline, run, start, download , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve run node details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineRunNodeTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
        String node = null;
    ResponseEntity<PipelineRunNode> response = api.getPipelineRunNode(organization, pipeline, run, node , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve run node details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineRunNodeStepTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
        String node = null;
        String step = null;
    ResponseEntity<PipelineStepImpl> response = api.getPipelineRunNodeStep(organization, pipeline, run, node, step , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get log for a pipeline run node step
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineRunNodeStepLogTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
        String node = null;
        String step = null;
    ResponseEntity<String> response = api.getPipelineRunNodeStepLog(organization, pipeline, run, node, step , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve run node steps details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineRunNodeStepsTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
        String node = null;
    ResponseEntity<List<PipelineStepImpl>> response = api.getPipelineRunNodeSteps(organization, pipeline, run, node , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve run nodes details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineRunNodesTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
    ResponseEntity<List<PipelineRunNode>> response = api.getPipelineRunNodes(organization, pipeline, run , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all runs details for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelineRunsTest() throws Exception {
        String organization = null;
        String pipeline = null;
    ResponseEntity<List<PipelineRun>> response = api.getPipelineRuns(organization, pipeline , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve all pipelines details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getPipelinesTest() throws Exception {
        String organization = null;
    ResponseEntity<List<Pipeline>> response = api.getPipelines(organization , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve SCM details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSCMTest() throws Exception {
        String organization = null;
        String scm = null;
    ResponseEntity<GithubScm> response = api.getSCM(organization, scm , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve SCM organization repositories details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSCMOrganisationRepositoriesTest() throws Exception {
        String organization = null;
        String scm = null;
        String scmOrganisation = null;
        String credentialId = null;
        Integer pageSize = null;
        Integer pageNumber = null;
    ResponseEntity<List<GithubOrganization>> response = api.getSCMOrganisationRepositories(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve SCM organization repository details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSCMOrganisationRepositoryTest() throws Exception {
        String organization = null;
        String scm = null;
        String scmOrganisation = null;
        String repository = null;
        String credentialId = null;
    ResponseEntity<List<GithubOrganization>> response = api.getSCMOrganisationRepository(organization, scm, scmOrganisation, repository, credentialId , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve SCM organizations details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getSCMOrganisationsTest() throws Exception {
        String organization = null;
        String scm = null;
        String credentialId = null;
    ResponseEntity<List<GithubOrganization>> response = api.getSCMOrganisations(organization, scm, credentialId , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve user details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserTest() throws Exception {
        String organization = null;
        String user = null;
    ResponseEntity<User> response = api.getUser(organization, user , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve user favorites details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUserFavoritesTest() throws Exception {
        String user = null;
    ResponseEntity<List<FavoriteImpl>> response = api.getUserFavorites(user , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve users details for an organization
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getUsersTest() throws Exception {
        String organization = null;
    ResponseEntity<User> response = api.getUsers(organization , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Replay an organization pipeline run
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPipelineRunTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
    ResponseEntity<QueueItemImpl> response = api.postPipelineRun(organization, pipeline, run , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Start a build for an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postPipelineRunsTest() throws Exception {
        String organization = null;
        String pipeline = null;
    ResponseEntity<QueueItemImpl> response = api.postPipelineRuns(organization, pipeline , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Favorite/unfavorite a pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putPipelineFavoriteTest() throws Exception {
        String organization = null;
        String pipeline = null;
        Boolean body = null;
    ResponseEntity<FavoriteImpl> response = api.putPipelineFavorite(organization, pipeline, body , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Stop a build of an organization pipeline
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void putPipelineRunTest() throws Exception {
        String organization = null;
        String pipeline = null;
        String run = null;
        String blocking = null;
        Integer timeOutInSecs = null;
    ResponseEntity<PipelineRun> response = api.putPipelineRun(organization, pipeline, run, blocking, timeOutInSecs , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Search for any resource details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchTest() throws Exception {
        String q = null;
    ResponseEntity<String> response = api.search(q , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get classes details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void searchClassesTest() throws Exception {
        String q = null;
    ResponseEntity<String> response = api.searchClasses(q , accept);

        // TODO: test validations
    }
    
}
