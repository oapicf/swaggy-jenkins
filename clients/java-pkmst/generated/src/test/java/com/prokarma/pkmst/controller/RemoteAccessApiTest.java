/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.prokarma.pkmst.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.prokarma.pkmst.model.ComputerSet;
import com.prokarma.pkmst.model.FreeStyleBuild;
import com.prokarma.pkmst.model.FreeStyleProject;
import com.prokarma.pkmst.model.Hudson;
import com.prokarma.pkmst.model.ListView;
import com.prokarma.pkmst.model.Queue;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.ResponseEntity;
import org.springframework.web.multipart.MultipartFile;

/**
 * API tests for RemoteAccessApi
 */
@Ignore
public class RemoteAccessApiTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    private final RemoteAccessApi api = new RemoteAccessApiController(objectMapper);

    private final String accept = "application/json";

    
    /**
     * 
     *
     * Retrieve computer details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getComputerTest() throws Exception {
        Integer depth = null;
    ResponseEntity<ComputerSet> response = api.getComputer(depth , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Jenkins details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJenkinsTest() throws Exception {
    ResponseEntity<Hudson> response = api.getJenkins(  accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve job details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJobTest() throws Exception {
        String name = null;
    ResponseEntity<FreeStyleProject> response = api.getJob(name , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve job configuration
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJobConfigTest() throws Exception {
        String name = null;
    ResponseEntity<String> response = api.getJobConfig(name , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve job&#39;s last build details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJobLastBuildTest() throws Exception {
        String name = null;
    ResponseEntity<FreeStyleBuild> response = api.getJobLastBuild(name , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve job&#39;s build progressive text output
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getJobProgressiveTextTest() throws Exception {
        String name = null;
        String number = null;
        String start = null;
    ResponseEntity<Void> response = api.getJobProgressiveText(name, number, start , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve queue details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getQueueTest() throws Exception {
    ResponseEntity<Queue> response = api.getQueue(  accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve queued item details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getQueueItemTest() throws Exception {
        String number = null;
    ResponseEntity<Queue> response = api.getQueueItem(number , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve view details
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getViewTest() throws Exception {
        String name = null;
    ResponseEntity<ListView> response = api.getView(name , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve view configuration
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getViewConfigTest() throws Exception {
        String name = null;
    ResponseEntity<String> response = api.getViewConfig(name , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieve Jenkins headers
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void headJenkinsTest() throws Exception {
    ResponseEntity<Void> response = api.headJenkins(  accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new job using job configuration, or copied from an existing job
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postCreateItemTest() throws Exception {
        String name = null;
        String from = null;
        String mode = null;
        String jenkinsCrumb = null;
        String contentType = null;
        String body = null;
    ResponseEntity<Void> response = api.postCreateItem(name, from, mode, jenkinsCrumb, contentType, body , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Create a new view using view configuration
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postCreateViewTest() throws Exception {
        String name = null;
        String jenkinsCrumb = null;
        String contentType = null;
        String body = null;
    ResponseEntity<Void> response = api.postCreateView(name, jenkinsCrumb, contentType, body , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Build a job
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postJobBuildTest() throws Exception {
        String name = null;
        String json = null;
        String token = null;
        String jenkinsCrumb = null;
    ResponseEntity<Void> response = api.postJobBuild(name, json, token, jenkinsCrumb , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update job configuration
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postJobConfigTest() throws Exception {
        String name = null;
        String body = null;
        String jenkinsCrumb = null;
    ResponseEntity<Void> response = api.postJobConfig(name, body, jenkinsCrumb , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Delete a job
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postJobDeleteTest() throws Exception {
        String name = null;
        String jenkinsCrumb = null;
    ResponseEntity<Void> response = api.postJobDelete(name, jenkinsCrumb , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Disable a job
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postJobDisableTest() throws Exception {
        String name = null;
        String jenkinsCrumb = null;
    ResponseEntity<Void> response = api.postJobDisable(name, jenkinsCrumb , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Enable a job
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postJobEnableTest() throws Exception {
        String name = null;
        String jenkinsCrumb = null;
    ResponseEntity<Void> response = api.postJobEnable(name, jenkinsCrumb , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Stop a job
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postJobLastBuildStopTest() throws Exception {
        String name = null;
        String jenkinsCrumb = null;
    ResponseEntity<Void> response = api.postJobLastBuildStop(name, jenkinsCrumb , accept);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update view configuration
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void postViewConfigTest() throws Exception {
        String name = null;
        String body = null;
        String jenkinsCrumb = null;
    ResponseEntity<Void> response = api.postViewConfig(name, body, jenkinsCrumb , accept);

        // TODO: test validations
    }
    
}
