# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from app.openapi_server.models.base_model import Model
from openapi_server import util


class DiskSpaceMonitorDescriptorDiskSpace(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, timestamp: int=None, path: str=None, size: int=None):  # noqa: E501
        """DiskSpaceMonitorDescriptorDiskSpace - a model defined in Swagger

        :param _class: The _class of this DiskSpaceMonitorDescriptorDiskSpace.  # noqa: E501
        :type _class: str
        :param timestamp: The timestamp of this DiskSpaceMonitorDescriptorDiskSpace.  # noqa: E501
        :type timestamp: int
        :param path: The path of this DiskSpaceMonitorDescriptorDiskSpace.  # noqa: E501
        :type path: str
        :param size: The size of this DiskSpaceMonitorDescriptorDiskSpace.  # noqa: E501
        :type size: int
        """
        self.swagger_types = {
            '_class': str,
            'timestamp': int,
            'path': str,
            'size': int
        }

        self.attribute_map = {
            '_class': '_class',
            'timestamp': 'timestamp',
            'path': 'path',
            'size': 'size'
        }

        self.__class = _class
        self._timestamp = timestamp
        self._path = path
        self._size = size

    @classmethod
    def from_dict(cls, dikt) -> 'DiskSpaceMonitorDescriptorDiskSpace':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DiskSpaceMonitorDescriptorDiskSpace of this DiskSpaceMonitorDescriptorDiskSpace.  # noqa: E501
        :rtype: DiskSpaceMonitorDescriptorDiskSpace
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self) -> str:
        """Gets the _class of this DiskSpaceMonitorDescriptorDiskSpace.


        :return: The _class of this DiskSpaceMonitorDescriptorDiskSpace.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class: str):
        """Sets the _class of this DiskSpaceMonitorDescriptorDiskSpace.


        :param _class: The _class of this DiskSpaceMonitorDescriptorDiskSpace.
        :type _class: str
        """

        self.__class = _class

    @property
    def timestamp(self) -> int:
        """Gets the timestamp of this DiskSpaceMonitorDescriptorDiskSpace.


        :return: The timestamp of this DiskSpaceMonitorDescriptorDiskSpace.
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: int):
        """Sets the timestamp of this DiskSpaceMonitorDescriptorDiskSpace.


        :param timestamp: The timestamp of this DiskSpaceMonitorDescriptorDiskSpace.
        :type timestamp: int
        """

        self._timestamp = timestamp

    @property
    def path(self) -> str:
        """Gets the path of this DiskSpaceMonitorDescriptorDiskSpace.


        :return: The path of this DiskSpaceMonitorDescriptorDiskSpace.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this DiskSpaceMonitorDescriptorDiskSpace.


        :param path: The path of this DiskSpaceMonitorDescriptorDiskSpace.
        :type path: str
        """

        self._path = path

    @property
    def size(self) -> int:
        """Gets the size of this DiskSpaceMonitorDescriptorDiskSpace.


        :return: The size of this DiskSpaceMonitorDescriptorDiskSpace.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this DiskSpaceMonitorDescriptorDiskSpace.


        :param size: The size of this DiskSpaceMonitorDescriptorDiskSpace.
        :type size: int
        """

        self._size = size
