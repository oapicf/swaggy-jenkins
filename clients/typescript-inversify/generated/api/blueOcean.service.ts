/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { BranchImpl } from '../model/branchImpl';
import { FavoriteImpl } from '../model/favoriteImpl';
import { GithubOrganization } from '../model/githubOrganization';
import { GithubScm } from '../model/githubScm';
import { MultibranchPipeline } from '../model/multibranchPipeline';
import { Organisation } from '../model/organisation';
import { Pipeline } from '../model/pipeline';
import { PipelineActivity } from '../model/pipelineActivity';
import { PipelineFolderImpl } from '../model/pipelineFolderImpl';
import { PipelineImpl } from '../model/pipelineImpl';
import { PipelineRun } from '../model/pipelineRun';
import { PipelineRunNode } from '../model/pipelineRunNode';
import { PipelineStepImpl } from '../model/pipelineStepImpl';
import { QueueItemImpl } from '../model/queueItemImpl';
import { User } from '../model/user';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BlueOceanService {
    private basePath: string = 'http://localhost';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param queue Name of the queue item
     
     */
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, observe?: 'body', headers?: Headers): Observable<any>;
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling deletePipelineQueueItem.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling deletePipelineQueueItem.');
        }

        if (queue === null || queue === undefined){
            throw new Error('Required parameter queue was null or undefined when calling deletePipelineQueueItem.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/queue/${encodeURIComponent(String(queue))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <any>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization
     
     */
    public getAuthenticatedUser(organization: string, observe?: 'body', headers?: Headers): Observable<User>;
    public getAuthenticatedUser(organization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<User>>;
    public getAuthenticatedUser(organization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getAuthenticatedUser.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<User>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/user/`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <User>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get a list of class names supported by a given class
     * @param _class Name of the class
     
     */
    public getClasses(_class: string, observe?: 'body', headers?: Headers): Observable<string>;
    public getClasses(_class: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public getClasses(_class: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (_class === null || _class === undefined){
            throw new Error('Required parameter _class was null or undefined when calling getClasses.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/blue/rest/classes/${encodeURIComponent(String(_class))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve JSON Web Key
     * @param key Key ID received as part of JWT header field kid
     
     */
    public getJsonWebKey(key: number, observe?: 'body', headers?: Headers): Observable<string>;
    public getJsonWebKey(key: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public getJsonWebKey(key: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (key === null || key === undefined){
            throw new Error('Required parameter key was null or undefined when calling getJsonWebKey.');
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/jwt-auth/jwks/${encodeURIComponent(String(key))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve JSON Web Token
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
     
     */
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, observe?: 'body', headers?: Headers): Observable<string>;
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public getJsonWebToken(expiryTimeInMins?: number, maxExpiryTimeInMins?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (expiryTimeInMins !== undefined) {
            queryParameters.push('expiryTimeInMins='+encodeURIComponent(String(expiryTimeInMins)));
        }
        if (maxExpiryTimeInMins !== undefined) {
            queryParameters.push('maxExpiryTimeInMins='+encodeURIComponent(String(maxExpiryTimeInMins)));
        }

        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/jwt-auth/token?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve organization details
     * @param organization Name of the organization
     
     */
    public getOrganisation(organization: string, observe?: 'body', headers?: Headers): Observable<Organisation>;
    public getOrganisation(organization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Organisation>>;
    public getOrganisation(organization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getOrganisation.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Organisation>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Organisation>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve all organizations details
     
     */
    public getOrganisations(observe?: 'body', headers?: Headers): Observable<Array<Organisation>>;
    public getOrganisations(observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Organisation>>>;
    public getOrganisations(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Organisation>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<Organisation>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     
     */
    public getPipeline(organization: string, pipeline: string, observe?: 'body', headers?: Headers): Observable<Pipeline>;
    public getPipeline(organization: string, pipeline: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Pipeline>>;
    public getPipeline(organization: string, pipeline: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipeline.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipeline.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Pipeline>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Pipeline>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     
     */
    public getPipelineActivities(organization: string, pipeline: string, observe?: 'body', headers?: Headers): Observable<Array<PipelineActivity>>;
    public getPipelineActivities(organization: string, pipeline: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PipelineActivity>>>;
    public getPipelineActivities(organization: string, pipeline: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineActivities.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineActivities.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PipelineActivity>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/activities`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PipelineActivity>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     
     */
    public getPipelineBranch(organization: string, pipeline: string, branch: string, observe?: 'body', headers?: Headers): Observable<BranchImpl>;
    public getPipelineBranch(organization: string, pipeline: string, branch: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<BranchImpl>>;
    public getPipelineBranch(organization: string, pipeline: string, branch: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranch.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranch.');
        }

        if (branch === null || branch === undefined){
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranch.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<BranchImpl>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches/${encodeURIComponent(String(branch))}/`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <BranchImpl>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     * @param run Name of the run
     
     */
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, observe?: 'body', headers?: Headers): Observable<PipelineRun>;
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PipelineRun>>;
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranchRun.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranchRun.');
        }

        if (branch === null || branch === undefined){
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranchRun.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling getPipelineBranchRun.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PipelineRun>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches/${encodeURIComponent(String(branch))}/runs/${encodeURIComponent(String(run))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PipelineRun>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     
     */
    public getPipelineBranches(organization: string, pipeline: string, observe?: 'body', headers?: Headers): Observable<MultibranchPipeline>;
    public getPipelineBranches(organization: string, pipeline: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<MultibranchPipeline>>;
    public getPipelineBranches(organization: string, pipeline: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranches.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranches.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<MultibranchPipeline>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/branches`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <MultibranchPipeline>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization
     * @param folder Name of the folder
     
     */
    public getPipelineFolder(organization: string, folder: string, observe?: 'body', headers?: Headers): Observable<PipelineFolderImpl>;
    public getPipelineFolder(organization: string, folder: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PipelineFolderImpl>>;
    public getPipelineFolder(organization: string, folder: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineFolder.');
        }

        if (folder === null || folder === undefined){
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolder.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PipelineFolderImpl>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(folder))}/`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PipelineFolderImpl>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param folder Name of the folder
     
     */
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, observe?: 'body', headers?: Headers): Observable<PipelineImpl>;
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PipelineImpl>>;
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineFolderPipeline.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineFolderPipeline.');
        }

        if (folder === null || folder === undefined){
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolderPipeline.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PipelineImpl>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(folder))}/pipelines/${encodeURIComponent(String(pipeline))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PipelineImpl>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     
     */
    public getPipelineQueue(organization: string, pipeline: string, observe?: 'body', headers?: Headers): Observable<Array<QueueItemImpl>>;
    public getPipelineQueue(organization: string, pipeline: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<QueueItemImpl>>>;
    public getPipelineQueue(organization: string, pipeline: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineQueue.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineQueue.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<QueueItemImpl>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/queue`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<QueueItemImpl>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     
     */
    public getPipelineRun(organization: string, pipeline: string, run: string, observe?: 'body', headers?: Headers): Observable<PipelineRun>;
    public getPipelineRun(organization: string, pipeline: string, run: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PipelineRun>>;
    public getPipelineRun(organization: string, pipeline: string, run: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRun.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRun.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling getPipelineRun.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PipelineRun>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PipelineRun>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get log for a pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param start Start position of the log
     * @param download Set to true in order to download the file, otherwise it\&#39;s passed as a response body
     
     */
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, observe?: 'body', headers?: Headers): Observable<string>;
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunLog.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunLog.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunLog.');
        }

        let queryParameters: string[] = [];
        if (start !== undefined) {
            queryParameters.push('start='+encodeURIComponent(String(start)));
        }
        if (download !== undefined) {
            queryParameters.push('download='+encodeURIComponent(String(download)));
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/log?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     
     */
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, observe?: 'body', headers?: Headers): Observable<PipelineRunNode>;
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PipelineRunNode>>;
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNode.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNode.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNode.');
        }

        if (node === null || node === undefined){
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNode.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PipelineRunNode>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PipelineRunNode>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     
     */
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'body', headers?: Headers): Observable<PipelineStepImpl>;
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<PipelineStepImpl>>;
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeStep.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeStep.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeStep.');
        }

        if (node === null || node === undefined){
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeStep.');
        }

        if (step === null || step === undefined){
            throw new Error('Required parameter step was null or undefined when calling getPipelineRunNodeStep.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PipelineStepImpl>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps/${encodeURIComponent(String(step))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PipelineStepImpl>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get log for a pipeline run node step
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     
     */
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'body', headers?: Headers): Observable<string>;
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        if (node === null || node === undefined){
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        if (step === null || step === undefined){
            throw new Error('Required parameter step was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps/${encodeURIComponent(String(step))}/log`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     
     */
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, observe?: 'body', headers?: Headers): Observable<Array<PipelineStepImpl>>;
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PipelineStepImpl>>>;
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeSteps.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeSteps.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeSteps.');
        }

        if (node === null || node === undefined){
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeSteps.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PipelineStepImpl>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes/${encodeURIComponent(String(node))}/steps`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PipelineStepImpl>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     
     */
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, observe?: 'body', headers?: Headers): Observable<Array<PipelineRunNode>>;
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PipelineRunNode>>>;
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodes.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodes.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodes.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PipelineRunNode>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/nodes`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PipelineRunNode>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     
     */
    public getPipelineRuns(organization: string, pipeline: string, observe?: 'body', headers?: Headers): Observable<Array<PipelineRun>>;
    public getPipelineRuns(organization: string, pipeline: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<PipelineRun>>>;
    public getPipelineRuns(organization: string, pipeline: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRuns.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRuns.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<PipelineRun>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<PipelineRun>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization
     
     */
    public getPipelines(organization: string, observe?: 'body', headers?: Headers): Observable<Array<Pipeline>>;
    public getPipelines(organization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<Pipeline>>>;
    public getPipelines(organization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getPipelines.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<Pipeline>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<Pipeline>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve SCM details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     
     */
    public getSCM(organization: string, scm: string, observe?: 'body', headers?: Headers): Observable<GithubScm>;
    public getSCM(organization: string, scm: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<GithubScm>>;
    public getSCM(organization: string, scm: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getSCM.');
        }

        if (scm === null || scm === undefined){
            throw new Error('Required parameter scm was null or undefined when calling getSCM.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<GithubScm>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <GithubScm>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param credentialId Credential ID
     * @param pageSize Number of items in a page
     * @param pageNumber Page number
     
     */
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, observe?: 'body', headers?: Headers): Observable<Array<GithubOrganization>>;
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<GithubOrganization>>>;
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisationRepositories.');
        }

        if (scm === null || scm === undefined){
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisationRepositories.');
        }

        if (scmOrganisation === null || scmOrganisation === undefined){
            throw new Error('Required parameter scmOrganisation was null or undefined when calling getSCMOrganisationRepositories.');
        }

        let queryParameters: string[] = [];
        if (credentialId !== undefined) {
            queryParameters.push('credentialId='+encodeURIComponent(String(credentialId)));
        }
        if (pageSize !== undefined) {
            queryParameters.push('pageSize='+encodeURIComponent(String(pageSize)));
        }
        if (pageNumber !== undefined) {
            queryParameters.push('pageNumber='+encodeURIComponent(String(pageNumber)));
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<GithubOrganization>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations/${encodeURIComponent(String(scmOrganisation))}/repositories?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<GithubOrganization>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param repository Name of the SCM repository
     * @param credentialId Credential ID
     
     */
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, observe?: 'body', headers?: Headers): Observable<Array<GithubOrganization>>;
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<GithubOrganization>>>;
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisationRepository.');
        }

        if (scm === null || scm === undefined){
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisationRepository.');
        }

        if (scmOrganisation === null || scmOrganisation === undefined){
            throw new Error('Required parameter scmOrganisation was null or undefined when calling getSCMOrganisationRepository.');
        }

        if (repository === null || repository === undefined){
            throw new Error('Required parameter repository was null or undefined when calling getSCMOrganisationRepository.');
        }

        let queryParameters: string[] = [];
        if (credentialId !== undefined) {
            queryParameters.push('credentialId='+encodeURIComponent(String(credentialId)));
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<GithubOrganization>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations/${encodeURIComponent(String(scmOrganisation))}/repositories/${encodeURIComponent(String(repository))}?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<GithubOrganization>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param credentialId Credential ID
     
     */
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, observe?: 'body', headers?: Headers): Observable<Array<GithubOrganization>>;
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<GithubOrganization>>>;
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisations.');
        }

        if (scm === null || scm === undefined){
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisations.');
        }

        let queryParameters: string[] = [];
        if (credentialId !== undefined) {
            queryParameters.push('credentialId='+encodeURIComponent(String(credentialId)));
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<GithubOrganization>>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/scm/${encodeURIComponent(String(scm))}/organizations?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<GithubOrganization>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve user details for an organization
     * @param organization Name of the organization
     * @param user Name of the user
     
     */
    public getUser(organization: string, user: string, observe?: 'body', headers?: Headers): Observable<User>;
    public getUser(organization: string, user: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<User>>;
    public getUser(organization: string, user: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getUser.');
        }

        if (user === null || user === undefined){
            throw new Error('Required parameter user was null or undefined when calling getUser.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<User>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/users/${encodeURIComponent(String(user))}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <User>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve user favorites details for an organization
     * @param user Name of the user
     
     */
    public getUserFavorites(user: string, observe?: 'body', headers?: Headers): Observable<Array<FavoriteImpl>>;
    public getUserFavorites(user: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<FavoriteImpl>>>;
    public getUserFavorites(user: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (user === null || user === undefined){
            throw new Error('Required parameter user was null or undefined when calling getUserFavorites.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<FavoriteImpl>>> = this.httpClient.get(`${this.basePath}/blue/rest/users/${encodeURIComponent(String(user))}/favorites`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <Array<FavoriteImpl>>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Retrieve users details for an organization
     * @param organization Name of the organization
     
     */
    public getUsers(organization: string, observe?: 'body', headers?: Headers): Observable<User>;
    public getUsers(organization: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<User>>;
    public getUsers(organization: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling getUsers.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<User>> = this.httpClient.get(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/users/`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <User>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Replay an organization pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     
     */
    public postPipelineRun(organization: string, pipeline: string, run: string, observe?: 'body', headers?: Headers): Observable<QueueItemImpl>;
    public postPipelineRun(organization: string, pipeline: string, run: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<QueueItemImpl>>;
    public postPipelineRun(organization: string, pipeline: string, run: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling postPipelineRun.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling postPipelineRun.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling postPipelineRun.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<QueueItemImpl>> = this.httpClient.post(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/replay`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QueueItemImpl>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Start a build for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     
     */
    public postPipelineRuns(organization: string, pipeline: string, observe?: 'body', headers?: Headers): Observable<QueueItemImpl>;
    public postPipelineRuns(organization: string, pipeline: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<QueueItemImpl>>;
    public postPipelineRuns(organization: string, pipeline: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling postPipelineRuns.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling postPipelineRuns.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<QueueItemImpl>> = this.httpClient.post(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <QueueItemImpl>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
     
     */
    public putPipelineFavorite(organization: string, pipeline: string, body: boolean, observe?: 'body', headers?: Headers): Observable<FavoriteImpl>;
    public putPipelineFavorite(organization: string, pipeline: string, body: boolean, observe?: 'response', headers?: Headers): Observable<HttpResponse<FavoriteImpl>>;
    public putPipelineFavorite(organization: string, pipeline: string, body: boolean, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling putPipelineFavorite.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling putPipelineFavorite.');
        }

        if (body === null || body === undefined){
            throw new Error('Required parameter body was null or undefined when calling putPipelineFavorite.');
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<FavoriteImpl>> = this.httpClient.put(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/favorite`, body , headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <FavoriteImpl>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Stop a build of an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param blocking Set to true to make blocking stop, default: false
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds
     
     */
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, observe?: 'body', headers?: Headers): Observable<PipelineRun>;
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<PipelineRun>>;
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (organization === null || organization === undefined){
            throw new Error('Required parameter organization was null or undefined when calling putPipelineRun.');
        }

        if (pipeline === null || pipeline === undefined){
            throw new Error('Required parameter pipeline was null or undefined when calling putPipelineRun.');
        }

        if (run === null || run === undefined){
            throw new Error('Required parameter run was null or undefined when calling putPipelineRun.');
        }

        let queryParameters: string[] = [];
        if (blocking !== undefined) {
            queryParameters.push('blocking='+encodeURIComponent(String(blocking)));
        }
        if (timeOutInSecs !== undefined) {
            queryParameters.push('timeOutInSecs='+encodeURIComponent(String(timeOutInSecs)));
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<PipelineRun>> = this.httpClient.put(`${this.basePath}/blue/rest/organizations/${encodeURIComponent(String(organization))}/pipelines/${encodeURIComponent(String(pipeline))}/runs/${encodeURIComponent(String(run))}/stop?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <PipelineRun>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Search for any resource details
     * @param q Query string
     
     */
    public search(q: string, observe?: 'body', headers?: Headers): Observable<string>;
    public search(q: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public search(q: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (q === null || q === undefined){
            throw new Error('Required parameter q was null or undefined when calling search.');
        }

        let queryParameters: string[] = [];
        if (q !== undefined) {
            queryParameters.push('q='+encodeURIComponent(String(q)));
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/blue/rest/search/?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }


    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names
     
     */
    public searchClasses(q: string, observe?: 'body', headers?: Headers): Observable<string>;
    public searchClasses(q: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public searchClasses(q: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (q === null || q === undefined){
            throw new Error('Required parameter q was null or undefined when calling searchClasses.');
        }

        let queryParameters: string[] = [];
        if (q !== undefined) {
            queryParameters.push('q='+encodeURIComponent(String(q)));
        }

        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.basePath}/blue/rest/classes/?${queryParameters.join('&')}`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <string>(httpResponse.response))
               );
        }
        return response;
    }

}
