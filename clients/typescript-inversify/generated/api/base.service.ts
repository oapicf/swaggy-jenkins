/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';

import { map } from 'rxjs/operators';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { DefaultCrumbIssuer } from '../model/defaultCrumbIssuer';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class BaseService {
    private basePath: string = 'http://localhost';

    constructor(@inject('IApiHttpClient') private httpClient: IHttpClient,
        @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration ) {
        if(this.APIConfiguration.basePath)
            this.basePath = this.APIConfiguration.basePath;
    }

    /**
     * 
     * Retrieve CSRF protection token
     
     */
    public getCrumb(observe?: 'body', headers?: Headers): Observable<DefaultCrumbIssuer>;
    public getCrumb(observe?: 'response', headers?: Headers): Observable<HttpResponse<DefaultCrumbIssuer>>;
    public getCrumb(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (jenkins_auth) required
        if (this.APIConfiguration.username || this.APIConfiguration.password) {
            headers['Authorization'] = btoa(this.APIConfiguration.username + ':' + this.APIConfiguration.password);
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<DefaultCrumbIssuer>> = this.httpClient.get(`${this.basePath}/crumbIssuer/api/json`, headers);
        if (observe === 'body') {
               return response.pipe(
                   map((httpResponse: HttpResponse) => <DefaultCrumbIssuer>(httpResponse.response))
               );
        }
        return response;
    }

}
