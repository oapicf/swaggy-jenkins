# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hudson_master_computer import HudsonMasterComputer
from openapi_server import util


class ComputerSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _class: str=None, busy_executors: int=None, computer: List[HudsonMasterComputer]=None, display_name: str=None, total_executors: int=None):
        """ComputerSet - a model defined in OpenAPI

        :param _class: The _class of this ComputerSet.
        :param busy_executors: The busy_executors of this ComputerSet.
        :param computer: The computer of this ComputerSet.
        :param display_name: The display_name of this ComputerSet.
        :param total_executors: The total_executors of this ComputerSet.
        """
        self.openapi_types = {
            '_class': str,
            'busy_executors': int,
            'computer': List[HudsonMasterComputer],
            'display_name': str,
            'total_executors': int
        }

        self.attribute_map = {
            '_class': '_class',
            'busy_executors': 'busyExecutors',
            'computer': 'computer',
            'display_name': 'displayName',
            'total_executors': 'totalExecutors'
        }

        self.__class = _class
        self._busy_executors = busy_executors
        self._computer = computer
        self._display_name = display_name
        self._total_executors = total_executors

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComputerSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComputerSet of this ComputerSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _class(self):
        """Gets the _class of this ComputerSet.


        :return: The _class of this ComputerSet.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this ComputerSet.


        :param _class: The _class of this ComputerSet.
        :type _class: str
        """

        self.__class = _class

    @property
    def busy_executors(self):
        """Gets the busy_executors of this ComputerSet.


        :return: The busy_executors of this ComputerSet.
        :rtype: int
        """
        return self._busy_executors

    @busy_executors.setter
    def busy_executors(self, busy_executors):
        """Sets the busy_executors of this ComputerSet.


        :param busy_executors: The busy_executors of this ComputerSet.
        :type busy_executors: int
        """

        self._busy_executors = busy_executors

    @property
    def computer(self):
        """Gets the computer of this ComputerSet.


        :return: The computer of this ComputerSet.
        :rtype: List[HudsonMasterComputer]
        """
        return self._computer

    @computer.setter
    def computer(self, computer):
        """Sets the computer of this ComputerSet.


        :param computer: The computer of this ComputerSet.
        :type computer: List[HudsonMasterComputer]
        """

        self._computer = computer

    @property
    def display_name(self):
        """Gets the display_name of this ComputerSet.


        :return: The display_name of this ComputerSet.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ComputerSet.


        :param display_name: The display_name of this ComputerSet.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def total_executors(self):
        """Gets the total_executors of this ComputerSet.


        :return: The total_executors of this ComputerSet.
        :rtype: int
        """
        return self._total_executors

    @total_executors.setter
    def total_executors(self, total_executors):
        """Sets the total_executors of this ComputerSet.


        :param total_executors: The total_executors of this ComputerSet.
        :type total_executors: int
        """

        self._total_executors = total_executors
