# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GithubContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, sha: str=None, _class: str=None, repo: str=None, size: int=None, owner: str=None, path: str=None, base64_data: str=None):
        """GithubContent - a model defined in OpenAPI

        :param name: The name of this GithubContent.
        :param sha: The sha of this GithubContent.
        :param _class: The _class of this GithubContent.
        :param repo: The repo of this GithubContent.
        :param size: The size of this GithubContent.
        :param owner: The owner of this GithubContent.
        :param path: The path of this GithubContent.
        :param base64_data: The base64_data of this GithubContent.
        """
        self.openapi_types = {
            'name': str,
            'sha': str,
            '_class': str,
            'repo': str,
            'size': int,
            'owner': str,
            'path': str,
            'base64_data': str
        }

        self.attribute_map = {
            'name': 'name',
            'sha': 'sha',
            '_class': '_class',
            'repo': 'repo',
            'size': 'size',
            'owner': 'owner',
            'path': 'path',
            'base64_data': 'base64Data'
        }

        self._name = name
        self._sha = sha
        self.__class = _class
        self._repo = repo
        self._size = size
        self._owner = owner
        self._path = path
        self._base64_data = base64_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GithubContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GithubContent of this GithubContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this GithubContent.


        :return: The name of this GithubContent.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GithubContent.


        :param name: The name of this GithubContent.
        :type name: str
        """

        self._name = name

    @property
    def sha(self):
        """Gets the sha of this GithubContent.


        :return: The sha of this GithubContent.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha):
        """Sets the sha of this GithubContent.


        :param sha: The sha of this GithubContent.
        :type sha: str
        """

        self._sha = sha

    @property
    def _class(self):
        """Gets the _class of this GithubContent.


        :return: The _class of this GithubContent.
        :rtype: str
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this GithubContent.


        :param _class: The _class of this GithubContent.
        :type _class: str
        """

        self.__class = _class

    @property
    def repo(self):
        """Gets the repo of this GithubContent.


        :return: The repo of this GithubContent.
        :rtype: str
        """
        return self._repo

    @repo.setter
    def repo(self, repo):
        """Sets the repo of this GithubContent.


        :param repo: The repo of this GithubContent.
        :type repo: str
        """

        self._repo = repo

    @property
    def size(self):
        """Gets the size of this GithubContent.


        :return: The size of this GithubContent.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this GithubContent.


        :param size: The size of this GithubContent.
        :type size: int
        """

        self._size = size

    @property
    def owner(self):
        """Gets the owner of this GithubContent.


        :return: The owner of this GithubContent.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this GithubContent.


        :param owner: The owner of this GithubContent.
        :type owner: str
        """

        self._owner = owner

    @property
    def path(self):
        """Gets the path of this GithubContent.


        :return: The path of this GithubContent.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this GithubContent.


        :param path: The path of this GithubContent.
        :type path: str
        """

        self._path = path

    @property
    def base64_data(self):
        """Gets the base64_data of this GithubContent.


        :return: The base64_data of this GithubContent.
        :rtype: str
        """
        return self._base64_data

    @base64_data.setter
    def base64_data(self, base64_data):
        """Sets the base64_data of this GithubContent.


        :param base64_data: The base64_data of this GithubContent.
        :type base64_data: str
        """

        self._base64_data = base64_data
