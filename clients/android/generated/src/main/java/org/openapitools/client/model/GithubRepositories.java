/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.util.*;
import org.openapitools.client.model.GithubRepositorieslinks;
import org.openapitools.client.model.GithubRepository;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class GithubRepositories {
  
  @SerializedName("_class")
  private String _class = null;
  @SerializedName("_links")
  private GithubRepositorieslinks links = null;
  @SerializedName("items")
  private List<GithubRepository> items = null;
  @SerializedName("lastPage")
  private Integer lastPage = null;
  @SerializedName("nextPage")
  private Integer nextPage = null;
  @SerializedName("pageSize")
  private Integer pageSize = null;

  /**
   **/
  @ApiModelProperty(value = "")
  public String getClass() {
    return _class;
  }
  public void setClass(String _class) {
    this._class = _class;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public GithubRepositorieslinks getLinks() {
    return links;
  }
  public void setLinks(GithubRepositorieslinks links) {
    this.links = links;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public List<GithubRepository> getItems() {
    return items;
  }
  public void setItems(List<GithubRepository> items) {
    this.items = items;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getLastPage() {
    return lastPage;
  }
  public void setLastPage(Integer lastPage) {
    this.lastPage = lastPage;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getNextPage() {
    return nextPage;
  }
  public void setNextPage(Integer nextPage) {
    this.nextPage = nextPage;
  }

  /**
   **/
  @ApiModelProperty(value = "")
  public Integer getPageSize() {
    return pageSize;
  }
  public void setPageSize(Integer pageSize) {
    this.pageSize = pageSize;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GithubRepositories githubRepositories = (GithubRepositories) o;
    return (this._class == null ? githubRepositories._class == null : this._class.equals(githubRepositories._class)) &&
        (this.links == null ? githubRepositories.links == null : this.links.equals(githubRepositories.links)) &&
        (this.items == null ? githubRepositories.items == null : this.items.equals(githubRepositories.items)) &&
        (this.lastPage == null ? githubRepositories.lastPage == null : this.lastPage.equals(githubRepositories.lastPage)) &&
        (this.nextPage == null ? githubRepositories.nextPage == null : this.nextPage.equals(githubRepositories.nextPage)) &&
        (this.pageSize == null ? githubRepositories.pageSize == null : this.pageSize.equals(githubRepositories.pageSize));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this._class == null ? 0: this._class.hashCode());
    result = 31 * result + (this.links == null ? 0: this.links.hashCode());
    result = 31 * result + (this.items == null ? 0: this.items.hashCode());
    result = 31 * result + (this.lastPage == null ? 0: this.lastPage.hashCode());
    result = 31 * result + (this.nextPage == null ? 0: this.nextPage.hashCode());
    result = 31 * result + (this.pageSize == null ? 0: this.pageSize.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class GithubRepositories {\n");
    
    sb.append("  _class: ").append(_class).append("\n");
    sb.append("  links: ").append(links).append("\n");
    sb.append("  items: ").append(items).append("\n");
    sb.append("  lastPage: ").append(lastPage).append("\n");
    sb.append("  nextPage: ").append(nextPage).append("\n");
    sb.append("  pageSize: ").append(pageSize).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
