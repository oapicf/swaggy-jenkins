/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AllView".equalsIgnoreCase(className)) {
      return new TypeToken<List<AllView>>(){}.getType();
    }
    
    if ("BranchImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<BranchImpl>>(){}.getType();
    }
    
    if ("BranchImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<BranchImpllinks>>(){}.getType();
    }
    
    if ("BranchImplpermissions".equalsIgnoreCase(className)) {
      return new TypeToken<List<BranchImplpermissions>>(){}.getType();
    }
    
    if ("CauseAction".equalsIgnoreCase(className)) {
      return new TypeToken<List<CauseAction>>(){}.getType();
    }
    
    if ("CauseUserIdCause".equalsIgnoreCase(className)) {
      return new TypeToken<List<CauseUserIdCause>>(){}.getType();
    }
    
    if ("ClassesByClass".equalsIgnoreCase(className)) {
      return new TypeToken<List<ClassesByClass>>(){}.getType();
    }
    
    if ("ClockDifference".equalsIgnoreCase(className)) {
      return new TypeToken<List<ClockDifference>>(){}.getType();
    }
    
    if ("ComputerSet".equalsIgnoreCase(className)) {
      return new TypeToken<List<ComputerSet>>(){}.getType();
    }
    
    if ("DefaultCrumbIssuer".equalsIgnoreCase(className)) {
      return new TypeToken<List<DefaultCrumbIssuer>>(){}.getType();
    }
    
    if ("DiskSpaceMonitorDescriptorDiskSpace".equalsIgnoreCase(className)) {
      return new TypeToken<List<DiskSpaceMonitorDescriptorDiskSpace>>(){}.getType();
    }
    
    if ("EmptyChangeLogSet".equalsIgnoreCase(className)) {
      return new TypeToken<List<EmptyChangeLogSet>>(){}.getType();
    }
    
    if ("ExtensionClassContainerImpl1".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExtensionClassContainerImpl1>>(){}.getType();
    }
    
    if ("ExtensionClassContainerImpl1links".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExtensionClassContainerImpl1links>>(){}.getType();
    }
    
    if ("ExtensionClassContainerImpl1map".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExtensionClassContainerImpl1map>>(){}.getType();
    }
    
    if ("ExtensionClassImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExtensionClassImpl>>(){}.getType();
    }
    
    if ("ExtensionClassImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExtensionClassImpllinks>>(){}.getType();
    }
    
    if ("FavoriteImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<FavoriteImpl>>(){}.getType();
    }
    
    if ("FavoriteImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<FavoriteImpllinks>>(){}.getType();
    }
    
    if ("FreeStyleBuild".equalsIgnoreCase(className)) {
      return new TypeToken<List<FreeStyleBuild>>(){}.getType();
    }
    
    if ("FreeStyleProject".equalsIgnoreCase(className)) {
      return new TypeToken<List<FreeStyleProject>>(){}.getType();
    }
    
    if ("FreeStyleProjectactions".equalsIgnoreCase(className)) {
      return new TypeToken<List<FreeStyleProjectactions>>(){}.getType();
    }
    
    if ("FreeStyleProjecthealthReport".equalsIgnoreCase(className)) {
      return new TypeToken<List<FreeStyleProjecthealthReport>>(){}.getType();
    }
    
    if ("GenericResource".equalsIgnoreCase(className)) {
      return new TypeToken<List<GenericResource>>(){}.getType();
    }
    
    if ("GithubContent".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubContent>>(){}.getType();
    }
    
    if ("GithubFile".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubFile>>(){}.getType();
    }
    
    if ("GithubOrganization".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubOrganization>>(){}.getType();
    }
    
    if ("GithubOrganizationlinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubOrganizationlinks>>(){}.getType();
    }
    
    if ("GithubRepositories".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubRepositories>>(){}.getType();
    }
    
    if ("GithubRepositorieslinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubRepositorieslinks>>(){}.getType();
    }
    
    if ("GithubRepository".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubRepository>>(){}.getType();
    }
    
    if ("GithubRepositorylinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubRepositorylinks>>(){}.getType();
    }
    
    if ("GithubRepositorypermissions".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubRepositorypermissions>>(){}.getType();
    }
    
    if ("GithubRespositoryContainer".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubRespositoryContainer>>(){}.getType();
    }
    
    if ("GithubRespositoryContainerlinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubRespositoryContainerlinks>>(){}.getType();
    }
    
    if ("GithubScm".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubScm>>(){}.getType();
    }
    
    if ("GithubScmlinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<GithubScmlinks>>(){}.getType();
    }
    
    if ("Hudson".equalsIgnoreCase(className)) {
      return new TypeToken<List<Hudson>>(){}.getType();
    }
    
    if ("HudsonMasterComputer".equalsIgnoreCase(className)) {
      return new TypeToken<List<HudsonMasterComputer>>(){}.getType();
    }
    
    if ("HudsonMasterComputerexecutors".equalsIgnoreCase(className)) {
      return new TypeToken<List<HudsonMasterComputerexecutors>>(){}.getType();
    }
    
    if ("HudsonMasterComputermonitorData".equalsIgnoreCase(className)) {
      return new TypeToken<List<HudsonMasterComputermonitorData>>(){}.getType();
    }
    
    if ("HudsonassignedLabels".equalsIgnoreCase(className)) {
      return new TypeToken<List<HudsonassignedLabels>>(){}.getType();
    }
    
    if ("InputStepImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<InputStepImpl>>(){}.getType();
    }
    
    if ("InputStepImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<InputStepImpllinks>>(){}.getType();
    }
    
    if ("Label1".equalsIgnoreCase(className)) {
      return new TypeToken<List<Label1>>(){}.getType();
    }
    
    if ("Link".equalsIgnoreCase(className)) {
      return new TypeToken<List<Link>>(){}.getType();
    }
    
    if ("ListView".equalsIgnoreCase(className)) {
      return new TypeToken<List<ListView>>(){}.getType();
    }
    
    if ("MultibranchPipeline".equalsIgnoreCase(className)) {
      return new TypeToken<List<MultibranchPipeline>>(){}.getType();
    }
    
    if ("NullSCM".equalsIgnoreCase(className)) {
      return new TypeToken<List<NullSCM>>(){}.getType();
    }
    
    if ("Organisation".equalsIgnoreCase(className)) {
      return new TypeToken<List<Organisation>>(){}.getType();
    }
    
    if ("Pipeline".equalsIgnoreCase(className)) {
      return new TypeToken<List<Pipeline>>(){}.getType();
    }
    
    if ("PipelineActivity".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineActivity>>(){}.getType();
    }
    
    if ("PipelineActivityartifacts".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineActivityartifacts>>(){}.getType();
    }
    
    if ("PipelineBranchesitem".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineBranchesitem>>(){}.getType();
    }
    
    if ("PipelineBranchesitemlatestRun".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineBranchesitemlatestRun>>(){}.getType();
    }
    
    if ("PipelineBranchesitempullRequest".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineBranchesitempullRequest>>(){}.getType();
    }
    
    if ("PipelineBranchesitempullRequestlinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineBranchesitempullRequestlinks>>(){}.getType();
    }
    
    if ("PipelineFolderImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineFolderImpl>>(){}.getType();
    }
    
    if ("PipelineImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineImpl>>(){}.getType();
    }
    
    if ("PipelineImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineImpllinks>>(){}.getType();
    }
    
    if ("PipelineRun".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineRun>>(){}.getType();
    }
    
    if ("PipelineRunImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineRunImpl>>(){}.getType();
    }
    
    if ("PipelineRunImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineRunImpllinks>>(){}.getType();
    }
    
    if ("PipelineRunNode".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineRunNode>>(){}.getType();
    }
    
    if ("PipelineRunNodeedges".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineRunNodeedges>>(){}.getType();
    }
    
    if ("PipelineRunartifacts".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineRunartifacts>>(){}.getType();
    }
    
    if ("PipelineStepImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineStepImpl>>(){}.getType();
    }
    
    if ("PipelineStepImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelineStepImpllinks>>(){}.getType();
    }
    
    if ("PipelinelatestRun".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelinelatestRun>>(){}.getType();
    }
    
    if ("PipelinelatestRunartifacts".equalsIgnoreCase(className)) {
      return new TypeToken<List<PipelinelatestRunartifacts>>(){}.getType();
    }
    
    if ("Queue".equalsIgnoreCase(className)) {
      return new TypeToken<List<Queue>>(){}.getType();
    }
    
    if ("QueueBlockedItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueueBlockedItem>>(){}.getType();
    }
    
    if ("QueueItemImpl".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueueItemImpl>>(){}.getType();
    }
    
    if ("QueueLeftItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<QueueLeftItem>>(){}.getType();
    }
    
    if ("ResponseTimeMonitorData".equalsIgnoreCase(className)) {
      return new TypeToken<List<ResponseTimeMonitorData>>(){}.getType();
    }
    
    if ("StringParameterDefinition".equalsIgnoreCase(className)) {
      return new TypeToken<List<StringParameterDefinition>>(){}.getType();
    }
    
    if ("StringParameterValue".equalsIgnoreCase(className)) {
      return new TypeToken<List<StringParameterValue>>(){}.getType();
    }
    
    if ("SwapSpaceMonitorMemoryUsage2".equalsIgnoreCase(className)) {
      return new TypeToken<List<SwapSpaceMonitorMemoryUsage2>>(){}.getType();
    }
    
    if ("UnlabeledLoadStatistics".equalsIgnoreCase(className)) {
      return new TypeToken<List<UnlabeledLoadStatistics>>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<List<User>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AllView".equalsIgnoreCase(className)) {
      return new TypeToken<AllView>(){}.getType();
    }
    
    if ("BranchImpl".equalsIgnoreCase(className)) {
      return new TypeToken<BranchImpl>(){}.getType();
    }
    
    if ("BranchImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<BranchImpllinks>(){}.getType();
    }
    
    if ("BranchImplpermissions".equalsIgnoreCase(className)) {
      return new TypeToken<BranchImplpermissions>(){}.getType();
    }
    
    if ("CauseAction".equalsIgnoreCase(className)) {
      return new TypeToken<CauseAction>(){}.getType();
    }
    
    if ("CauseUserIdCause".equalsIgnoreCase(className)) {
      return new TypeToken<CauseUserIdCause>(){}.getType();
    }
    
    if ("ClassesByClass".equalsIgnoreCase(className)) {
      return new TypeToken<ClassesByClass>(){}.getType();
    }
    
    if ("ClockDifference".equalsIgnoreCase(className)) {
      return new TypeToken<ClockDifference>(){}.getType();
    }
    
    if ("ComputerSet".equalsIgnoreCase(className)) {
      return new TypeToken<ComputerSet>(){}.getType();
    }
    
    if ("DefaultCrumbIssuer".equalsIgnoreCase(className)) {
      return new TypeToken<DefaultCrumbIssuer>(){}.getType();
    }
    
    if ("DiskSpaceMonitorDescriptorDiskSpace".equalsIgnoreCase(className)) {
      return new TypeToken<DiskSpaceMonitorDescriptorDiskSpace>(){}.getType();
    }
    
    if ("EmptyChangeLogSet".equalsIgnoreCase(className)) {
      return new TypeToken<EmptyChangeLogSet>(){}.getType();
    }
    
    if ("ExtensionClassContainerImpl1".equalsIgnoreCase(className)) {
      return new TypeToken<ExtensionClassContainerImpl1>(){}.getType();
    }
    
    if ("ExtensionClassContainerImpl1links".equalsIgnoreCase(className)) {
      return new TypeToken<ExtensionClassContainerImpl1links>(){}.getType();
    }
    
    if ("ExtensionClassContainerImpl1map".equalsIgnoreCase(className)) {
      return new TypeToken<ExtensionClassContainerImpl1map>(){}.getType();
    }
    
    if ("ExtensionClassImpl".equalsIgnoreCase(className)) {
      return new TypeToken<ExtensionClassImpl>(){}.getType();
    }
    
    if ("ExtensionClassImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<ExtensionClassImpllinks>(){}.getType();
    }
    
    if ("FavoriteImpl".equalsIgnoreCase(className)) {
      return new TypeToken<FavoriteImpl>(){}.getType();
    }
    
    if ("FavoriteImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<FavoriteImpllinks>(){}.getType();
    }
    
    if ("FreeStyleBuild".equalsIgnoreCase(className)) {
      return new TypeToken<FreeStyleBuild>(){}.getType();
    }
    
    if ("FreeStyleProject".equalsIgnoreCase(className)) {
      return new TypeToken<FreeStyleProject>(){}.getType();
    }
    
    if ("FreeStyleProjectactions".equalsIgnoreCase(className)) {
      return new TypeToken<FreeStyleProjectactions>(){}.getType();
    }
    
    if ("FreeStyleProjecthealthReport".equalsIgnoreCase(className)) {
      return new TypeToken<FreeStyleProjecthealthReport>(){}.getType();
    }
    
    if ("GenericResource".equalsIgnoreCase(className)) {
      return new TypeToken<GenericResource>(){}.getType();
    }
    
    if ("GithubContent".equalsIgnoreCase(className)) {
      return new TypeToken<GithubContent>(){}.getType();
    }
    
    if ("GithubFile".equalsIgnoreCase(className)) {
      return new TypeToken<GithubFile>(){}.getType();
    }
    
    if ("GithubOrganization".equalsIgnoreCase(className)) {
      return new TypeToken<GithubOrganization>(){}.getType();
    }
    
    if ("GithubOrganizationlinks".equalsIgnoreCase(className)) {
      return new TypeToken<GithubOrganizationlinks>(){}.getType();
    }
    
    if ("GithubRepositories".equalsIgnoreCase(className)) {
      return new TypeToken<GithubRepositories>(){}.getType();
    }
    
    if ("GithubRepositorieslinks".equalsIgnoreCase(className)) {
      return new TypeToken<GithubRepositorieslinks>(){}.getType();
    }
    
    if ("GithubRepository".equalsIgnoreCase(className)) {
      return new TypeToken<GithubRepository>(){}.getType();
    }
    
    if ("GithubRepositorylinks".equalsIgnoreCase(className)) {
      return new TypeToken<GithubRepositorylinks>(){}.getType();
    }
    
    if ("GithubRepositorypermissions".equalsIgnoreCase(className)) {
      return new TypeToken<GithubRepositorypermissions>(){}.getType();
    }
    
    if ("GithubRespositoryContainer".equalsIgnoreCase(className)) {
      return new TypeToken<GithubRespositoryContainer>(){}.getType();
    }
    
    if ("GithubRespositoryContainerlinks".equalsIgnoreCase(className)) {
      return new TypeToken<GithubRespositoryContainerlinks>(){}.getType();
    }
    
    if ("GithubScm".equalsIgnoreCase(className)) {
      return new TypeToken<GithubScm>(){}.getType();
    }
    
    if ("GithubScmlinks".equalsIgnoreCase(className)) {
      return new TypeToken<GithubScmlinks>(){}.getType();
    }
    
    if ("Hudson".equalsIgnoreCase(className)) {
      return new TypeToken<Hudson>(){}.getType();
    }
    
    if ("HudsonMasterComputer".equalsIgnoreCase(className)) {
      return new TypeToken<HudsonMasterComputer>(){}.getType();
    }
    
    if ("HudsonMasterComputerexecutors".equalsIgnoreCase(className)) {
      return new TypeToken<HudsonMasterComputerexecutors>(){}.getType();
    }
    
    if ("HudsonMasterComputermonitorData".equalsIgnoreCase(className)) {
      return new TypeToken<HudsonMasterComputermonitorData>(){}.getType();
    }
    
    if ("HudsonassignedLabels".equalsIgnoreCase(className)) {
      return new TypeToken<HudsonassignedLabels>(){}.getType();
    }
    
    if ("InputStepImpl".equalsIgnoreCase(className)) {
      return new TypeToken<InputStepImpl>(){}.getType();
    }
    
    if ("InputStepImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<InputStepImpllinks>(){}.getType();
    }
    
    if ("Label1".equalsIgnoreCase(className)) {
      return new TypeToken<Label1>(){}.getType();
    }
    
    if ("Link".equalsIgnoreCase(className)) {
      return new TypeToken<Link>(){}.getType();
    }
    
    if ("ListView".equalsIgnoreCase(className)) {
      return new TypeToken<ListView>(){}.getType();
    }
    
    if ("MultibranchPipeline".equalsIgnoreCase(className)) {
      return new TypeToken<MultibranchPipeline>(){}.getType();
    }
    
    if ("NullSCM".equalsIgnoreCase(className)) {
      return new TypeToken<NullSCM>(){}.getType();
    }
    
    if ("Organisation".equalsIgnoreCase(className)) {
      return new TypeToken<Organisation>(){}.getType();
    }
    
    if ("Pipeline".equalsIgnoreCase(className)) {
      return new TypeToken<Pipeline>(){}.getType();
    }
    
    if ("PipelineActivity".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineActivity>(){}.getType();
    }
    
    if ("PipelineActivityartifacts".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineActivityartifacts>(){}.getType();
    }
    
    if ("PipelineBranchesitem".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineBranchesitem>(){}.getType();
    }
    
    if ("PipelineBranchesitemlatestRun".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineBranchesitemlatestRun>(){}.getType();
    }
    
    if ("PipelineBranchesitempullRequest".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineBranchesitempullRequest>(){}.getType();
    }
    
    if ("PipelineBranchesitempullRequestlinks".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineBranchesitempullRequestlinks>(){}.getType();
    }
    
    if ("PipelineFolderImpl".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineFolderImpl>(){}.getType();
    }
    
    if ("PipelineImpl".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineImpl>(){}.getType();
    }
    
    if ("PipelineImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineImpllinks>(){}.getType();
    }
    
    if ("PipelineRun".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineRun>(){}.getType();
    }
    
    if ("PipelineRunImpl".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineRunImpl>(){}.getType();
    }
    
    if ("PipelineRunImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineRunImpllinks>(){}.getType();
    }
    
    if ("PipelineRunNode".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineRunNode>(){}.getType();
    }
    
    if ("PipelineRunNodeedges".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineRunNodeedges>(){}.getType();
    }
    
    if ("PipelineRunartifacts".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineRunartifacts>(){}.getType();
    }
    
    if ("PipelineStepImpl".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineStepImpl>(){}.getType();
    }
    
    if ("PipelineStepImpllinks".equalsIgnoreCase(className)) {
      return new TypeToken<PipelineStepImpllinks>(){}.getType();
    }
    
    if ("PipelinelatestRun".equalsIgnoreCase(className)) {
      return new TypeToken<PipelinelatestRun>(){}.getType();
    }
    
    if ("PipelinelatestRunartifacts".equalsIgnoreCase(className)) {
      return new TypeToken<PipelinelatestRunartifacts>(){}.getType();
    }
    
    if ("Queue".equalsIgnoreCase(className)) {
      return new TypeToken<Queue>(){}.getType();
    }
    
    if ("QueueBlockedItem".equalsIgnoreCase(className)) {
      return new TypeToken<QueueBlockedItem>(){}.getType();
    }
    
    if ("QueueItemImpl".equalsIgnoreCase(className)) {
      return new TypeToken<QueueItemImpl>(){}.getType();
    }
    
    if ("QueueLeftItem".equalsIgnoreCase(className)) {
      return new TypeToken<QueueLeftItem>(){}.getType();
    }
    
    if ("ResponseTimeMonitorData".equalsIgnoreCase(className)) {
      return new TypeToken<ResponseTimeMonitorData>(){}.getType();
    }
    
    if ("StringParameterDefinition".equalsIgnoreCase(className)) {
      return new TypeToken<StringParameterDefinition>(){}.getType();
    }
    
    if ("StringParameterValue".equalsIgnoreCase(className)) {
      return new TypeToken<StringParameterValue>(){}.getType();
    }
    
    if ("SwapSpaceMonitorMemoryUsage2".equalsIgnoreCase(className)) {
      return new TypeToken<SwapSpaceMonitorMemoryUsage2>(){}.getType();
    }
    
    if ("UnlabeledLoadStatistics".equalsIgnoreCase(className)) {
      return new TypeToken<UnlabeledLoadStatistics>(){}.getType();
    }
    
    if ("User".equalsIgnoreCase(className)) {
      return new TypeToken<User>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
