/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.BranchImpl;
import org.openapitools.client.model.FavoriteImpl;
import org.openapitools.client.model.GithubOrganization;
import org.openapitools.client.model.GithubScm;
import java.util.*;
import org.openapitools.client.model.MultibranchPipeline;
import org.openapitools.client.model.Organisation;
import org.openapitools.client.model.Pipeline;
import org.openapitools.client.model.PipelineActivity;
import org.openapitools.client.model.PipelineFolderImpl;
import org.openapitools.client.model.PipelineImpl;
import org.openapitools.client.model.PipelineRun;
import org.openapitools.client.model.PipelineRunNode;
import org.openapitools.client.model.PipelineStepImpl;
import org.openapitools.client.model.QueueItemImpl;
import org.openapitools.client.model.User;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BlueOceanApi {
  String basePath = "http://localhost";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Delete queue item from an organization pipeline queue
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param queue Name of the queue item
   * @return void
  */
  public void deletePipelineQueueItem (String organization, String pipeline, String queue) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling deletePipelineQueueItem",
        new ApiException(400, "Missing the required parameter 'organization' when calling deletePipelineQueueItem"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling deletePipelineQueueItem",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling deletePipelineQueueItem"));
    }
    // verify the required parameter 'queue' is set
    if (queue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queue' when calling deletePipelineQueueItem",
        new ApiException(400, "Missing the required parameter 'queue' when calling deletePipelineQueueItem"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "queue" + "\\}", apiInvoker.escapeString(queue.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Delete queue item from an organization pipeline queue
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param queue Name of the queue item
  */
  public void deletePipelineQueueItem (String organization, String pipeline, String queue, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling deletePipelineQueueItem",
        new ApiException(400, "Missing the required parameter 'organization' when calling deletePipelineQueueItem"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling deletePipelineQueueItem",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling deletePipelineQueueItem"));
    }
    // verify the required parameter 'queue' is set
    if (queue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'queue' when calling deletePipelineQueueItem",
        new ApiException(400, "Missing the required parameter 'queue' when calling deletePipelineQueueItem"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "queue" + "\\}", apiInvoker.escapeString(queue.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve authenticated user details for an organization
   * @param organization Name of the organization
   * @return User
  */
  public User getAuthenticatedUser (String organization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getAuthenticatedUser",
        new ApiException(400, "Missing the required parameter 'organization' when calling getAuthenticatedUser"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/user/".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve authenticated user details for an organization
   * @param organization Name of the organization
  */
  public void getAuthenticatedUser (String organization, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getAuthenticatedUser",
        new ApiException(400, "Missing the required parameter 'organization' when calling getAuthenticatedUser"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/user/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get a list of class names supported by a given class
   * @param _class Name of the class
   * @return String
  */
  public String getClasses (String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling getClasses",
        new ApiException(400, "Missing the required parameter '_class' when calling getClasses"));
    }

    // create path and map variables
    String path = "/blue/rest/classes/{class}".replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get a list of class names supported by a given class
   * @param _class Name of the class
  */
  public void getClasses (String _class, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling getClasses",
        new ApiException(400, "Missing the required parameter '_class' when calling getClasses"));
    }

    // create path and map variables
    String path = "/blue/rest/classes/{class}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve JSON Web Key
   * @param key Key ID received as part of JWT header field kid
   * @return String
  */
  public String getJsonWebKey (Integer key) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling getJsonWebKey",
        new ApiException(400, "Missing the required parameter 'key' when calling getJsonWebKey"));
    }

    // create path and map variables
    String path = "/jwt-auth/jwks/{key}".replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve JSON Web Key
   * @param key Key ID received as part of JWT header field kid
  */
  public void getJsonWebKey (Integer key, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'key' is set
    if (key == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'key' when calling getJsonWebKey",
        new ApiException(400, "Missing the required parameter 'key' when calling getJsonWebKey"));
    }

    // create path and map variables
    String path = "/jwt-auth/jwks/{key}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "key" + "\\}", apiInvoker.escapeString(key.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve JSON Web Token
   * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes
   * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
   * @return String
  */
  public String getJsonWebToken (Integer expiryTimeInMins, Integer maxExpiryTimeInMins) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/jwt-auth/token";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "expiryTimeInMins", expiryTimeInMins));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxExpiryTimeInMins", maxExpiryTimeInMins));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve JSON Web Token
   * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes   * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
  */
  public void getJsonWebToken (Integer expiryTimeInMins, Integer maxExpiryTimeInMins, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/jwt-auth/token".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "expiryTimeInMins", expiryTimeInMins));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "maxExpiryTimeInMins", maxExpiryTimeInMins));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve organization details
   * @param organization Name of the organization
   * @return Organisation
  */
  public Organisation getOrganisation (String organization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getOrganisation",
        new ApiException(400, "Missing the required parameter 'organization' when calling getOrganisation"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Organisation) ApiInvoker.deserialize(localVarResponse, "", Organisation.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve organization details
   * @param organization Name of the organization
  */
  public void getOrganisation (String organization, final Response.Listener<Organisation> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getOrganisation",
        new ApiException(400, "Missing the required parameter 'organization' when calling getOrganisation"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Organisation) ApiInvoker.deserialize(localVarResponse,  "", Organisation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all organizations details
   * @return List<Organisation>
  */
  public List<Organisation> getOrganisations () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/blue/rest/organizations/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Organisation>) ApiInvoker.deserialize(localVarResponse, "array", Organisation.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve all organizations details

  */
  public void getOrganisations (final Response.Listener<List<Organisation>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/blue/rest/organizations/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Organisation>) ApiInvoker.deserialize(localVarResponse,  "array", Organisation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve pipeline details for an organization
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @return Pipeline
  */
  public Pipeline getPipeline (String organization, String pipeline) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipeline",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipeline"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipeline",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipeline"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Pipeline) ApiInvoker.deserialize(localVarResponse, "", Pipeline.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve pipeline details for an organization
   * @param organization Name of the organization   * @param pipeline Name of the pipeline
  */
  public void getPipeline (String organization, String pipeline, final Response.Listener<Pipeline> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipeline",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipeline"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipeline",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipeline"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Pipeline) ApiInvoker.deserialize(localVarResponse,  "", Pipeline.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all activities details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @return List<PipelineActivity>
  */
  public List<PipelineActivity> getPipelineActivities (String organization, String pipeline) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineActivities",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineActivities"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineActivities",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineActivities"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PipelineActivity>) ApiInvoker.deserialize(localVarResponse, "array", PipelineActivity.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve all activities details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline
  */
  public void getPipelineActivities (String organization, String pipeline, final Response.Listener<List<PipelineActivity>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineActivities",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineActivities"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineActivities",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineActivities"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PipelineActivity>) ApiInvoker.deserialize(localVarResponse,  "array", PipelineActivity.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve branch details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param branch Name of the branch
   * @return BranchImpl
  */
  public BranchImpl getPipelineBranch (String organization, String pipeline, String branch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineBranch",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineBranch"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranch",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranch"));
    }
    // verify the required parameter 'branch' is set
    if (branch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branch' when calling getPipelineBranch",
        new ApiException(400, "Missing the required parameter 'branch' when calling getPipelineBranch"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "branch" + "\\}", apiInvoker.escapeString(branch.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (BranchImpl) ApiInvoker.deserialize(localVarResponse, "", BranchImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve branch details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param branch Name of the branch
  */
  public void getPipelineBranch (String organization, String pipeline, String branch, final Response.Listener<BranchImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineBranch",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineBranch"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranch",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranch"));
    }
    // verify the required parameter 'branch' is set
    if (branch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branch' when calling getPipelineBranch",
        new ApiException(400, "Missing the required parameter 'branch' when calling getPipelineBranch"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "branch" + "\\}", apiInvoker.escapeString(branch.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BranchImpl) ApiInvoker.deserialize(localVarResponse,  "", BranchImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve branch run details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param branch Name of the branch
   * @param run Name of the run
   * @return PipelineRun
  */
  public PipelineRun getPipelineBranchRun (String organization, String pipeline, String branch, String run) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineBranchRun",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineBranchRun"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranchRun",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranchRun"));
    }
    // verify the required parameter 'branch' is set
    if (branch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branch' when calling getPipelineBranchRun",
        new ApiException(400, "Missing the required parameter 'branch' when calling getPipelineBranchRun"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineBranchRun",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineBranchRun"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "branch" + "\\}", apiInvoker.escapeString(branch.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineRun) ApiInvoker.deserialize(localVarResponse, "", PipelineRun.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve branch run details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param branch Name of the branch   * @param run Name of the run
  */
  public void getPipelineBranchRun (String organization, String pipeline, String branch, String run, final Response.Listener<PipelineRun> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineBranchRun",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineBranchRun"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranchRun",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranchRun"));
    }
    // verify the required parameter 'branch' is set
    if (branch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branch' when calling getPipelineBranchRun",
        new ApiException(400, "Missing the required parameter 'branch' when calling getPipelineBranchRun"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineBranchRun",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineBranchRun"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "branch" + "\\}", apiInvoker.escapeString(branch.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineRun) ApiInvoker.deserialize(localVarResponse,  "", PipelineRun.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all branches details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @return MultibranchPipeline
  */
  public MultibranchPipeline getPipelineBranches (String organization, String pipeline) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineBranches",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineBranches"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranches",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranches"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (MultibranchPipeline) ApiInvoker.deserialize(localVarResponse, "", MultibranchPipeline.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve all branches details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline
  */
  public void getPipelineBranches (String organization, String pipeline, final Response.Listener<MultibranchPipeline> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineBranches",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineBranches"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranches",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranches"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MultibranchPipeline) ApiInvoker.deserialize(localVarResponse,  "", MultibranchPipeline.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve pipeline folder for an organization
   * @param organization Name of the organization
   * @param folder Name of the folder
   * @return PipelineFolderImpl
  */
  public PipelineFolderImpl getPipelineFolder (String organization, String folder) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineFolder",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineFolder"));
    }
    // verify the required parameter 'folder' is set
    if (folder == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'folder' when calling getPipelineFolder",
        new ApiException(400, "Missing the required parameter 'folder' when calling getPipelineFolder"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{folder}/".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "folder" + "\\}", apiInvoker.escapeString(folder.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineFolderImpl) ApiInvoker.deserialize(localVarResponse, "", PipelineFolderImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve pipeline folder for an organization
   * @param organization Name of the organization   * @param folder Name of the folder
  */
  public void getPipelineFolder (String organization, String folder, final Response.Listener<PipelineFolderImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineFolder",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineFolder"));
    }
    // verify the required parameter 'folder' is set
    if (folder == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'folder' when calling getPipelineFolder",
        new ApiException(400, "Missing the required parameter 'folder' when calling getPipelineFolder"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{folder}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "folder" + "\\}", apiInvoker.escapeString(folder.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineFolderImpl) ApiInvoker.deserialize(localVarResponse,  "", PipelineFolderImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve pipeline details for an organization folder
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param folder Name of the folder
   * @return PipelineImpl
  */
  public PipelineImpl getPipelineFolderPipeline (String organization, String pipeline, String folder) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineFolderPipeline",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineFolderPipeline"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineFolderPipeline",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineFolderPipeline"));
    }
    // verify the required parameter 'folder' is set
    if (folder == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'folder' when calling getPipelineFolderPipeline",
        new ApiException(400, "Missing the required parameter 'folder' when calling getPipelineFolderPipeline"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "folder" + "\\}", apiInvoker.escapeString(folder.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineImpl) ApiInvoker.deserialize(localVarResponse, "", PipelineImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve pipeline details for an organization folder
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param folder Name of the folder
  */
  public void getPipelineFolderPipeline (String organization, String pipeline, String folder, final Response.Listener<PipelineImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineFolderPipeline",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineFolderPipeline"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineFolderPipeline",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineFolderPipeline"));
    }
    // verify the required parameter 'folder' is set
    if (folder == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'folder' when calling getPipelineFolderPipeline",
        new ApiException(400, "Missing the required parameter 'folder' when calling getPipelineFolderPipeline"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "folder" + "\\}", apiInvoker.escapeString(folder.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineImpl) ApiInvoker.deserialize(localVarResponse,  "", PipelineImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve queue details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @return List<QueueItemImpl>
  */
  public List<QueueItemImpl> getPipelineQueue (String organization, String pipeline) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineQueue",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineQueue"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineQueue",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineQueue"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<QueueItemImpl>) ApiInvoker.deserialize(localVarResponse, "array", QueueItemImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve queue details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline
  */
  public void getPipelineQueue (String organization, String pipeline, final Response.Listener<List<QueueItemImpl>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineQueue",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineQueue"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineQueue",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineQueue"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<QueueItemImpl>) ApiInvoker.deserialize(localVarResponse,  "array", QueueItemImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve run details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @return PipelineRun
  */
  public PipelineRun getPipelineRun (String organization, String pipeline, String run) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRun",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRun"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRun",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRun"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRun",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRun"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineRun) ApiInvoker.deserialize(localVarResponse, "", PipelineRun.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve run details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run
  */
  public void getPipelineRun (String organization, String pipeline, String run, final Response.Listener<PipelineRun> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRun",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRun"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRun",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRun"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRun",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRun"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineRun) ApiInvoker.deserialize(localVarResponse,  "", PipelineRun.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get log for a pipeline run
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param start Start position of the log
   * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body
   * @return String
  */
  public String getPipelineRunLog (String organization, String pipeline, String run, Integer start, Boolean download) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunLog",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunLog"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunLog",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunLog"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunLog",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunLog"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "download", download));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get log for a pipeline run
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run   * @param start Start position of the log   * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body
  */
  public void getPipelineRunLog (String organization, String pipeline, String run, Integer start, Boolean download, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunLog",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunLog"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunLog",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunLog"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunLog",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunLog"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "download", download));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve run node details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param node Name of the node
   * @return PipelineRunNode
  */
  public PipelineRunNode getPipelineRunNode (String organization, String pipeline, String run, String node) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNode",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNode"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNode",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNode"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNode",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNode"));
    }
    // verify the required parameter 'node' is set
    if (node == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'node' when calling getPipelineRunNode",
        new ApiException(400, "Missing the required parameter 'node' when calling getPipelineRunNode"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString())).replaceAll("\\{" + "node" + "\\}", apiInvoker.escapeString(node.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineRunNode) ApiInvoker.deserialize(localVarResponse, "", PipelineRunNode.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve run node details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run   * @param node Name of the node
  */
  public void getPipelineRunNode (String organization, String pipeline, String run, String node, final Response.Listener<PipelineRunNode> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNode",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNode"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNode",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNode"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNode",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNode"));
    }
    // verify the required parameter 'node' is set
    if (node == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'node' when calling getPipelineRunNode",
        new ApiException(400, "Missing the required parameter 'node' when calling getPipelineRunNode"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString())).replaceAll("\\{" + "node" + "\\}", apiInvoker.escapeString(node.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineRunNode) ApiInvoker.deserialize(localVarResponse,  "", PipelineRunNode.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve run node details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param node Name of the node
   * @param step Name of the step
   * @return PipelineStepImpl
  */
  public PipelineStepImpl getPipelineRunNodeStep (String organization, String pipeline, String run, String node, String step) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNodeStep"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNodeStep"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNodeStep"));
    }
    // verify the required parameter 'node' is set
    if (node == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'node' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'node' when calling getPipelineRunNodeStep"));
    }
    // verify the required parameter 'step' is set
    if (step == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'step' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'step' when calling getPipelineRunNodeStep"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString())).replaceAll("\\{" + "node" + "\\}", apiInvoker.escapeString(node.toString())).replaceAll("\\{" + "step" + "\\}", apiInvoker.escapeString(step.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineStepImpl) ApiInvoker.deserialize(localVarResponse, "", PipelineStepImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve run node details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run   * @param node Name of the node   * @param step Name of the step
  */
  public void getPipelineRunNodeStep (String organization, String pipeline, String run, String node, String step, final Response.Listener<PipelineStepImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNodeStep"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNodeStep"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNodeStep"));
    }
    // verify the required parameter 'node' is set
    if (node == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'node' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'node' when calling getPipelineRunNodeStep"));
    }
    // verify the required parameter 'step' is set
    if (step == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'step' when calling getPipelineRunNodeStep",
        new ApiException(400, "Missing the required parameter 'step' when calling getPipelineRunNodeStep"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString())).replaceAll("\\{" + "node" + "\\}", apiInvoker.escapeString(node.toString())).replaceAll("\\{" + "step" + "\\}", apiInvoker.escapeString(step.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineStepImpl) ApiInvoker.deserialize(localVarResponse,  "", PipelineStepImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get log for a pipeline run node step
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param node Name of the node
   * @param step Name of the step
   * @return String
  */
  public String getPipelineRunNodeStepLog (String organization, String pipeline, String run, String node, String step) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNodeStepLog"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNodeStepLog"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNodeStepLog"));
    }
    // verify the required parameter 'node' is set
    if (node == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'node' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'node' when calling getPipelineRunNodeStepLog"));
    }
    // verify the required parameter 'step' is set
    if (step == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'step' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'step' when calling getPipelineRunNodeStepLog"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString())).replaceAll("\\{" + "node" + "\\}", apiInvoker.escapeString(node.toString())).replaceAll("\\{" + "step" + "\\}", apiInvoker.escapeString(step.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get log for a pipeline run node step
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run   * @param node Name of the node   * @param step Name of the step
  */
  public void getPipelineRunNodeStepLog (String organization, String pipeline, String run, String node, String step, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNodeStepLog"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNodeStepLog"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNodeStepLog"));
    }
    // verify the required parameter 'node' is set
    if (node == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'node' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'node' when calling getPipelineRunNodeStepLog"));
    }
    // verify the required parameter 'step' is set
    if (step == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'step' when calling getPipelineRunNodeStepLog",
        new ApiException(400, "Missing the required parameter 'step' when calling getPipelineRunNodeStepLog"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString())).replaceAll("\\{" + "node" + "\\}", apiInvoker.escapeString(node.toString())).replaceAll("\\{" + "step" + "\\}", apiInvoker.escapeString(step.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve run node steps details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param node Name of the node
   * @return List<PipelineStepImpl>
  */
  public List<PipelineStepImpl> getPipelineRunNodeSteps (String organization, String pipeline, String run, String node) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNodeSteps",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNodeSteps"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNodeSteps",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNodeSteps"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNodeSteps",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNodeSteps"));
    }
    // verify the required parameter 'node' is set
    if (node == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'node' when calling getPipelineRunNodeSteps",
        new ApiException(400, "Missing the required parameter 'node' when calling getPipelineRunNodeSteps"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString())).replaceAll("\\{" + "node" + "\\}", apiInvoker.escapeString(node.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PipelineStepImpl>) ApiInvoker.deserialize(localVarResponse, "array", PipelineStepImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve run node steps details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run   * @param node Name of the node
  */
  public void getPipelineRunNodeSteps (String organization, String pipeline, String run, String node, final Response.Listener<List<PipelineStepImpl>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNodeSteps",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNodeSteps"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNodeSteps",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNodeSteps"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNodeSteps",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNodeSteps"));
    }
    // verify the required parameter 'node' is set
    if (node == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'node' when calling getPipelineRunNodeSteps",
        new ApiException(400, "Missing the required parameter 'node' when calling getPipelineRunNodeSteps"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString())).replaceAll("\\{" + "node" + "\\}", apiInvoker.escapeString(node.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PipelineStepImpl>) ApiInvoker.deserialize(localVarResponse,  "array", PipelineStepImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve run nodes details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @return List<PipelineRunNode>
  */
  public List<PipelineRunNode> getPipelineRunNodes (String organization, String pipeline, String run) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNodes",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNodes"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNodes",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNodes"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNodes",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNodes"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PipelineRunNode>) ApiInvoker.deserialize(localVarResponse, "array", PipelineRunNode.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve run nodes details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run
  */
  public void getPipelineRunNodes (String organization, String pipeline, String run, final Response.Listener<List<PipelineRunNode>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRunNodes",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRunNodes"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRunNodes",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRunNodes"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling getPipelineRunNodes",
        new ApiException(400, "Missing the required parameter 'run' when calling getPipelineRunNodes"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PipelineRunNode>) ApiInvoker.deserialize(localVarResponse,  "array", PipelineRunNode.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all runs details for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @return List<PipelineRun>
  */
  public List<PipelineRun> getPipelineRuns (String organization, String pipeline) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRuns",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRuns"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRuns",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRuns"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<PipelineRun>) ApiInvoker.deserialize(localVarResponse, "array", PipelineRun.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve all runs details for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline
  */
  public void getPipelineRuns (String organization, String pipeline, final Response.Listener<List<PipelineRun>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelineRuns",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelineRuns"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineRuns",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineRuns"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<PipelineRun>) ApiInvoker.deserialize(localVarResponse,  "array", PipelineRun.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all pipelines details for an organization
   * @param organization Name of the organization
   * @return List<Pipeline>
  */
  public List<Pipeline> getPipelines (String organization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelines",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelines"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Pipeline>) ApiInvoker.deserialize(localVarResponse, "array", Pipeline.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve all pipelines details for an organization
   * @param organization Name of the organization
  */
  public void getPipelines (String organization, final Response.Listener<List<Pipeline>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getPipelines",
        new ApiException(400, "Missing the required parameter 'organization' when calling getPipelines"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Pipeline>) ApiInvoker.deserialize(localVarResponse,  "array", Pipeline.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve SCM details for an organization
   * @param organization Name of the organization
   * @param scm Name of SCM
   * @return GithubScm
  */
  public GithubScm getSCM (String organization, String scm) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getSCM",
        new ApiException(400, "Missing the required parameter 'organization' when calling getSCM"));
    }
    // verify the required parameter 'scm' is set
    if (scm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scm' when calling getSCM",
        new ApiException(400, "Missing the required parameter 'scm' when calling getSCM"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/scm/{scm}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "scm" + "\\}", apiInvoker.escapeString(scm.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GithubScm) ApiInvoker.deserialize(localVarResponse, "", GithubScm.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve SCM details for an organization
   * @param organization Name of the organization   * @param scm Name of SCM
  */
  public void getSCM (String organization, String scm, final Response.Listener<GithubScm> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getSCM",
        new ApiException(400, "Missing the required parameter 'organization' when calling getSCM"));
    }
    // verify the required parameter 'scm' is set
    if (scm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scm' when calling getSCM",
        new ApiException(400, "Missing the required parameter 'scm' when calling getSCM"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/scm/{scm}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "scm" + "\\}", apiInvoker.escapeString(scm.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GithubScm) ApiInvoker.deserialize(localVarResponse,  "", GithubScm.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve SCM organization repositories details for an organization
   * @param organization Name of the organization
   * @param scm Name of SCM
   * @param scmOrganisation Name of the SCM organization
   * @param credentialId Credential ID
   * @param pageSize Number of items in a page
   * @param pageNumber Page number
   * @return List<GithubOrganization>
  */
  public List<GithubOrganization> getSCMOrganisationRepositories (String organization, String scm, String scmOrganisation, String credentialId, Integer pageSize, Integer pageNumber) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getSCMOrganisationRepositories",
        new ApiException(400, "Missing the required parameter 'organization' when calling getSCMOrganisationRepositories"));
    }
    // verify the required parameter 'scm' is set
    if (scm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scm' when calling getSCMOrganisationRepositories",
        new ApiException(400, "Missing the required parameter 'scm' when calling getSCMOrganisationRepositories"));
    }
    // verify the required parameter 'scmOrganisation' is set
    if (scmOrganisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepositories",
        new ApiException(400, "Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepositories"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "scm" + "\\}", apiInvoker.escapeString(scm.toString())).replaceAll("\\{" + "scmOrganisation" + "\\}", apiInvoker.escapeString(scmOrganisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentialId", credentialId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageNumber", pageNumber));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GithubOrganization>) ApiInvoker.deserialize(localVarResponse, "array", GithubOrganization.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve SCM organization repositories details for an organization
   * @param organization Name of the organization   * @param scm Name of SCM   * @param scmOrganisation Name of the SCM organization   * @param credentialId Credential ID   * @param pageSize Number of items in a page   * @param pageNumber Page number
  */
  public void getSCMOrganisationRepositories (String organization, String scm, String scmOrganisation, String credentialId, Integer pageSize, Integer pageNumber, final Response.Listener<List<GithubOrganization>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getSCMOrganisationRepositories",
        new ApiException(400, "Missing the required parameter 'organization' when calling getSCMOrganisationRepositories"));
    }
    // verify the required parameter 'scm' is set
    if (scm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scm' when calling getSCMOrganisationRepositories",
        new ApiException(400, "Missing the required parameter 'scm' when calling getSCMOrganisationRepositories"));
    }
    // verify the required parameter 'scmOrganisation' is set
    if (scmOrganisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepositories",
        new ApiException(400, "Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepositories"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "scm" + "\\}", apiInvoker.escapeString(scm.toString())).replaceAll("\\{" + "scmOrganisation" + "\\}", apiInvoker.escapeString(scmOrganisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentialId", credentialId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageSize", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "pageNumber", pageNumber));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GithubOrganization>) ApiInvoker.deserialize(localVarResponse,  "array", GithubOrganization.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve SCM organization repository details for an organization
   * @param organization Name of the organization
   * @param scm Name of SCM
   * @param scmOrganisation Name of the SCM organization
   * @param repository Name of the SCM repository
   * @param credentialId Credential ID
   * @return List<GithubOrganization>
  */
  public List<GithubOrganization> getSCMOrganisationRepository (String organization, String scm, String scmOrganisation, String repository, String credentialId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getSCMOrganisationRepository",
        new ApiException(400, "Missing the required parameter 'organization' when calling getSCMOrganisationRepository"));
    }
    // verify the required parameter 'scm' is set
    if (scm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scm' when calling getSCMOrganisationRepository",
        new ApiException(400, "Missing the required parameter 'scm' when calling getSCMOrganisationRepository"));
    }
    // verify the required parameter 'scmOrganisation' is set
    if (scmOrganisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepository",
        new ApiException(400, "Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepository"));
    }
    // verify the required parameter 'repository' is set
    if (repository == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'repository' when calling getSCMOrganisationRepository",
        new ApiException(400, "Missing the required parameter 'repository' when calling getSCMOrganisationRepository"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "scm" + "\\}", apiInvoker.escapeString(scm.toString())).replaceAll("\\{" + "scmOrganisation" + "\\}", apiInvoker.escapeString(scmOrganisation.toString())).replaceAll("\\{" + "repository" + "\\}", apiInvoker.escapeString(repository.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentialId", credentialId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GithubOrganization>) ApiInvoker.deserialize(localVarResponse, "array", GithubOrganization.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve SCM organization repository details for an organization
   * @param organization Name of the organization   * @param scm Name of SCM   * @param scmOrganisation Name of the SCM organization   * @param repository Name of the SCM repository   * @param credentialId Credential ID
  */
  public void getSCMOrganisationRepository (String organization, String scm, String scmOrganisation, String repository, String credentialId, final Response.Listener<List<GithubOrganization>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getSCMOrganisationRepository",
        new ApiException(400, "Missing the required parameter 'organization' when calling getSCMOrganisationRepository"));
    }
    // verify the required parameter 'scm' is set
    if (scm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scm' when calling getSCMOrganisationRepository",
        new ApiException(400, "Missing the required parameter 'scm' when calling getSCMOrganisationRepository"));
    }
    // verify the required parameter 'scmOrganisation' is set
    if (scmOrganisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepository",
        new ApiException(400, "Missing the required parameter 'scmOrganisation' when calling getSCMOrganisationRepository"));
    }
    // verify the required parameter 'repository' is set
    if (repository == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'repository' when calling getSCMOrganisationRepository",
        new ApiException(400, "Missing the required parameter 'repository' when calling getSCMOrganisationRepository"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "scm" + "\\}", apiInvoker.escapeString(scm.toString())).replaceAll("\\{" + "scmOrganisation" + "\\}", apiInvoker.escapeString(scmOrganisation.toString())).replaceAll("\\{" + "repository" + "\\}", apiInvoker.escapeString(repository.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentialId", credentialId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GithubOrganization>) ApiInvoker.deserialize(localVarResponse,  "array", GithubOrganization.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve SCM organizations details for an organization
   * @param organization Name of the organization
   * @param scm Name of SCM
   * @param credentialId Credential ID
   * @return List<GithubOrganization>
  */
  public List<GithubOrganization> getSCMOrganisations (String organization, String scm, String credentialId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getSCMOrganisations",
        new ApiException(400, "Missing the required parameter 'organization' when calling getSCMOrganisations"));
    }
    // verify the required parameter 'scm' is set
    if (scm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scm' when calling getSCMOrganisations",
        new ApiException(400, "Missing the required parameter 'scm' when calling getSCMOrganisations"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "scm" + "\\}", apiInvoker.escapeString(scm.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentialId", credentialId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<GithubOrganization>) ApiInvoker.deserialize(localVarResponse, "array", GithubOrganization.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve SCM organizations details for an organization
   * @param organization Name of the organization   * @param scm Name of SCM   * @param credentialId Credential ID
  */
  public void getSCMOrganisations (String organization, String scm, String credentialId, final Response.Listener<List<GithubOrganization>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getSCMOrganisations",
        new ApiException(400, "Missing the required parameter 'organization' when calling getSCMOrganisations"));
    }
    // verify the required parameter 'scm' is set
    if (scm == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'scm' when calling getSCMOrganisations",
        new ApiException(400, "Missing the required parameter 'scm' when calling getSCMOrganisations"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/scm/{scm}/organizations".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "scm" + "\\}", apiInvoker.escapeString(scm.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "credentialId", credentialId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<GithubOrganization>) ApiInvoker.deserialize(localVarResponse,  "array", GithubOrganization.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve user details for an organization
   * @param organization Name of the organization
   * @param user Name of the user
   * @return User
  */
  public User getUser (String organization, String user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getUser",
        new ApiException(400, "Missing the required parameter 'organization' when calling getUser"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling getUser",
        new ApiException(400, "Missing the required parameter 'user' when calling getUser"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/users/{user}".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "user" + "\\}", apiInvoker.escapeString(user.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve user details for an organization
   * @param organization Name of the organization   * @param user Name of the user
  */
  public void getUser (String organization, String user, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getUser",
        new ApiException(400, "Missing the required parameter 'organization' when calling getUser"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling getUser",
        new ApiException(400, "Missing the required parameter 'user' when calling getUser"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/users/{user}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "user" + "\\}", apiInvoker.escapeString(user.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve user favorites details for an organization
   * @param user Name of the user
   * @return List<FavoriteImpl>
  */
  public List<FavoriteImpl> getUserFavorites (String user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling getUserFavorites",
        new ApiException(400, "Missing the required parameter 'user' when calling getUserFavorites"));
    }

    // create path and map variables
    String path = "/blue/rest/users/{user}/favorites".replaceAll("\\{" + "user" + "\\}", apiInvoker.escapeString(user.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<FavoriteImpl>) ApiInvoker.deserialize(localVarResponse, "array", FavoriteImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve user favorites details for an organization
   * @param user Name of the user
  */
  public void getUserFavorites (String user, final Response.Listener<List<FavoriteImpl>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling getUserFavorites",
        new ApiException(400, "Missing the required parameter 'user' when calling getUserFavorites"));
    }

    // create path and map variables
    String path = "/blue/rest/users/{user}/favorites".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user" + "\\}", apiInvoker.escapeString(user.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<FavoriteImpl>) ApiInvoker.deserialize(localVarResponse,  "array", FavoriteImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve users details for an organization
   * @param organization Name of the organization
   * @return User
  */
  public User getUsers (String organization) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getUsers",
        new ApiException(400, "Missing the required parameter 'organization' when calling getUsers"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/users/".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (User) ApiInvoker.deserialize(localVarResponse, "", User.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve users details for an organization
   * @param organization Name of the organization
  */
  public void getUsers (String organization, final Response.Listener<User> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling getUsers",
        new ApiException(400, "Missing the required parameter 'organization' when calling getUsers"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/users/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((User) ApiInvoker.deserialize(localVarResponse,  "", User.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Replay an organization pipeline run
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @return QueueItemImpl
  */
  public QueueItemImpl postPipelineRun (String organization, String pipeline, String run) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling postPipelineRun",
        new ApiException(400, "Missing the required parameter 'organization' when calling postPipelineRun"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling postPipelineRun",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling postPipelineRun"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling postPipelineRun",
        new ApiException(400, "Missing the required parameter 'run' when calling postPipelineRun"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (QueueItemImpl) ApiInvoker.deserialize(localVarResponse, "", QueueItemImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Replay an organization pipeline run
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run
  */
  public void postPipelineRun (String organization, String pipeline, String run, final Response.Listener<QueueItemImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling postPipelineRun",
        new ApiException(400, "Missing the required parameter 'organization' when calling postPipelineRun"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling postPipelineRun",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling postPipelineRun"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling postPipelineRun",
        new ApiException(400, "Missing the required parameter 'run' when calling postPipelineRun"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((QueueItemImpl) ApiInvoker.deserialize(localVarResponse,  "", QueueItemImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Start a build for an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @return QueueItemImpl
  */
  public QueueItemImpl postPipelineRuns (String organization, String pipeline) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling postPipelineRuns",
        new ApiException(400, "Missing the required parameter 'organization' when calling postPipelineRuns"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling postPipelineRuns",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling postPipelineRuns"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (QueueItemImpl) ApiInvoker.deserialize(localVarResponse, "", QueueItemImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Start a build for an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline
  */
  public void postPipelineRuns (String organization, String pipeline, final Response.Listener<QueueItemImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling postPipelineRuns",
        new ApiException(400, "Missing the required parameter 'organization' when calling postPipelineRuns"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling postPipelineRuns",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling postPipelineRuns"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((QueueItemImpl) ApiInvoker.deserialize(localVarResponse,  "", QueueItemImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Favorite/unfavorite a pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
   * @return FavoriteImpl
  */
  public FavoriteImpl putPipelineFavorite (String organization, String pipeline, Boolean body) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = body;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling putPipelineFavorite",
        new ApiException(400, "Missing the required parameter 'organization' when calling putPipelineFavorite"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling putPipelineFavorite",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling putPipelineFavorite"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling putPipelineFavorite",
        new ApiException(400, "Missing the required parameter 'body' when calling putPipelineFavorite"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (FavoriteImpl) ApiInvoker.deserialize(localVarResponse, "", FavoriteImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Favorite/unfavorite a pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
  */
  public void putPipelineFavorite (String organization, String pipeline, Boolean body, final Response.Listener<FavoriteImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = body;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling putPipelineFavorite",
        new ApiException(400, "Missing the required parameter 'organization' when calling putPipelineFavorite"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling putPipelineFavorite",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling putPipelineFavorite"));
    }
    // verify the required parameter 'body' is set
    if (body == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'body' when calling putPipelineFavorite",
        new ApiException(400, "Missing the required parameter 'body' when calling putPipelineFavorite"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FavoriteImpl) ApiInvoker.deserialize(localVarResponse,  "", FavoriteImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Stop a build of an organization pipeline
   * @param organization Name of the organization
   * @param pipeline Name of the pipeline
   * @param run Name of the run
   * @param blocking Set to true to make blocking stop, default: false
   * @param timeOutInSecs Timeout in seconds, default: 10 seconds
   * @return PipelineRun
  */
  public PipelineRun putPipelineRun (String organization, String pipeline, String run, String blocking, Integer timeOutInSecs) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling putPipelineRun",
        new ApiException(400, "Missing the required parameter 'organization' when calling putPipelineRun"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling putPipelineRun",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling putPipelineRun"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling putPipelineRun",
        new ApiException(400, "Missing the required parameter 'run' when calling putPipelineRun"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop".replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "blocking", blocking));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "timeOutInSecs", timeOutInSecs));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (PipelineRun) ApiInvoker.deserialize(localVarResponse, "", PipelineRun.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Stop a build of an organization pipeline
   * @param organization Name of the organization   * @param pipeline Name of the pipeline   * @param run Name of the run   * @param blocking Set to true to make blocking stop, default: false   * @param timeOutInSecs Timeout in seconds, default: 10 seconds
  */
  public void putPipelineRun (String organization, String pipeline, String run, String blocking, Integer timeOutInSecs, final Response.Listener<PipelineRun> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organization' is set
    if (organization == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organization' when calling putPipelineRun",
        new ApiException(400, "Missing the required parameter 'organization' when calling putPipelineRun"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling putPipelineRun",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling putPipelineRun"));
    }
    // verify the required parameter 'run' is set
    if (run == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'run' when calling putPipelineRun",
        new ApiException(400, "Missing the required parameter 'run' when calling putPipelineRun"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organization" + "\\}", apiInvoker.escapeString(organization.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "run" + "\\}", apiInvoker.escapeString(run.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "blocking", blocking));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "timeOutInSecs", timeOutInSecs));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PipelineRun) ApiInvoker.deserialize(localVarResponse,  "", PipelineRun.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Search for any resource details
   * @param q Query string
   * @return String
  */
  public String search (String q) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling search",
        new ApiException(400, "Missing the required parameter 'q' when calling search"));
    }

    // create path and map variables
    String path = "/blue/rest/search/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Search for any resource details
   * @param q Query string
  */
  public void search (String q, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling search",
        new ApiException(400, "Missing the required parameter 'q' when calling search"));
    }

    // create path and map variables
    String path = "/blue/rest/search/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get classes details
   * @param q Query string containing an array of class names
   * @return String
  */
  public String searchClasses (String q) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling searchClasses",
        new ApiException(400, "Missing the required parameter 'q' when calling searchClasses"));
    }

    // create path and map variables
    String path = "/blue/rest/classes/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get classes details
   * @param q Query string containing an array of class names
  */
  public void searchClasses (String q, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling searchClasses",
        new ApiException(400, "Missing the required parameter 'q' when calling searchClasses"));
    }

    // create path and map variables
    String path = "/blue/rest/classes/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "jenkins_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
