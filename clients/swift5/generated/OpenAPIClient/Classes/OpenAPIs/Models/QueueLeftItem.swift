//
// QueueLeftItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct QueueLeftItem: Codable, JSONEncodable, Hashable {

    public var _class: String?
    public var actions: [CauseAction]?
    public var blocked: Bool?
    public var buildable: Bool?
    public var id: Int?
    public var inQueueSince: Int?
    public var params: String?
    public var stuck: Bool?
    public var task: FreeStyleProject?
    public var url: String?
    public var why: String?
    public var cancelled: Bool?
    public var executable: FreeStyleBuild?

    public init(_class: String? = nil, actions: [CauseAction]? = nil, blocked: Bool? = nil, buildable: Bool? = nil, id: Int? = nil, inQueueSince: Int? = nil, params: String? = nil, stuck: Bool? = nil, task: FreeStyleProject? = nil, url: String? = nil, why: String? = nil, cancelled: Bool? = nil, executable: FreeStyleBuild? = nil) {
        self._class = _class
        self.actions = actions
        self.blocked = blocked
        self.buildable = buildable
        self.id = id
        self.inQueueSince = inQueueSince
        self.params = params
        self.stuck = stuck
        self.task = task
        self.url = url
        self.why = why
        self.cancelled = cancelled
        self.executable = executable
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _class
        case actions
        case blocked
        case buildable
        case id
        case inQueueSince
        case params
        case stuck
        case task
        case url
        case why
        case cancelled
        case executable
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(_class, forKey: ._class)
        try container.encodeIfPresent(actions, forKey: .actions)
        try container.encodeIfPresent(blocked, forKey: .blocked)
        try container.encodeIfPresent(buildable, forKey: .buildable)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(inQueueSince, forKey: .inQueueSince)
        try container.encodeIfPresent(params, forKey: .params)
        try container.encodeIfPresent(stuck, forKey: .stuck)
        try container.encodeIfPresent(task, forKey: .task)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(why, forKey: .why)
        try container.encodeIfPresent(cancelled, forKey: .cancelled)
        try container.encodeIfPresent(executable, forKey: .executable)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension QueueLeftItem: Identifiable {}
