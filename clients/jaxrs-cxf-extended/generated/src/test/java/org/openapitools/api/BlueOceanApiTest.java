/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.api;

import org.openapitools.model.BranchImpl;
import org.openapitools.model.FavoriteImpl;
import org.openapitools.model.GithubOrganization;
import org.openapitools.model.GithubScm;
import org.openapitools.model.MultibranchPipeline;
import org.openapitools.model.Organisation;
import org.openapitools.model.Pipeline;
import org.openapitools.model.PipelineActivity;
import org.openapitools.model.PipelineFolderImpl;
import org.openapitools.model.PipelineImpl;
import org.openapitools.model.PipelineRun;
import org.openapitools.model.PipelineRunNode;
import org.openapitools.model.PipelineStepImpl;
import org.openapitools.model.QueueItemImpl;
import org.openapitools.model.User;
import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import org.apache.cxf.jaxrs.client.JAXRSClientFactory;
import org.apache.cxf.jaxrs.client.ClientConfiguration;
import org.apache.cxf.jaxrs.client.WebClient;
import org.apache.cxf.jaxrs.ext.multipart.Attachment;


import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;
import com.fasterxml.jackson.jaxrs.xml.JacksonXMLProvider;
import org.apache.cxf.jaxrs.provider.MultipartProvider;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * Swaggy Jenkins
 *
 * <p>Jenkins API clients generated from Swagger / Open API specification
 *
 * API tests for BlueOceanApi.
 */
public class BlueOceanApiTest {

    private BlueOceanApi api;

    @Before
    public void setup() {
        List<?> providers = Arrays.asList(new JacksonJsonProvider(), new JacksonXMLProvider(), new MultipartProvider());

        api = JAXRSClientFactory.create("http://localhost", BlueOceanApi.class, providers);
        org.apache.cxf.jaxrs.client.Client client = WebClient.client(api);

        ClientConfiguration config = WebClient.getConfig(client);
    }

    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void deletePipelineQueueItemTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String queue = null;

        // TODO: delete this line and uncomment the next
        // api.deletePipelineQueueItem(organization, pipeline, queue);
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getAuthenticatedUserTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;

        // TODO: delete this line and uncomment the next
        // User response = api.getAuthenticatedUser(organization);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getClassesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String propertyClass = null;

        // TODO: delete this line and uncomment the next
        // String response = api.getClasses(propertyClass);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getJsonWebKeyTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer key = null;

        // TODO: delete this line and uncomment the next
        // String response = api.getJsonWebKey(key);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getJsonWebTokenTest() throws Exception {
        // TODO: assign appropriate parameter values
        Integer expiryTimeInMins = null;
        Integer maxExpiryTimeInMins = null;

        // TODO: delete this line and uncomment the next
        // String response = api.getJsonWebToken(expiryTimeInMins, maxExpiryTimeInMins);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getOrganisationTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;

        // TODO: delete this line and uncomment the next
        // Organisation response = api.getOrganisation(organization);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getOrganisationsTest() throws Exception {

        // TODO: delete this line and uncomment the next
        // List<Organisation> response = api.getOrganisations();
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;

        // TODO: delete this line and uncomment the next
        // Pipeline response = api.getPipeline(organization, pipeline);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineActivitiesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;

        // TODO: delete this line and uncomment the next
        // List<PipelineActivity> response = api.getPipelineActivities(organization, pipeline);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineBranchTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String branch = null;

        // TODO: delete this line and uncomment the next
        // BranchImpl response = api.getPipelineBranch(organization, pipeline, branch);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineBranchRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String branch = null;
        String run = null;

        // TODO: delete this line and uncomment the next
        // PipelineRun response = api.getPipelineBranchRun(organization, pipeline, branch, run);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineBranchesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;

        // TODO: delete this line and uncomment the next
        // MultibranchPipeline response = api.getPipelineBranches(organization, pipeline);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineFolderTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String folder = null;

        // TODO: delete this line and uncomment the next
        // PipelineFolderImpl response = api.getPipelineFolder(organization, folder);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineFolderPipelineTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String folder = null;

        // TODO: delete this line and uncomment the next
        // PipelineImpl response = api.getPipelineFolderPipeline(organization, pipeline, folder);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineQueueTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;

        // TODO: delete this line and uncomment the next
        // List<QueueItemImpl> response = api.getPipelineQueue(organization, pipeline);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;

        // TODO: delete this line and uncomment the next
        // PipelineRun response = api.getPipelineRun(organization, pipeline, run);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineRunLogTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;
        Integer start = null;
        Boolean download = null;

        // TODO: delete this line and uncomment the next
        // String response = api.getPipelineRunLog(organization, pipeline, run, start, download);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineRunNodeTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;
        String node = null;

        // TODO: delete this line and uncomment the next
        // PipelineRunNode response = api.getPipelineRunNode(organization, pipeline, run, node);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineRunNodeStepTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;
        String node = null;
        String step = null;

        // TODO: delete this line and uncomment the next
        // PipelineStepImpl response = api.getPipelineRunNodeStep(organization, pipeline, run, node, step);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineRunNodeStepLogTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;
        String node = null;
        String step = null;

        // TODO: delete this line and uncomment the next
        // String response = api.getPipelineRunNodeStepLog(organization, pipeline, run, node, step);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineRunNodeStepsTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;
        String node = null;

        // TODO: delete this line and uncomment the next
        // List<PipelineStepImpl> response = api.getPipelineRunNodeSteps(organization, pipeline, run, node);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineRunNodesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;

        // TODO: delete this line and uncomment the next
        // List<PipelineRunNode> response = api.getPipelineRunNodes(organization, pipeline, run);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelineRunsTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;

        // TODO: delete this line and uncomment the next
        // List<PipelineRun> response = api.getPipelineRuns(organization, pipeline);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getPipelinesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;

        // TODO: delete this line and uncomment the next
        // List<Pipeline> response = api.getPipelines(organization);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getSCMTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String scm = null;

        // TODO: delete this line and uncomment the next
        // GithubScm response = api.getSCM(organization, scm);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getSCMOrganisationRepositoriesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String scm = null;
        String scmOrganisation = null;
        String credentialId = null;
        Integer pageSize = null;
        Integer pageNumber = null;

        // TODO: delete this line and uncomment the next
        // List<GithubOrganization> response = api.getSCMOrganisationRepositories(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getSCMOrganisationRepositoryTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String scm = null;
        String scmOrganisation = null;
        String repository = null;
        String credentialId = null;

        // TODO: delete this line and uncomment the next
        // List<GithubOrganization> response = api.getSCMOrganisationRepository(organization, scm, scmOrganisation, repository, credentialId);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getSCMOrganisationsTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String scm = null;
        String credentialId = null;

        // TODO: delete this line and uncomment the next
        // List<GithubOrganization> response = api.getSCMOrganisations(organization, scm, credentialId);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getUserTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String user = null;

        // TODO: delete this line and uncomment the next
        // User response = api.getUser(organization, user);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getUserFavoritesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String user = null;

        // TODO: delete this line and uncomment the next
        // List<FavoriteImpl> response = api.getUserFavorites(user);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void getUsersTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;

        // TODO: delete this line and uncomment the next
        // User response = api.getUsers(organization);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void postPipelineRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;

        // TODO: delete this line and uncomment the next
        // QueueItemImpl response = api.postPipelineRun(organization, pipeline, run);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void postPipelineRunsTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;

        // TODO: delete this line and uncomment the next
        // QueueItemImpl response = api.postPipelineRuns(organization, pipeline);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void putPipelineFavoriteTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        Boolean body = null;

        // TODO: delete this line and uncomment the next
        // FavoriteImpl response = api.putPipelineFavorite(organization, pipeline, body);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void putPipelineRunTest() throws Exception {
        // TODO: assign appropriate parameter values
        String organization = null;
        String pipeline = null;
        String run = null;
        String blocking = null;
        Integer timeOutInSecs = null;

        // TODO: delete this line and uncomment the next
        // PipelineRun response = api.putPipelineRun(organization, pipeline, run, blocking, timeOutInSecs);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void searchTest() throws Exception {
        // TODO: assign appropriate parameter values
        String q = null;

        // TODO: delete this line and uncomment the next
        // String response = api.search(q);
        // TODO: complete test assertions
    }
    
    /**
     * @throws ApiException if the API call fails
     */
    @Test
    public void searchClassesTest() throws Exception {
        // TODO: assign appropriate parameter values
        String q = null;

        // TODO: delete this line and uncomment the next
        // String response = api.searchClasses(q);
        // TODO: complete test assertions
    }
    
}
