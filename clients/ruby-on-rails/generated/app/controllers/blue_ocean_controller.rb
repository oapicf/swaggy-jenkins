=begin
Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

The version of the OpenAPI document: 2.0.1-pre.0
Contact: blah+oapicf@cliffano.com
Generated by: https://github.com/openapitools/openapi-generator.git

=end
class BlueOceanController < ApplicationController

  def delete_pipeline_queue_item
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_authenticated_user
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_classes
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_json_web_key
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_json_web_token
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_organisation
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_organisations
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_activities
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_branch
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_branch_run
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_branches
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_folder
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_folder_pipeline
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_queue
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_run
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_run_log
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_run_node
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_run_node_step
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_run_node_step_log
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_run_node_steps
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_run_nodes
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipeline_runs
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_pipelines
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_scm
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_scm_organisation_repositories
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_scm_organisation_repository
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_scm_organisations
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_user
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_user_favorites
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def get_users
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def post_pipeline_run
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def post_pipeline_runs
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def put_pipeline_favorite
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def put_pipeline_run
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def search
    # Your code here

    render json: {"message" => "yes, it worked"}
  end

  def search_classes
    # Your code here

    render json: {"message" => "yes, it worked"}
  end
end
