/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import org.openapitools.model.StringParameterValue;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * StringParameterDefinition
 */
@JsonPropertyOrder({
  StringParameterDefinition.JSON_PROPERTY_PROPERTY_CLASS,
  StringParameterDefinition.JSON_PROPERTY_DEFAULT_PARAMETER_VALUE,
  StringParameterDefinition.JSON_PROPERTY_DESCRIPTION,
  StringParameterDefinition.JSON_PROPERTY_NAME,
  StringParameterDefinition.JSON_PROPERTY_TYPE
})
@JsonTypeName("StringParameterDefinition")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2025-05-10T02:40:03.838053081Z[Etc/UTC]", comments = "Generator version: 7.12.0")
@Introspected
public class StringParameterDefinition {
    public static final String JSON_PROPERTY_PROPERTY_CLASS = "_class";
    private String propertyClass;

    public static final String JSON_PROPERTY_DEFAULT_PARAMETER_VALUE = "defaultParameterValue";
    private StringParameterValue defaultParameterValue;

    public static final String JSON_PROPERTY_DESCRIPTION = "description";
    private String description;

    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    public static final String JSON_PROPERTY_TYPE = "type";
    private String type;

    public StringParameterDefinition() {
    }

    public StringParameterDefinition propertyClass(String propertyClass) {
        this.propertyClass = propertyClass;
        return this;
    }

    /**
     * Get propertyClass
     * @return propertyClass
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPropertyClass() {
        return propertyClass;
    }

    @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPropertyClass(String propertyClass) {
        this.propertyClass = propertyClass;
    }

    public StringParameterDefinition defaultParameterValue(StringParameterValue defaultParameterValue) {
        this.defaultParameterValue = defaultParameterValue;
        return this;
    }

    /**
     * Get defaultParameterValue
     * @return defaultParameterValue
     */
    @Valid
    @Nullable
    @JsonProperty(JSON_PROPERTY_DEFAULT_PARAMETER_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public StringParameterValue getDefaultParameterValue() {
        return defaultParameterValue;
    }

    @JsonProperty(JSON_PROPERTY_DEFAULT_PARAMETER_VALUE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDefaultParameterValue(StringParameterValue defaultParameterValue) {
        this.defaultParameterValue = defaultParameterValue;
    }

    public StringParameterDefinition description(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get description
     * @return description
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getDescription() {
        return description;
    }

    @JsonProperty(JSON_PROPERTY_DESCRIPTION)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setDescription(String description) {
        this.description = description;
    }

    public StringParameterDefinition name(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get name
     * @return name
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getName() {
        return name;
    }

    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setName(String name) {
        this.name = name;
    }

    public StringParameterDefinition type(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get type
     * @return type
     */
    @Nullable
    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getType() {
        return type;
    }

    @JsonProperty(JSON_PROPERTY_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setType(String type) {
        this.type = type;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StringParameterDefinition stringParameterDefinition = (StringParameterDefinition) o;
        return Objects.equals(this.propertyClass, stringParameterDefinition.propertyClass) &&
            Objects.equals(this.defaultParameterValue, stringParameterDefinition.defaultParameterValue) &&
            Objects.equals(this.description, stringParameterDefinition.description) &&
            Objects.equals(this.name, stringParameterDefinition.name) &&
            Objects.equals(this.type, stringParameterDefinition.type);
    }

    @Override
    public int hashCode() {
        return Objects.hash(propertyClass, defaultParameterValue, description, name, type);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class StringParameterDefinition {\n");
        sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
        sb.append("    defaultParameterValue: ").append(toIndentedString(defaultParameterValue)).append("\n");
        sb.append("    description: ").append(toIndentedString(description)).append("\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    type: ").append(toIndentedString(type)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

