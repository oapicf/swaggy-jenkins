/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.*;

import javax.validation.constraints.*;
import javax.validation.Valid;
import io.micronaut.core.annotation.*;
import javax.annotation.Generated;

/**
 * ResponseTimeMonitorData
 */
@JsonPropertyOrder({
  ResponseTimeMonitorData.JSON_PROPERTY_PROPERTY_CLASS,
  ResponseTimeMonitorData.JSON_PROPERTY_TIMESTAMP,
  ResponseTimeMonitorData.JSON_PROPERTY_AVERAGE
})
@JsonTypeName("ResponseTimeMonitorData")
@Generated(value="org.openapitools.codegen.languages.JavaMicronautClientCodegen", date="2024-03-15T14:11:59.582308919Z[Etc/UTC]", comments = "Generator version: 7.4.0")
@Introspected
public class ResponseTimeMonitorData {
    public static final String JSON_PROPERTY_PROPERTY_CLASS = "_class";
    private String propertyClass;

    public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
    private Integer timestamp;

    public static final String JSON_PROPERTY_AVERAGE = "average";
    private Integer average;

    public ResponseTimeMonitorData() {
    }

    public ResponseTimeMonitorData propertyClass(String propertyClass) {
        this.propertyClass = propertyClass;
        return this;
    }

    /**
     * Get propertyClass
     * @return propertyClass
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public String getPropertyClass() {
        return propertyClass;
    }

    @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setPropertyClass(String propertyClass) {
        this.propertyClass = propertyClass;
    }

    public ResponseTimeMonitorData timestamp(Integer timestamp) {
        this.timestamp = timestamp;
        return this;
    }

    /**
     * Get timestamp
     * @return timestamp
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getTimestamp() {
        return timestamp;
    }

    @JsonProperty(JSON_PROPERTY_TIMESTAMP)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setTimestamp(Integer timestamp) {
        this.timestamp = timestamp;
    }

    public ResponseTimeMonitorData average(Integer average) {
        this.average = average;
        return this;
    }

    /**
     * Get average
     * @return average
     **/
    @Nullable
    @JsonProperty(JSON_PROPERTY_AVERAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public Integer getAverage() {
        return average;
    }

    @JsonProperty(JSON_PROPERTY_AVERAGE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
    public void setAverage(Integer average) {
        this.average = average;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResponseTimeMonitorData responseTimeMonitorData = (ResponseTimeMonitorData) o;
        return Objects.equals(this.propertyClass, responseTimeMonitorData.propertyClass) &&
            Objects.equals(this.timestamp, responseTimeMonitorData.timestamp) &&
            Objects.equals(this.average, responseTimeMonitorData.average);
    }

    @Override
    public int hashCode() {
        return Objects.hash(propertyClass, timestamp, average);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ResponseTimeMonitorData {\n");
        sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
        sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
        sb.append("    average: ").append(toIndentedString(average)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}

