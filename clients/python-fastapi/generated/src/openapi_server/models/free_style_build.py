# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    The version of the OpenAPI document: 2.0.1-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.cause_action import CauseAction
from openapi_server.models.empty_change_log_set import EmptyChangeLogSet
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class FreeStyleBuild(BaseModel):
    """
    FreeStyleBuild
    """ # noqa: E501
    _class: Optional[StrictStr] = None
    number: Optional[StrictInt] = None
    url: Optional[StrictStr] = None
    actions: Optional[List[CauseAction]] = None
    building: Optional[StrictBool] = None
    description: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    duration: Optional[StrictInt] = None
    estimated_duration: Optional[StrictInt] = Field(default=None, alias="estimatedDuration")
    executor: Optional[StrictStr] = None
    full_display_name: Optional[StrictStr] = Field(default=None, alias="fullDisplayName")
    id: Optional[StrictStr] = None
    keep_log: Optional[StrictBool] = Field(default=None, alias="keepLog")
    queue_id: Optional[StrictInt] = Field(default=None, alias="queueId")
    result: Optional[StrictStr] = None
    timestamp: Optional[StrictInt] = None
    built_on: Optional[StrictStr] = Field(default=None, alias="builtOn")
    change_set: Optional[EmptyChangeLogSet] = Field(default=None, alias="changeSet")
    __properties: ClassVar[List[str]] = ["_class", "number", "url", "actions", "building", "description", "displayName", "duration", "estimatedDuration", "executor", "fullDisplayName", "id", "keepLog", "queueId", "result", "timestamp", "builtOn", "changeSet"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of FreeStyleBuild from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item in self.actions:
                if _item:
                    _items.append(_item.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of change_set
        if self.change_set:
            _dict['changeSet'] = self.change_set.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of FreeStyleBuild from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_class": obj.get("_class"),
            "number": obj.get("number"),
            "url": obj.get("url"),
            "actions": [CauseAction.from_dict(_item) for _item in obj.get("actions")] if obj.get("actions") is not None else None,
            "building": obj.get("building"),
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "duration": obj.get("duration"),
            "estimatedDuration": obj.get("estimatedDuration"),
            "executor": obj.get("executor"),
            "fullDisplayName": obj.get("fullDisplayName"),
            "id": obj.get("id"),
            "keepLog": obj.get("keepLog"),
            "queueId": obj.get("queueId"),
            "result": obj.get("result"),
            "timestamp": obj.get("timestamp"),
            "builtOn": obj.get("builtOn"),
            "changeSet": EmptyChangeLogSet.from_dict(obj.get("changeSet")) if obj.get("changeSet") is not None else None
        })
        return _obj


