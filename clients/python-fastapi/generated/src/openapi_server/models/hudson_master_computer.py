# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    The version of the OpenAPI document: 3.0.2-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.hudson_master_computerexecutors import HudsonMasterComputerexecutors
from openapi_server.models.hudson_master_computermonitor_data import HudsonMasterComputermonitorData
from openapi_server.models.label1 import Label1
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class HudsonMasterComputer(BaseModel):
    """
    HudsonMasterComputer
    """ # noqa: E501
    var_class: Optional[StrictStr] = Field(default=None, alias="_class")
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    executors: Optional[List[HudsonMasterComputerexecutors]] = None
    icon: Optional[StrictStr] = None
    icon_class_name: Optional[StrictStr] = Field(default=None, alias="iconClassName")
    idle: Optional[StrictBool] = None
    jnlp_agent: Optional[StrictBool] = Field(default=None, alias="jnlpAgent")
    launch_supported: Optional[StrictBool] = Field(default=None, alias="launchSupported")
    load_statistics: Optional[Label1] = Field(default=None, alias="loadStatistics")
    manual_launch_allowed: Optional[StrictBool] = Field(default=None, alias="manualLaunchAllowed")
    monitor_data: Optional[HudsonMasterComputermonitorData] = Field(default=None, alias="monitorData")
    num_executors: Optional[StrictInt] = Field(default=None, alias="numExecutors")
    offline: Optional[StrictBool] = None
    offline_cause: Optional[StrictStr] = Field(default=None, alias="offlineCause")
    offline_cause_reason: Optional[StrictStr] = Field(default=None, alias="offlineCauseReason")
    temporarily_offline: Optional[StrictBool] = Field(default=None, alias="temporarilyOffline")
    __properties: ClassVar[List[str]] = ["_class", "displayName", "executors", "icon", "iconClassName", "idle", "jnlpAgent", "launchSupported", "loadStatistics", "manualLaunchAllowed", "monitorData", "numExecutors", "offline", "offlineCause", "offlineCauseReason", "temporarilyOffline"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of HudsonMasterComputer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in executors (list)
        _items = []
        if self.executors:
            for _item in self.executors:
                if _item:
                    _items.append(_item.to_dict())
            _dict['executors'] = _items
        # override the default output from pydantic by calling `to_dict()` of load_statistics
        if self.load_statistics:
            _dict['loadStatistics'] = self.load_statistics.to_dict()
        # override the default output from pydantic by calling `to_dict()` of monitor_data
        if self.monitor_data:
            _dict['monitorData'] = self.monitor_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of HudsonMasterComputer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_class": obj.get("_class"),
            "displayName": obj.get("displayName"),
            "executors": [HudsonMasterComputerexecutors.from_dict(_item) for _item in obj.get("executors")] if obj.get("executors") is not None else None,
            "icon": obj.get("icon"),
            "iconClassName": obj.get("iconClassName"),
            "idle": obj.get("idle"),
            "jnlpAgent": obj.get("jnlpAgent"),
            "launchSupported": obj.get("launchSupported"),
            "loadStatistics": Label1.from_dict(obj.get("loadStatistics")) if obj.get("loadStatistics") is not None else None,
            "manualLaunchAllowed": obj.get("manualLaunchAllowed"),
            "monitorData": HudsonMasterComputermonitorData.from_dict(obj.get("monitorData")) if obj.get("monitorData") is not None else None,
            "numExecutors": obj.get("numExecutors"),
            "offline": obj.get("offline"),
            "offlineCause": obj.get("offlineCause"),
            "offlineCauseReason": obj.get("offlineCauseReason"),
            "temporarilyOffline": obj.get("temporarilyOffline")
        })
        return _obj


