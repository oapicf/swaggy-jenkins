/* tslint:disable */
/* eslint-disable */
/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BranchImpl,
  FavoriteImpl,
  GithubOrganization,
  GithubScm,
  MultibranchPipeline,
  Organisation,
  Pipeline,
  PipelineActivity,
  PipelineFolderImpl,
  PipelineImpl,
  PipelineRun,
  PipelineRunNode,
  PipelineStepImpl,
  QueueItemImpl,
  User,
} from '../models/index';
import {
    BranchImplFromJSON,
    BranchImplToJSON,
    FavoriteImplFromJSON,
    FavoriteImplToJSON,
    GithubOrganizationFromJSON,
    GithubOrganizationToJSON,
    GithubScmFromJSON,
    GithubScmToJSON,
    MultibranchPipelineFromJSON,
    MultibranchPipelineToJSON,
    OrganisationFromJSON,
    OrganisationToJSON,
    PipelineFromJSON,
    PipelineToJSON,
    PipelineActivityFromJSON,
    PipelineActivityToJSON,
    PipelineFolderImplFromJSON,
    PipelineFolderImplToJSON,
    PipelineImplFromJSON,
    PipelineImplToJSON,
    PipelineRunFromJSON,
    PipelineRunToJSON,
    PipelineRunNodeFromJSON,
    PipelineRunNodeToJSON,
    PipelineStepImplFromJSON,
    PipelineStepImplToJSON,
    QueueItemImplFromJSON,
    QueueItemImplToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface DeletePipelineQueueItemRequest {
    organization: string;
    pipeline: string;
    queue: string;
}

export interface GetAuthenticatedUserRequest {
    organization: string;
}

export interface GetClassesRequest {
    _class: string;
}

export interface GetJsonWebKeyRequest {
    key: number;
}

export interface GetJsonWebTokenRequest {
    expiryTimeInMins?: number;
    maxExpiryTimeInMins?: number;
}

export interface GetOrganisationRequest {
    organization: string;
}

export interface GetPipelineRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineActivitiesRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineBranchRequest {
    organization: string;
    pipeline: string;
    branch: string;
}

export interface GetPipelineBranchRunRequest {
    organization: string;
    pipeline: string;
    branch: string;
    run: string;
}

export interface GetPipelineBranchesRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineFolderRequest {
    organization: string;
    folder: string;
}

export interface GetPipelineFolderPipelineRequest {
    organization: string;
    pipeline: string;
    folder: string;
}

export interface GetPipelineQueueRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface GetPipelineRunLogRequest {
    organization: string;
    pipeline: string;
    run: string;
    start?: number;
    download?: boolean;
}

export interface GetPipelineRunNodeRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
}

export interface GetPipelineRunNodeStepRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
    step: string;
}

export interface GetPipelineRunNodeStepLogRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
    step: string;
}

export interface GetPipelineRunNodeStepsRequest {
    organization: string;
    pipeline: string;
    run: string;
    node: string;
}

export interface GetPipelineRunNodesRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface GetPipelineRunsRequest {
    organization: string;
    pipeline: string;
}

export interface GetPipelinesRequest {
    organization: string;
}

export interface GetSCMRequest {
    organization: string;
    scm: string;
}

export interface GetSCMOrganisationRepositoriesRequest {
    organization: string;
    scm: string;
    scmOrganisation: string;
    credentialId?: string;
    pageSize?: number;
    pageNumber?: number;
}

export interface GetSCMOrganisationRepositoryRequest {
    organization: string;
    scm: string;
    scmOrganisation: string;
    repository: string;
    credentialId?: string;
}

export interface GetSCMOrganisationsRequest {
    organization: string;
    scm: string;
    credentialId?: string;
}

export interface GetUserRequest {
    organization: string;
    user: string;
}

export interface GetUserFavoritesRequest {
    user: string;
}

export interface GetUsersRequest {
    organization: string;
}

export interface PostPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
}

export interface PostPipelineRunsRequest {
    organization: string;
    pipeline: string;
}

export interface PutPipelineFavoriteRequest {
    organization: string;
    pipeline: string;
    body: boolean;
}

export interface PutPipelineRunRequest {
    organization: string;
    pipeline: string;
    run: string;
    blocking?: string;
    timeOutInSecs?: number;
}

export interface SearchRequest {
    q: string;
}

export interface SearchClassesRequest {
    q: string;
}

/**
 * 
 */
export class BlueOceanApi extends runtime.BaseAPI {

    /**
     * Delete queue item from an organization pipeline queue
     */
    async deletePipelineQueueItemRaw(requestParameters: DeletePipelineQueueItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling deletePipelineQueueItem().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling deletePipelineQueueItem().'
            );
        }

        if (requestParameters['queue'] == null) {
            throw new runtime.RequiredError(
                'queue',
                'Required parameter "queue" was null or undefined when calling deletePipelineQueueItem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"queue"}}`, encodeURIComponent(String(requestParameters['queue']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete queue item from an organization pipeline queue
     */
    async deletePipelineQueueItem(requestParameters: DeletePipelineQueueItemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePipelineQueueItemRaw(requestParameters, initOverrides);
    }

    /**
     * Retrieve authenticated user details for an organization
     */
    async getAuthenticatedUserRaw(requestParameters: GetAuthenticatedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getAuthenticatedUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/user/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Retrieve authenticated user details for an organization
     */
    async getAuthenticatedUser(requestParameters: GetAuthenticatedUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getAuthenticatedUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of class names supported by a given class
     */
    async getClassesRaw(requestParameters: GetClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['_class'] == null) {
            throw new runtime.RequiredError(
                '_class',
                'Required parameter "_class" was null or undefined when calling getClasses().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/classes/{class}`.replace(`{${"class"}}`, encodeURIComponent(String(requestParameters['_class']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get a list of class names supported by a given class
     */
    async getClasses(requestParameters: GetClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve JSON Web Key
     */
    async getJsonWebKeyRaw(requestParameters: GetJsonWebKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['key'] == null) {
            throw new runtime.RequiredError(
                'key',
                'Required parameter "key" was null or undefined when calling getJsonWebKey().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jwt-auth/jwks/{key}`.replace(`{${"key"}}`, encodeURIComponent(String(requestParameters['key']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieve JSON Web Key
     */
    async getJsonWebKey(requestParameters: GetJsonWebKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getJsonWebKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve JSON Web Token
     */
    async getJsonWebTokenRaw(requestParameters: GetJsonWebTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        if (requestParameters['expiryTimeInMins'] != null) {
            queryParameters['expiryTimeInMins'] = requestParameters['expiryTimeInMins'];
        }

        if (requestParameters['maxExpiryTimeInMins'] != null) {
            queryParameters['maxExpiryTimeInMins'] = requestParameters['maxExpiryTimeInMins'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jwt-auth/token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Retrieve JSON Web Token
     */
    async getJsonWebToken(requestParameters: GetJsonWebTokenRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getJsonWebTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve organization details
     */
    async getOrganisationRaw(requestParameters: GetOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Organisation>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getOrganisation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganisationFromJSON(jsonValue));
    }

    /**
     * Retrieve organization details
     */
    async getOrganisation(requestParameters: GetOrganisationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Organisation> {
        const response = await this.getOrganisationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all organizations details
     */
    async getOrganisationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Organisation>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrganisationFromJSON));
    }

    /**
     * Retrieve all organizations details
     */
    async getOrganisations(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Organisation>> {
        const response = await this.getOrganisationsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve pipeline details for an organization
     */
    async getPipelineRaw(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pipeline>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipeline().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFromJSON(jsonValue));
    }

    /**
     * Retrieve pipeline details for an organization
     */
    async getPipeline(requestParameters: GetPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pipeline> {
        const response = await this.getPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all activities details for an organization pipeline
     */
    async getPipelineActivitiesRaw(requestParameters: GetPipelineActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PipelineActivity>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineActivities().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineActivities().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineActivityFromJSON));
    }

    /**
     * Retrieve all activities details for an organization pipeline
     */
    async getPipelineActivities(requestParameters: GetPipelineActivitiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PipelineActivity>> {
        const response = await this.getPipelineActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve branch details for an organization pipeline
     */
    async getPipelineBranchRaw(requestParameters: GetPipelineBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BranchImpl>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineBranch().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineBranch().'
            );
        }

        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getPipelineBranch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"branch"}}`, encodeURIComponent(String(requestParameters['branch']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BranchImplFromJSON(jsonValue));
    }

    /**
     * Retrieve branch details for an organization pipeline
     */
    async getPipelineBranch(requestParameters: GetPipelineBranchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BranchImpl> {
        const response = await this.getPipelineBranchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve branch run details for an organization pipeline
     */
    async getPipelineBranchRunRaw(requestParameters: GetPipelineBranchRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineRun>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineBranchRun().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineBranchRun().'
            );
        }

        if (requestParameters['branch'] == null) {
            throw new runtime.RequiredError(
                'branch',
                'Required parameter "branch" was null or undefined when calling getPipelineBranchRun().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling getPipelineBranchRun().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"branch"}}`, encodeURIComponent(String(requestParameters['branch']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineRunFromJSON(jsonValue));
    }

    /**
     * Retrieve branch run details for an organization pipeline
     */
    async getPipelineBranchRun(requestParameters: GetPipelineBranchRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineRun> {
        const response = await this.getPipelineBranchRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all branches details for an organization pipeline
     */
    async getPipelineBranchesRaw(requestParameters: GetPipelineBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MultibranchPipeline>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineBranches().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineBranches().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MultibranchPipelineFromJSON(jsonValue));
    }

    /**
     * Retrieve all branches details for an organization pipeline
     */
    async getPipelineBranches(requestParameters: GetPipelineBranchesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MultibranchPipeline> {
        const response = await this.getPipelineBranchesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve pipeline folder for an organization
     */
    async getPipelineFolderRaw(requestParameters: GetPipelineFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineFolderImpl>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineFolder().'
            );
        }

        if (requestParameters['folder'] == null) {
            throw new runtime.RequiredError(
                'folder',
                'Required parameter "folder" was null or undefined when calling getPipelineFolder().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{folder}/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters['folder']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineFolderImplFromJSON(jsonValue));
    }

    /**
     * Retrieve pipeline folder for an organization
     */
    async getPipelineFolder(requestParameters: GetPipelineFolderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineFolderImpl> {
        const response = await this.getPipelineFolderRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve pipeline details for an organization folder
     */
    async getPipelineFolderPipelineRaw(requestParameters: GetPipelineFolderPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineImpl>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineFolderPipeline().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineFolderPipeline().'
            );
        }

        if (requestParameters['folder'] == null) {
            throw new runtime.RequiredError(
                'folder',
                'Required parameter "folder" was null or undefined when calling getPipelineFolderPipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"folder"}}`, encodeURIComponent(String(requestParameters['folder']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineImplFromJSON(jsonValue));
    }

    /**
     * Retrieve pipeline details for an organization folder
     */
    async getPipelineFolderPipeline(requestParameters: GetPipelineFolderPipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineImpl> {
        const response = await this.getPipelineFolderPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve queue details for an organization pipeline
     */
    async getPipelineQueueRaw(requestParameters: GetPipelineQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<QueueItemImpl>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineQueue().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineQueue().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(QueueItemImplFromJSON));
    }

    /**
     * Retrieve queue details for an organization pipeline
     */
    async getPipelineQueue(requestParameters: GetPipelineQueueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<QueueItemImpl>> {
        const response = await this.getPipelineQueueRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve run details for an organization pipeline
     */
    async getPipelineRunRaw(requestParameters: GetPipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineRun>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineRun().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineRun().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling getPipelineRun().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineRunFromJSON(jsonValue));
    }

    /**
     * Retrieve run details for an organization pipeline
     */
    async getPipelineRun(requestParameters: GetPipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineRun> {
        const response = await this.getPipelineRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get log for a pipeline run
     */
    async getPipelineRunLogRaw(requestParameters: GetPipelineRunLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineRunLog().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineRunLog().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling getPipelineRunLog().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['start'] != null) {
            queryParameters['start'] = requestParameters['start'];
        }

        if (requestParameters['download'] != null) {
            queryParameters['download'] = requestParameters['download'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get log for a pipeline run
     */
    async getPipelineRunLog(requestParameters: GetPipelineRunLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getPipelineRunLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve run node details for an organization pipeline
     */
    async getPipelineRunNodeRaw(requestParameters: GetPipelineRunNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineRunNode>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineRunNode().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineRunNode().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling getPipelineRunNode().'
            );
        }

        if (requestParameters['node'] == null) {
            throw new runtime.RequiredError(
                'node',
                'Required parameter "node" was null or undefined when calling getPipelineRunNode().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters['node']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineRunNodeFromJSON(jsonValue));
    }

    /**
     * Retrieve run node details for an organization pipeline
     */
    async getPipelineRunNode(requestParameters: GetPipelineRunNodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineRunNode> {
        const response = await this.getPipelineRunNodeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve run node details for an organization pipeline
     */
    async getPipelineRunNodeStepRaw(requestParameters: GetPipelineRunNodeStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineStepImpl>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineRunNodeStep().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineRunNodeStep().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling getPipelineRunNodeStep().'
            );
        }

        if (requestParameters['node'] == null) {
            throw new runtime.RequiredError(
                'node',
                'Required parameter "node" was null or undefined when calling getPipelineRunNodeStep().'
            );
        }

        if (requestParameters['step'] == null) {
            throw new runtime.RequiredError(
                'step',
                'Required parameter "step" was null or undefined when calling getPipelineRunNodeStep().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters['node']))).replace(`{${"step"}}`, encodeURIComponent(String(requestParameters['step']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineStepImplFromJSON(jsonValue));
    }

    /**
     * Retrieve run node details for an organization pipeline
     */
    async getPipelineRunNodeStep(requestParameters: GetPipelineRunNodeStepRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineStepImpl> {
        const response = await this.getPipelineRunNodeStepRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get log for a pipeline run node step
     */
    async getPipelineRunNodeStepLogRaw(requestParameters: GetPipelineRunNodeStepLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineRunNodeStepLog().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineRunNodeStepLog().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling getPipelineRunNodeStepLog().'
            );
        }

        if (requestParameters['node'] == null) {
            throw new runtime.RequiredError(
                'node',
                'Required parameter "node" was null or undefined when calling getPipelineRunNodeStepLog().'
            );
        }

        if (requestParameters['step'] == null) {
            throw new runtime.RequiredError(
                'step',
                'Required parameter "step" was null or undefined when calling getPipelineRunNodeStepLog().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters['node']))).replace(`{${"step"}}`, encodeURIComponent(String(requestParameters['step']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get log for a pipeline run node step
     */
    async getPipelineRunNodeStepLog(requestParameters: GetPipelineRunNodeStepLogRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getPipelineRunNodeStepLogRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve run node steps details for an organization pipeline
     */
    async getPipelineRunNodeStepsRaw(requestParameters: GetPipelineRunNodeStepsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PipelineStepImpl>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineRunNodeSteps().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineRunNodeSteps().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling getPipelineRunNodeSteps().'
            );
        }

        if (requestParameters['node'] == null) {
            throw new runtime.RequiredError(
                'node',
                'Required parameter "node" was null or undefined when calling getPipelineRunNodeSteps().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))).replace(`{${"node"}}`, encodeURIComponent(String(requestParameters['node']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineStepImplFromJSON));
    }

    /**
     * Retrieve run node steps details for an organization pipeline
     */
    async getPipelineRunNodeSteps(requestParameters: GetPipelineRunNodeStepsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PipelineStepImpl>> {
        const response = await this.getPipelineRunNodeStepsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve run nodes details for an organization pipeline
     */
    async getPipelineRunNodesRaw(requestParameters: GetPipelineRunNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PipelineRunNode>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineRunNodes().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineRunNodes().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling getPipelineRunNodes().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineRunNodeFromJSON));
    }

    /**
     * Retrieve run nodes details for an organization pipeline
     */
    async getPipelineRunNodes(requestParameters: GetPipelineRunNodesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PipelineRunNode>> {
        const response = await this.getPipelineRunNodesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all runs details for an organization pipeline
     */
    async getPipelineRunsRaw(requestParameters: GetPipelineRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PipelineRun>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelineRuns().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling getPipelineRuns().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineRunFromJSON));
    }

    /**
     * Retrieve all runs details for an organization pipeline
     */
    async getPipelineRuns(requestParameters: GetPipelineRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PipelineRun>> {
        const response = await this.getPipelineRunsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all pipelines details for an organization
     */
    async getPipelinesRaw(requestParameters: GetPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Pipeline>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getPipelines().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineFromJSON));
    }

    /**
     * Retrieve all pipelines details for an organization
     */
    async getPipelines(requestParameters: GetPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Pipeline>> {
        const response = await this.getPipelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve SCM details for an organization
     */
    async getSCMRaw(requestParameters: GetSCMRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GithubScm>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getSCM().'
            );
        }

        if (requestParameters['scm'] == null) {
            throw new runtime.RequiredError(
                'scm',
                'Required parameter "scm" was null or undefined when calling getSCM().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/scm/{scm}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"scm"}}`, encodeURIComponent(String(requestParameters['scm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GithubScmFromJSON(jsonValue));
    }

    /**
     * Retrieve SCM details for an organization
     */
    async getSCM(requestParameters: GetSCMRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GithubScm> {
        const response = await this.getSCMRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve SCM organization repositories details for an organization
     */
    async getSCMOrganisationRepositoriesRaw(requestParameters: GetSCMOrganisationRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GithubOrganization>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getSCMOrganisationRepositories().'
            );
        }

        if (requestParameters['scm'] == null) {
            throw new runtime.RequiredError(
                'scm',
                'Required parameter "scm" was null or undefined when calling getSCMOrganisationRepositories().'
            );
        }

        if (requestParameters['scmOrganisation'] == null) {
            throw new runtime.RequiredError(
                'scmOrganisation',
                'Required parameter "scmOrganisation" was null or undefined when calling getSCMOrganisationRepositories().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['credentialId'] != null) {
            queryParameters['credentialId'] = requestParameters['credentialId'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['pageNumber'] != null) {
            queryParameters['pageNumber'] = requestParameters['pageNumber'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"scm"}}`, encodeURIComponent(String(requestParameters['scm']))).replace(`{${"scmOrganisation"}}`, encodeURIComponent(String(requestParameters['scmOrganisation']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubOrganizationFromJSON));
    }

    /**
     * Retrieve SCM organization repositories details for an organization
     */
    async getSCMOrganisationRepositories(requestParameters: GetSCMOrganisationRepositoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GithubOrganization>> {
        const response = await this.getSCMOrganisationRepositoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve SCM organization repository details for an organization
     */
    async getSCMOrganisationRepositoryRaw(requestParameters: GetSCMOrganisationRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GithubOrganization>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getSCMOrganisationRepository().'
            );
        }

        if (requestParameters['scm'] == null) {
            throw new runtime.RequiredError(
                'scm',
                'Required parameter "scm" was null or undefined when calling getSCMOrganisationRepository().'
            );
        }

        if (requestParameters['scmOrganisation'] == null) {
            throw new runtime.RequiredError(
                'scmOrganisation',
                'Required parameter "scmOrganisation" was null or undefined when calling getSCMOrganisationRepository().'
            );
        }

        if (requestParameters['repository'] == null) {
            throw new runtime.RequiredError(
                'repository',
                'Required parameter "repository" was null or undefined when calling getSCMOrganisationRepository().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['credentialId'] != null) {
            queryParameters['credentialId'] = requestParameters['credentialId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"scm"}}`, encodeURIComponent(String(requestParameters['scm']))).replace(`{${"scmOrganisation"}}`, encodeURIComponent(String(requestParameters['scmOrganisation']))).replace(`{${"repository"}}`, encodeURIComponent(String(requestParameters['repository']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubOrganizationFromJSON));
    }

    /**
     * Retrieve SCM organization repository details for an organization
     */
    async getSCMOrganisationRepository(requestParameters: GetSCMOrganisationRepositoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GithubOrganization>> {
        const response = await this.getSCMOrganisationRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve SCM organizations details for an organization
     */
    async getSCMOrganisationsRaw(requestParameters: GetSCMOrganisationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GithubOrganization>>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getSCMOrganisations().'
            );
        }

        if (requestParameters['scm'] == null) {
            throw new runtime.RequiredError(
                'scm',
                'Required parameter "scm" was null or undefined when calling getSCMOrganisations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['credentialId'] != null) {
            queryParameters['credentialId'] = requestParameters['credentialId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/scm/{scm}/organizations`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"scm"}}`, encodeURIComponent(String(requestParameters['scm']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GithubOrganizationFromJSON));
    }

    /**
     * Retrieve SCM organizations details for an organization
     */
    async getSCMOrganisations(requestParameters: GetSCMOrganisationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GithubOrganization>> {
        const response = await this.getSCMOrganisationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve user details for an organization
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getUser().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/users/{user}`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Retrieve user details for an organization
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve user favorites details for an organization
     */
    async getUserFavoritesRaw(requestParameters: GetUserFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FavoriteImpl>>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling getUserFavorites().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/users/{user}/favorites`.replace(`{${"user"}}`, encodeURIComponent(String(requestParameters['user']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FavoriteImplFromJSON));
    }

    /**
     * Retrieve user favorites details for an organization
     */
    async getUserFavorites(requestParameters: GetUserFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FavoriteImpl>> {
        const response = await this.getUserFavoritesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve users details for an organization
     */
    async getUsersRaw(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling getUsers().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/users/`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * Retrieve users details for an organization
     */
    async getUsers(requestParameters: GetUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.getUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Replay an organization pipeline run
     */
    async postPipelineRunRaw(requestParameters: PostPipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueueItemImpl>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling postPipelineRun().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling postPipelineRun().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling postPipelineRun().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueueItemImplFromJSON(jsonValue));
    }

    /**
     * Replay an organization pipeline run
     */
    async postPipelineRun(requestParameters: PostPipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueueItemImpl> {
        const response = await this.postPipelineRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Start a build for an organization pipeline
     */
    async postPipelineRunsRaw(requestParameters: PostPipelineRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QueueItemImpl>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling postPipelineRuns().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling postPipelineRuns().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QueueItemImplFromJSON(jsonValue));
    }

    /**
     * Start a build for an organization pipeline
     */
    async postPipelineRuns(requestParameters: PostPipelineRunsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QueueItemImpl> {
        const response = await this.postPipelineRunsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Favorite/unfavorite a pipeline
     */
    async putPipelineFavoriteRaw(requestParameters: PutPipelineFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FavoriteImpl>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling putPipelineFavorite().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling putPipelineFavorite().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling putPipelineFavorite().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FavoriteImplFromJSON(jsonValue));
    }

    /**
     * Favorite/unfavorite a pipeline
     */
    async putPipelineFavorite(requestParameters: PutPipelineFavoriteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FavoriteImpl> {
        const response = await this.putPipelineFavoriteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stop a build of an organization pipeline
     */
    async putPipelineRunRaw(requestParameters: PutPipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineRun>> {
        if (requestParameters['organization'] == null) {
            throw new runtime.RequiredError(
                'organization',
                'Required parameter "organization" was null or undefined when calling putPipelineRun().'
            );
        }

        if (requestParameters['pipeline'] == null) {
            throw new runtime.RequiredError(
                'pipeline',
                'Required parameter "pipeline" was null or undefined when calling putPipelineRun().'
            );
        }

        if (requestParameters['run'] == null) {
            throw new runtime.RequiredError(
                'run',
                'Required parameter "run" was null or undefined when calling putPipelineRun().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['blocking'] != null) {
            queryParameters['blocking'] = requestParameters['blocking'];
        }

        if (requestParameters['timeOutInSecs'] != null) {
            queryParameters['timeOutInSecs'] = requestParameters['timeOutInSecs'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop`.replace(`{${"organization"}}`, encodeURIComponent(String(requestParameters['organization']))).replace(`{${"pipeline"}}`, encodeURIComponent(String(requestParameters['pipeline']))).replace(`{${"run"}}`, encodeURIComponent(String(requestParameters['run']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineRunFromJSON(jsonValue));
    }

    /**
     * Stop a build of an organization pipeline
     */
    async putPipelineRun(requestParameters: PutPipelineRunRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineRun> {
        const response = await this.putPipelineRunRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for any resource details
     */
    async searchRaw(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling search().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/search/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Search for any resource details
     */
    async search(requestParameters: SearchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.searchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get classes details
     */
    async searchClassesRaw(requestParameters: SearchClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['q'] == null) {
            throw new runtime.RequiredError(
                'q',
                'Required parameter "q" was null or undefined when calling searchClasses().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['q'] != null) {
            queryParameters['q'] = requestParameters['q'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/blue/rest/classes/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get classes details
     */
    async searchClasses(requestParameters: SearchClassesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.searchClassesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
