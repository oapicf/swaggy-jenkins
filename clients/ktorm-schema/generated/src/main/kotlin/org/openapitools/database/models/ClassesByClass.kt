/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param classes 
 * @param propertyClass 
 */
object ClassesByClasss : BaseTable<ClassesByClass>("ClassesByClass") {
    val propertyClass = text("_class") /* null */

    /**
     * Create an entity of type ClassesByClass from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ClassesByClass(
        classes = emptyList() /* kotlin.Array<kotlin.String>? */,
        propertyClass = row[propertyClass]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type ClassesByClass to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ClassesByClass()
    * database.update(ClassesByClasss, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ClassesByClass) {
        this.apply {
            set(ClassesByClasss.propertyClass, entity.propertyClass)
        }
    }

}


object ClassesByClassClasses : BaseTable<Pair<kotlin.Long, kotlin.String>>("ClassesByClassClasses") {
    val classesByClass = long("classesByClass")
    val classes = text("classes")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[classesByClass] ?: 0, row[classes] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(ClassesByClassClasses.classesByClass, entity.first)
            set(ClassesByClassClasses.classes, entity.second)
        }
    }

}

