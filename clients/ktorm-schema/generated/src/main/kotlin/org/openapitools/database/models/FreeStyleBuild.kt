/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param number 
 * @param url 
 * @param actions 
 * @param building 
 * @param description 
 * @param displayName 
 * @param duration 
 * @param estimatedDuration 
 * @param executor 
 * @param fullDisplayName 
 * @param id 
 * @param keepLog 
 * @param queueId 
 * @param result 
 * @param timestamp 
 * @param builtOn 
 * @param changeSet 
 */
object FreeStyleBuilds : BaseTable<FreeStyleBuild>("FreeStyleBuild") {
    val propertyClass = text("_class") /* null */
    val number = int("number") /* null */
    val url = text("url") /* null */
    val building = boolean("building") /* null */
    val description = text("description") /* null */
    val displayName = text("displayName") /* null */
    val duration = int("duration") /* null */
    val estimatedDuration = int("estimatedDuration") /* null */
    val executor = text("executor") /* null */
    val fullDisplayName = text("fullDisplayName") /* null */
    val id = text("id") /* null */
    val keepLog = boolean("keepLog") /* null */
    val queueId = int("queueId") /* null */
    val result = text("result") /* null */
    val timestamp = int("timestamp") /* null */
    val builtOn = text("builtOn") /* null */
    val changeSet = long("changeSet") /* null */

    /**
     * Create an entity of type FreeStyleBuild from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FreeStyleBuild(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        number = row[number]  /* kotlin.Int? */,
        url = row[url]  /* kotlin.String? */,
        actions = emptyList() /* kotlin.Array<CauseAction>? */,
        building = row[building]  /* kotlin.Boolean? */,
        description = row[description]  /* kotlin.String? */,
        displayName = row[displayName]  /* kotlin.String? */,
        duration = row[duration]  /* kotlin.Int? */,
        estimatedDuration = row[estimatedDuration]  /* kotlin.Int? */,
        executor = row[executor]  /* kotlin.String? */,
        fullDisplayName = row[fullDisplayName]  /* kotlin.String? */,
        id = row[id]  /* kotlin.String? */,
        keepLog = row[keepLog]  /* kotlin.Boolean? */,
        queueId = row[queueId]  /* kotlin.Int? */,
        result = row[result]  /* kotlin.String? */,
        timestamp = row[timestamp]  /* kotlin.Int? */,
        builtOn = row[builtOn]  /* kotlin.String? */,
        changeSet = EmptyChangeLogSets.createEntity(row, withReferences) /* EmptyChangeLogSet? */
    )

    /**
    * Assign all the columns from the entity of type FreeStyleBuild to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FreeStyleBuild()
    * database.update(FreeStyleBuilds, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FreeStyleBuild) {
        this.apply {
            set(FreeStyleBuilds.propertyClass, entity.propertyClass)
            set(FreeStyleBuilds.number, entity.number)
            set(FreeStyleBuilds.url, entity.url)
            set(FreeStyleBuilds.building, entity.building)
            set(FreeStyleBuilds.description, entity.description)
            set(FreeStyleBuilds.displayName, entity.displayName)
            set(FreeStyleBuilds.duration, entity.duration)
            set(FreeStyleBuilds.estimatedDuration, entity.estimatedDuration)
            set(FreeStyleBuilds.executor, entity.executor)
            set(FreeStyleBuilds.fullDisplayName, entity.fullDisplayName)
            set(FreeStyleBuilds.id, entity.id)
            set(FreeStyleBuilds.keepLog, entity.keepLog)
            set(FreeStyleBuilds.queueId, entity.queueId)
            set(FreeStyleBuilds.result, entity.result)
            set(FreeStyleBuilds.timestamp, entity.timestamp)
            set(FreeStyleBuilds.builtOn, entity.builtOn)
            set(FreeStyleBuilds.changeSet, entity.changeSet)
        }
    }

}


object FreeStyleBuildCauseAction : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FreeStyleBuildCauseAction") {
    val freeStyleBuild = long("freeStyleBuild")
    val causeAction = long("causeAction")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[freeStyleBuild] ?: 0, row[causeAction] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FreeStyleBuildCauseAction.freeStyleBuild, entity.first)
            set(FreeStyleBuildCauseAction.causeAction, entity.second)
        }
    }

}

