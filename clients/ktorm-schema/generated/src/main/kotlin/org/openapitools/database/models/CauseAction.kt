/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param causes 
 */
object CauseActions : BaseTable<CauseAction>("CauseAction") {
    val propertyClass = text("_class") /* null */

    /**
     * Create an entity of type CauseAction from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = CauseAction(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        causes = emptyList() /* kotlin.Array<CauseUserIdCause>? */
    )

    /**
    * Assign all the columns from the entity of type CauseAction to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = CauseAction()
    * database.update(CauseActions, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: CauseAction) {
        this.apply {
            set(CauseActions.propertyClass, entity.propertyClass)
        }
    }

}


object CauseActionCauseUserIdCause : BaseTable<Pair<kotlin.Long, kotlin.Long>>("CauseActionCauseUserIdCause") {
    val causeAction = long("causeAction")
    val causeUserIdCause = long("causeUserIdCause")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[causeAction] ?: 0, row[causeUserIdCause] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(CauseActionCauseUserIdCause.causeAction, entity.first)
            set(CauseActionCauseUserIdCause.causeUserIdCause, entity.second)
        }
    }

}

