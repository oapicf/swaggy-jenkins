/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param hudsonNodeMonitorsSwapSpaceMonitor 
 * @param hudsonNodeMonitorsTemporarySpaceMonitor 
 * @param hudsonNodeMonitorsDiskSpaceMonitor 
 * @param hudsonNodeMonitorsArchitectureMonitor 
 * @param hudsonNodeMonitorsResponseTimeMonitor 
 * @param hudsonNodeMonitorsClockMonitor 
 * @param propertyClass 
 */
object HudsonMasterComputermonitorDatas : BaseTable<HudsonMasterComputermonitorData>("HudsonMasterComputermonitorData") {
    val hudsonNodeMonitorsSwapSpaceMonitor = long("hudsonnode_monitorsSwapSpaceMonitor") /* null */
    val hudsonNodeMonitorsTemporarySpaceMonitor = long("hudsonnode_monitorsTemporarySpaceMonitor") /* null */
    val hudsonNodeMonitorsDiskSpaceMonitor = long("hudsonnode_monitorsDiskSpaceMonitor") /* null */
    val hudsonNodeMonitorsArchitectureMonitor = text("hudsonnode_monitorsArchitectureMonitor") /* null */
    val hudsonNodeMonitorsResponseTimeMonitor = long("hudsonnode_monitorsResponseTimeMonitor") /* null */
    val hudsonNodeMonitorsClockMonitor = long("hudsonnode_monitorsClockMonitor") /* null */
    val propertyClass = text("_class") /* null */

    /**
     * Create an entity of type HudsonMasterComputermonitorData from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = HudsonMasterComputermonitorData(
        hudsonNodeMonitorsSwapSpaceMonitor = SwapSpaceMonitorMemoryUsage2s.createEntity(row, withReferences) /* SwapSpaceMonitorMemoryUsage2? */,
        hudsonNodeMonitorsTemporarySpaceMonitor = DiskSpaceMonitorDescriptorDiskSpaces.createEntity(row, withReferences) /* DiskSpaceMonitorDescriptorDiskSpace? */,
        hudsonNodeMonitorsDiskSpaceMonitor = DiskSpaceMonitorDescriptorDiskSpaces.createEntity(row, withReferences) /* DiskSpaceMonitorDescriptorDiskSpace? */,
        hudsonNodeMonitorsArchitectureMonitor = row[hudsonNodeMonitorsArchitectureMonitor]  /* kotlin.String? */,
        hudsonNodeMonitorsResponseTimeMonitor = ResponseTimeMonitorDatas.createEntity(row, withReferences) /* ResponseTimeMonitorData? */,
        hudsonNodeMonitorsClockMonitor = ClockDifferences.createEntity(row, withReferences) /* ClockDifference? */,
        propertyClass = row[propertyClass]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type HudsonMasterComputermonitorData to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = HudsonMasterComputermonitorData()
    * database.update(HudsonMasterComputermonitorDatas, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: HudsonMasterComputermonitorData) {
        this.apply {
            set(HudsonMasterComputermonitorDatas.hudsonNodeMonitorsSwapSpaceMonitor, entity.hudsonNodeMonitorsSwapSpaceMonitor)
            set(HudsonMasterComputermonitorDatas.hudsonNodeMonitorsTemporarySpaceMonitor, entity.hudsonNodeMonitorsTemporarySpaceMonitor)
            set(HudsonMasterComputermonitorDatas.hudsonNodeMonitorsDiskSpaceMonitor, entity.hudsonNodeMonitorsDiskSpaceMonitor)
            set(HudsonMasterComputermonitorDatas.hudsonNodeMonitorsArchitectureMonitor, entity.hudsonNodeMonitorsArchitectureMonitor)
            set(HudsonMasterComputermonitorDatas.hudsonNodeMonitorsResponseTimeMonitor, entity.hudsonNodeMonitorsResponseTimeMonitor)
            set(HudsonMasterComputermonitorDatas.hudsonNodeMonitorsClockMonitor, entity.hudsonNodeMonitorsClockMonitor)
            set(HudsonMasterComputermonitorDatas.propertyClass, entity.propertyClass)
        }
    }

}


