/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param actions 
 * @param blocked 
 * @param buildable 
 * @param id 
 * @param inQueueSince 
 * @param params 
 * @param stuck 
 * @param task 
 * @param url 
 * @param why 
 * @param buildableStartMilliseconds 
 */
object QueueBlockedItems : BaseTable<QueueBlockedItem>("QueueBlockedItem") {
    val propertyClass = text("_class") /* null */
    val blocked = boolean("blocked") /* null */
    val buildable = boolean("buildable") /* null */
    val id = int("id") /* null */
    val inQueueSince = int("inQueueSince") /* null */
    val params = text("params") /* null */
    val stuck = boolean("stuck") /* null */
    val task = long("task") /* null */
    val url = text("url") /* null */
    val why = text("why") /* null */
    val buildableStartMilliseconds = int("buildableStartMilliseconds") /* null */

    /**
     * Create an entity of type QueueBlockedItem from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = QueueBlockedItem(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        actions = emptyList() /* kotlin.Array<CauseAction>? */,
        blocked = row[blocked]  /* kotlin.Boolean? */,
        buildable = row[buildable]  /* kotlin.Boolean? */,
        id = row[id]  /* kotlin.Int? */,
        inQueueSince = row[inQueueSince]  /* kotlin.Int? */,
        params = row[params]  /* kotlin.String? */,
        stuck = row[stuck]  /* kotlin.Boolean? */,
        task = FreeStyleProjects.createEntity(row, withReferences) /* FreeStyleProject? */,
        url = row[url]  /* kotlin.String? */,
        why = row[why]  /* kotlin.String? */,
        buildableStartMilliseconds = row[buildableStartMilliseconds]  /* kotlin.Int? */
    )

    /**
    * Assign all the columns from the entity of type QueueBlockedItem to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = QueueBlockedItem()
    * database.update(QueueBlockedItems, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: QueueBlockedItem) {
        this.apply {
            set(QueueBlockedItems.propertyClass, entity.propertyClass)
            set(QueueBlockedItems.blocked, entity.blocked)
            set(QueueBlockedItems.buildable, entity.buildable)
            set(QueueBlockedItems.id, entity.id)
            set(QueueBlockedItems.inQueueSince, entity.inQueueSince)
            set(QueueBlockedItems.params, entity.params)
            set(QueueBlockedItems.stuck, entity.stuck)
            set(QueueBlockedItems.task, entity.task)
            set(QueueBlockedItems.url, entity.url)
            set(QueueBlockedItems.why, entity.why)
            set(QueueBlockedItems.buildableStartMilliseconds, entity.buildableStartMilliseconds)
        }
    }

}


object QueueBlockedItemCauseAction : BaseTable<Pair<kotlin.Long, kotlin.Long>>("QueueBlockedItemCauseAction") {
    val queueBlockedItem = long("queueBlockedItem")
    val causeAction = long("causeAction")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[queueBlockedItem] ?: 0, row[causeAction] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(QueueBlockedItemCauseAction.queueBlockedItem, entity.first)
            set(QueueBlockedItemCauseAction.causeAction, entity.second)
        }
    }

}

