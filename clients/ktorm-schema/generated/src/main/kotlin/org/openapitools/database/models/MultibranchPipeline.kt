/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param displayName 
 * @param estimatedDurationInMillis 
 * @param latestRun 
 * @param name 
 * @param organization 
 * @param weatherScore 
 * @param branchNames 
 * @param numberOfFailingBranches 
 * @param numberOfFailingPullRequests 
 * @param numberOfSuccessfulBranches 
 * @param numberOfSuccessfulPullRequests 
 * @param totalNumberOfBranches 
 * @param totalNumberOfPullRequests 
 * @param propertyClass 
 */
object MultibranchPipelines : BaseTable<MultibranchPipeline>("MultibranchPipeline") {
    val displayName = text("displayName") /* null */
    val estimatedDurationInMillis = int("estimatedDurationInMillis") /* null */
    val latestRun = text("latestRun") /* null */
    val name = text("name") /* null */
    val organization = text("organization") /* null */
    val weatherScore = int("weatherScore") /* null */
    val numberOfFailingBranches = int("numberOfFailingBranches") /* null */
    val numberOfFailingPullRequests = int("numberOfFailingPullRequests") /* null */
    val numberOfSuccessfulBranches = int("numberOfSuccessfulBranches") /* null */
    val numberOfSuccessfulPullRequests = int("numberOfSuccessfulPullRequests") /* null */
    val totalNumberOfBranches = int("totalNumberOfBranches") /* null */
    val totalNumberOfPullRequests = int("totalNumberOfPullRequests") /* null */
    val propertyClass = text("_class") /* null */

    /**
     * Create an entity of type MultibranchPipeline from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = MultibranchPipeline(
        displayName = row[displayName]  /* kotlin.String? */,
        estimatedDurationInMillis = row[estimatedDurationInMillis]  /* kotlin.Int? */,
        latestRun = row[latestRun]  /* kotlin.String? */,
        name = row[name]  /* kotlin.String? */,
        organization = row[organization]  /* kotlin.String? */,
        weatherScore = row[weatherScore]  /* kotlin.Int? */,
        branchNames = emptyList() /* kotlin.Array<kotlin.String>? */,
        numberOfFailingBranches = row[numberOfFailingBranches]  /* kotlin.Int? */,
        numberOfFailingPullRequests = row[numberOfFailingPullRequests]  /* kotlin.Int? */,
        numberOfSuccessfulBranches = row[numberOfSuccessfulBranches]  /* kotlin.Int? */,
        numberOfSuccessfulPullRequests = row[numberOfSuccessfulPullRequests]  /* kotlin.Int? */,
        totalNumberOfBranches = row[totalNumberOfBranches]  /* kotlin.Int? */,
        totalNumberOfPullRequests = row[totalNumberOfPullRequests]  /* kotlin.Int? */,
        propertyClass = row[propertyClass]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type MultibranchPipeline to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = MultibranchPipeline()
    * database.update(MultibranchPipelines, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: MultibranchPipeline) {
        this.apply {
            set(MultibranchPipelines.displayName, entity.displayName)
            set(MultibranchPipelines.estimatedDurationInMillis, entity.estimatedDurationInMillis)
            set(MultibranchPipelines.latestRun, entity.latestRun)
            set(MultibranchPipelines.name, entity.name)
            set(MultibranchPipelines.organization, entity.organization)
            set(MultibranchPipelines.weatherScore, entity.weatherScore)
            set(MultibranchPipelines.numberOfFailingBranches, entity.numberOfFailingBranches)
            set(MultibranchPipelines.numberOfFailingPullRequests, entity.numberOfFailingPullRequests)
            set(MultibranchPipelines.numberOfSuccessfulBranches, entity.numberOfSuccessfulBranches)
            set(MultibranchPipelines.numberOfSuccessfulPullRequests, entity.numberOfSuccessfulPullRequests)
            set(MultibranchPipelines.totalNumberOfBranches, entity.totalNumberOfBranches)
            set(MultibranchPipelines.totalNumberOfPullRequests, entity.totalNumberOfPullRequests)
            set(MultibranchPipelines.propertyClass, entity.propertyClass)
        }
    }

}


object MultibranchPipelineBranchNames : BaseTable<Pair<kotlin.Long, kotlin.String>>("MultibranchPipelineBranchNames") {
    val multibranchPipeline = long("multibranchPipeline")
    val branchNames = text("branchNames")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.String> =
        Pair(row[multibranchPipeline] ?: 0, row[branchNames] ?: "")

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.String>) {
        this.apply {
            set(MultibranchPipelineBranchNames.multibranchPipeline, entity.first)
            set(MultibranchPipelineBranchNames.branchNames, entity.second)
        }
    }

}

