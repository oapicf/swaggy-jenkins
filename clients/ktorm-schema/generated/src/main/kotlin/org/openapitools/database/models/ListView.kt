/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param description 
 * @param jobs 
 * @param name 
 * @param url 
 */
object ListViews : BaseTable<ListView>("ListView") {
    val propertyClass = text("_class") /* null */
    val description = text("description") /* null */
    val name = text("name") /* null */
    val url = text("url") /* null */

    /**
     * Create an entity of type ListView from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ListView(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        description = row[description]  /* kotlin.String? */,
        jobs = emptyList() /* kotlin.Array<FreeStyleProject>? */,
        name = row[name]  /* kotlin.String? */,
        url = row[url]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type ListView to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ListView()
    * database.update(ListViews, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ListView) {
        this.apply {
            set(ListViews.propertyClass, entity.propertyClass)
            set(ListViews.description, entity.description)
            set(ListViews.name, entity.name)
            set(ListViews.url, entity.url)
        }
    }

}


object ListViewFreeStyleProject : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ListViewFreeStyleProject") {
    val listView = long("listView")
    val freeStyleProject = long("freeStyleProject")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[listView] ?: 0, row[freeStyleProject] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ListViewFreeStyleProject.listView, entity.first)
            set(ListViewFreeStyleProject.freeStyleProject, entity.second)
        }
    }

}

