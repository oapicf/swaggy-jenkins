/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param links 
 * @param displayName 
 * @param durationInMillis 
 * @param id 
 * @param input 
 * @param result 
 * @param startTime 
 * @param state 
 */
object PipelineStepImpls : BaseTable<PipelineStepImpl>("PipelineStepImpl") {
    val propertyClass = text("_class") /* null */
    val links = long("_links") /* null */
    val displayName = text("displayName") /* null */
    val durationInMillis = int("durationInMillis") /* null */
    val id = text("id") /* null */
    val input = long("input") /* null */
    val result = text("result") /* null */
    val startTime = text("startTime") /* null */
    val state = text("state") /* null */

    /**
     * Create an entity of type PipelineStepImpl from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = PipelineStepImpl(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        links = PipelineStepImpllinkss.createEntity(row, withReferences) /* PipelineStepImpllinks? */,
        displayName = row[displayName]  /* kotlin.String? */,
        durationInMillis = row[durationInMillis]  /* kotlin.Int? */,
        id = row[id]  /* kotlin.String? */,
        input = InputStepImpls.createEntity(row, withReferences) /* InputStepImpl? */,
        result = row[result]  /* kotlin.String? */,
        startTime = row[startTime]  /* kotlin.String? */,
        state = row[state]  /* kotlin.String? */
    )

    /**
    * Assign all the columns from the entity of type PipelineStepImpl to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = PipelineStepImpl()
    * database.update(PipelineStepImpls, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: PipelineStepImpl) {
        this.apply {
            set(PipelineStepImpls.propertyClass, entity.propertyClass)
            set(PipelineStepImpls.links, entity.links)
            set(PipelineStepImpls.displayName, entity.displayName)
            set(PipelineStepImpls.durationInMillis, entity.durationInMillis)
            set(PipelineStepImpls.id, entity.id)
            set(PipelineStepImpls.input, entity.input)
            set(PipelineStepImpls.result, entity.result)
            set(PipelineStepImpls.startTime, entity.startTime)
            set(PipelineStepImpls.state, entity.state)
        }
    }

}


