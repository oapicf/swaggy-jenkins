/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param name 
 * @param url 
 * @param color 
 * @param actions 
 * @param description 
 * @param displayName 
 * @param displayNameOrNull 
 * @param fullDisplayName 
 * @param fullName 
 * @param buildable 
 * @param builds 
 * @param firstBuild 
 * @param healthReport 
 * @param inQueue 
 * @param keepDependencies 
 * @param lastBuild 
 * @param lastCompletedBuild 
 * @param lastFailedBuild 
 * @param lastStableBuild 
 * @param lastSuccessfulBuild 
 * @param lastUnstableBuild 
 * @param lastUnsuccessfulBuild 
 * @param nextBuildNumber 
 * @param queueItem 
 * @param concurrentBuild 
 * @param scm 
 */
object FreeStyleProjects : BaseTable<FreeStyleProject>("FreeStyleProject") {
    val propertyClass = text("_class") /* null */
    val name = text("name") /* null */
    val url = text("url") /* null */
    val color = text("color") /* null */
    val description = text("description") /* null */
    val displayName = text("displayName") /* null */
    val displayNameOrNull = text("displayNameOrNull") /* null */
    val fullDisplayName = text("fullDisplayName") /* null */
    val fullName = text("fullName") /* null */
    val buildable = boolean("buildable") /* null */
    val firstBuild = long("firstBuild") /* null */
    val inQueue = boolean("inQueue") /* null */
    val keepDependencies = boolean("keepDependencies") /* null */
    val lastBuild = long("lastBuild") /* null */
    val lastCompletedBuild = long("lastCompletedBuild") /* null */
    val lastFailedBuild = text("lastFailedBuild") /* null */
    val lastStableBuild = long("lastStableBuild") /* null */
    val lastSuccessfulBuild = long("lastSuccessfulBuild") /* null */
    val lastUnstableBuild = text("lastUnstableBuild") /* null */
    val lastUnsuccessfulBuild = text("lastUnsuccessfulBuild") /* null */
    val nextBuildNumber = int("nextBuildNumber") /* null */
    val queueItem = text("queueItem") /* null */
    val concurrentBuild = boolean("concurrentBuild") /* null */
    val scm = long("scm") /* null */

    /**
     * Create an entity of type FreeStyleProject from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = FreeStyleProject(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        name = row[name]  /* kotlin.String? */,
        url = row[url]  /* kotlin.String? */,
        color = row[color]  /* kotlin.String? */,
        actions = emptyList() /* kotlin.Array<FreeStyleProjectactions>? */,
        description = row[description]  /* kotlin.String? */,
        displayName = row[displayName]  /* kotlin.String? */,
        displayNameOrNull = row[displayNameOrNull]  /* kotlin.String? */,
        fullDisplayName = row[fullDisplayName]  /* kotlin.String? */,
        fullName = row[fullName]  /* kotlin.String? */,
        buildable = row[buildable]  /* kotlin.Boolean? */,
        builds = emptyList() /* kotlin.Array<FreeStyleBuild>? */,
        firstBuild = FreeStyleBuilds.createEntity(row, withReferences) /* FreeStyleBuild? */,
        healthReport = emptyList() /* kotlin.Array<FreeStyleProjecthealthReport>? */,
        inQueue = row[inQueue]  /* kotlin.Boolean? */,
        keepDependencies = row[keepDependencies]  /* kotlin.Boolean? */,
        lastBuild = FreeStyleBuilds.createEntity(row, withReferences) /* FreeStyleBuild? */,
        lastCompletedBuild = FreeStyleBuilds.createEntity(row, withReferences) /* FreeStyleBuild? */,
        lastFailedBuild = row[lastFailedBuild]  /* kotlin.String? */,
        lastStableBuild = FreeStyleBuilds.createEntity(row, withReferences) /* FreeStyleBuild? */,
        lastSuccessfulBuild = FreeStyleBuilds.createEntity(row, withReferences) /* FreeStyleBuild? */,
        lastUnstableBuild = row[lastUnstableBuild]  /* kotlin.String? */,
        lastUnsuccessfulBuild = row[lastUnsuccessfulBuild]  /* kotlin.String? */,
        nextBuildNumber = row[nextBuildNumber]  /* kotlin.Int? */,
        queueItem = row[queueItem]  /* kotlin.String? */,
        concurrentBuild = row[concurrentBuild]  /* kotlin.Boolean? */,
        scm = NullSCMs.createEntity(row, withReferences) /* NullSCM? */
    )

    /**
    * Assign all the columns from the entity of type FreeStyleProject to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = FreeStyleProject()
    * database.update(FreeStyleProjects, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: FreeStyleProject) {
        this.apply {
            set(FreeStyleProjects.propertyClass, entity.propertyClass)
            set(FreeStyleProjects.name, entity.name)
            set(FreeStyleProjects.url, entity.url)
            set(FreeStyleProjects.color, entity.color)
            set(FreeStyleProjects.description, entity.description)
            set(FreeStyleProjects.displayName, entity.displayName)
            set(FreeStyleProjects.displayNameOrNull, entity.displayNameOrNull)
            set(FreeStyleProjects.fullDisplayName, entity.fullDisplayName)
            set(FreeStyleProjects.fullName, entity.fullName)
            set(FreeStyleProjects.buildable, entity.buildable)
            set(FreeStyleProjects.firstBuild, entity.firstBuild)
            set(FreeStyleProjects.inQueue, entity.inQueue)
            set(FreeStyleProjects.keepDependencies, entity.keepDependencies)
            set(FreeStyleProjects.lastBuild, entity.lastBuild)
            set(FreeStyleProjects.lastCompletedBuild, entity.lastCompletedBuild)
            set(FreeStyleProjects.lastFailedBuild, entity.lastFailedBuild)
            set(FreeStyleProjects.lastStableBuild, entity.lastStableBuild)
            set(FreeStyleProjects.lastSuccessfulBuild, entity.lastSuccessfulBuild)
            set(FreeStyleProjects.lastUnstableBuild, entity.lastUnstableBuild)
            set(FreeStyleProjects.lastUnsuccessfulBuild, entity.lastUnsuccessfulBuild)
            set(FreeStyleProjects.nextBuildNumber, entity.nextBuildNumber)
            set(FreeStyleProjects.queueItem, entity.queueItem)
            set(FreeStyleProjects.concurrentBuild, entity.concurrentBuild)
            set(FreeStyleProjects.scm, entity.scm)
        }
    }

}


object FreeStyleProjectFreeStyleProjectactions : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FreeStyleProjectFreeStyleProjectactions") {
    val freeStyleProject = long("freeStyleProject")
    val freeStyleProjectactions = long("freeStyleProjectactions")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[freeStyleProject] ?: 0, row[freeStyleProjectactions] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FreeStyleProjectFreeStyleProjectactions.freeStyleProject, entity.first)
            set(FreeStyleProjectFreeStyleProjectactions.freeStyleProjectactions, entity.second)
        }
    }

}

object FreeStyleProjectFreeStyleBuild : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FreeStyleProjectFreeStyleBuild") {
    val freeStyleProject = long("freeStyleProject")
    val freeStyleBuild = long("freeStyleBuild")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[freeStyleProject] ?: 0, row[freeStyleBuild] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FreeStyleProjectFreeStyleBuild.freeStyleProject, entity.first)
            set(FreeStyleProjectFreeStyleBuild.freeStyleBuild, entity.second)
        }
    }

}

object FreeStyleProjectFreeStyleProjecthealthReport : BaseTable<Pair<kotlin.Long, kotlin.Long>>("FreeStyleProjectFreeStyleProjecthealthReport") {
    val freeStyleProject = long("freeStyleProject")
    val freeStyleProjecthealthReport = long("freeStyleProjecthealthReport")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[freeStyleProject] ?: 0, row[freeStyleProjecthealthReport] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(FreeStyleProjectFreeStyleProjecthealthReport.freeStyleProject, entity.first)
            set(FreeStyleProjectFreeStyleProjecthealthReport.freeStyleProjecthealthReport, entity.second)
        }
    }

}

