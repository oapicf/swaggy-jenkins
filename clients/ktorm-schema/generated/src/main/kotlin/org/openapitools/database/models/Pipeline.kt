/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param organization 
 * @param name 
 * @param displayName 
 * @param fullName 
 * @param weatherScore 
 * @param estimatedDurationInMillis 
 * @param latestRun 
 */
object Pipelines : BaseTable<Pipeline>("Pipeline") {
    val propertyClass = text("_class") /* null */
    val organization = text("organization") /* null */
    val name = text("name") /* null */
    val displayName = text("displayName") /* null */
    val fullName = text("fullName") /* null */
    val weatherScore = int("weatherScore") /* null */
    val estimatedDurationInMillis = int("estimatedDurationInMillis") /* null */
    val latestRun = long("latestRun") /* null */

    /**
     * Create an entity of type Pipeline from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = Pipeline(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        organization = row[organization]  /* kotlin.String? */,
        name = row[name]  /* kotlin.String? */,
        displayName = row[displayName]  /* kotlin.String? */,
        fullName = row[fullName]  /* kotlin.String? */,
        weatherScore = row[weatherScore]  /* kotlin.Int? */,
        estimatedDurationInMillis = row[estimatedDurationInMillis]  /* kotlin.Int? */,
        latestRun = PipelinelatestRuns.createEntity(row, withReferences) /* PipelinelatestRun? */
    )

    /**
    * Assign all the columns from the entity of type Pipeline to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = Pipeline()
    * database.update(Pipelines, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: Pipeline) {
        this.apply {
            set(Pipelines.propertyClass, entity.propertyClass)
            set(Pipelines.organization, entity.organization)
            set(Pipelines.name, entity.name)
            set(Pipelines.displayName, entity.displayName)
            set(Pipelines.fullName, entity.fullName)
            set(Pipelines.weatherScore, entity.weatherScore)
            set(Pipelines.estimatedDurationInMillis, entity.estimatedDurationInMillis)
            set(Pipelines.latestRun, entity.latestRun)
        }
    }

}


