/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param displayName 
 * @param estimatedDurationInMillis 
 * @param fullDisplayName 
 * @param fullName 
 * @param name 
 * @param organization 
 * @param parameters 
 * @param permissions 
 * @param weatherScore 
 * @param pullRequest 
 * @param links 
 * @param latestRun 
 */
object BranchImpls : BaseTable<BranchImpl>("BranchImpl") {
    val propertyClass = text("_class") /* null */
    val displayName = text("displayName") /* null */
    val estimatedDurationInMillis = int("estimatedDurationInMillis") /* null */
    val fullDisplayName = text("fullDisplayName") /* null */
    val fullName = text("fullName") /* null */
    val name = text("name") /* null */
    val organization = text("organization") /* null */
    val permissions = long("permissions") /* null */
    val weatherScore = int("weatherScore") /* null */
    val pullRequest = text("pullRequest") /* null */
    val links = long("_links") /* null */
    val latestRun = long("latestRun") /* null */

    /**
     * Create an entity of type BranchImpl from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = BranchImpl(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        displayName = row[displayName]  /* kotlin.String? */,
        estimatedDurationInMillis = row[estimatedDurationInMillis]  /* kotlin.Int? */,
        fullDisplayName = row[fullDisplayName]  /* kotlin.String? */,
        fullName = row[fullName]  /* kotlin.String? */,
        name = row[name]  /* kotlin.String? */,
        organization = row[organization]  /* kotlin.String? */,
        parameters = emptyList() /* kotlin.Array<StringParameterDefinition>? */,
        permissions = BranchImplpermissionss.createEntity(row, withReferences) /* BranchImplpermissions? */,
        weatherScore = row[weatherScore]  /* kotlin.Int? */,
        pullRequest = row[pullRequest]  /* kotlin.String? */,
        links = BranchImpllinkss.createEntity(row, withReferences) /* BranchImpllinks? */,
        latestRun = PipelineRunImpls.createEntity(row, withReferences) /* PipelineRunImpl? */
    )

    /**
    * Assign all the columns from the entity of type BranchImpl to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = BranchImpl()
    * database.update(BranchImpls, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: BranchImpl) {
        this.apply {
            set(BranchImpls.propertyClass, entity.propertyClass)
            set(BranchImpls.displayName, entity.displayName)
            set(BranchImpls.estimatedDurationInMillis, entity.estimatedDurationInMillis)
            set(BranchImpls.fullDisplayName, entity.fullDisplayName)
            set(BranchImpls.fullName, entity.fullName)
            set(BranchImpls.name, entity.name)
            set(BranchImpls.organization, entity.organization)
            set(BranchImpls.permissions, entity.permissions)
            set(BranchImpls.weatherScore, entity.weatherScore)
            set(BranchImpls.pullRequest, entity.pullRequest)
            set(BranchImpls.links, entity.links)
            set(BranchImpls.latestRun, entity.latestRun)
        }
    }

}


object BranchImplStringParameterDefinition : BaseTable<Pair<kotlin.Long, kotlin.Long>>("BranchImplStringParameterDefinition") {
    val branchImpl = long("branchImpl")
    val stringParameterDefinition = long("stringParameterDefinition")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[branchImpl] ?: 0, row[stringParameterDefinition] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(BranchImplStringParameterDefinition.branchImpl, entity.first)
            set(BranchImplStringParameterDefinition.stringParameterDefinition, entity.second)
        }
    }

}

