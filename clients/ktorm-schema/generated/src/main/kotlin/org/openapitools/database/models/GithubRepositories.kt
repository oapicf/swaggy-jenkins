/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param links 
 * @param items 
 * @param lastPage 
 * @param nextPage 
 * @param pageSize 
 */
object GithubRepositoriess : BaseTable<GithubRepositories>("GithubRepositories") {
    val propertyClass = text("_class") /* null */
    val links = long("_links") /* null */
    val lastPage = int("lastPage") /* null */
    val nextPage = int("nextPage") /* null */
    val pageSize = int("pageSize") /* null */

    /**
     * Create an entity of type GithubRepositories from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = GithubRepositories(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        links = GithubRepositorieslinkss.createEntity(row, withReferences) /* GithubRepositorieslinks? */,
        items = emptyList() /* kotlin.Array<GithubRepository>? */,
        lastPage = row[lastPage]  /* kotlin.Int? */,
        nextPage = row[nextPage]  /* kotlin.Int? */,
        pageSize = row[pageSize]  /* kotlin.Int? */
    )

    /**
    * Assign all the columns from the entity of type GithubRepositories to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = GithubRepositories()
    * database.update(GithubRepositoriess, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: GithubRepositories) {
        this.apply {
            set(GithubRepositoriess.propertyClass, entity.propertyClass)
            set(GithubRepositoriess.links, entity.links)
            set(GithubRepositoriess.lastPage, entity.lastPage)
            set(GithubRepositoriess.nextPage, entity.nextPage)
            set(GithubRepositoriess.pageSize, entity.pageSize)
        }
    }

}


object GithubRepositoriesGithubRepository : BaseTable<Pair<kotlin.Long, kotlin.Long>>("GithubRepositoriesGithubRepository") {
    val githubRepositories = long("githubRepositories")
    val githubRepository = long("githubRepository")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[githubRepositories] ?: 0, row[githubRepository] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(GithubRepositoriesGithubRepository.githubRepositories, entity.first)
            set(GithubRepositoriesGithubRepository.githubRepository, entity.second)
        }
    }

}

