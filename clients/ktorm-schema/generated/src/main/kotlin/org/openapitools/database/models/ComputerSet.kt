/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 2.0.1-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.database.models

import org.ktorm.dsl.*
import org.ktorm.schema.*
import org.ktorm.database.Database
import .*


/**
 * 
 * @param propertyClass 
 * @param busyExecutors 
 * @param computer 
 * @param displayName 
 * @param totalExecutors 
 */
object ComputerSets : BaseTable<ComputerSet>("ComputerSet") {
    val propertyClass = text("_class") /* null */
    val busyExecutors = int("busyExecutors") /* null */
    val displayName = text("displayName") /* null */
    val totalExecutors = int("totalExecutors") /* null */

    /**
     * Create an entity of type ComputerSet from the model
     */
    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean) = ComputerSet(
        propertyClass = row[propertyClass]  /* kotlin.String? */,
        busyExecutors = row[busyExecutors]  /* kotlin.Int? */,
        computer = emptyList() /* kotlin.Array<HudsonMasterComputer>? */,
        displayName = row[displayName]  /* kotlin.String? */,
        totalExecutors = row[totalExecutors]  /* kotlin.Int? */
    )

    /**
    * Assign all the columns from the entity of type ComputerSet to the DML expression.
    *
    * Usage:
    *
    * ```kotlin
    * let entity = ComputerSet()
    * database.update(ComputerSets, {
    *     assignFrom(entity)
    * })
    * ```
    * @return the builder with the columns for the update or insert.
    */
    fun AssignmentsBuilder.assignFrom(entity: ComputerSet) {
        this.apply {
            set(ComputerSets.propertyClass, entity.propertyClass)
            set(ComputerSets.busyExecutors, entity.busyExecutors)
            set(ComputerSets.displayName, entity.displayName)
            set(ComputerSets.totalExecutors, entity.totalExecutors)
        }
    }

}


object ComputerSetHudsonMasterComputer : BaseTable<Pair<kotlin.Long, kotlin.Long>>("ComputerSetHudsonMasterComputer") {
    val computerSet = long("computerSet")
    val hudsonMasterComputer = long("hudsonMasterComputer")

    override fun doCreateEntity(row: QueryRowSet, withReferences: Boolean): Pair<kotlin.Long, kotlin.Long> =
        Pair(row[computerSet] ?: 0, row[hudsonMasterComputer] ?: 0)

    fun AssignmentsBuilder.assignFrom(entity: Pair<kotlin.Long, kotlin.Long>) {
        this.apply {
            set(ComputerSetHudsonMasterComputer.computerSet, entity.first)
            set(ComputerSetHudsonMasterComputer.hudsonMasterComputer, entity.second)
        }
    }

}

