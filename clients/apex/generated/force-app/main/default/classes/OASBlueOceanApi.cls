/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by the OAS code generator program.
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

public class OASBlueOceanApi {
    OASClient client;

    public OASBlueOceanApi(OASClient client) {
        this.client = client;
    }

    public OASBlueOceanApi() {
        this.client = new OASClient();
    }

    public OASClient getClient() {
        return this.client;
    }

    /**
     * 
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param queue Name of the queue item (required)
     * @throws OAS.ApiException if fails to make API call
     */
    public void deletePipelineQueueItem(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('queue'), 'queue');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        client.invoke(
            'DELETE', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'queue' => (String) params.get('queue')
            },
            new Map<String, Object>(),
            new List<String>(),
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            null
        );
    }
    /**
     * 
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization (required)
     * @return OASUser
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUser getAuthenticatedUser(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUser) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/user/', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASUser.class
        );
    }
    /**
     * 
     * Get a list of class names supported by a given class
     * @param propertyClass Name of the class (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getClasses(Map<String, Object> params) {
        client.assertNotNull(params.get('propertyClass'), 'propertyClass');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/blue/rest/classes/{class}', '',
            query, form,
            new Map<String, Object>{
                'class' => (String) params.get('propertyClass')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            String.class
        );
    }
    /**
     * 
     * Retrieve JSON Web Key
     * @param key Key ID received as part of JWT header field kid (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getJsonWebKey(Map<String, Object> params) {
        client.assertNotNull(params.get('key'), 'key');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/jwt-auth/jwks/{key}', '',
            query, form,
            new Map<String, Object>{
                'key' => (Integer) params.get('key')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            String.class
        );
    }
    /**
     * 
     * Retrieve JSON Web Token
     * @param expiryTimeInMins Token expiry time in minutes, default: 30 minutes (optional)
     * @param maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes (optional)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getJsonWebToken(Map<String, Object> params) {
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('expiryTimeInMins', (Integer) params.get('expiryTimeInMins')));
        query.addAll(client.makeParam('maxExpiryTimeInMins', (Integer) params.get('maxExpiryTimeInMins')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/jwt-auth/token', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String>(),
            String.class
        );
    }
    /**
     * 
     * Retrieve organization details
     * @param organization Name of the organization (required)
     * @return OASOrganisation
     * @throws OAS.ApiException if fails to make API call
     */
    public OASOrganisation getOrganisation(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASOrganisation) client.invoke(
            'GET', '/blue/rest/organizations/{organization}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASOrganisation.class
        );
    }
    /**
     * 
     * Retrieve all organizations details
     * @return List<OASOrganisation>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASOrganisation> getOrganisations() {
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASOrganisation>) client.invoke(
            'GET', '/blue/rest/organizations/', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASOrganisation>.class
        );
    }
    /**
     * 
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return OASPipeline
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipeline getPipeline(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipeline) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASPipeline.class
        );
    }
    /**
     * 
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List<OASPipelineActivity>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASPipelineActivity> getPipelineActivities(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASPipelineActivity>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASPipelineActivity>.class
        );
    }
    /**
     * 
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return OASBranchImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASBranchImpl getPipelineBranch(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('branch'), 'branch');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASBranchImpl) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'branch' => (String) params.get('branch')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASBranchImpl.class
        );
    }
    /**
     * 
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param run Name of the run (required)
     * @return OASPipelineRun
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineRun getPipelineBranchRun(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('branch'), 'branch');
        client.assertNotNull(params.get('run'), 'run');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineRun) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'branch' => (String) params.get('branch'),
                'run' => (String) params.get('run')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASPipelineRun.class
        );
    }
    /**
     * 
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return OASMultibranchPipeline
     * @throws OAS.ApiException if fails to make API call
     */
    public OASMultibranchPipeline getPipelineBranches(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASMultibranchPipeline) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASMultibranchPipeline.class
        );
    }
    /**
     * 
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization (required)
     * @param folder Name of the folder (required)
     * @return OASPipelineFolderImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineFolderImpl getPipelineFolder(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('folder'), 'folder');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineFolderImpl) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{folder}/', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'folder' => (String) params.get('folder')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASPipelineFolderImpl.class
        );
    }
    /**
     * 
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return OASPipelineImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineImpl getPipelineFolderPipeline(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('folder'), 'folder');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineImpl) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'folder' => (String) params.get('folder')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASPipelineImpl.class
        );
    }
    /**
     * 
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List<OASQueueItemImpl>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASQueueItemImpl> getPipelineQueue(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASQueueItemImpl>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASQueueItemImpl>.class
        );
    }
    /**
     * 
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return OASPipelineRun
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineRun getPipelineRun(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineRun) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASPipelineRun.class
        );
    }
    /**
     * 
     * Get log for a pipeline run
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param start Start position of the log (optional)
     * @param download Set to true in order to download the file, otherwise it\&#39;s passed as a response body (optional)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getPipelineRunLog(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('start', (Integer) params.get('start')));
        query.addAll(client.makeParam('download', (Boolean) params.get('download')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            String.class
        );
    }
    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return OASPipelineRunNode
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineRunNode getPipelineRunNode(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        client.assertNotNull(params.get('node'), 'node');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineRunNode) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run'),
                'node' => (String) params.get('node')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASPipelineRunNode.class
        );
    }
    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return OASPipelineStepImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineStepImpl getPipelineRunNodeStep(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        client.assertNotNull(params.get('node'), 'node');
        client.assertNotNull(params.get('step'), 'step');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineStepImpl) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run'),
                'node' => (String) params.get('node'),
                'step' => (String) params.get('step')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASPipelineStepImpl.class
        );
    }
    /**
     * 
     * Get log for a pipeline run node step
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @param step Name of the step (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String getPipelineRunNodeStepLog(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        client.assertNotNull(params.get('node'), 'node');
        client.assertNotNull(params.get('step'), 'step');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run'),
                'node' => (String) params.get('node'),
                'step' => (String) params.get('step')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            String.class
        );
    }
    /**
     * 
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param node Name of the node (required)
     * @return List<OASPipelineStepImpl>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASPipelineStepImpl> getPipelineRunNodeSteps(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        client.assertNotNull(params.get('node'), 'node');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASPipelineStepImpl>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run'),
                'node' => (String) params.get('node')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASPipelineStepImpl>.class
        );
    }
    /**
     * 
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return List<OASPipelineRunNode>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASPipelineRunNode> getPipelineRunNodes(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASPipelineRunNode>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASPipelineRunNode>.class
        );
    }
    /**
     * 
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return List<OASPipelineRun>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASPipelineRun> getPipelineRuns(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASPipelineRun>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASPipelineRun>.class
        );
    }
    /**
     * 
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization (required)
     * @return List<OASPipeline>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASPipeline> getPipelines(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASPipeline>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/pipelines/', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASPipeline>.class
        );
    }
    /**
     * 
     * Retrieve SCM details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @return OASGithubScm
     * @throws OAS.ApiException if fails to make API call
     */
    public OASGithubScm getSCM(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('scm'), 'scm');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASGithubScm) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/scm/{scm}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'scm' => (String) params.get('scm')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASGithubScm.class
        );
    }
    /**
     * 
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param credentialId Credential ID (optional)
     * @param pageSize Number of items in a page (optional)
     * @param pageNumber Page number (optional)
     * @return List<OASGithubOrganization>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASGithubOrganization> getSCMOrganisationRepositories(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('scm'), 'scm');
        client.assertNotNull(params.get('scmOrganisation'), 'scmOrganisation');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('credentialId', (String) params.get('credentialId')));
        query.addAll(client.makeParam('pageSize', (Integer) params.get('pageSize')));
        query.addAll(client.makeParam('pageNumber', (Integer) params.get('pageNumber')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASGithubOrganization>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'scm' => (String) params.get('scm'),
                'scmOrganisation' => (String) params.get('scmOrganisation')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASGithubOrganization>.class
        );
    }
    /**
     * 
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param scmOrganisation Name of the SCM organization (required)
     * @param repository Name of the SCM repository (required)
     * @param credentialId Credential ID (optional)
     * @return List<OASGithubOrganization>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASGithubOrganization> getSCMOrganisationRepository(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('scm'), 'scm');
        client.assertNotNull(params.get('scmOrganisation'), 'scmOrganisation');
        client.assertNotNull(params.get('repository'), 'repository');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('credentialId', (String) params.get('credentialId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASGithubOrganization>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'scm' => (String) params.get('scm'),
                'scmOrganisation' => (String) params.get('scmOrganisation'),
                'repository' => (String) params.get('repository')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASGithubOrganization>.class
        );
    }
    /**
     * 
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization (required)
     * @param scm Name of SCM (required)
     * @param credentialId Credential ID (optional)
     * @return List<OASGithubOrganization>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASGithubOrganization> getSCMOrganisations(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('scm'), 'scm');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('credentialId', (String) params.get('credentialId')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASGithubOrganization>) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/scm/{scm}/organizations', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'scm' => (String) params.get('scm')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASGithubOrganization>.class
        );
    }
    /**
     * 
     * Retrieve user details for an organization
     * @param organization Name of the organization (required)
     * @param user Name of the user (required)
     * @return OASUser
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUser getUser(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('user'), 'user');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUser) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/users/{user}', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'user' => (String) params.get('user')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASUser.class
        );
    }
    /**
     * 
     * Retrieve user favorites details for an organization
     * @param user Name of the user (required)
     * @return List<OASFavoriteImpl>
     * @throws OAS.ApiException if fails to make API call
     */
    public List<OASFavoriteImpl> getUserFavorites(Map<String, Object> params) {
        client.assertNotNull(params.get('user'), 'user');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (List<OASFavoriteImpl>) client.invoke(
            'GET', '/blue/rest/users/{user}/favorites', '',
            query, form,
            new Map<String, Object>{
                'user' => (String) params.get('user')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            List<OASFavoriteImpl>.class
        );
    }
    /**
     * 
     * Retrieve users details for an organization
     * @param organization Name of the organization (required)
     * @return OASUser
     * @throws OAS.ApiException if fails to make API call
     */
    public OASUser getUsers(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASUser) client.invoke(
            'GET', '/blue/rest/organizations/{organization}/users/', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASUser.class
        );
    }
    /**
     * 
     * Replay an organization pipeline run
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @return OASQueueItemImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASQueueItemImpl postPipelineRun(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASQueueItemImpl) client.invoke(
            'POST', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASQueueItemImpl.class
        );
    }
    /**
     * 
     * Start a build for an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @return OASQueueItemImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASQueueItemImpl postPipelineRuns(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASQueueItemImpl) client.invoke(
            'POST', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASQueueItemImpl.class
        );
    }
    /**
     * 
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param body Set JSON string body to {&quot;favorite&quot;: true} to favorite, set value to false to unfavorite (required)
     * @return OASFavoriteImpl
     * @throws OAS.ApiException if fails to make API call
     */
    public OASFavoriteImpl putPipelineFavorite(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('body'), 'body');
        List<OAS.Param> query = new List<OAS.Param>();
        List<OAS.Param> form = new List<OAS.Param>();

        return (OASFavoriteImpl) client.invoke(
            'PUT', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite',
            (Boolean) params.get('body'),
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'jenkins_auth' },
            OASFavoriteImpl.class
        );
    }
    /**
     * 
     * Stop a build of an organization pipeline
     * @param organization Name of the organization (required)
     * @param pipeline Name of the pipeline (required)
     * @param run Name of the run (required)
     * @param blocking Set to true to make blocking stop, default: false (optional)
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds (optional)
     * @return OASPipelineRun
     * @throws OAS.ApiException if fails to make API call
     */
    public OASPipelineRun putPipelineRun(Map<String, Object> params) {
        client.assertNotNull(params.get('organization'), 'organization');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('run'), 'run');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('blocking', (String) params.get('blocking')));
        query.addAll(client.makeParam('timeOutInSecs', (Integer) params.get('timeOutInSecs')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (OASPipelineRun) client.invoke(
            'PUT', '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop', '',
            query, form,
            new Map<String, Object>{
                'organization' => (String) params.get('organization'),
                'pipeline' => (String) params.get('pipeline'),
                'run' => (String) params.get('run')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            OASPipelineRun.class
        );
    }
    /**
     * 
     * Search for any resource details
     * @param q Query string (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String search(Map<String, Object> params) {
        client.assertNotNull(params.get('q'), 'q');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('q', (String) params.get('q')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/blue/rest/search/', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            String.class
        );
    }
    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names (required)
     * @return String
     * @throws OAS.ApiException if fails to make API call
     */
    public String searchClasses(Map<String, Object> params) {
        client.assertNotNull(params.get('q'), 'q');
        List<OAS.Param> query = new List<OAS.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('q', (String) params.get('q')));

        List<OAS.Param> form = new List<OAS.Param>();

        return (String) client.invoke(
            'GET', '/blue/rest/classes/', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>(),
            new List<String> { 'jenkins_auth' },
            String.class
        );
    }
}
