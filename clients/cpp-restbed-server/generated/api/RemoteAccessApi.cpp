/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "RemoteAccessApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

RemoteAccessApiException::RemoteAccessApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int RemoteAccessApiException::getStatus() const
{
    return m_status;
}
const char* RemoteAccessApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace RemoteAccessApiResources {
ComputerApiJsonResource::ComputerApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/computer/api/json");
	this->set_method_handler("GET",
		std::bind(&ComputerApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ComputerApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ComputerApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ComputerApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ComputerApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ComputerApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ComputerApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ComputerApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    int32_t depth = request->get_query_parameter("depth", 0);
    
    int status_code = 500;
    ComputerSet resultObject = ComputerSet{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(depth);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ComputerSet> ComputerApiJsonResource::handler_GET(
        int32_t & depth)
{
    return handler_GET_func(depth);
}


std::string ComputerApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ComputerApiJsonResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ApiJsonResource::ApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/api/json");
	this->set_method_handler("GET",
		std::bind(&ApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("HEAD",
		std::bind(&ApiJsonResource::handler_HEAD_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    
    int status_code = 500;
    Hudson resultObject = Hudson{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET();
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void ApiJsonResource::handler_HEAD_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_HEAD();
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json"
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        // Description: Jenkins version number
        setResponseHeader(session, "x-jenkins");
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, Hudson> ApiJsonResource::handler_GET(
        )
{
    return handler_GET_func();
}

int ApiJsonResource::handler_HEAD(
    )
{
    return handler_HEAD_func();
}

std::string ApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ApiJsonResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameApiJsonResource::JobNameApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/api/json");
	this->set_method_handler("GET",
		std::bind(&JobNameApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    
    int status_code = 500;
    FreeStyleProject resultObject = FreeStyleProject{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, FreeStyleProject> JobNameApiJsonResource::handler_GET(
        std::string & name)
{
    return handler_GET_func(name);
}


std::string JobNameApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameApiJsonResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameConfig_xmlResource::JobNameConfig_xmlResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/config.xml");
	this->set_method_handler("GET",
		std::bind(&JobNameConfig_xmlResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&JobNameConfig_xmlResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameConfig_xmlResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameConfig_xmlResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameConfig_xmlResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameConfig_xmlResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameConfig_xmlResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameConfig_xmlResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameConfig_xmlResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "text/xml",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void JobNameConfig_xmlResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto body = boost::lexical_cast<std::string>(bodyContent);
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, body, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "*/*",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "An error has occurred - error message is embedded inside the HTML response";
    
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, std::string> JobNameConfig_xmlResource::handler_GET(
        std::string & name)
{
    return handler_GET_func(name);
}

int JobNameConfig_xmlResource::handler_POST(
    std::string & name, std::string & body, std::string & jenkinsCrumb)
{
    return handler_POST_func(name, body, jenkinsCrumb);
}

std::string JobNameConfig_xmlResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameConfig_xmlResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameLastBuildApiJsonResource::JobNameLastBuildApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/lastBuild/api/json");
	this->set_method_handler("GET",
		std::bind(&JobNameLastBuildApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameLastBuildApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameLastBuildApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameLastBuildApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameLastBuildApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameLastBuildApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameLastBuildApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameLastBuildApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    
    int status_code = 500;
    FreeStyleBuild resultObject = FreeStyleBuild{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, FreeStyleBuild> JobNameLastBuildApiJsonResource::handler_GET(
        std::string & name)
{
    return handler_GET_func(name);
}


std::string JobNameLastBuildApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameLastBuildApiJsonResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameNumberLogTextProgressiveTextResource::JobNameNumberLogTextProgressiveTextResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/{number: .*}/logText/progressiveText");
	this->set_method_handler("GET",
		std::bind(&JobNameNumberLogTextProgressiveTextResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameNumberLogTextProgressiveTextResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameNumberLogTextProgressiveTextResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameNumberLogTextProgressiveTextResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameNumberLogTextProgressiveTextResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameNumberLogTextProgressiveTextResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameNumberLogTextProgressiveTextResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameNumberLogTextProgressiveTextResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    std::string number = request->get_path_parameter("number", "");
    // Getting the query params
    std::string start = request->get_query_parameter("start", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_GET(name, number, start);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json"
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int JobNameNumberLogTextProgressiveTextResource::handler_GET(
        std::string & name, std::string & number, std::string & start)
{
    return handler_GET_func(name, number, start);
}


std::string JobNameNumberLogTextProgressiveTextResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameNumberLogTextProgressiveTextResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
QueueApiJsonResource::QueueApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/queue/api/json");
	this->set_method_handler("GET",
		std::bind(&QueueApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> QueueApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> QueueApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> QueueApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void QueueApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void QueueApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void QueueApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void QueueApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    
    int status_code = 500;
    Queue resultObject = Queue{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET();
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Queue> QueueApiJsonResource::handler_GET(
        )
{
    return handler_GET_func();
}


std::string QueueApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string QueueApiJsonResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
QueueItemNumberApiJsonResource::QueueItemNumberApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/queue/item/{number: .*}/api/json");
	this->set_method_handler("GET",
		std::bind(&QueueItemNumberApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> QueueItemNumberApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> QueueItemNumberApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> QueueItemNumberApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void QueueItemNumberApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void QueueItemNumberApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void QueueItemNumberApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void QueueItemNumberApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string number = request->get_path_parameter("number", "");
    
    int status_code = 500;
    Queue resultObject = Queue{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(number);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Queue> QueueItemNumberApiJsonResource::handler_GET(
        std::string & number)
{
    return handler_GET_func(number);
}


std::string QueueItemNumberApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string QueueItemNumberApiJsonResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ViewNameApiJsonResource::ViewNameApiJsonResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/view/{name: .*}/api/json");
	this->set_method_handler("GET",
		std::bind(&ViewNameApiJsonResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ViewNameApiJsonResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ViewNameApiJsonResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ViewNameApiJsonResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ViewNameApiJsonResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ViewNameApiJsonResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ViewNameApiJsonResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ViewNameApiJsonResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    
    int status_code = 500;
    ListView resultObject = ListView{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "View cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, ListView> ViewNameApiJsonResource::handler_GET(
        std::string & name)
{
    return handler_GET_func(name);
}


std::string ViewNameApiJsonResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ViewNameApiJsonResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
ViewNameConfig_xmlResource::ViewNameConfig_xmlResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/view/{name: .*}/config.xml");
	this->set_method_handler("GET",
		std::bind(&ViewNameConfig_xmlResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&ViewNameConfig_xmlResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> ViewNameConfig_xmlResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> ViewNameConfig_xmlResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> ViewNameConfig_xmlResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void ViewNameConfig_xmlResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void ViewNameConfig_xmlResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void ViewNameConfig_xmlResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void ViewNameConfig_xmlResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(name);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "text/xml",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "View cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void ViewNameConfig_xmlResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto body = boost::lexical_cast<std::string>(bodyContent);
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, body, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "*/*",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "An error has occurred - error message is embedded inside the HTML response";
    
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "View cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, std::string> ViewNameConfig_xmlResource::handler_GET(
        std::string & name)
{
    return handler_GET_func(name);
}

int ViewNameConfig_xmlResource::handler_POST(
    std::string & name, std::string & body, std::string & jenkinsCrumb)
{
    return handler_POST_func(name, body, jenkinsCrumb);
}

std::string ViewNameConfig_xmlResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string ViewNameConfig_xmlResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CreateItemResource::CreateItemResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/createItem");
	this->set_method_handler("POST",
		std::bind(&CreateItemResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CreateItemResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CreateItemResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CreateItemResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CreateItemResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CreateItemResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CreateItemResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CreateItemResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto body = boost::lexical_cast<std::string>(bodyContent);
    // Getting the query params
    std::string name = request->get_query_parameter("name", "");
    std::string from = request->get_query_parameter("from", "");
    std::string mode = request->get_query_parameter("mode", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    std::string contentType = request->get_header("Content-Type", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, from, mode, jenkinsCrumb, contentType, body);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "*/*",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "An error has occurred - error message is embedded inside the HTML response";
    
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int CreateItemResource::handler_POST(
        std::string & name, std::string & from, std::string & mode, std::string & jenkinsCrumb, std::string & contentType, std::string & body)
{
    return handler_POST_func(name, from, mode, jenkinsCrumb, contentType, body);
}


std::string CreateItemResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CreateItemResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
CreateViewResource::CreateViewResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/createView");
	this->set_method_handler("POST",
		std::bind(&CreateViewResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> CreateViewResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> CreateViewResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> CreateViewResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void CreateViewResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void CreateViewResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void CreateViewResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void CreateViewResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto body = boost::lexical_cast<std::string>(bodyContent);
    // Getting the query params
    std::string name = request->get_query_parameter("name", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    std::string contentType = request->get_header("Content-Type", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, jenkinsCrumb, contentType, body);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "*/*",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 400) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "An error has occurred - error message is embedded inside the HTML response";
    
        returnResponse(session, 400, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int CreateViewResource::handler_POST(
        std::string & name, std::string & jenkinsCrumb, std::string & contentType, std::string & body)
{
    return handler_POST_func(name, jenkinsCrumb, contentType, body);
}


std::string CreateViewResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string CreateViewResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameBuildResource::JobNameBuildResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/build");
	this->set_method_handler("POST",
		std::bind(&JobNameBuildResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameBuildResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameBuildResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameBuildResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameBuildResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameBuildResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameBuildResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameBuildResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    // Getting the query params
    std::string json = request->get_query_parameter("json", "");
    std::string token = request->get_query_parameter("token", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, json, token, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json"
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 201) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 201, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int JobNameBuildResource::handler_POST(
        std::string & name, std::string & json, std::string & token, std::string & jenkinsCrumb)
{
    return handler_POST_func(name, json, token, jenkinsCrumb);
}


std::string JobNameBuildResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameBuildResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameDoDeleteResource::JobNameDoDeleteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/doDelete");
	this->set_method_handler("POST",
		std::bind(&JobNameDoDeleteResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameDoDeleteResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameDoDeleteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameDoDeleteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameDoDeleteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameDoDeleteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameDoDeleteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameDoDeleteResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json"
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int JobNameDoDeleteResource::handler_POST(
        std::string & name, std::string & jenkinsCrumb)
{
    return handler_POST_func(name, jenkinsCrumb);
}


std::string JobNameDoDeleteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameDoDeleteResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameDisableResource::JobNameDisableResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/disable");
	this->set_method_handler("POST",
		std::bind(&JobNameDisableResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameDisableResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameDisableResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameDisableResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameDisableResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameDisableResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameDisableResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameDisableResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json"
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int JobNameDisableResource::handler_POST(
        std::string & name, std::string & jenkinsCrumb)
{
    return handler_POST_func(name, jenkinsCrumb);
}


std::string JobNameDisableResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameDisableResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameEnableResource::JobNameEnableResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/enable");
	this->set_method_handler("POST",
		std::bind(&JobNameEnableResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameEnableResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameEnableResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameEnableResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameEnableResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameEnableResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameEnableResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameEnableResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json"
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int JobNameEnableResource::handler_POST(
        std::string & name, std::string & jenkinsCrumb)
{
    return handler_POST_func(name, jenkinsCrumb);
}


std::string JobNameEnableResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameEnableResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
JobNameLastBuildStopResource::JobNameLastBuildStopResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/job/{name: .*}/lastBuild/stop");
	this->set_method_handler("POST",
		std::bind(&JobNameLastBuildStopResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> JobNameLastBuildStopResource::handleRemoteAccessApiException(const RemoteAccessApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> JobNameLastBuildStopResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> JobNameLastBuildStopResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void JobNameLastBuildStopResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void JobNameLastBuildStopResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void JobNameLastBuildStopResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void JobNameLastBuildStopResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string name = request->get_path_parameter("name", "");
    // Getting the headers
    std::string jenkinsCrumb = request->get_header("Jenkins-Crumb", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_POST(name, jenkinsCrumb);
    }
    catch(const RemoteAccessApiException& e) {
        std::tie(status_code, result) = handleRemoteAccessApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json"
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Job cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int JobNameLastBuildStopResource::handler_POST(
        std::string & name, std::string & jenkinsCrumb)
{
    return handler_POST_func(name, jenkinsCrumb);
}


std::string JobNameLastBuildStopResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string JobNameLastBuildStopResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace RemoteAccessApiResources */

RemoteAccessApi::RemoteAccessApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

RemoteAccessApi::~RemoteAccessApi() {}

std::shared_ptr<RemoteAccessApiResources::ComputerApiJsonResource> RemoteAccessApi::getComputerApiJsonResource() {
    if (!m_spComputerApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::ComputerApiJsonResource>());
    }
    return m_spComputerApiJsonResource;
}
std::shared_ptr<RemoteAccessApiResources::ApiJsonResource> RemoteAccessApi::getApiJsonResource() {
    if (!m_spApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::ApiJsonResource>());
    }
    return m_spApiJsonResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameApiJsonResource> RemoteAccessApi::getJobNameApiJsonResource() {
    if (!m_spJobNameApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameApiJsonResource>());
    }
    return m_spJobNameApiJsonResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameConfig_xmlResource> RemoteAccessApi::getJobNameConfig_xmlResource() {
    if (!m_spJobNameConfig_xmlResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameConfig_xmlResource>());
    }
    return m_spJobNameConfig_xmlResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildApiJsonResource> RemoteAccessApi::getJobNameLastBuildApiJsonResource() {
    if (!m_spJobNameLastBuildApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameLastBuildApiJsonResource>());
    }
    return m_spJobNameLastBuildApiJsonResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource> RemoteAccessApi::getJobNameNumberLogTextProgressiveTextResource() {
    if (!m_spJobNameNumberLogTextProgressiveTextResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource>());
    }
    return m_spJobNameNumberLogTextProgressiveTextResource;
}
std::shared_ptr<RemoteAccessApiResources::QueueApiJsonResource> RemoteAccessApi::getQueueApiJsonResource() {
    if (!m_spQueueApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::QueueApiJsonResource>());
    }
    return m_spQueueApiJsonResource;
}
std::shared_ptr<RemoteAccessApiResources::QueueItemNumberApiJsonResource> RemoteAccessApi::getQueueItemNumberApiJsonResource() {
    if (!m_spQueueItemNumberApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::QueueItemNumberApiJsonResource>());
    }
    return m_spQueueItemNumberApiJsonResource;
}
std::shared_ptr<RemoteAccessApiResources::ViewNameApiJsonResource> RemoteAccessApi::getViewNameApiJsonResource() {
    if (!m_spViewNameApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::ViewNameApiJsonResource>());
    }
    return m_spViewNameApiJsonResource;
}
std::shared_ptr<RemoteAccessApiResources::ViewNameConfig_xmlResource> RemoteAccessApi::getViewNameConfig_xmlResource() {
    if (!m_spViewNameConfig_xmlResource) {
        setResource(std::make_shared<RemoteAccessApiResources::ViewNameConfig_xmlResource>());
    }
    return m_spViewNameConfig_xmlResource;
}
std::shared_ptr<RemoteAccessApiResources::CreateItemResource> RemoteAccessApi::getCreateItemResource() {
    if (!m_spCreateItemResource) {
        setResource(std::make_shared<RemoteAccessApiResources::CreateItemResource>());
    }
    return m_spCreateItemResource;
}
std::shared_ptr<RemoteAccessApiResources::CreateViewResource> RemoteAccessApi::getCreateViewResource() {
    if (!m_spCreateViewResource) {
        setResource(std::make_shared<RemoteAccessApiResources::CreateViewResource>());
    }
    return m_spCreateViewResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameBuildResource> RemoteAccessApi::getJobNameBuildResource() {
    if (!m_spJobNameBuildResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameBuildResource>());
    }
    return m_spJobNameBuildResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameDoDeleteResource> RemoteAccessApi::getJobNameDoDeleteResource() {
    if (!m_spJobNameDoDeleteResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameDoDeleteResource>());
    }
    return m_spJobNameDoDeleteResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameDisableResource> RemoteAccessApi::getJobNameDisableResource() {
    if (!m_spJobNameDisableResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameDisableResource>());
    }
    return m_spJobNameDisableResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameEnableResource> RemoteAccessApi::getJobNameEnableResource() {
    if (!m_spJobNameEnableResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameEnableResource>());
    }
    return m_spJobNameEnableResource;
}
std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildStopResource> RemoteAccessApi::getJobNameLastBuildStopResource() {
    if (!m_spJobNameLastBuildStopResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameLastBuildStopResource>());
    }
    return m_spJobNameLastBuildStopResource;
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::ComputerApiJsonResource> resource) {
    m_spComputerApiJsonResource = resource;
    m_service->publish(m_spComputerApiJsonResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::ApiJsonResource> resource) {
    m_spApiJsonResource = resource;
    m_service->publish(m_spApiJsonResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameApiJsonResource> resource) {
    m_spJobNameApiJsonResource = resource;
    m_service->publish(m_spJobNameApiJsonResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameConfig_xmlResource> resource) {
    m_spJobNameConfig_xmlResource = resource;
    m_service->publish(m_spJobNameConfig_xmlResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildApiJsonResource> resource) {
    m_spJobNameLastBuildApiJsonResource = resource;
    m_service->publish(m_spJobNameLastBuildApiJsonResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource> resource) {
    m_spJobNameNumberLogTextProgressiveTextResource = resource;
    m_service->publish(m_spJobNameNumberLogTextProgressiveTextResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::QueueApiJsonResource> resource) {
    m_spQueueApiJsonResource = resource;
    m_service->publish(m_spQueueApiJsonResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::QueueItemNumberApiJsonResource> resource) {
    m_spQueueItemNumberApiJsonResource = resource;
    m_service->publish(m_spQueueItemNumberApiJsonResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::ViewNameApiJsonResource> resource) {
    m_spViewNameApiJsonResource = resource;
    m_service->publish(m_spViewNameApiJsonResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::ViewNameConfig_xmlResource> resource) {
    m_spViewNameConfig_xmlResource = resource;
    m_service->publish(m_spViewNameConfig_xmlResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::CreateItemResource> resource) {
    m_spCreateItemResource = resource;
    m_service->publish(m_spCreateItemResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::CreateViewResource> resource) {
    m_spCreateViewResource = resource;
    m_service->publish(m_spCreateViewResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameBuildResource> resource) {
    m_spJobNameBuildResource = resource;
    m_service->publish(m_spJobNameBuildResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameDoDeleteResource> resource) {
    m_spJobNameDoDeleteResource = resource;
    m_service->publish(m_spJobNameDoDeleteResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameDisableResource> resource) {
    m_spJobNameDisableResource = resource;
    m_service->publish(m_spJobNameDisableResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameEnableResource> resource) {
    m_spJobNameEnableResource = resource;
    m_service->publish(m_spJobNameEnableResource);
}
void RemoteAccessApi::setResource(std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildStopResource> resource) {
    m_spJobNameLastBuildStopResource = resource;
    m_service->publish(m_spJobNameLastBuildStopResource);
}
void RemoteAccessApi::setRemoteAccessApiComputerApiJsonResource(std::shared_ptr<RemoteAccessApiResources::ComputerApiJsonResource> spComputerApiJsonResource) {
    m_spComputerApiJsonResource = spComputerApiJsonResource;
    m_service->publish(m_spComputerApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiApiJsonResource(std::shared_ptr<RemoteAccessApiResources::ApiJsonResource> spApiJsonResource) {
    m_spApiJsonResource = spApiJsonResource;
    m_service->publish(m_spApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameApiJsonResource(std::shared_ptr<RemoteAccessApiResources::JobNameApiJsonResource> spJobNameApiJsonResource) {
    m_spJobNameApiJsonResource = spJobNameApiJsonResource;
    m_service->publish(m_spJobNameApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameConfig_xmlResource(std::shared_ptr<RemoteAccessApiResources::JobNameConfig_xmlResource> spJobNameConfig_xmlResource) {
    m_spJobNameConfig_xmlResource = spJobNameConfig_xmlResource;
    m_service->publish(m_spJobNameConfig_xmlResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameLastBuildApiJsonResource(std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildApiJsonResource> spJobNameLastBuildApiJsonResource) {
    m_spJobNameLastBuildApiJsonResource = spJobNameLastBuildApiJsonResource;
    m_service->publish(m_spJobNameLastBuildApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameNumberLogTextProgressiveTextResource(std::shared_ptr<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource> spJobNameNumberLogTextProgressiveTextResource) {
    m_spJobNameNumberLogTextProgressiveTextResource = spJobNameNumberLogTextProgressiveTextResource;
    m_service->publish(m_spJobNameNumberLogTextProgressiveTextResource);
}
void RemoteAccessApi::setRemoteAccessApiQueueApiJsonResource(std::shared_ptr<RemoteAccessApiResources::QueueApiJsonResource> spQueueApiJsonResource) {
    m_spQueueApiJsonResource = spQueueApiJsonResource;
    m_service->publish(m_spQueueApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiQueueItemNumberApiJsonResource(std::shared_ptr<RemoteAccessApiResources::QueueItemNumberApiJsonResource> spQueueItemNumberApiJsonResource) {
    m_spQueueItemNumberApiJsonResource = spQueueItemNumberApiJsonResource;
    m_service->publish(m_spQueueItemNumberApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiViewNameApiJsonResource(std::shared_ptr<RemoteAccessApiResources::ViewNameApiJsonResource> spViewNameApiJsonResource) {
    m_spViewNameApiJsonResource = spViewNameApiJsonResource;
    m_service->publish(m_spViewNameApiJsonResource);
}
void RemoteAccessApi::setRemoteAccessApiViewNameConfig_xmlResource(std::shared_ptr<RemoteAccessApiResources::ViewNameConfig_xmlResource> spViewNameConfig_xmlResource) {
    m_spViewNameConfig_xmlResource = spViewNameConfig_xmlResource;
    m_service->publish(m_spViewNameConfig_xmlResource);
}
void RemoteAccessApi::setRemoteAccessApiCreateItemResource(std::shared_ptr<RemoteAccessApiResources::CreateItemResource> spCreateItemResource) {
    m_spCreateItemResource = spCreateItemResource;
    m_service->publish(m_spCreateItemResource);
}
void RemoteAccessApi::setRemoteAccessApiCreateViewResource(std::shared_ptr<RemoteAccessApiResources::CreateViewResource> spCreateViewResource) {
    m_spCreateViewResource = spCreateViewResource;
    m_service->publish(m_spCreateViewResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameBuildResource(std::shared_ptr<RemoteAccessApiResources::JobNameBuildResource> spJobNameBuildResource) {
    m_spJobNameBuildResource = spJobNameBuildResource;
    m_service->publish(m_spJobNameBuildResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameDoDeleteResource(std::shared_ptr<RemoteAccessApiResources::JobNameDoDeleteResource> spJobNameDoDeleteResource) {
    m_spJobNameDoDeleteResource = spJobNameDoDeleteResource;
    m_service->publish(m_spJobNameDoDeleteResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameDisableResource(std::shared_ptr<RemoteAccessApiResources::JobNameDisableResource> spJobNameDisableResource) {
    m_spJobNameDisableResource = spJobNameDisableResource;
    m_service->publish(m_spJobNameDisableResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameEnableResource(std::shared_ptr<RemoteAccessApiResources::JobNameEnableResource> spJobNameEnableResource) {
    m_spJobNameEnableResource = spJobNameEnableResource;
    m_service->publish(m_spJobNameEnableResource);
}
void RemoteAccessApi::setRemoteAccessApiJobNameLastBuildStopResource(std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildStopResource> spJobNameLastBuildStopResource) {
    m_spJobNameLastBuildStopResource = spJobNameLastBuildStopResource;
    m_service->publish(m_spJobNameLastBuildStopResource);
}


void RemoteAccessApi::publishDefaultResources() {
    if (!m_spComputerApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::ComputerApiJsonResource>());
    }
    if (!m_spApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::ApiJsonResource>());
    }
    if (!m_spJobNameApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameApiJsonResource>());
    }
    if (!m_spJobNameConfig_xmlResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameConfig_xmlResource>());
    }
    if (!m_spJobNameLastBuildApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameLastBuildApiJsonResource>());
    }
    if (!m_spJobNameNumberLogTextProgressiveTextResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource>());
    }
    if (!m_spQueueApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::QueueApiJsonResource>());
    }
    if (!m_spQueueItemNumberApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::QueueItemNumberApiJsonResource>());
    }
    if (!m_spViewNameApiJsonResource) {
        setResource(std::make_shared<RemoteAccessApiResources::ViewNameApiJsonResource>());
    }
    if (!m_spViewNameConfig_xmlResource) {
        setResource(std::make_shared<RemoteAccessApiResources::ViewNameConfig_xmlResource>());
    }
    if (!m_spCreateItemResource) {
        setResource(std::make_shared<RemoteAccessApiResources::CreateItemResource>());
    }
    if (!m_spCreateViewResource) {
        setResource(std::make_shared<RemoteAccessApiResources::CreateViewResource>());
    }
    if (!m_spJobNameBuildResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameBuildResource>());
    }
    if (!m_spJobNameDoDeleteResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameDoDeleteResource>());
    }
    if (!m_spJobNameDisableResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameDisableResource>());
    }
    if (!m_spJobNameEnableResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameEnableResource>());
    }
    if (!m_spJobNameLastBuildStopResource) {
        setResource(std::make_shared<RemoteAccessApiResources::JobNameLastBuildStopResource>());
    }
}

std::shared_ptr<restbed::Service> RemoteAccessApi::service() {
    return m_service;
}


}
}
}
}

