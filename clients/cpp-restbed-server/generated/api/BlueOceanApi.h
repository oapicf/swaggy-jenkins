/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * BlueOceanApi.h
 *
 * 
 */

#ifndef BlueOceanApi_H_
#define BlueOceanApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "BranchImpl.h"
#include "FavoriteImpl.h"
#include "GithubOrganization.h"
#include "GithubScm.h"
#include "MultibranchPipeline.h"
#include "Organisation.h"
#include "Pipeline.h"
#include "PipelineActivity.h"
#include "PipelineFolderImpl.h"
#include "PipelineImpl.h"
#include "PipelineRun.h"
#include "PipelineRunNode.h"
#include "PipelineStepImpl.h"
#include "QueueItemImpl.h"
#include "User.h"
#include <string>
#include <vector>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  BlueOceanApiException: public std::exception
{
public:
    BlueOceanApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace BlueOceanApiResources {
/// <summary>
/// 
/// </summary>
/// <remarks>
/// Delete queue item from an organization pipeline queue
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & organization, std::string & pipeline, std::string & queue)> handler_DELETE_func =
            [](std::string &, std::string &, std::string &) -> int
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_DELETE(
        std::string & organization, std::string & pipeline, std::string & queue);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_DELETE_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve authenticated user details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationUserResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationUserResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationUserResource() = default;

    BlueRestOrganizationsOrganizationUserResource(
        const BlueRestOrganizationsOrganizationUserResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationUserResource(BlueRestOrganizationsOrganizationUserResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationUserResource& operator=(const BlueRestOrganizationsOrganizationUserResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationUserResource& operator=(BlueRestOrganizationsOrganizationUserResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, User>(
        std::string & organization)> handler_GET_func =
            [](std::string &) -> std::pair<int, User>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, User> handler_GET(
        std::string & organization);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get a list of class names supported by a given class
/// </remarks>
class  BlueRestClassesClassResource: public restbed::Resource
{
public:
    BlueRestClassesClassResource(const std::string& context = "");
    virtual ~BlueRestClassesClassResource() = default;

    BlueRestClassesClassResource(
        const BlueRestClassesClassResource& other) = default; // copy constructor
    BlueRestClassesClassResource(BlueRestClassesClassResource&& other) noexcept = default; // move constructor

    BlueRestClassesClassResource& operator=(const BlueRestClassesClassResource& other) = default; // copy assignment
    BlueRestClassesClassResource& operator=(BlueRestClassesClassResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & r_class)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::string>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string & r_class);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve JSON Web Key
/// </remarks>
class  Jwt_authJwksKeyResource: public restbed::Resource
{
public:
    Jwt_authJwksKeyResource(const std::string& context = "");
    virtual ~Jwt_authJwksKeyResource() = default;

    Jwt_authJwksKeyResource(
        const Jwt_authJwksKeyResource& other) = default; // copy constructor
    Jwt_authJwksKeyResource(Jwt_authJwksKeyResource&& other) noexcept = default; // move constructor

    Jwt_authJwksKeyResource& operator=(const Jwt_authJwksKeyResource& other) = default; // copy assignment
    Jwt_authJwksKeyResource& operator=(Jwt_authJwksKeyResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int32_t & key)> handler_GET_func =
            [](int32_t &) -> std::pair<int, std::string>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int32_t & key);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve JSON Web Token
/// </remarks>
class  Jwt_authTokenResource: public restbed::Resource
{
public:
    Jwt_authTokenResource(const std::string& context = "");
    virtual ~Jwt_authTokenResource() = default;

    Jwt_authTokenResource(
        const Jwt_authTokenResource& other) = default; // copy constructor
    Jwt_authTokenResource(Jwt_authTokenResource&& other) noexcept = default; // move constructor

    Jwt_authTokenResource& operator=(const Jwt_authTokenResource& other) = default; // copy assignment
    Jwt_authTokenResource& operator=(Jwt_authTokenResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        int32_t & expiryTimeInMins, int32_t & maxExpiryTimeInMins)> handler_GET_func =
            [](int32_t &, int32_t &) -> std::pair<int, std::string>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        int32_t & expiryTimeInMins, int32_t & maxExpiryTimeInMins);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve organization details
/// </remarks>
class  BlueRestOrganizationsOrganizationResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationResource() = default;

    BlueRestOrganizationsOrganizationResource(
        const BlueRestOrganizationsOrganizationResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationResource(BlueRestOrganizationsOrganizationResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationResource& operator=(const BlueRestOrganizationsOrganizationResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationResource& operator=(BlueRestOrganizationsOrganizationResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Organisation>(
        std::string & organization)> handler_GET_func =
            [](std::string &) -> std::pair<int, Organisation>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Organisation> handler_GET(
        std::string & organization);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all organizations details
/// </remarks>
class  BlueRestOrganizationsResource: public restbed::Resource
{
public:
    BlueRestOrganizationsResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsResource() = default;

    BlueRestOrganizationsResource(
        const BlueRestOrganizationsResource& other) = default; // copy constructor
    BlueRestOrganizationsResource(BlueRestOrganizationsResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsResource& operator=(const BlueRestOrganizationsResource& other) = default; // copy assignment
    BlueRestOrganizationsResource& operator=(BlueRestOrganizationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<Organisation>>(
        )> handler_GET_func =
            []() -> std::pair<int, std::vector<Organisation>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<Organisation>> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineResource(BlueRestOrganizationsOrganizationPipelinesPipelineResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Pipeline>(
        std::string & organization, std::string & pipeline)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, Pipeline>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Pipeline> handler_GET(
        std::string & organization, std::string & pipeline);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all activities details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<PipelineActivity>>(
        std::string & organization, std::string & pipeline)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, std::vector<PipelineActivity>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<PipelineActivity>> handler_GET(
        std::string & organization, std::string & pipeline);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve branch details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, BranchImpl>(
        std::string & organization, std::string & pipeline, std::string & branch)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, BranchImpl>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, BranchImpl> handler_GET(
        std::string & organization, std::string & pipeline, std::string & branch);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve branch run details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PipelineRun>(
        std::string & organization, std::string & pipeline, std::string & branch, std::string & run)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &) -> std::pair<int, PipelineRun>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PipelineRun> handler_GET(
        std::string & organization, std::string & pipeline, std::string & branch, std::string & run);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all branches details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, MultibranchPipeline>(
        std::string & organization, std::string & pipeline)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, MultibranchPipeline>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, MultibranchPipeline> handler_GET(
        std::string & organization, std::string & pipeline);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline folder for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesFolderResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesFolderResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesFolderResource() = default;

    BlueRestOrganizationsOrganizationPipelinesFolderResource(
        const BlueRestOrganizationsOrganizationPipelinesFolderResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesFolderResource(BlueRestOrganizationsOrganizationPipelinesFolderResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesFolderResource& operator=(const BlueRestOrganizationsOrganizationPipelinesFolderResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesFolderResource& operator=(BlueRestOrganizationsOrganizationPipelinesFolderResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PipelineFolderImpl>(
        std::string & organization, std::string & folder)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, PipelineFolderImpl>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PipelineFolderImpl> handler_GET(
        std::string & organization, std::string & folder);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve pipeline details for an organization folder
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource() = default;

    BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(
        const BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource& operator=(const BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource& operator=(BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PipelineImpl>(
        std::string & organization, std::string & pipeline, std::string & folder)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, PipelineImpl>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PipelineImpl> handler_GET(
        std::string & organization, std::string & pipeline, std::string & folder);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queue details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<QueueItemImpl>>(
        std::string & organization, std::string & pipeline)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, std::vector<QueueItemImpl>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<QueueItemImpl>> handler_GET(
        std::string & organization, std::string & pipeline);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PipelineRun>(
        std::string & organization, std::string & pipeline, std::string & run)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, PipelineRun>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PipelineRun> handler_GET(
        std::string & organization, std::string & pipeline, std::string & run);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get log for a pipeline run
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & organization, std::string & pipeline, std::string & run, int32_t & start, bool & download)> handler_GET_func =
            [](std::string &, std::string &, std::string &, int32_t &, bool &) -> std::pair<int, std::string>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, int32_t & start, bool & download);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PipelineRunNode>(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &) -> std::pair<int, PipelineRunNode>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PipelineRunNode> handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PipelineStepImpl>(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node, std::string & step)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, std::string &) -> std::pair<int, PipelineStepImpl>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PipelineStepImpl> handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node, std::string & step);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get log for a pipeline run node step
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node, std::string & step)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, std::string &) -> std::pair<int, std::string>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node, std::string & step);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run node steps details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<PipelineStepImpl>>(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &) -> std::pair<int, std::vector<PipelineStepImpl>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<PipelineStepImpl>> handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve run nodes details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<PipelineRunNode>>(
        std::string & organization, std::string & pipeline, std::string & run)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, std::vector<PipelineRunNode>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<PipelineRunNode>> handler_GET(
        std::string & organization, std::string & pipeline, std::string & run);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all runs details for an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<PipelineRun>>(
        std::string & organization, std::string & pipeline)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, std::vector<PipelineRun>>
                { throw BlueOceanApiException(501, "Not implemented"); };

    std::function<std::pair<int, QueueItemImpl>(
        std::string & organization, std::string & pipeline)> handler_POST_func =
            [](std::string &, std::string &) -> std::pair<int, QueueItemImpl>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<PipelineRun>> handler_GET(
        std::string & organization, std::string & pipeline);

    virtual std::pair<int, QueueItemImpl> handler_POST(
        std::string & organization, std::string & pipeline);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve all pipelines details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesResource() = default;

    BlueRestOrganizationsOrganizationPipelinesResource(
        const BlueRestOrganizationsOrganizationPipelinesResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesResource(BlueRestOrganizationsOrganizationPipelinesResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesResource& operator=(const BlueRestOrganizationsOrganizationPipelinesResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesResource& operator=(BlueRestOrganizationsOrganizationPipelinesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<Pipeline>>(
        std::string & organization)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::vector<Pipeline>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<Pipeline>> handler_GET(
        std::string & organization);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationScmScmResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationScmScmResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationScmScmResource() = default;

    BlueRestOrganizationsOrganizationScmScmResource(
        const BlueRestOrganizationsOrganizationScmScmResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationScmScmResource(BlueRestOrganizationsOrganizationScmScmResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationScmScmResource& operator=(const BlueRestOrganizationsOrganizationScmScmResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationScmScmResource& operator=(BlueRestOrganizationsOrganizationScmScmResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, GithubScm>(
        std::string & organization, std::string & scm)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, GithubScm>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, GithubScm> handler_GET(
        std::string & organization, std::string & scm);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organization repositories details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource() = default;

    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(
        const BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource& operator=(const BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource& operator=(BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<GithubOrganization>>(
        std::string & organization, std::string & scm, std::string & scmOrganisation, std::string & credentialId, int32_t & pageSize, int32_t & pageNumber)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, int32_t &, int32_t &) -> std::pair<int, std::vector<GithubOrganization>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<GithubOrganization>> handler_GET(
        std::string & organization, std::string & scm, std::string & scmOrganisation, std::string & credentialId, int32_t & pageSize, int32_t & pageNumber);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organization repository details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource() = default;

    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(
        const BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource& operator=(const BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource& operator=(BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<GithubOrganization>>(
        std::string & organization, std::string & scm, std::string & scmOrganisation, std::string & repository, std::string & credentialId)> handler_GET_func =
            [](std::string &, std::string &, std::string &, std::string &, std::string &) -> std::pair<int, std::vector<GithubOrganization>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<GithubOrganization>> handler_GET(
        std::string & organization, std::string & scm, std::string & scmOrganisation, std::string & repository, std::string & credentialId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve SCM organizations details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationScmScmOrganizationsResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationScmScmOrganizationsResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationScmScmOrganizationsResource() = default;

    BlueRestOrganizationsOrganizationScmScmOrganizationsResource(
        const BlueRestOrganizationsOrganizationScmScmOrganizationsResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationScmScmOrganizationsResource(BlueRestOrganizationsOrganizationScmScmOrganizationsResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationScmScmOrganizationsResource& operator=(const BlueRestOrganizationsOrganizationScmScmOrganizationsResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationScmScmOrganizationsResource& operator=(BlueRestOrganizationsOrganizationScmScmOrganizationsResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<GithubOrganization>>(
        std::string & organization, std::string & scm, std::string & credentialId)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, std::vector<GithubOrganization>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<GithubOrganization>> handler_GET(
        std::string & organization, std::string & scm, std::string & credentialId);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve user details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationUsersUserResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationUsersUserResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationUsersUserResource() = default;

    BlueRestOrganizationsOrganizationUsersUserResource(
        const BlueRestOrganizationsOrganizationUsersUserResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationUsersUserResource(BlueRestOrganizationsOrganizationUsersUserResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationUsersUserResource& operator=(const BlueRestOrganizationsOrganizationUsersUserResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationUsersUserResource& operator=(BlueRestOrganizationsOrganizationUsersUserResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, User>(
        std::string & organization, std::string & user)> handler_GET_func =
            [](std::string &, std::string &) -> std::pair<int, User>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, User> handler_GET(
        std::string & organization, std::string & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve user favorites details for an organization
/// </remarks>
class  BlueRestUsersUserFavoritesResource: public restbed::Resource
{
public:
    BlueRestUsersUserFavoritesResource(const std::string& context = "");
    virtual ~BlueRestUsersUserFavoritesResource() = default;

    BlueRestUsersUserFavoritesResource(
        const BlueRestUsersUserFavoritesResource& other) = default; // copy constructor
    BlueRestUsersUserFavoritesResource(BlueRestUsersUserFavoritesResource&& other) noexcept = default; // move constructor

    BlueRestUsersUserFavoritesResource& operator=(const BlueRestUsersUserFavoritesResource& other) = default; // copy assignment
    BlueRestUsersUserFavoritesResource& operator=(BlueRestUsersUserFavoritesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::vector<FavoriteImpl>>(
        std::string & user)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::vector<FavoriteImpl>>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::vector<FavoriteImpl>> handler_GET(
        std::string & user);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve users details for an organization
/// </remarks>
class  BlueRestOrganizationsOrganizationUsersResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationUsersResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationUsersResource() = default;

    BlueRestOrganizationsOrganizationUsersResource(
        const BlueRestOrganizationsOrganizationUsersResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationUsersResource(BlueRestOrganizationsOrganizationUsersResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationUsersResource& operator=(const BlueRestOrganizationsOrganizationUsersResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationUsersResource& operator=(BlueRestOrganizationsOrganizationUsersResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, User>(
        std::string & organization)> handler_GET_func =
            [](std::string &) -> std::pair<int, User>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, User> handler_GET(
        std::string & organization);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Replay an organization pipeline run
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, QueueItemImpl>(
        std::string & organization, std::string & pipeline, std::string & run)> handler_POST_func =
            [](std::string &, std::string &, std::string &) -> std::pair<int, QueueItemImpl>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, QueueItemImpl> handler_POST(
        std::string & organization, std::string & pipeline, std::string & run);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Favorite/unfavorite a pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FavoriteImpl>(
        std::string & organization, std::string & pipeline, bool & body)> handler_PUT_func =
            [](std::string &, std::string &, bool &) -> std::pair<int, FavoriteImpl>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FavoriteImpl> handler_PUT(
        std::string & organization, std::string & pipeline, bool & body);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Stop a build of an organization pipeline
/// </remarks>
class  BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource: public restbed::Resource
{
public:
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(const std::string& context = "");
    virtual ~BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource() = default;

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(
        const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource& other) = default; // copy constructor
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource&& other) noexcept = default; // move constructor

    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource& operator=(const BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource& other) = default; // copy assignment
    BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource& operator=(BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, PipelineRun>(
        std::string & organization, std::string & pipeline, std::string & run, std::string & blocking, int32_t & timeOutInSecs)> handler_PUT_func =
            [](std::string &, std::string &, std::string &, std::string &, int32_t &) -> std::pair<int, PipelineRun>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, PipelineRun> handler_PUT(
        std::string & organization, std::string & pipeline, std::string & run, std::string & blocking, int32_t & timeOutInSecs);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_PUT_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Search for any resource details
/// </remarks>
class  BlueRestSearchResource: public restbed::Resource
{
public:
    BlueRestSearchResource(const std::string& context = "");
    virtual ~BlueRestSearchResource() = default;

    BlueRestSearchResource(
        const BlueRestSearchResource& other) = default; // copy constructor
    BlueRestSearchResource(BlueRestSearchResource&& other) noexcept = default; // move constructor

    BlueRestSearchResource& operator=(const BlueRestSearchResource& other) = default; // copy assignment
    BlueRestSearchResource& operator=(BlueRestSearchResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & q)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::string>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string & q);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Get classes details
/// </remarks>
class  BlueRestClassesResource: public restbed::Resource
{
public:
    BlueRestClassesResource(const std::string& context = "");
    virtual ~BlueRestClassesResource() = default;

    BlueRestClassesResource(
        const BlueRestClassesResource& other) = default; // copy constructor
    BlueRestClassesResource(BlueRestClassesResource&& other) noexcept = default; // move constructor

    BlueRestClassesResource& operator=(const BlueRestClassesResource& other) = default; // copy assignment
    BlueRestClassesResource& operator=(BlueRestClassesResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & q)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::string>
                { throw BlueOceanApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string & q);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleBlueOceanApiException(const BlueOceanApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace BlueOceanApiResources */

using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource;
using BlueOceanApiBlueRestOrganizationsOrganizationUserResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource;
using BlueOceanApiBlueRestClassesClassResource [[deprecated]] = BlueOceanApiResources::BlueRestClassesClassResource;
using BlueOceanApiJwt_authJwksKeyResource [[deprecated]] = BlueOceanApiResources::Jwt_authJwksKeyResource;
using BlueOceanApiJwt_authTokenResource [[deprecated]] = BlueOceanApiResources::Jwt_authTokenResource;
using BlueOceanApiBlueRestOrganizationsOrganizationResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationResource;
using BlueOceanApiBlueRestOrganizationsResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource;
using BlueOceanApiBlueRestOrganizationsOrganizationScmScmResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource;
using BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource;
using BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource;
using BlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource;
using BlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource;
using BlueOceanApiBlueRestUsersUserFavoritesResource [[deprecated]] = BlueOceanApiResources::BlueRestUsersUserFavoritesResource;
using BlueOceanApiBlueRestOrganizationsOrganizationUsersResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource;
using BlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource [[deprecated]] = BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource;
using BlueOceanApiBlueRestSearchResource [[deprecated]] = BlueOceanApiResources::BlueRestSearchResource;
using BlueOceanApiBlueRestClassesResource [[deprecated]] = BlueOceanApiResources::BlueRestClassesResource;

//
// The restbed service to actually implement the REST server
//
class  BlueOceanApi
{
public:
    explicit BlueOceanApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~BlueOceanApi();

    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> getBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource> getBlueRestOrganizationsOrganizationUserResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestClassesClassResource> getBlueRestClassesClassResource();
    std::shared_ptr<BlueOceanApiResources::Jwt_authJwksKeyResource> getJwt_authJwksKeyResource();
    std::shared_ptr<BlueOceanApiResources::Jwt_authTokenResource> getJwt_authTokenResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource> getBlueRestOrganizationsOrganizationResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsResource> getBlueRestOrganizationsResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource> getBlueRestOrganizationsOrganizationPipelinesPipelineResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> getBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> getBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> getBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> getBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource> getBlueRestOrganizationsOrganizationPipelinesFolderResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> getBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> getBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource> getBlueRestOrganizationsOrganizationPipelinesResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource> getBlueRestOrganizationsOrganizationScmScmResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> getBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> getBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource> getBlueRestOrganizationsOrganizationScmScmOrganizationsResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource> getBlueRestOrganizationsOrganizationUsersUserResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestUsersUserFavoritesResource> getBlueRestUsersUserFavoritesResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource> getBlueRestOrganizationsOrganizationUsersResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> getBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestSearchResource> getBlueRestSearchResource();
    std::shared_ptr<BlueOceanApiResources::BlueRestClassesResource> getBlueRestClassesResource();

    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestClassesClassResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::Jwt_authJwksKeyResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::Jwt_authTokenResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestUsersUserFavoritesResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestSearchResource> resource);
    void setResource(std::shared_ptr<BlueOceanApiResources::BlueRestClassesResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationUserResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource> spBlueOceanApiBlueRestOrganizationsOrganizationUserResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestClassesClassResource(std::shared_ptr<BlueOceanApiResources::BlueRestClassesClassResource> spBlueOceanApiBlueRestClassesClassResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiJwt_authJwksKeyResource(std::shared_ptr<BlueOceanApiResources::Jwt_authJwksKeyResource> spBlueOceanApiJwt_authJwksKeyResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiJwt_authTokenResource(std::shared_ptr<BlueOceanApiResources::Jwt_authTokenResource> spBlueOceanApiJwt_authTokenResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource> spBlueOceanApiBlueRestOrganizationsOrganizationResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsResource> spBlueOceanApiBlueRestOrganizationsResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource> spBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource> spBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestUsersUserFavoritesResource(std::shared_ptr<BlueOceanApiResources::BlueRestUsersUserFavoritesResource> spBlueOceanApiBlueRestUsersUserFavoritesResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationUsersResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource> spBlueOceanApiBlueRestOrganizationsOrganizationUsersResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> spBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestSearchResource(std::shared_ptr<BlueOceanApiResources::BlueRestSearchResource> spBlueOceanApiBlueRestSearchResource);
    [[deprecated("use setResource()")]]
    virtual void setBlueOceanApiBlueRestClassesResource(std::shared_ptr<BlueOceanApiResources::BlueRestClassesResource> spBlueOceanApiBlueRestClassesResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource> m_spBlueRestOrganizationsOrganizationUserResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestClassesClassResource> m_spBlueRestClassesClassResource;
    std::shared_ptr<BlueOceanApiResources::Jwt_authJwksKeyResource> m_spJwt_authJwksKeyResource;
    std::shared_ptr<BlueOceanApiResources::Jwt_authTokenResource> m_spJwt_authTokenResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource> m_spBlueRestOrganizationsOrganizationResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsResource> m_spBlueRestOrganizationsResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource> m_spBlueRestOrganizationsOrganizationPipelinesFolderResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> m_spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource> m_spBlueRestOrganizationsOrganizationPipelinesResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource> m_spBlueRestOrganizationsOrganizationScmScmResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource> m_spBlueRestOrganizationsOrganizationScmScmOrganizationsResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource> m_spBlueRestOrganizationsOrganizationUsersUserResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestUsersUserFavoritesResource> m_spBlueRestUsersUserFavoritesResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource> m_spBlueRestOrganizationsOrganizationUsersResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestSearchResource> m_spBlueRestSearchResource;
    std::shared_ptr<BlueOceanApiResources::BlueRestClassesResource> m_spBlueRestClassesResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* BlueOceanApi_H_ */

