/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


#include <corvusoft/restbed/byte.hpp>
#include <corvusoft/restbed/string.hpp>
#include <corvusoft/restbed/settings.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/uri.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/algorithm/string.hpp>

#include "BlueOceanApi.h"

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

namespace {
[[maybe_unused]]
std::string selectPreferredContentType(const std::vector<std::string>& contentTypes) {
    if (contentTypes.size() == 0) {
        return "application/json";
    }

    if (contentTypes.size() == 1) {
        return contentTypes.at(0);
    }

    static const std::array<std::string, 2> preferredTypes = {"json", "xml"};
    for (const auto& preferredType: preferredTypes) {
        const auto ret = std::find_if(contentTypes.cbegin(),
        contentTypes.cend(),
        [preferredType](const std::string& str) {
            return str.find(preferredType) != std::string::npos;});
        if (ret != contentTypes.cend()) {
            return *ret;
        }
    }

    return contentTypes.at(0);
}
}

BlueOceanApiException::BlueOceanApiException(int status_code, std::string what)
  : m_status(status_code),
    m_what(what)
{

}
int BlueOceanApiException::getStatus() const
{
    return m_status;
}
const char* BlueOceanApiException::what() const noexcept
{
    return m_what.c_str();
}


template<class MODEL_T>
MODEL_T extractJsonModelBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto model = MODEL_T(pt);
    return model;
}

template<class MODEL_T>
std::vector<MODEL_T> extractJsonArrayBodyParam(const std::string& bodyContent)
{
    std::stringstream sstream(bodyContent);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream, pt);

    auto arrayRet = std::vector<MODEL_T>();
    for (const auto& child: pt) {
        arrayRet.emplace_back(MODEL_T(child.second));
    }
    return arrayRet;
}

template <class KEY_T, class VAL_T>
std::string convertMapResponse(const std::map<KEY_T, VAL_T>& map)
{
    boost::property_tree::ptree pt;
    for(const auto &kv: map) {
    pt.push_back(boost::property_tree::ptree::value_type(
        boost::lexical_cast<std::string>(kv.first),
        boost::property_tree::ptree(
        boost::lexical_cast<std::string>(kv.second))));
    }
    std::stringstream sstream;
    write_json(sstream, pt);
    std::string result = sstream.str();
    return result;
}

namespace BlueOceanApiResources {
BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/queue/{queue: .*}");
	this->set_method_handler("DELETE",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handler_DELETE_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handler_DELETE_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string queue = request->get_path_parameter("queue", "");
    
    int status_code = 500;
    std::string result = "";
    
    try {
        status_code =
            handler_DELETE(organization, pipeline, queue);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json"
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


int BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::handler_DELETE(
        std::string & organization, std::string & pipeline, std::string & queue)
{
    return handler_DELETE_func(organization, pipeline, queue);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationUserResource::BlueRestOrganizationsOrganizationUserResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/user/");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationUserResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUserResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUserResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUserResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationUserResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationUserResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationUserResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationUserResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    
    int status_code = 500;
    User resultObject = User{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, User> BlueRestOrganizationsOrganizationUserResource::handler_GET(
        std::string & organization)
{
    return handler_GET_func(organization);
}


std::string BlueRestOrganizationsOrganizationUserResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationUserResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestClassesClassResource::BlueRestClassesClassResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/classes/{class: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestClassesClassResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestClassesClassResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestClassesClassResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestClassesClassResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestClassesClassResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestClassesClassResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestClassesClassResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestClassesClassResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string r_class = request->get_path_parameter("class", "");
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(r_class);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> BlueRestClassesClassResource::handler_GET(
        std::string & r_class)
{
    return handler_GET_func(r_class);
}


std::string BlueRestClassesClassResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestClassesClassResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Jwt_authJwksKeyResource::Jwt_authJwksKeyResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/jwt-auth/jwks/{key: .*}");
	this->set_method_handler("GET",
		std::bind(&Jwt_authJwksKeyResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Jwt_authJwksKeyResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Jwt_authJwksKeyResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Jwt_authJwksKeyResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Jwt_authJwksKeyResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Jwt_authJwksKeyResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Jwt_authJwksKeyResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Jwt_authJwksKeyResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    int32_t key = request->get_path_parameter("key", 0);
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(key);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> Jwt_authJwksKeyResource::handler_GET(
        int32_t & key)
{
    return handler_GET_func(key);
}


std::string Jwt_authJwksKeyResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Jwt_authJwksKeyResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
Jwt_authTokenResource::Jwt_authTokenResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/jwt-auth/token");
	this->set_method_handler("GET",
		std::bind(&Jwt_authTokenResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> Jwt_authTokenResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> Jwt_authTokenResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> Jwt_authTokenResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void Jwt_authTokenResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void Jwt_authTokenResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void Jwt_authTokenResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void Jwt_authTokenResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    int32_t expiryTimeInMins = request->get_query_parameter("expiryTimeInMins", 0);
    int32_t maxExpiryTimeInMins = request->get_query_parameter("maxExpiryTimeInMins", 0);
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(expiryTimeInMins, maxExpiryTimeInMins);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> Jwt_authTokenResource::handler_GET(
        int32_t & expiryTimeInMins, int32_t & maxExpiryTimeInMins)
{
    return handler_GET_func(expiryTimeInMins, maxExpiryTimeInMins);
}


std::string Jwt_authTokenResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string Jwt_authTokenResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationResource::BlueRestOrganizationsOrganizationResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    
    int status_code = 500;
    Organisation resultObject = Organisation{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Pipeline cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Organisation> BlueRestOrganizationsOrganizationResource::handler_GET(
        std::string & organization)
{
    return handler_GET_func(organization);
}


std::string BlueRestOrganizationsOrganizationResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsResource::BlueRestOrganizationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    
    int status_code = 500;
    std::vector<Organisation> resultObject = std::vector<Organisation>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET();
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<Organisation>> BlueRestOrganizationsResource::handler_GET(
        )
{
    return handler_GET_func();
}


std::string BlueRestOrganizationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineResource::BlueRestOrganizationsOrganizationPipelinesPipelineResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    
    int status_code = 500;
    Pipeline resultObject = Pipeline{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 404) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Pipeline cannot be found on Jenkins instance";
    
        returnResponse(session, 404, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, Pipeline> BlueRestOrganizationsOrganizationPipelinesPipelineResource::handler_GET(
        std::string & organization, std::string & pipeline)
{
    return handler_GET_func(organization, pipeline);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/activities");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    
    int status_code = 500;
    std::vector<PipelineActivity> resultObject = std::vector<PipelineActivity>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<PipelineActivity>> BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::handler_GET(
        std::string & organization, std::string & pipeline)
{
    return handler_GET_func(organization, pipeline);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches/{branch: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string branch = request->get_path_parameter("branch", "");
    
    int status_code = 500;
    BranchImpl resultObject = BranchImpl{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, branch);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, BranchImpl> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & branch)
{
    return handler_GET_func(organization, pipeline, branch);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches/{branch: .*}/runs/{run: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string branch = request->get_path_parameter("branch", "");
    std::string run = request->get_path_parameter("run", "");
    
    int status_code = 500;
    PipelineRun resultObject = PipelineRun{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, branch, run);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, PipelineRun> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & branch, std::string & run)
{
    return handler_GET_func(organization, pipeline, branch, run);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/branches");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    
    int status_code = 500;
    MultibranchPipeline resultObject = MultibranchPipeline{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, MultibranchPipeline> BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::handler_GET(
        std::string & organization, std::string & pipeline)
{
    return handler_GET_func(organization, pipeline);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesFolderResource::BlueRestOrganizationsOrganizationPipelinesFolderResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{folder: .*}/");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesFolderResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesFolderResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesFolderResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesFolderResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesFolderResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesFolderResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesFolderResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesFolderResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string folder = request->get_path_parameter("folder", "");
    
    int status_code = 500;
    PipelineFolderImpl resultObject = PipelineFolderImpl{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, folder);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, PipelineFolderImpl> BlueRestOrganizationsOrganizationPipelinesFolderResource::handler_GET(
        std::string & organization, std::string & folder)
{
    return handler_GET_func(organization, folder);
}


std::string BlueRestOrganizationsOrganizationPipelinesFolderResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesFolderResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{folder: .*}/pipelines/{pipeline: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string folder = request->get_path_parameter("folder", "");
    
    int status_code = 500;
    PipelineImpl resultObject = PipelineImpl{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, folder);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, PipelineImpl> BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & folder)
{
    return handler_GET_func(organization, pipeline, folder);
}


std::string BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/queue");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    
    int status_code = 500;
    std::vector<QueueItemImpl> resultObject = std::vector<QueueItemImpl>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<QueueItemImpl>> BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::handler_GET(
        std::string & organization, std::string & pipeline)
{
    return handler_GET_func(organization, pipeline);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    
    int status_code = 500;
    PipelineRun resultObject = PipelineRun{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, run);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, PipelineRun> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & run)
{
    return handler_GET_func(organization, pipeline, run);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/log");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    // Getting the query params
    int32_t start = request->get_query_parameter("start", 0);
    bool download = request->get_query_parameter("download", false);
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, run, start, download);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, int32_t & start, bool & download)
{
    return handler_GET_func(organization, pipeline, run, start, download);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    std::string node = request->get_path_parameter("node", "");
    
    int status_code = 500;
    PipelineRunNode resultObject = PipelineRunNode{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, run, node);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, PipelineRunNode> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node)
{
    return handler_GET_func(organization, pipeline, run, node);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps/{step: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    std::string node = request->get_path_parameter("node", "");
    std::string step = request->get_path_parameter("step", "");
    
    int status_code = 500;
    PipelineStepImpl resultObject = PipelineStepImpl{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, run, node, step);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, PipelineStepImpl> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node, std::string & step)
{
    return handler_GET_func(organization, pipeline, run, node, step);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps/{step: .*}/log");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    std::string node = request->get_path_parameter("node", "");
    std::string step = request->get_path_parameter("step", "");
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, run, node, step);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node, std::string & step)
{
    return handler_GET_func(organization, pipeline, run, node, step);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes/{node: .*}/steps");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    std::string node = request->get_path_parameter("node", "");
    
    int status_code = 500;
    std::vector<PipelineStepImpl> resultObject = std::vector<PipelineStepImpl>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, run, node);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<PipelineStepImpl>> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & run, std::string & node)
{
    return handler_GET_func(organization, pipeline, run, node);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/nodes");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    
    int status_code = 500;
    std::vector<PipelineRunNode> resultObject = std::vector<PipelineRunNode>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline, run);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<PipelineRunNode>> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::handler_GET(
        std::string & organization, std::string & pipeline, std::string & run)
{
    return handler_GET_func(organization, pipeline, run);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_GET_internal, this,
			std::placeholders::_1));
	this->set_method_handler("POST",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    
    int status_code = 500;
    std::vector<PipelineRun> resultObject = std::vector<PipelineRun>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

// x-extension
void BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session) {
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    
    int status_code = 500;
    QueueItemImpl resultObject = QueueItemImpl{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(organization, pipeline);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}

std::pair<int, std::vector<PipelineRun>> BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_GET(
        std::string & organization, std::string & pipeline)
{
    return handler_GET_func(organization, pipeline);
}

std::pair<int, QueueItemImpl> BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::handler_POST(
    std::string & organization, std::string & pipeline)
{
    return handler_POST_func(organization, pipeline);
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesResource::BlueRestOrganizationsOrganizationPipelinesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    
    int status_code = 500;
    std::vector<Pipeline> resultObject = std::vector<Pipeline>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<Pipeline>> BlueRestOrganizationsOrganizationPipelinesResource::handler_GET(
        std::string & organization)
{
    return handler_GET_func(organization);
}


std::string BlueRestOrganizationsOrganizationPipelinesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationScmScmResource::BlueRestOrganizationsOrganizationScmScmResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/scm/{scm: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationScmScmResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationScmScmResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationScmScmResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationScmScmResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationScmScmResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string scm = request->get_path_parameter("scm", "");
    
    int status_code = 500;
    GithubScm resultObject = GithubScm{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, scm);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, GithubScm> BlueRestOrganizationsOrganizationScmScmResource::handler_GET(
        std::string & organization, std::string & scm)
{
    return handler_GET_func(organization, scm);
}


std::string BlueRestOrganizationsOrganizationScmScmResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationScmScmResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations/{scmOrganisation: .*}/repositories");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string scm = request->get_path_parameter("scm", "");
    std::string scmOrganisation = request->get_path_parameter("scmOrganisation", "");
    // Getting the query params
    std::string credentialId = request->get_query_parameter("credentialId", "");
    int32_t pageSize = request->get_query_parameter("pageSize", 0);
    int32_t pageNumber = request->get_query_parameter("pageNumber", 0);
    
    int status_code = 500;
    std::vector<GithubOrganization> resultObject = std::vector<GithubOrganization>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<GithubOrganization>> BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::handler_GET(
        std::string & organization, std::string & scm, std::string & scmOrganisation, std::string & credentialId, int32_t & pageSize, int32_t & pageNumber)
{
    return handler_GET_func(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber);
}


std::string BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations/{scmOrganisation: .*}/repositories/{repository: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string scm = request->get_path_parameter("scm", "");
    std::string scmOrganisation = request->get_path_parameter("scmOrganisation", "");
    std::string repository = request->get_path_parameter("repository", "");
    // Getting the query params
    std::string credentialId = request->get_query_parameter("credentialId", "");
    
    int status_code = 500;
    std::vector<GithubOrganization> resultObject = std::vector<GithubOrganization>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, scm, scmOrganisation, repository, credentialId);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<GithubOrganization>> BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::handler_GET(
        std::string & organization, std::string & scm, std::string & scmOrganisation, std::string & repository, std::string & credentialId)
{
    return handler_GET_func(organization, scm, scmOrganisation, repository, credentialId);
}


std::string BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationScmScmOrganizationsResource::BlueRestOrganizationsOrganizationScmScmOrganizationsResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/scm/{scm: .*}/organizations");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationScmScmOrganizationsResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationScmScmOrganizationsResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationScmScmOrganizationsResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string scm = request->get_path_parameter("scm", "");
    // Getting the query params
    std::string credentialId = request->get_query_parameter("credentialId", "");
    
    int status_code = 500;
    std::vector<GithubOrganization> resultObject = std::vector<GithubOrganization>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, scm, credentialId);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<GithubOrganization>> BlueRestOrganizationsOrganizationScmScmOrganizationsResource::handler_GET(
        std::string & organization, std::string & scm, std::string & credentialId)
{
    return handler_GET_func(organization, scm, credentialId);
}


std::string BlueRestOrganizationsOrganizationScmScmOrganizationsResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationScmScmOrganizationsResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationUsersUserResource::BlueRestOrganizationsOrganizationUsersUserResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/users/{user: .*}");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationUsersUserResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUsersUserResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUsersUserResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUsersUserResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationUsersUserResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationUsersUserResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationUsersUserResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationUsersUserResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string user = request->get_path_parameter("user", "");
    
    int status_code = 500;
    User resultObject = User{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization, user);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, User> BlueRestOrganizationsOrganizationUsersUserResource::handler_GET(
        std::string & organization, std::string & user)
{
    return handler_GET_func(organization, user);
}


std::string BlueRestOrganizationsOrganizationUsersUserResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationUsersUserResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestUsersUserFavoritesResource::BlueRestUsersUserFavoritesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/users/{user: .*}/favorites");
	this->set_method_handler("GET",
		std::bind(&BlueRestUsersUserFavoritesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestUsersUserFavoritesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestUsersUserFavoritesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestUsersUserFavoritesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestUsersUserFavoritesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestUsersUserFavoritesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestUsersUserFavoritesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestUsersUserFavoritesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string user = request->get_path_parameter("user", "");
    
    int status_code = 500;
    std::vector<FavoriteImpl> resultObject = std::vector<FavoriteImpl>();
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(user);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::vector<FavoriteImpl>> BlueRestUsersUserFavoritesResource::handler_GET(
        std::string & user)
{
    return handler_GET_func(user);
}


std::string BlueRestUsersUserFavoritesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestUsersUserFavoritesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationUsersResource::BlueRestOrganizationsOrganizationUsersResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/users/");
	this->set_method_handler("GET",
		std::bind(&BlueRestOrganizationsOrganizationUsersResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUsersResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUsersResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationUsersResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationUsersResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationUsersResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationUsersResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationUsersResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    
    int status_code = 500;
    User resultObject = User{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(organization);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, User> BlueRestOrganizationsOrganizationUsersResource::handler_GET(
        std::string & organization)
{
    return handler_GET_func(organization);
}


std::string BlueRestOrganizationsOrganizationUsersResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationUsersResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/replay");
	this->set_method_handler("POST",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handler_POST_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handler_POST_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    
    int status_code = 500;
    QueueItemImpl resultObject = QueueItemImpl{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_POST(organization, pipeline, run);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, QueueItemImpl> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::handler_POST(
        std::string & organization, std::string & pipeline, std::string & run)
{
    return handler_POST_func(organization, pipeline, run);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/favorite");
	this->set_method_handler("PUT",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // body params or form params here from the body content string
    std::string bodyContent = extractBodyContent(session);
    auto body = boost::lexical_cast<bool>(bodyContent);
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    
    int status_code = 500;
    FavoriteImpl resultObject = FavoriteImpl{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(organization, pipeline, body);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
        "application/json, "
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, FavoriteImpl> BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::handler_PUT(
        std::string & organization, std::string & pipeline, bool & body)
{
    return handler_PUT_func(organization, pipeline, body);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/organizations/{organization: .*}/pipelines/{pipeline: .*}/runs/{run: .*}/stop");
	this->set_method_handler("PUT",
		std::bind(&BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handler_PUT_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handler_PUT_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the path params
    std::string organization = request->get_path_parameter("organization", "");
    std::string pipeline = request->get_path_parameter("pipeline", "");
    std::string run = request->get_path_parameter("run", "");
    // Getting the query params
    std::string blocking = request->get_query_parameter("blocking", "");
    int32_t timeOutInSecs = request->get_query_parameter("timeOutInSecs", 0);
    
    int status_code = 500;
    PipelineRun resultObject = PipelineRun{};
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_PUT(organization, pipeline, run, blocking, timeOutInSecs);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject.toJsonString();
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, PipelineRun> BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::handler_PUT(
        std::string & organization, std::string & pipeline, std::string & run, std::string & blocking, int32_t & timeOutInSecs)
{
    return handler_PUT_func(organization, pipeline, run, blocking, timeOutInSecs);
}


std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestSearchResource::BlueRestSearchResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/search/");
	this->set_method_handler("GET",
		std::bind(&BlueRestSearchResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestSearchResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestSearchResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestSearchResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestSearchResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestSearchResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestSearchResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestSearchResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string q = request->get_query_parameter("q", "");
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(q);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> BlueRestSearchResource::handler_GET(
        std::string & q)
{
    return handler_GET_func(q);
}


std::string BlueRestSearchResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestSearchResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}
BlueRestClassesResource::BlueRestClassesResource(const std::string& context /* = "" */)
{
	this->set_path(context + "/blue/rest/classes/");
	this->set_method_handler("GET",
		std::bind(&BlueRestClassesResource::handler_GET_internal, this,
			std::placeholders::_1));
}

std::pair<int, std::string> BlueRestClassesResource::handleBlueOceanApiException(const BlueOceanApiException& e)
{
    return std::make_pair<int, std::string>(e.getStatus(), e.what());
}

std::pair<int, std::string> BlueRestClassesResource::handleStdException(const std::exception& e)
{
    return std::make_pair<int, std::string>(500, e.what());
}

std::pair<int, std::string> BlueRestClassesResource::handleUnspecifiedException()
{
    return std::make_pair<int, std::string>(500, "Unknown exception occurred");
}

void BlueRestClassesResource::setResponseHeader(const std::shared_ptr<restbed::Session>& session, const std::string& header)
{
    session->set_header(header, "");
}

void BlueRestClassesResource::returnResponse(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result, std::multimap<std::string, std::string>& responseHeaders)
{
    responseHeaders.insert(std::make_pair("Connection", "close"));
    session->close(status, result, responseHeaders);
}

void BlueRestClassesResource::defaultSessionClose(const std::shared_ptr<restbed::Session>& session, const int status, const std::string& result)
{
    session->close(status, result, { {"Connection", "close"} });
}

void BlueRestClassesResource::handler_GET_internal(const std::shared_ptr<restbed::Session> session)
{
    const auto request = session->get_request();
    // Getting the query params
    std::string q = request->get_query_parameter("q", "");
    
    int status_code = 500;
    std::string resultObject = "";
    std::string result = "";
    
    try {
        std::tie(status_code, resultObject) =
            handler_GET(q);
    }
    catch(const BlueOceanApiException& e) {
        std::tie(status_code, result) = handleBlueOceanApiException(e);
    }
    catch(const std::exception& e) {
        std::tie(status_code, result) = handleStdException(e);
    }
    catch(...) {
        std::tie(status_code, result) = handleUnspecifiedException();
    }
    
    std::multimap< std::string, std::string > responseHeaders {};
    static const std::vector<std::string> contentTypes{
        "application/json",
    };
    static const std::string acceptTypes{
    };
    
    if (status_code == 200) {
        responseHeaders.insert(std::make_pair("Content-Type", selectPreferredContentType(contentTypes)));
        if (!acceptTypes.empty()) {
            responseHeaders.insert(std::make_pair("Accept", acceptTypes));
        }
    
        result = resultObject;
        returnResponse(session, 200, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 401) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Authentication failed - incorrect username and/or password";
    
        returnResponse(session, 401, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    if (status_code == 403) {
        responseHeaders.insert(std::make_pair("Content-Type", "text/plain"));
        result = "Jenkins requires authentication - please set username and password";
    
        returnResponse(session, 403, result.empty() ? "{}" : result, responseHeaders);
        return;
    }
    defaultSessionClose(session, status_code, result);
    
    
}


std::pair<int, std::string> BlueRestClassesResource::handler_GET(
        std::string & q)
{
    return handler_GET_func(q);
}


std::string BlueRestClassesResource::extractBodyContent(const std::shared_ptr<restbed::Session>& session) {
  const auto request = session->get_request();
  int content_length = request->get_header("Content-Length", 0);
  std::string bodyContent;
  session->fetch(content_length,
                 [&bodyContent](const std::shared_ptr<restbed::Session> session,
                                const restbed::Bytes &body) {
                   bodyContent = restbed::String::format(
                       "%.*s\n", (int)body.size(), body.data());
                 });
  return bodyContent;
}

std::string BlueRestClassesResource::extractFormParamsFromBody(const std::string& paramName, const std::string& body) {
    const auto uri = restbed::Uri("urlencoded?" + body, true);
    const auto params = uri.get_query_parameters();
    const auto result = params.find(paramName);
    if (result != params.cend()) {
        return result->second;
    }
    return "";
}

} /* namespace BlueOceanApiResources */

BlueOceanApi::BlueOceanApi(std::shared_ptr<restbed::Service> const& restbedService)
: m_service(restbedService)
{
}

BlueOceanApi::~BlueOceanApi() {}

std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource> BlueOceanApi::getBlueRestOrganizationsOrganizationUserResource() {
    if (!m_spBlueRestOrganizationsOrganizationUserResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource>());
    }
    return m_spBlueRestOrganizationsOrganizationUserResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestClassesClassResource> BlueOceanApi::getBlueRestClassesClassResource() {
    if (!m_spBlueRestClassesClassResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestClassesClassResource>());
    }
    return m_spBlueRestClassesClassResource;
}
std::shared_ptr<BlueOceanApiResources::Jwt_authJwksKeyResource> BlueOceanApi::getJwt_authJwksKeyResource() {
    if (!m_spJwt_authJwksKeyResource) {
        setResource(std::make_shared<BlueOceanApiResources::Jwt_authJwksKeyResource>());
    }
    return m_spJwt_authJwksKeyResource;
}
std::shared_ptr<BlueOceanApiResources::Jwt_authTokenResource> BlueOceanApi::getJwt_authTokenResource() {
    if (!m_spJwt_authTokenResource) {
        setResource(std::make_shared<BlueOceanApiResources::Jwt_authTokenResource>());
    }
    return m_spJwt_authTokenResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource> BlueOceanApi::getBlueRestOrganizationsOrganizationResource() {
    if (!m_spBlueRestOrganizationsOrganizationResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource>());
    }
    return m_spBlueRestOrganizationsOrganizationResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsResource> BlueOceanApi::getBlueRestOrganizationsResource() {
    if (!m_spBlueRestOrganizationsResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsResource>());
    }
    return m_spBlueRestOrganizationsResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesFolderResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesFolderResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesFolderResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource> BlueOceanApi::getBlueRestOrganizationsOrganizationScmScmResource() {
    if (!m_spBlueRestOrganizationsOrganizationScmScmResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource>());
    }
    return m_spBlueRestOrganizationsOrganizationScmScmResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> BlueOceanApi::getBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource() {
    if (!m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource>());
    }
    return m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> BlueOceanApi::getBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource() {
    if (!m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource>());
    }
    return m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource> BlueOceanApi::getBlueRestOrganizationsOrganizationScmScmOrganizationsResource() {
    if (!m_spBlueRestOrganizationsOrganizationScmScmOrganizationsResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource>());
    }
    return m_spBlueRestOrganizationsOrganizationScmScmOrganizationsResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource> BlueOceanApi::getBlueRestOrganizationsOrganizationUsersUserResource() {
    if (!m_spBlueRestOrganizationsOrganizationUsersUserResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource>());
    }
    return m_spBlueRestOrganizationsOrganizationUsersUserResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestUsersUserFavoritesResource> BlueOceanApi::getBlueRestUsersUserFavoritesResource() {
    if (!m_spBlueRestUsersUserFavoritesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestUsersUserFavoritesResource>());
    }
    return m_spBlueRestUsersUserFavoritesResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource> BlueOceanApi::getBlueRestOrganizationsOrganizationUsersResource() {
    if (!m_spBlueRestOrganizationsOrganizationUsersResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource>());
    }
    return m_spBlueRestOrganizationsOrganizationUsersResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> BlueOceanApi::getBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource>());
    }
    return m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestSearchResource> BlueOceanApi::getBlueRestSearchResource() {
    if (!m_spBlueRestSearchResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestSearchResource>());
    }
    return m_spBlueRestSearchResource;
}
std::shared_ptr<BlueOceanApiResources::BlueRestClassesResource> BlueOceanApi::getBlueRestClassesResource() {
    if (!m_spBlueRestClassesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestClassesResource>());
    }
    return m_spBlueRestClassesResource;
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource> resource) {
    m_spBlueRestOrganizationsOrganizationUserResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationUserResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestClassesClassResource> resource) {
    m_spBlueRestClassesClassResource = resource;
    m_service->publish(m_spBlueRestClassesClassResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::Jwt_authJwksKeyResource> resource) {
    m_spJwt_authJwksKeyResource = resource;
    m_service->publish(m_spJwt_authJwksKeyResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::Jwt_authTokenResource> resource) {
    m_spJwt_authTokenResource = resource;
    m_service->publish(m_spJwt_authTokenResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource> resource) {
    m_spBlueRestOrganizationsOrganizationResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsResource> resource) {
    m_spBlueRestOrganizationsResource = resource;
    m_service->publish(m_spBlueRestOrganizationsResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesFolderResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesFolderResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource> resource) {
    m_spBlueRestOrganizationsOrganizationScmScmResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationScmScmResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> resource) {
    m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> resource) {
    m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource> resource) {
    m_spBlueRestOrganizationsOrganizationScmScmOrganizationsResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationScmScmOrganizationsResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource> resource) {
    m_spBlueRestOrganizationsOrganizationUsersUserResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationUsersUserResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestUsersUserFavoritesResource> resource) {
    m_spBlueRestUsersUserFavoritesResource = resource;
    m_service->publish(m_spBlueRestUsersUserFavoritesResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource> resource) {
    m_spBlueRestOrganizationsOrganizationUsersResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationUsersResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> resource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource = resource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestSearchResource> resource) {
    m_spBlueRestSearchResource = resource;
    m_service->publish(m_spBlueRestSearchResource);
}
void BlueOceanApi::setResource(std::shared_ptr<BlueOceanApiResources::BlueRestClassesResource> resource) {
    m_spBlueRestClassesResource = resource;
    m_service->publish(m_spBlueRestClassesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource> spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource = spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationUserResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource> spBlueRestOrganizationsOrganizationUserResource) {
    m_spBlueRestOrganizationsOrganizationUserResource = spBlueRestOrganizationsOrganizationUserResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationUserResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestClassesClassResource(std::shared_ptr<BlueOceanApiResources::BlueRestClassesClassResource> spBlueRestClassesClassResource) {
    m_spBlueRestClassesClassResource = spBlueRestClassesClassResource;
    m_service->publish(m_spBlueRestClassesClassResource);
}
void BlueOceanApi::setBlueOceanApiJwt_authJwksKeyResource(std::shared_ptr<BlueOceanApiResources::Jwt_authJwksKeyResource> spJwt_authJwksKeyResource) {
    m_spJwt_authJwksKeyResource = spJwt_authJwksKeyResource;
    m_service->publish(m_spJwt_authJwksKeyResource);
}
void BlueOceanApi::setBlueOceanApiJwt_authTokenResource(std::shared_ptr<BlueOceanApiResources::Jwt_authTokenResource> spJwt_authTokenResource) {
    m_spJwt_authTokenResource = spJwt_authTokenResource;
    m_service->publish(m_spJwt_authTokenResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource> spBlueRestOrganizationsOrganizationResource) {
    m_spBlueRestOrganizationsOrganizationResource = spBlueRestOrganizationsOrganizationResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsResource> spBlueRestOrganizationsResource) {
    m_spBlueRestOrganizationsResource = spBlueRestOrganizationsResource;
    m_service->publish(m_spBlueRestOrganizationsResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource> spBlueRestOrganizationsOrganizationPipelinesPipelineResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineResource = spBlueRestOrganizationsOrganizationPipelinesPipelineResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource> spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource = spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource> spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource = spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource> spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource = spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource> spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource = spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource> spBlueRestOrganizationsOrganizationPipelinesFolderResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesFolderResource = spBlueRestOrganizationsOrganizationPipelinesFolderResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesFolderResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource> spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource = spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource> spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource = spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource> spBlueRestOrganizationsOrganizationPipelinesResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesResource = spBlueRestOrganizationsOrganizationPipelinesResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationScmScmResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource> spBlueRestOrganizationsOrganizationScmScmResource) {
    m_spBlueRestOrganizationsOrganizationScmScmResource = spBlueRestOrganizationsOrganizationScmScmResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationScmScmResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource> spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource) {
    m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource = spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource> spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource) {
    m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource = spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationScmScmOrganizationsResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource> spBlueRestOrganizationsOrganizationScmScmOrganizationsResource) {
    m_spBlueRestOrganizationsOrganizationScmScmOrganizationsResource = spBlueRestOrganizationsOrganizationScmScmOrganizationsResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationScmScmOrganizationsResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationUsersUserResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource> spBlueRestOrganizationsOrganizationUsersUserResource) {
    m_spBlueRestOrganizationsOrganizationUsersUserResource = spBlueRestOrganizationsOrganizationUsersUserResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationUsersUserResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestUsersUserFavoritesResource(std::shared_ptr<BlueOceanApiResources::BlueRestUsersUserFavoritesResource> spBlueRestUsersUserFavoritesResource) {
    m_spBlueRestUsersUserFavoritesResource = spBlueRestUsersUserFavoritesResource;
    m_service->publish(m_spBlueRestUsersUserFavoritesResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationUsersResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource> spBlueRestOrganizationsOrganizationUsersResource) {
    m_spBlueRestOrganizationsOrganizationUsersResource = spBlueRestOrganizationsOrganizationUsersResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationUsersResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource> spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource = spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource(std::shared_ptr<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource> spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource) {
    m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource = spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource;
    m_service->publish(m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestSearchResource(std::shared_ptr<BlueOceanApiResources::BlueRestSearchResource> spBlueRestSearchResource) {
    m_spBlueRestSearchResource = spBlueRestSearchResource;
    m_service->publish(m_spBlueRestSearchResource);
}
void BlueOceanApi::setBlueOceanApiBlueRestClassesResource(std::shared_ptr<BlueOceanApiResources::BlueRestClassesResource> spBlueRestClassesResource) {
    m_spBlueRestClassesResource = spBlueRestClassesResource;
    m_service->publish(m_spBlueRestClassesResource);
}


void BlueOceanApi::publishDefaultResources() {
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueQueueResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationUserResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationUserResource>());
    }
    if (!m_spBlueRestClassesClassResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestClassesClassResource>());
    }
    if (!m_spJwt_authJwksKeyResource) {
        setResource(std::make_shared<BlueOceanApiResources::Jwt_authJwksKeyResource>());
    }
    if (!m_spJwt_authTokenResource) {
        setResource(std::make_shared<BlueOceanApiResources::Jwt_authTokenResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationResource>());
    }
    if (!m_spBlueRestOrganizationsResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineActivitiesResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesBranchRunsRunResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineBranchesResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesFolderResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesFolderPipelinesPipelineResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineQueueResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineQueueResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunLogResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsStepLogResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesNodeStepsResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunNodesResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationScmScmResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsScmOrganisationRepositoriesRepositoryResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationScmScmOrganizationsResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationScmScmOrganizationsResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationUsersUserResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersUserResource>());
    }
    if (!m_spBlueRestUsersUserFavoritesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestUsersUserFavoritesResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationUsersResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationUsersResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunReplayResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineFavoriteResource>());
    }
    if (!m_spBlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestOrganizationsOrganizationPipelinesPipelineRunsRunStopResource>());
    }
    if (!m_spBlueRestSearchResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestSearchResource>());
    }
    if (!m_spBlueRestClassesResource) {
        setResource(std::make_shared<BlueOceanApiResources::BlueRestClassesResource>());
    }
}

std::shared_ptr<restbed::Service> BlueOceanApi::service() {
    return m_service;
}


}
}
}
}

