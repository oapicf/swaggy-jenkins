/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RemoteAccessApi.h
 *
 * 
 */

#ifndef RemoteAccessApi_H_
#define RemoteAccessApi_H_


#include <memory>
#include <utility>
#include <exception>
#include <functional>

#include <corvusoft/restbed/session.hpp>
#include <corvusoft/restbed/resource.hpp>
#include <corvusoft/restbed/request.hpp>
#include <corvusoft/restbed/service.hpp>
#include <corvusoft/restbed/settings.hpp>

#include "ComputerSet.h"
#include "FreeStyleBuild.h"
#include "FreeStyleProject.h"
#include "Hudson.h"
#include "ListView.h"
#include "Queue.h"
#include <string>

namespace org {
namespace openapitools {
namespace server {
namespace api {

using namespace org::openapitools::server::model;

///
/// Exception to flag problems in the handlers
///
class  RemoteAccessApiException: public std::exception
{
public:
    RemoteAccessApiException(int status_code, std::string what);

    int getStatus() const;
    const char* what() const noexcept override;

private:
    int m_status;
    std::string m_what;
};

namespace RemoteAccessApiResources {
/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve computer details
/// </remarks>
class  ComputerApiJsonResource: public restbed::Resource
{
public:
    ComputerApiJsonResource(const std::string& context = "");
    virtual ~ComputerApiJsonResource() = default;

    ComputerApiJsonResource(
        const ComputerApiJsonResource& other) = default; // copy constructor
    ComputerApiJsonResource(ComputerApiJsonResource&& other) noexcept = default; // move constructor

    ComputerApiJsonResource& operator=(const ComputerApiJsonResource& other) = default; // copy assignment
    ComputerApiJsonResource& operator=(ComputerApiJsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ComputerSet>(
        int32_t & depth)> handler_GET_func =
            [](int32_t &) -> std::pair<int, ComputerSet>
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ComputerSet> handler_GET(
        int32_t & depth);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve Jenkins details
/// </remarks>
class  ApiJsonResource: public restbed::Resource
{
public:
    ApiJsonResource(const std::string& context = "");
    virtual ~ApiJsonResource() = default;

    ApiJsonResource(
        const ApiJsonResource& other) = default; // copy constructor
    ApiJsonResource(ApiJsonResource&& other) noexcept = default; // move constructor

    ApiJsonResource& operator=(const ApiJsonResource& other) = default; // copy assignment
    ApiJsonResource& operator=(ApiJsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Hudson>(
        )> handler_GET_func =
            []() -> std::pair<int, Hudson>
                { throw RemoteAccessApiException(501, "Not implemented"); };

    std::function<int(
        )> handler_HEAD_func =
            []() -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Hudson> handler_GET(
        );

    virtual int handler_HEAD(
        );

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_HEAD_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job details
/// </remarks>
class  JobNameApiJsonResource: public restbed::Resource
{
public:
    JobNameApiJsonResource(const std::string& context = "");
    virtual ~JobNameApiJsonResource() = default;

    JobNameApiJsonResource(
        const JobNameApiJsonResource& other) = default; // copy constructor
    JobNameApiJsonResource(JobNameApiJsonResource&& other) noexcept = default; // move constructor

    JobNameApiJsonResource& operator=(const JobNameApiJsonResource& other) = default; // copy assignment
    JobNameApiJsonResource& operator=(JobNameApiJsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FreeStyleProject>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, FreeStyleProject>
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FreeStyleProject> handler_GET(
        std::string & name);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job configuration
/// </remarks>
class  JobNameConfig_xmlResource: public restbed::Resource
{
public:
    JobNameConfig_xmlResource(const std::string& context = "");
    virtual ~JobNameConfig_xmlResource() = default;

    JobNameConfig_xmlResource(
        const JobNameConfig_xmlResource& other) = default; // copy constructor
    JobNameConfig_xmlResource(JobNameConfig_xmlResource&& other) noexcept = default; // move constructor

    JobNameConfig_xmlResource& operator=(const JobNameConfig_xmlResource& other) = default; // copy assignment
    JobNameConfig_xmlResource& operator=(JobNameConfig_xmlResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::string>
                { throw RemoteAccessApiException(501, "Not implemented"); };

    std::function<int(
        std::string & name, std::string & body, std::string & jenkinsCrumb)> handler_POST_func =
            [](std::string &, std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string & name);

    virtual int handler_POST(
        std::string & name, std::string & body, std::string & jenkinsCrumb);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job&#39;s last build details
/// </remarks>
class  JobNameLastBuildApiJsonResource: public restbed::Resource
{
public:
    JobNameLastBuildApiJsonResource(const std::string& context = "");
    virtual ~JobNameLastBuildApiJsonResource() = default;

    JobNameLastBuildApiJsonResource(
        const JobNameLastBuildApiJsonResource& other) = default; // copy constructor
    JobNameLastBuildApiJsonResource(JobNameLastBuildApiJsonResource&& other) noexcept = default; // move constructor

    JobNameLastBuildApiJsonResource& operator=(const JobNameLastBuildApiJsonResource& other) = default; // copy assignment
    JobNameLastBuildApiJsonResource& operator=(JobNameLastBuildApiJsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, FreeStyleBuild>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, FreeStyleBuild>
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, FreeStyleBuild> handler_GET(
        std::string & name);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve job&#39;s build progressive text output
/// </remarks>
class  JobNameNumberLogTextProgressiveTextResource: public restbed::Resource
{
public:
    JobNameNumberLogTextProgressiveTextResource(const std::string& context = "");
    virtual ~JobNameNumberLogTextProgressiveTextResource() = default;

    JobNameNumberLogTextProgressiveTextResource(
        const JobNameNumberLogTextProgressiveTextResource& other) = default; // copy constructor
    JobNameNumberLogTextProgressiveTextResource(JobNameNumberLogTextProgressiveTextResource&& other) noexcept = default; // move constructor

    JobNameNumberLogTextProgressiveTextResource& operator=(const JobNameNumberLogTextProgressiveTextResource& other) = default; // copy assignment
    JobNameNumberLogTextProgressiveTextResource& operator=(JobNameNumberLogTextProgressiveTextResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name, std::string & number, std::string & start)> handler_GET_func =
            [](std::string &, std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_GET(
        std::string & name, std::string & number, std::string & start);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queue details
/// </remarks>
class  QueueApiJsonResource: public restbed::Resource
{
public:
    QueueApiJsonResource(const std::string& context = "");
    virtual ~QueueApiJsonResource() = default;

    QueueApiJsonResource(
        const QueueApiJsonResource& other) = default; // copy constructor
    QueueApiJsonResource(QueueApiJsonResource&& other) noexcept = default; // move constructor

    QueueApiJsonResource& operator=(const QueueApiJsonResource& other) = default; // copy assignment
    QueueApiJsonResource& operator=(QueueApiJsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Queue>(
        )> handler_GET_func =
            []() -> std::pair<int, Queue>
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Queue> handler_GET(
        );


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve queued item details
/// </remarks>
class  QueueItemNumberApiJsonResource: public restbed::Resource
{
public:
    QueueItemNumberApiJsonResource(const std::string& context = "");
    virtual ~QueueItemNumberApiJsonResource() = default;

    QueueItemNumberApiJsonResource(
        const QueueItemNumberApiJsonResource& other) = default; // copy constructor
    QueueItemNumberApiJsonResource(QueueItemNumberApiJsonResource&& other) noexcept = default; // move constructor

    QueueItemNumberApiJsonResource& operator=(const QueueItemNumberApiJsonResource& other) = default; // copy assignment
    QueueItemNumberApiJsonResource& operator=(QueueItemNumberApiJsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, Queue>(
        std::string & number)> handler_GET_func =
            [](std::string &) -> std::pair<int, Queue>
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, Queue> handler_GET(
        std::string & number);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve view details
/// </remarks>
class  ViewNameApiJsonResource: public restbed::Resource
{
public:
    ViewNameApiJsonResource(const std::string& context = "");
    virtual ~ViewNameApiJsonResource() = default;

    ViewNameApiJsonResource(
        const ViewNameApiJsonResource& other) = default; // copy constructor
    ViewNameApiJsonResource(ViewNameApiJsonResource&& other) noexcept = default; // move constructor

    ViewNameApiJsonResource& operator=(const ViewNameApiJsonResource& other) = default; // copy assignment
    ViewNameApiJsonResource& operator=(ViewNameApiJsonResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, ListView>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, ListView>
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, ListView> handler_GET(
        std::string & name);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Retrieve view configuration
/// </remarks>
class  ViewNameConfig_xmlResource: public restbed::Resource
{
public:
    ViewNameConfig_xmlResource(const std::string& context = "");
    virtual ~ViewNameConfig_xmlResource() = default;

    ViewNameConfig_xmlResource(
        const ViewNameConfig_xmlResource& other) = default; // copy constructor
    ViewNameConfig_xmlResource(ViewNameConfig_xmlResource&& other) noexcept = default; // move constructor

    ViewNameConfig_xmlResource& operator=(const ViewNameConfig_xmlResource& other) = default; // copy assignment
    ViewNameConfig_xmlResource& operator=(ViewNameConfig_xmlResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<std::pair<int, std::string>(
        std::string & name)> handler_GET_func =
            [](std::string &) -> std::pair<int, std::string>
                { throw RemoteAccessApiException(501, "Not implemented"); };

    std::function<int(
        std::string & name, std::string & body, std::string & jenkinsCrumb)> handler_POST_func =
            [](std::string &, std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual std::pair<int, std::string> handler_GET(
        std::string & name);

    virtual int handler_POST(
        std::string & name, std::string & body, std::string & jenkinsCrumb);

protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_GET_internal(const std::shared_ptr<restbed::Session> session);
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Create a new job using job configuration, or copied from an existing job
/// </remarks>
class  CreateItemResource: public restbed::Resource
{
public:
    CreateItemResource(const std::string& context = "");
    virtual ~CreateItemResource() = default;

    CreateItemResource(
        const CreateItemResource& other) = default; // copy constructor
    CreateItemResource(CreateItemResource&& other) noexcept = default; // move constructor

    CreateItemResource& operator=(const CreateItemResource& other) = default; // copy assignment
    CreateItemResource& operator=(CreateItemResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name, std::string & from, std::string & mode, std::string & jenkinsCrumb, std::string & contentType, std::string & body)> handler_POST_func =
            [](std::string &, std::string &, std::string &, std::string &, std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string & name, std::string & from, std::string & mode, std::string & jenkinsCrumb, std::string & contentType, std::string & body);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Create a new view using view configuration
/// </remarks>
class  CreateViewResource: public restbed::Resource
{
public:
    CreateViewResource(const std::string& context = "");
    virtual ~CreateViewResource() = default;

    CreateViewResource(
        const CreateViewResource& other) = default; // copy constructor
    CreateViewResource(CreateViewResource&& other) noexcept = default; // move constructor

    CreateViewResource& operator=(const CreateViewResource& other) = default; // copy assignment
    CreateViewResource& operator=(CreateViewResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name, std::string & jenkinsCrumb, std::string & contentType, std::string & body)> handler_POST_func =
            [](std::string &, std::string &, std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string & name, std::string & jenkinsCrumb, std::string & contentType, std::string & body);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Build a job
/// </remarks>
class  JobNameBuildResource: public restbed::Resource
{
public:
    JobNameBuildResource(const std::string& context = "");
    virtual ~JobNameBuildResource() = default;

    JobNameBuildResource(
        const JobNameBuildResource& other) = default; // copy constructor
    JobNameBuildResource(JobNameBuildResource&& other) noexcept = default; // move constructor

    JobNameBuildResource& operator=(const JobNameBuildResource& other) = default; // copy assignment
    JobNameBuildResource& operator=(JobNameBuildResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name, std::string & json, std::string & token, std::string & jenkinsCrumb)> handler_POST_func =
            [](std::string &, std::string &, std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string & name, std::string & json, std::string & token, std::string & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Delete a job
/// </remarks>
class  JobNameDoDeleteResource: public restbed::Resource
{
public:
    JobNameDoDeleteResource(const std::string& context = "");
    virtual ~JobNameDoDeleteResource() = default;

    JobNameDoDeleteResource(
        const JobNameDoDeleteResource& other) = default; // copy constructor
    JobNameDoDeleteResource(JobNameDoDeleteResource&& other) noexcept = default; // move constructor

    JobNameDoDeleteResource& operator=(const JobNameDoDeleteResource& other) = default; // copy assignment
    JobNameDoDeleteResource& operator=(JobNameDoDeleteResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name, std::string & jenkinsCrumb)> handler_POST_func =
            [](std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string & name, std::string & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Disable a job
/// </remarks>
class  JobNameDisableResource: public restbed::Resource
{
public:
    JobNameDisableResource(const std::string& context = "");
    virtual ~JobNameDisableResource() = default;

    JobNameDisableResource(
        const JobNameDisableResource& other) = default; // copy constructor
    JobNameDisableResource(JobNameDisableResource&& other) noexcept = default; // move constructor

    JobNameDisableResource& operator=(const JobNameDisableResource& other) = default; // copy assignment
    JobNameDisableResource& operator=(JobNameDisableResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name, std::string & jenkinsCrumb)> handler_POST_func =
            [](std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string & name, std::string & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Enable a job
/// </remarks>
class  JobNameEnableResource: public restbed::Resource
{
public:
    JobNameEnableResource(const std::string& context = "");
    virtual ~JobNameEnableResource() = default;

    JobNameEnableResource(
        const JobNameEnableResource& other) = default; // copy constructor
    JobNameEnableResource(JobNameEnableResource&& other) noexcept = default; // move constructor

    JobNameEnableResource& operator=(const JobNameEnableResource& other) = default; // copy assignment
    JobNameEnableResource& operator=(JobNameEnableResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name, std::string & jenkinsCrumb)> handler_POST_func =
            [](std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string & name, std::string & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

/// <summary>
/// 
/// </summary>
/// <remarks>
/// Stop a job
/// </remarks>
class  JobNameLastBuildStopResource: public restbed::Resource
{
public:
    JobNameLastBuildStopResource(const std::string& context = "");
    virtual ~JobNameLastBuildStopResource() = default;

    JobNameLastBuildStopResource(
        const JobNameLastBuildStopResource& other) = default; // copy constructor
    JobNameLastBuildStopResource(JobNameLastBuildStopResource&& other) noexcept = default; // move constructor

    JobNameLastBuildStopResource& operator=(const JobNameLastBuildStopResource& other) = default; // copy assignment
    JobNameLastBuildStopResource& operator=(JobNameLastBuildStopResource&& other) noexcept = default; // move assignment

    /////////////////////////////////////////////////////
    // Set these to implement the server functionality //
    /////////////////////////////////////////////////////
    std::function<int(
        std::string & name, std::string & jenkinsCrumb)> handler_POST_func =
            [](std::string &, std::string &) -> int
                { throw RemoteAccessApiException(501, "Not implemented"); };


protected:
    //////////////////////////////////////////////////////////
    // As an alternative to setting the `std::function`s    //
    // override these to implement the server functionality //
    //////////////////////////////////////////////////////////

    virtual int handler_POST(
        std::string & name, std::string & jenkinsCrumb);


protected:
    //////////////////////////////////////
    // Override these for customization //
    //////////////////////////////////////

    virtual std::string extractBodyContent(const std::shared_ptr<restbed::Session>& session);
    virtual std::string extractFormParamsFromBody(const std::string& paramName, const std::string& body);

    virtual std::pair<int, std::string> handleRemoteAccessApiException(const RemoteAccessApiException& e);
    virtual std::pair<int, std::string> handleStdException(const std::exception& e);
    virtual std::pair<int, std::string> handleUnspecifiedException();

    virtual void setResponseHeader(const std::shared_ptr<restbed::Session>& session,
        const std::string& header);

    virtual void returnResponse(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result, std::multimap<std::string, std::string>& contentType);
    virtual void defaultSessionClose(const std::shared_ptr<restbed::Session>& session,
        const int status, const std::string& result);

private:
    void handler_POST_internal(const std::shared_ptr<restbed::Session> session);
};

} /* namespace RemoteAccessApiResources */

using RemoteAccessApiComputerApiJsonResource [[deprecated]] = RemoteAccessApiResources::ComputerApiJsonResource;
using RemoteAccessApiApiJsonResource [[deprecated]] = RemoteAccessApiResources::ApiJsonResource;
using RemoteAccessApiJobNameApiJsonResource [[deprecated]] = RemoteAccessApiResources::JobNameApiJsonResource;
using RemoteAccessApiJobNameConfig_xmlResource [[deprecated]] = RemoteAccessApiResources::JobNameConfig_xmlResource;
using RemoteAccessApiJobNameLastBuildApiJsonResource [[deprecated]] = RemoteAccessApiResources::JobNameLastBuildApiJsonResource;
using RemoteAccessApiJobNameNumberLogTextProgressiveTextResource [[deprecated]] = RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource;
using RemoteAccessApiQueueApiJsonResource [[deprecated]] = RemoteAccessApiResources::QueueApiJsonResource;
using RemoteAccessApiQueueItemNumberApiJsonResource [[deprecated]] = RemoteAccessApiResources::QueueItemNumberApiJsonResource;
using RemoteAccessApiViewNameApiJsonResource [[deprecated]] = RemoteAccessApiResources::ViewNameApiJsonResource;
using RemoteAccessApiViewNameConfig_xmlResource [[deprecated]] = RemoteAccessApiResources::ViewNameConfig_xmlResource;
using RemoteAccessApiCreateItemResource [[deprecated]] = RemoteAccessApiResources::CreateItemResource;
using RemoteAccessApiCreateViewResource [[deprecated]] = RemoteAccessApiResources::CreateViewResource;
using RemoteAccessApiJobNameBuildResource [[deprecated]] = RemoteAccessApiResources::JobNameBuildResource;
using RemoteAccessApiJobNameDoDeleteResource [[deprecated]] = RemoteAccessApiResources::JobNameDoDeleteResource;
using RemoteAccessApiJobNameDisableResource [[deprecated]] = RemoteAccessApiResources::JobNameDisableResource;
using RemoteAccessApiJobNameEnableResource [[deprecated]] = RemoteAccessApiResources::JobNameEnableResource;
using RemoteAccessApiJobNameLastBuildStopResource [[deprecated]] = RemoteAccessApiResources::JobNameLastBuildStopResource;

//
// The restbed service to actually implement the REST server
//
class  RemoteAccessApi
{
public:
    explicit RemoteAccessApi(std::shared_ptr<restbed::Service> const& restbedService);
    virtual ~RemoteAccessApi();

    std::shared_ptr<RemoteAccessApiResources::ComputerApiJsonResource> getComputerApiJsonResource();
    std::shared_ptr<RemoteAccessApiResources::ApiJsonResource> getApiJsonResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameApiJsonResource> getJobNameApiJsonResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameConfig_xmlResource> getJobNameConfig_xmlResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildApiJsonResource> getJobNameLastBuildApiJsonResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource> getJobNameNumberLogTextProgressiveTextResource();
    std::shared_ptr<RemoteAccessApiResources::QueueApiJsonResource> getQueueApiJsonResource();
    std::shared_ptr<RemoteAccessApiResources::QueueItemNumberApiJsonResource> getQueueItemNumberApiJsonResource();
    std::shared_ptr<RemoteAccessApiResources::ViewNameApiJsonResource> getViewNameApiJsonResource();
    std::shared_ptr<RemoteAccessApiResources::ViewNameConfig_xmlResource> getViewNameConfig_xmlResource();
    std::shared_ptr<RemoteAccessApiResources::CreateItemResource> getCreateItemResource();
    std::shared_ptr<RemoteAccessApiResources::CreateViewResource> getCreateViewResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameBuildResource> getJobNameBuildResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameDoDeleteResource> getJobNameDoDeleteResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameDisableResource> getJobNameDisableResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameEnableResource> getJobNameEnableResource();
    std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildStopResource> getJobNameLastBuildStopResource();

    void setResource(std::shared_ptr<RemoteAccessApiResources::ComputerApiJsonResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::ApiJsonResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameApiJsonResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameConfig_xmlResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildApiJsonResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::QueueApiJsonResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::QueueItemNumberApiJsonResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::ViewNameApiJsonResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::ViewNameConfig_xmlResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::CreateItemResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::CreateViewResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameBuildResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameDoDeleteResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameDisableResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameEnableResource> resource);
    void setResource(std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildStopResource> resource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiComputerApiJsonResource(std::shared_ptr<RemoteAccessApiResources::ComputerApiJsonResource> spRemoteAccessApiComputerApiJsonResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiApiJsonResource(std::shared_ptr<RemoteAccessApiResources::ApiJsonResource> spRemoteAccessApiApiJsonResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameApiJsonResource(std::shared_ptr<RemoteAccessApiResources::JobNameApiJsonResource> spRemoteAccessApiJobNameApiJsonResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameConfig_xmlResource(std::shared_ptr<RemoteAccessApiResources::JobNameConfig_xmlResource> spRemoteAccessApiJobNameConfig_xmlResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameLastBuildApiJsonResource(std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildApiJsonResource> spRemoteAccessApiJobNameLastBuildApiJsonResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameNumberLogTextProgressiveTextResource(std::shared_ptr<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource> spRemoteAccessApiJobNameNumberLogTextProgressiveTextResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiQueueApiJsonResource(std::shared_ptr<RemoteAccessApiResources::QueueApiJsonResource> spRemoteAccessApiQueueApiJsonResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiQueueItemNumberApiJsonResource(std::shared_ptr<RemoteAccessApiResources::QueueItemNumberApiJsonResource> spRemoteAccessApiQueueItemNumberApiJsonResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiViewNameApiJsonResource(std::shared_ptr<RemoteAccessApiResources::ViewNameApiJsonResource> spRemoteAccessApiViewNameApiJsonResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiViewNameConfig_xmlResource(std::shared_ptr<RemoteAccessApiResources::ViewNameConfig_xmlResource> spRemoteAccessApiViewNameConfig_xmlResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiCreateItemResource(std::shared_ptr<RemoteAccessApiResources::CreateItemResource> spRemoteAccessApiCreateItemResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiCreateViewResource(std::shared_ptr<RemoteAccessApiResources::CreateViewResource> spRemoteAccessApiCreateViewResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameBuildResource(std::shared_ptr<RemoteAccessApiResources::JobNameBuildResource> spRemoteAccessApiJobNameBuildResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameDoDeleteResource(std::shared_ptr<RemoteAccessApiResources::JobNameDoDeleteResource> spRemoteAccessApiJobNameDoDeleteResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameDisableResource(std::shared_ptr<RemoteAccessApiResources::JobNameDisableResource> spRemoteAccessApiJobNameDisableResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameEnableResource(std::shared_ptr<RemoteAccessApiResources::JobNameEnableResource> spRemoteAccessApiJobNameEnableResource);
    [[deprecated("use setResource()")]]
    virtual void setRemoteAccessApiJobNameLastBuildStopResource(std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildStopResource> spRemoteAccessApiJobNameLastBuildStopResource);

    virtual void publishDefaultResources();

    virtual std::shared_ptr<restbed::Service> service();

protected:
    std::shared_ptr<RemoteAccessApiResources::ComputerApiJsonResource> m_spComputerApiJsonResource;
    std::shared_ptr<RemoteAccessApiResources::ApiJsonResource> m_spApiJsonResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameApiJsonResource> m_spJobNameApiJsonResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameConfig_xmlResource> m_spJobNameConfig_xmlResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildApiJsonResource> m_spJobNameLastBuildApiJsonResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameNumberLogTextProgressiveTextResource> m_spJobNameNumberLogTextProgressiveTextResource;
    std::shared_ptr<RemoteAccessApiResources::QueueApiJsonResource> m_spQueueApiJsonResource;
    std::shared_ptr<RemoteAccessApiResources::QueueItemNumberApiJsonResource> m_spQueueItemNumberApiJsonResource;
    std::shared_ptr<RemoteAccessApiResources::ViewNameApiJsonResource> m_spViewNameApiJsonResource;
    std::shared_ptr<RemoteAccessApiResources::ViewNameConfig_xmlResource> m_spViewNameConfig_xmlResource;
    std::shared_ptr<RemoteAccessApiResources::CreateItemResource> m_spCreateItemResource;
    std::shared_ptr<RemoteAccessApiResources::CreateViewResource> m_spCreateViewResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameBuildResource> m_spJobNameBuildResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameDoDeleteResource> m_spJobNameDoDeleteResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameDisableResource> m_spJobNameDisableResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameEnableResource> m_spJobNameEnableResource;
    std::shared_ptr<RemoteAccessApiResources::JobNameLastBuildStopResource> m_spJobNameLastBuildStopResource;

private:
    std::shared_ptr<restbed::Service> m_service;
};


}
}
}
}

#endif /* RemoteAccessApi_H_ */

