/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "InputStepImpl.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

InputStepImpl::InputStepImpl(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string InputStepImpl::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void InputStepImpl::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree InputStepImpl::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	pt.add_child("_links", m__links.toPropertyTree());
	pt.put("id", m_Id);
	pt.put("message", m_Message);
	pt.put("ok", m_Ok);
	// generate tree for Parameters
    tmp_node.clear();
	if (!m_Parameters.empty()) {
        tmp_node = toPt(m_Parameters);
		pt.add_child("parameters", tmp_node);
		tmp_node.clear();
	}
	pt.put("submitter", m_Submitter);
	return pt;
}

void InputStepImpl::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	if (pt.get_child_optional("_links")) {
        m__links = fromPt<InputStepImpllinks>(pt.get_child("_links"));
	}
	m_Id = pt.get("id", "");
	m_Message = pt.get("message", "");
	m_Ok = pt.get("ok", "");
	// push all items of Parameters into member
	if (pt.get_child_optional("parameters")) {
        m_Parameters = fromPt<std::vector<StringParameterDefinition>>(pt.get_child("parameters"));
	}
	m_Submitter = pt.get("submitter", "");
}

std::string InputStepImpl::get_Class() const
{
    return m__class;
}

void InputStepImpl::set_Class(std::string value)
{
    m__class = value;
}


InputStepImpllinks InputStepImpl::get_Links() const
{
    return m__links;
}

void InputStepImpl::set_Links(InputStepImpllinks value)
{
    m__links = value;
}


std::string InputStepImpl::getId() const
{
    return m_Id;
}

void InputStepImpl::setId(std::string value)
{
    m_Id = value;
}


std::string InputStepImpl::getMessage() const
{
    return m_Message;
}

void InputStepImpl::setMessage(std::string value)
{
    m_Message = value;
}


std::string InputStepImpl::getOk() const
{
    return m_Ok;
}

void InputStepImpl::setOk(std::string value)
{
    m_Ok = value;
}


std::vector<StringParameterDefinition> InputStepImpl::getParameters() const
{
    return m_Parameters;
}

void InputStepImpl::setParameters(std::vector<StringParameterDefinition> value)
{
    m_Parameters = value;
}


std::string InputStepImpl::getSubmitter() const
{
    return m_Submitter;
}

void InputStepImpl::setSubmitter(std::string value)
{
    m_Submitter = value;
}



std::vector<InputStepImpl> createInputStepImplVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<InputStepImpl>();
    for (const auto& child: pt) {
        vec.emplace_back(InputStepImpl(child.second));
    }

    return vec;
}

}
}
}
}

