/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ComputerSet.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

ComputerSet::ComputerSet(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string ComputerSet::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void ComputerSet::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree ComputerSet::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	pt.put("busyExecutors", m_BusyExecutors);
	// generate tree for Computer
    tmp_node.clear();
	if (!m_Computer.empty()) {
        tmp_node = toPt(m_Computer);
		pt.add_child("computer", tmp_node);
		tmp_node.clear();
	}
	pt.put("displayName", m_DisplayName);
	pt.put("totalExecutors", m_TotalExecutors);
	return pt;
}

void ComputerSet::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	m_BusyExecutors = pt.get("busyExecutors", 0);
	// push all items of Computer into member
	if (pt.get_child_optional("computer")) {
        m_Computer = fromPt<std::vector<HudsonMasterComputer>>(pt.get_child("computer"));
	}
	m_DisplayName = pt.get("displayName", "");
	m_TotalExecutors = pt.get("totalExecutors", 0);
}

std::string ComputerSet::get_Class() const
{
    return m__class;
}

void ComputerSet::set_Class(std::string value)
{
    m__class = value;
}


int32_t ComputerSet::getBusyExecutors() const
{
    return m_BusyExecutors;
}

void ComputerSet::setBusyExecutors(int32_t value)
{
    m_BusyExecutors = value;
}


std::vector<HudsonMasterComputer> ComputerSet::getComputer() const
{
    return m_Computer;
}

void ComputerSet::setComputer(std::vector<HudsonMasterComputer> value)
{
    m_Computer = value;
}


std::string ComputerSet::getDisplayName() const
{
    return m_DisplayName;
}

void ComputerSet::setDisplayName(std::string value)
{
    m_DisplayName = value;
}


int32_t ComputerSet::getTotalExecutors() const
{
    return m_TotalExecutors;
}

void ComputerSet::setTotalExecutors(int32_t value)
{
    m_TotalExecutors = value;
}



std::vector<ComputerSet> createComputerSetVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<ComputerSet>();
    for (const auto& child: pt) {
        vec.emplace_back(ComputerSet(child.second));
    }

    return vec;
}

}
}
}
}

