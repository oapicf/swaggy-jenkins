/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HudsonMasterComputermonitorData.h
 *
 * 
 */

#ifndef HudsonMasterComputermonitorData_H_
#define HudsonMasterComputermonitorData_H_



#include "SwapSpaceMonitorMemoryUsage2.h"
#include "DiskSpaceMonitorDescriptorDiskSpace.h"
#include <string>
#include "ResponseTimeMonitorData.h"
#include "ClockDifference.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  HudsonMasterComputermonitorData 
{
public:
    HudsonMasterComputermonitorData() = default;
    explicit HudsonMasterComputermonitorData(boost::property_tree::ptree const& pt);
    virtual ~HudsonMasterComputermonitorData() = default;

    HudsonMasterComputermonitorData(const HudsonMasterComputermonitorData& other) = default; // copy constructor
    HudsonMasterComputermonitorData(HudsonMasterComputermonitorData&& other) noexcept = default; // move constructor

    HudsonMasterComputermonitorData& operator=(const HudsonMasterComputermonitorData& other) = default; // copy assignment
    HudsonMasterComputermonitorData& operator=(HudsonMasterComputermonitorData&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// HudsonMasterComputermonitorData members

    /// <summary>
    /// 
    /// </summary>
    SwapSpaceMonitorMemoryUsage2 getHudsonNodeMonitorsSwapSpaceMonitor() const;
    void setHudsonNodeMonitorsSwapSpaceMonitor(SwapSpaceMonitorMemoryUsage2 value);

    /// <summary>
    /// 
    /// </summary>
    DiskSpaceMonitorDescriptorDiskSpace getHudsonNodeMonitorsTemporarySpaceMonitor() const;
    void setHudsonNodeMonitorsTemporarySpaceMonitor(DiskSpaceMonitorDescriptorDiskSpace value);

    /// <summary>
    /// 
    /// </summary>
    DiskSpaceMonitorDescriptorDiskSpace getHudsonNodeMonitorsDiskSpaceMonitor() const;
    void setHudsonNodeMonitorsDiskSpaceMonitor(DiskSpaceMonitorDescriptorDiskSpace value);

    /// <summary>
    /// 
    /// </summary>
    std::string getHudsonNodeMonitorsArchitectureMonitor() const;
    void setHudsonNodeMonitorsArchitectureMonitor(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ResponseTimeMonitorData getHudsonNodeMonitorsResponseTimeMonitor() const;
    void setHudsonNodeMonitorsResponseTimeMonitor(ResponseTimeMonitorData value);

    /// <summary>
    /// 
    /// </summary>
    ClockDifference getHudsonNodeMonitorsClockMonitor() const;
    void setHudsonNodeMonitorsClockMonitor(ClockDifference value);

    /// <summary>
    /// 
    /// </summary>
    std::string get_Class() const;
    void set_Class(std::string value);

protected:
    SwapSpaceMonitorMemoryUsage2 m_Hudson_node_monitors_SwapSpaceMonitor;
    DiskSpaceMonitorDescriptorDiskSpace m_Hudson_node_monitors_TemporarySpaceMonitor;
    DiskSpaceMonitorDescriptorDiskSpace m_Hudson_node_monitors_DiskSpaceMonitor;
    std::string m_Hudson_node_monitors_ArchitectureMonitor = "";
    ResponseTimeMonitorData m_Hudson_node_monitors_ResponseTimeMonitor;
    ClockDifference m_Hudson_node_monitors_ClockMonitor;
    std::string m__class = "";
};

std::vector<HudsonMasterComputermonitorData> createHudsonMasterComputermonitorDataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<HudsonMasterComputermonitorData>(const HudsonMasterComputermonitorData& val) {
    return val.toPropertyTree();
}

template<>
inline HudsonMasterComputermonitorData fromPt<HudsonMasterComputermonitorData>(const boost::property_tree::ptree& pt) {
    HudsonMasterComputermonitorData ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* HudsonMasterComputermonitorData_H_ */
