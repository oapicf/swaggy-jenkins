/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Hudson.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

Hudson::Hudson(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string Hudson::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void Hudson::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree Hudson::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	// generate tree for AssignedLabels
    tmp_node.clear();
	if (!m_AssignedLabels.empty()) {
        tmp_node = toPt(m_AssignedLabels);
		pt.add_child("assignedLabels", tmp_node);
		tmp_node.clear();
	}
	pt.put("mode", m_Mode);
	pt.put("nodeDescription", m_NodeDescription);
	pt.put("nodeName", m_NodeName);
	pt.put("numExecutors", m_NumExecutors);
	pt.put("description", m_Description);
	// generate tree for Jobs
    tmp_node.clear();
	if (!m_Jobs.empty()) {
        tmp_node = toPt(m_Jobs);
		pt.add_child("jobs", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("primaryView", m_PrimaryView.toPropertyTree());
	pt.put("quietingDown", m_QuietingDown);
	pt.put("slaveAgentPort", m_SlaveAgentPort);
	pt.add_child("unlabeledLoad", m_UnlabeledLoad.toPropertyTree());
	pt.put("useCrumbs", m_UseCrumbs);
	pt.put("useSecurity", m_UseSecurity);
	// generate tree for Views
    tmp_node.clear();
	if (!m_Views.empty()) {
        tmp_node = toPt(m_Views);
		pt.add_child("views", tmp_node);
		tmp_node.clear();
	}
	return pt;
}

void Hudson::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	// push all items of AssignedLabels into member
	if (pt.get_child_optional("assignedLabels")) {
        m_AssignedLabels = fromPt<std::vector<HudsonassignedLabels>>(pt.get_child("assignedLabels"));
	}
	m_Mode = pt.get("mode", "");
	m_NodeDescription = pt.get("nodeDescription", "");
	m_NodeName = pt.get("nodeName", "");
	m_NumExecutors = pt.get("numExecutors", 0);
	m_Description = pt.get("description", "");
	// push all items of Jobs into member
	if (pt.get_child_optional("jobs")) {
        m_Jobs = fromPt<std::vector<FreeStyleProject>>(pt.get_child("jobs"));
	}
	if (pt.get_child_optional("primaryView")) {
        m_PrimaryView = fromPt<AllView>(pt.get_child("primaryView"));
	}
	m_QuietingDown = pt.get("quietingDown", false);
	m_SlaveAgentPort = pt.get("slaveAgentPort", 0);
	if (pt.get_child_optional("unlabeledLoad")) {
        m_UnlabeledLoad = fromPt<UnlabeledLoadStatistics>(pt.get_child("unlabeledLoad"));
	}
	m_UseCrumbs = pt.get("useCrumbs", false);
	m_UseSecurity = pt.get("useSecurity", false);
	// push all items of Views into member
	if (pt.get_child_optional("views")) {
        m_Views = fromPt<std::vector<AllView>>(pt.get_child("views"));
	}
}

std::string Hudson::get_Class() const
{
    return m__class;
}

void Hudson::set_Class(std::string value)
{
    m__class = value;
}


std::vector<HudsonassignedLabels> Hudson::getAssignedLabels() const
{
    return m_AssignedLabels;
}

void Hudson::setAssignedLabels(std::vector<HudsonassignedLabels> value)
{
    m_AssignedLabels = value;
}


std::string Hudson::getMode() const
{
    return m_Mode;
}

void Hudson::setMode(std::string value)
{
    m_Mode = value;
}


std::string Hudson::getNodeDescription() const
{
    return m_NodeDescription;
}

void Hudson::setNodeDescription(std::string value)
{
    m_NodeDescription = value;
}


std::string Hudson::getNodeName() const
{
    return m_NodeName;
}

void Hudson::setNodeName(std::string value)
{
    m_NodeName = value;
}


int32_t Hudson::getNumExecutors() const
{
    return m_NumExecutors;
}

void Hudson::setNumExecutors(int32_t value)
{
    m_NumExecutors = value;
}


std::string Hudson::getDescription() const
{
    return m_Description;
}

void Hudson::setDescription(std::string value)
{
    m_Description = value;
}


std::vector<FreeStyleProject> Hudson::getJobs() const
{
    return m_Jobs;
}

void Hudson::setJobs(std::vector<FreeStyleProject> value)
{
    m_Jobs = value;
}


AllView Hudson::getPrimaryView() const
{
    return m_PrimaryView;
}

void Hudson::setPrimaryView(AllView value)
{
    m_PrimaryView = value;
}


bool Hudson::isQuietingDown() const
{
    return m_QuietingDown;
}

void Hudson::setQuietingDown(bool value)
{
    m_QuietingDown = value;
}


int32_t Hudson::getSlaveAgentPort() const
{
    return m_SlaveAgentPort;
}

void Hudson::setSlaveAgentPort(int32_t value)
{
    m_SlaveAgentPort = value;
}


UnlabeledLoadStatistics Hudson::getUnlabeledLoad() const
{
    return m_UnlabeledLoad;
}

void Hudson::setUnlabeledLoad(UnlabeledLoadStatistics value)
{
    m_UnlabeledLoad = value;
}


bool Hudson::isUseCrumbs() const
{
    return m_UseCrumbs;
}

void Hudson::setUseCrumbs(bool value)
{
    m_UseCrumbs = value;
}


bool Hudson::isUseSecurity() const
{
    return m_UseSecurity;
}

void Hudson::setUseSecurity(bool value)
{
    m_UseSecurity = value;
}


std::vector<AllView> Hudson::getViews() const
{
    return m_Views;
}

void Hudson::setViews(std::vector<AllView> value)
{
    m_Views = value;
}



std::vector<Hudson> createHudsonVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<Hudson>();
    for (const auto& child: pt) {
        vec.emplace_back(Hudson(child.second));
    }

    return vec;
}

}
}
}
}

