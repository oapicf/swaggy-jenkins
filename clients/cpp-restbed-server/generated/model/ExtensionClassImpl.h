/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExtensionClassImpl.h
 *
 * 
 */

#ifndef ExtensionClassImpl_H_
#define ExtensionClassImpl_H_



#include "ExtensionClassImpllinks.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ExtensionClassImpl 
{
public:
    ExtensionClassImpl() = default;
    explicit ExtensionClassImpl(boost::property_tree::ptree const& pt);
    virtual ~ExtensionClassImpl() = default;

    ExtensionClassImpl(const ExtensionClassImpl& other) = default; // copy constructor
    ExtensionClassImpl(ExtensionClassImpl&& other) noexcept = default; // move constructor

    ExtensionClassImpl& operator=(const ExtensionClassImpl& other) = default; // copy assignment
    ExtensionClassImpl& operator=(ExtensionClassImpl&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ExtensionClassImpl members

    /// <summary>
    /// 
    /// </summary>
    std::string get_Class() const;
    void set_Class(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ExtensionClassImpllinks get_Links() const;
    void set_Links(ExtensionClassImpllinks value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::string> getClasses() const;
    void setClasses(std::vector<std::string> value);

protected:
    std::string m__class = "";
    ExtensionClassImpllinks m__links;
    std::vector<std::string> m_Classes;
};

std::vector<ExtensionClassImpl> createExtensionClassImplVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ExtensionClassImpl>(const ExtensionClassImpl& val) {
    return val.toPropertyTree();
}

template<>
inline ExtensionClassImpl fromPt<ExtensionClassImpl>(const boost::property_tree::ptree& pt) {
    ExtensionClassImpl ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ExtensionClassImpl_H_ */
