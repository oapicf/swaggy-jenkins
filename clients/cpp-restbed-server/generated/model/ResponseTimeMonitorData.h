/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ResponseTimeMonitorData.h
 *
 * 
 */

#ifndef ResponseTimeMonitorData_H_
#define ResponseTimeMonitorData_H_



#include <string>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ResponseTimeMonitorData 
{
public:
    ResponseTimeMonitorData() = default;
    explicit ResponseTimeMonitorData(boost::property_tree::ptree const& pt);
    virtual ~ResponseTimeMonitorData() = default;

    ResponseTimeMonitorData(const ResponseTimeMonitorData& other) = default; // copy constructor
    ResponseTimeMonitorData(ResponseTimeMonitorData&& other) noexcept = default; // move constructor

    ResponseTimeMonitorData& operator=(const ResponseTimeMonitorData& other) = default; // copy assignment
    ResponseTimeMonitorData& operator=(ResponseTimeMonitorData&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ResponseTimeMonitorData members

    /// <summary>
    /// 
    /// </summary>
    std::string get_Class() const;
    void set_Class(std::string value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTimestamp() const;
    void setTimestamp(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getAverage() const;
    void setAverage(int32_t value);

protected:
    std::string m__class = "";
    int32_t m_Timestamp = 0;
    int32_t m_Average = 0;
};

std::vector<ResponseTimeMonitorData> createResponseTimeMonitorDataVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ResponseTimeMonitorData>(const ResponseTimeMonitorData& val) {
    return val.toPropertyTree();
}

template<>
inline ResponseTimeMonitorData fromPt<ResponseTimeMonitorData>(const boost::property_tree::ptree& pt) {
    ResponseTimeMonitorData ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ResponseTimeMonitorData_H_ */
