/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PipelineActivity.h
 *
 * 
 */

#ifndef PipelineActivity_H_
#define PipelineActivity_H_



#include "PipelineActivityartifacts.h"
#include <string>
#include <vector>
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  PipelineActivity 
{
public:
    PipelineActivity() = default;
    explicit PipelineActivity(boost::property_tree::ptree const& pt);
    virtual ~PipelineActivity() = default;

    PipelineActivity(const PipelineActivity& other) = default; // copy constructor
    PipelineActivity(PipelineActivity&& other) noexcept = default; // move constructor

    PipelineActivity& operator=(const PipelineActivity& other) = default; // copy assignment
    PipelineActivity& operator=(PipelineActivity&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// PipelineActivity members

    /// <summary>
    /// 
    /// </summary>
    std::string get_Class() const;
    void set_Class(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<PipelineActivityartifacts> getArtifacts() const;
    void setArtifacts(std::vector<PipelineActivityartifacts> value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDurationInMillis() const;
    void setDurationInMillis(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEstimatedDurationInMillis() const;
    void setEstimatedDurationInMillis(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::string getEnQueueTime() const;
    void setEnQueueTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getEndTime() const;
    void setEndTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getId() const;
    void setId(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getOrganization() const;
    void setOrganization(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getPipeline() const;
    void setPipeline(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getResult() const;
    void setResult(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getRunSummary() const;
    void setRunSummary(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getStartTime() const;
    void setStartTime(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getState() const;
    void setState(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getType() const;
    void setType(std::string value);

    /// <summary>
    /// 
    /// </summary>
    std::string getCommitId() const;
    void setCommitId(std::string value);

protected:
    std::string m__class = "";
    std::vector<PipelineActivityartifacts> m_Artifacts;
    int32_t m_DurationInMillis = 0;
    int32_t m_EstimatedDurationInMillis = 0;
    std::string m_EnQueueTime = "";
    std::string m_EndTime = "";
    std::string m_Id = "";
    std::string m_Organization = "";
    std::string m_Pipeline = "";
    std::string m_Result = "";
    std::string m_RunSummary = "";
    std::string m_StartTime = "";
    std::string m_State = "";
    std::string m_Type = "";
    std::string m_CommitId = "";
};

std::vector<PipelineActivity> createPipelineActivityVectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<PipelineActivity>(const PipelineActivity& val) {
    return val.toPropertyTree();
}

template<>
inline PipelineActivity fromPt<PipelineActivity>(const boost::property_tree::ptree& pt) {
    PipelineActivity ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* PipelineActivity_H_ */
