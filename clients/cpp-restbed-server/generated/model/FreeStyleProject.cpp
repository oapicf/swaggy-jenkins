/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FreeStyleProject.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FreeStyleProject::FreeStyleProject(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string FreeStyleProject::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void FreeStyleProject::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FreeStyleProject::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	pt.put("name", m_Name);
	pt.put("url", m_Url);
	pt.put("color", m_Color);
	// generate tree for Actions
    tmp_node.clear();
	if (!m_Actions.empty()) {
        tmp_node = toPt(m_Actions);
		pt.add_child("actions", tmp_node);
		tmp_node.clear();
	}
	pt.put("description", m_Description);
	pt.put("displayName", m_DisplayName);
	pt.put("displayNameOrNull", m_DisplayNameOrNull);
	pt.put("fullDisplayName", m_FullDisplayName);
	pt.put("fullName", m_FullName);
	pt.put("buildable", m_Buildable);
	// generate tree for Builds
    tmp_node.clear();
	if (!m_Builds.empty()) {
        tmp_node = toPt(m_Builds);
		pt.add_child("builds", tmp_node);
		tmp_node.clear();
	}
	pt.add_child("firstBuild", m_FirstBuild.toPropertyTree());
	// generate tree for HealthReport
    tmp_node.clear();
	if (!m_HealthReport.empty()) {
        tmp_node = toPt(m_HealthReport);
		pt.add_child("healthReport", tmp_node);
		tmp_node.clear();
	}
	pt.put("inQueue", m_InQueue);
	pt.put("keepDependencies", m_KeepDependencies);
	pt.add_child("lastBuild", m_LastBuild.toPropertyTree());
	pt.add_child("lastCompletedBuild", m_LastCompletedBuild.toPropertyTree());
	pt.put("lastFailedBuild", m_LastFailedBuild);
	pt.add_child("lastStableBuild", m_LastStableBuild.toPropertyTree());
	pt.add_child("lastSuccessfulBuild", m_LastSuccessfulBuild.toPropertyTree());
	pt.put("lastUnstableBuild", m_LastUnstableBuild);
	pt.put("lastUnsuccessfulBuild", m_LastUnsuccessfulBuild);
	pt.put("nextBuildNumber", m_NextBuildNumber);
	pt.put("queueItem", m_QueueItem);
	pt.put("concurrentBuild", m_ConcurrentBuild);
	pt.add_child("scm", m_Scm.toPropertyTree());
	return pt;
}

void FreeStyleProject::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	m_Name = pt.get("name", "");
	m_Url = pt.get("url", "");
	m_Color = pt.get("color", "");
	// push all items of Actions into member
	if (pt.get_child_optional("actions")) {
        m_Actions = fromPt<std::vector<FreeStyleProjectactions>>(pt.get_child("actions"));
	}
	m_Description = pt.get("description", "");
	m_DisplayName = pt.get("displayName", "");
	m_DisplayNameOrNull = pt.get("displayNameOrNull", "");
	m_FullDisplayName = pt.get("fullDisplayName", "");
	m_FullName = pt.get("fullName", "");
	m_Buildable = pt.get("buildable", false);
	// push all items of Builds into member
	if (pt.get_child_optional("builds")) {
        m_Builds = fromPt<std::vector<FreeStyleBuild>>(pt.get_child("builds"));
	}
	if (pt.get_child_optional("firstBuild")) {
        m_FirstBuild = fromPt<FreeStyleBuild>(pt.get_child("firstBuild"));
	}
	// push all items of HealthReport into member
	if (pt.get_child_optional("healthReport")) {
        m_HealthReport = fromPt<std::vector<FreeStyleProjecthealthReport>>(pt.get_child("healthReport"));
	}
	m_InQueue = pt.get("inQueue", false);
	m_KeepDependencies = pt.get("keepDependencies", false);
	if (pt.get_child_optional("lastBuild")) {
        m_LastBuild = fromPt<FreeStyleBuild>(pt.get_child("lastBuild"));
	}
	if (pt.get_child_optional("lastCompletedBuild")) {
        m_LastCompletedBuild = fromPt<FreeStyleBuild>(pt.get_child("lastCompletedBuild"));
	}
	m_LastFailedBuild = pt.get("lastFailedBuild", "");
	if (pt.get_child_optional("lastStableBuild")) {
        m_LastStableBuild = fromPt<FreeStyleBuild>(pt.get_child("lastStableBuild"));
	}
	if (pt.get_child_optional("lastSuccessfulBuild")) {
        m_LastSuccessfulBuild = fromPt<FreeStyleBuild>(pt.get_child("lastSuccessfulBuild"));
	}
	m_LastUnstableBuild = pt.get("lastUnstableBuild", "");
	m_LastUnsuccessfulBuild = pt.get("lastUnsuccessfulBuild", "");
	m_NextBuildNumber = pt.get("nextBuildNumber", 0);
	m_QueueItem = pt.get("queueItem", "");
	m_ConcurrentBuild = pt.get("concurrentBuild", false);
	if (pt.get_child_optional("scm")) {
        m_Scm = fromPt<NullSCM>(pt.get_child("scm"));
	}
}

std::string FreeStyleProject::get_Class() const
{
    return m__class;
}

void FreeStyleProject::set_Class(std::string value)
{
    m__class = value;
}


std::string FreeStyleProject::getName() const
{
    return m_Name;
}

void FreeStyleProject::setName(std::string value)
{
    m_Name = value;
}


std::string FreeStyleProject::getUrl() const
{
    return m_Url;
}

void FreeStyleProject::setUrl(std::string value)
{
    m_Url = value;
}


std::string FreeStyleProject::getColor() const
{
    return m_Color;
}

void FreeStyleProject::setColor(std::string value)
{
    m_Color = value;
}


std::vector<FreeStyleProjectactions> FreeStyleProject::getActions() const
{
    return m_Actions;
}

void FreeStyleProject::setActions(std::vector<FreeStyleProjectactions> value)
{
    m_Actions = value;
}


std::string FreeStyleProject::getDescription() const
{
    return m_Description;
}

void FreeStyleProject::setDescription(std::string value)
{
    m_Description = value;
}


std::string FreeStyleProject::getDisplayName() const
{
    return m_DisplayName;
}

void FreeStyleProject::setDisplayName(std::string value)
{
    m_DisplayName = value;
}


std::string FreeStyleProject::getDisplayNameOrNull() const
{
    return m_DisplayNameOrNull;
}

void FreeStyleProject::setDisplayNameOrNull(std::string value)
{
    m_DisplayNameOrNull = value;
}


std::string FreeStyleProject::getFullDisplayName() const
{
    return m_FullDisplayName;
}

void FreeStyleProject::setFullDisplayName(std::string value)
{
    m_FullDisplayName = value;
}


std::string FreeStyleProject::getFullName() const
{
    return m_FullName;
}

void FreeStyleProject::setFullName(std::string value)
{
    m_FullName = value;
}


bool FreeStyleProject::isBuildable() const
{
    return m_Buildable;
}

void FreeStyleProject::setBuildable(bool value)
{
    m_Buildable = value;
}


std::vector<FreeStyleBuild> FreeStyleProject::getBuilds() const
{
    return m_Builds;
}

void FreeStyleProject::setBuilds(std::vector<FreeStyleBuild> value)
{
    m_Builds = value;
}


FreeStyleBuild FreeStyleProject::getFirstBuild() const
{
    return m_FirstBuild;
}

void FreeStyleProject::setFirstBuild(FreeStyleBuild value)
{
    m_FirstBuild = value;
}


std::vector<FreeStyleProjecthealthReport> FreeStyleProject::getHealthReport() const
{
    return m_HealthReport;
}

void FreeStyleProject::setHealthReport(std::vector<FreeStyleProjecthealthReport> value)
{
    m_HealthReport = value;
}


bool FreeStyleProject::isInQueue() const
{
    return m_InQueue;
}

void FreeStyleProject::setInQueue(bool value)
{
    m_InQueue = value;
}


bool FreeStyleProject::isKeepDependencies() const
{
    return m_KeepDependencies;
}

void FreeStyleProject::setKeepDependencies(bool value)
{
    m_KeepDependencies = value;
}


FreeStyleBuild FreeStyleProject::getLastBuild() const
{
    return m_LastBuild;
}

void FreeStyleProject::setLastBuild(FreeStyleBuild value)
{
    m_LastBuild = value;
}


FreeStyleBuild FreeStyleProject::getLastCompletedBuild() const
{
    return m_LastCompletedBuild;
}

void FreeStyleProject::setLastCompletedBuild(FreeStyleBuild value)
{
    m_LastCompletedBuild = value;
}


std::string FreeStyleProject::getLastFailedBuild() const
{
    return m_LastFailedBuild;
}

void FreeStyleProject::setLastFailedBuild(std::string value)
{
    m_LastFailedBuild = value;
}


FreeStyleBuild FreeStyleProject::getLastStableBuild() const
{
    return m_LastStableBuild;
}

void FreeStyleProject::setLastStableBuild(FreeStyleBuild value)
{
    m_LastStableBuild = value;
}


FreeStyleBuild FreeStyleProject::getLastSuccessfulBuild() const
{
    return m_LastSuccessfulBuild;
}

void FreeStyleProject::setLastSuccessfulBuild(FreeStyleBuild value)
{
    m_LastSuccessfulBuild = value;
}


std::string FreeStyleProject::getLastUnstableBuild() const
{
    return m_LastUnstableBuild;
}

void FreeStyleProject::setLastUnstableBuild(std::string value)
{
    m_LastUnstableBuild = value;
}


std::string FreeStyleProject::getLastUnsuccessfulBuild() const
{
    return m_LastUnsuccessfulBuild;
}

void FreeStyleProject::setLastUnsuccessfulBuild(std::string value)
{
    m_LastUnsuccessfulBuild = value;
}


int32_t FreeStyleProject::getNextBuildNumber() const
{
    return m_NextBuildNumber;
}

void FreeStyleProject::setNextBuildNumber(int32_t value)
{
    m_NextBuildNumber = value;
}


std::string FreeStyleProject::getQueueItem() const
{
    return m_QueueItem;
}

void FreeStyleProject::setQueueItem(std::string value)
{
    m_QueueItem = value;
}


bool FreeStyleProject::isConcurrentBuild() const
{
    return m_ConcurrentBuild;
}

void FreeStyleProject::setConcurrentBuild(bool value)
{
    m_ConcurrentBuild = value;
}


NullSCM FreeStyleProject::getScm() const
{
    return m_Scm;
}

void FreeStyleProject::setScm(NullSCM value)
{
    m_Scm = value;
}



std::vector<FreeStyleProject> createFreeStyleProjectVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FreeStyleProject>();
    for (const auto& child: pt) {
        vec.emplace_back(FreeStyleProject(child.second));
    }

    return vec;
}

}
}
}
}

