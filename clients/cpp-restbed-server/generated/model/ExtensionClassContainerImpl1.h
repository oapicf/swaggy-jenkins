/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ExtensionClassContainerImpl1.h
 *
 * 
 */

#ifndef ExtensionClassContainerImpl1_H_
#define ExtensionClassContainerImpl1_H_



#include "ExtensionClassContainerImpl1map.h"
#include <string>
#include "ExtensionClassContainerImpl1links.h"
#include <memory>
#include <vector>
#include <boost/property_tree/ptree.hpp>
#include "helpers.h"

namespace org {
namespace openapitools {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  ExtensionClassContainerImpl1 
{
public:
    ExtensionClassContainerImpl1() = default;
    explicit ExtensionClassContainerImpl1(boost::property_tree::ptree const& pt);
    virtual ~ExtensionClassContainerImpl1() = default;

    ExtensionClassContainerImpl1(const ExtensionClassContainerImpl1& other) = default; // copy constructor
    ExtensionClassContainerImpl1(ExtensionClassContainerImpl1&& other) noexcept = default; // move constructor

    ExtensionClassContainerImpl1& operator=(const ExtensionClassContainerImpl1& other) = default; // copy assignment
    ExtensionClassContainerImpl1& operator=(ExtensionClassContainerImpl1&& other) noexcept = default; // move assignment

    std::string toJsonString(bool prettyJson = false) const;
    void fromJsonString(std::string const& jsonString);
    boost::property_tree::ptree toPropertyTree() const;
    void fromPropertyTree(boost::property_tree::ptree const& pt);


    /////////////////////////////////////////////
    /// ExtensionClassContainerImpl1 members

    /// <summary>
    /// 
    /// </summary>
    std::string get_Class() const;
    void set_Class(std::string value);

    /// <summary>
    /// 
    /// </summary>
    ExtensionClassContainerImpl1links get_Links() const;
    void set_Links(ExtensionClassContainerImpl1links value);

    /// <summary>
    /// 
    /// </summary>
    ExtensionClassContainerImpl1map getMap() const;
    void setMap(ExtensionClassContainerImpl1map value);

protected:
    std::string m__class = "";
    ExtensionClassContainerImpl1links m__links;
    ExtensionClassContainerImpl1map m_map;
};

std::vector<ExtensionClassContainerImpl1> createExtensionClassContainerImpl1VectorFromJsonString(const std::string& json);

template<>
inline boost::property_tree::ptree toPt<ExtensionClassContainerImpl1>(const ExtensionClassContainerImpl1& val) {
    return val.toPropertyTree();
}

template<>
inline ExtensionClassContainerImpl1 fromPt<ExtensionClassContainerImpl1>(const boost::property_tree::ptree& pt) {
    ExtensionClassContainerImpl1 ret;
    ret.fromPropertyTree(pt);
    return ret;
}

}
}
}
}

#endif /* ExtensionClassContainerImpl1_H_ */
