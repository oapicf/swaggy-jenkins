/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FreeStyleBuild.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

FreeStyleBuild::FreeStyleBuild(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string FreeStyleBuild::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void FreeStyleBuild::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree FreeStyleBuild::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	pt.put("number", m_number);
	pt.put("url", m_Url);
	// generate tree for Actions
    tmp_node.clear();
	if (!m_Actions.empty()) {
        tmp_node = toPt(m_Actions);
		pt.add_child("actions", tmp_node);
		tmp_node.clear();
	}
	pt.put("building", m_Building);
	pt.put("description", m_Description);
	pt.put("displayName", m_DisplayName);
	pt.put("duration", m_Duration);
	pt.put("estimatedDuration", m_EstimatedDuration);
	pt.put("executor", m_Executor);
	pt.put("fullDisplayName", m_FullDisplayName);
	pt.put("id", m_Id);
	pt.put("keepLog", m_KeepLog);
	pt.put("queueId", m_QueueId);
	pt.put("result", m_Result);
	pt.put("timestamp", m_Timestamp);
	pt.put("builtOn", m_BuiltOn);
	pt.add_child("changeSet", m_ChangeSet.toPropertyTree());
	return pt;
}

void FreeStyleBuild::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	m_number = pt.get("number", 0);
	m_Url = pt.get("url", "");
	// push all items of Actions into member
	if (pt.get_child_optional("actions")) {
        m_Actions = fromPt<std::vector<CauseAction>>(pt.get_child("actions"));
	}
	m_Building = pt.get("building", false);
	m_Description = pt.get("description", "");
	m_DisplayName = pt.get("displayName", "");
	m_Duration = pt.get("duration", 0);
	m_EstimatedDuration = pt.get("estimatedDuration", 0);
	m_Executor = pt.get("executor", "");
	m_FullDisplayName = pt.get("fullDisplayName", "");
	m_Id = pt.get("id", "");
	m_KeepLog = pt.get("keepLog", false);
	m_QueueId = pt.get("queueId", 0);
	m_Result = pt.get("result", "");
	m_Timestamp = pt.get("timestamp", 0);
	m_BuiltOn = pt.get("builtOn", "");
	if (pt.get_child_optional("changeSet")) {
        m_ChangeSet = fromPt<EmptyChangeLogSet>(pt.get_child("changeSet"));
	}
}

std::string FreeStyleBuild::get_Class() const
{
    return m__class;
}

void FreeStyleBuild::set_Class(std::string value)
{
    m__class = value;
}


int32_t FreeStyleBuild::getNumber() const
{
    return m_number;
}

void FreeStyleBuild::setNumber(int32_t value)
{
    m_number = value;
}


std::string FreeStyleBuild::getUrl() const
{
    return m_Url;
}

void FreeStyleBuild::setUrl(std::string value)
{
    m_Url = value;
}


std::vector<CauseAction> FreeStyleBuild::getActions() const
{
    return m_Actions;
}

void FreeStyleBuild::setActions(std::vector<CauseAction> value)
{
    m_Actions = value;
}


bool FreeStyleBuild::isBuilding() const
{
    return m_Building;
}

void FreeStyleBuild::setBuilding(bool value)
{
    m_Building = value;
}


std::string FreeStyleBuild::getDescription() const
{
    return m_Description;
}

void FreeStyleBuild::setDescription(std::string value)
{
    m_Description = value;
}


std::string FreeStyleBuild::getDisplayName() const
{
    return m_DisplayName;
}

void FreeStyleBuild::setDisplayName(std::string value)
{
    m_DisplayName = value;
}


int32_t FreeStyleBuild::getDuration() const
{
    return m_Duration;
}

void FreeStyleBuild::setDuration(int32_t value)
{
    m_Duration = value;
}


int32_t FreeStyleBuild::getEstimatedDuration() const
{
    return m_EstimatedDuration;
}

void FreeStyleBuild::setEstimatedDuration(int32_t value)
{
    m_EstimatedDuration = value;
}


std::string FreeStyleBuild::getExecutor() const
{
    return m_Executor;
}

void FreeStyleBuild::setExecutor(std::string value)
{
    m_Executor = value;
}


std::string FreeStyleBuild::getFullDisplayName() const
{
    return m_FullDisplayName;
}

void FreeStyleBuild::setFullDisplayName(std::string value)
{
    m_FullDisplayName = value;
}


std::string FreeStyleBuild::getId() const
{
    return m_Id;
}

void FreeStyleBuild::setId(std::string value)
{
    m_Id = value;
}


bool FreeStyleBuild::isKeepLog() const
{
    return m_KeepLog;
}

void FreeStyleBuild::setKeepLog(bool value)
{
    m_KeepLog = value;
}


int32_t FreeStyleBuild::getQueueId() const
{
    return m_QueueId;
}

void FreeStyleBuild::setQueueId(int32_t value)
{
    m_QueueId = value;
}


std::string FreeStyleBuild::getResult() const
{
    return m_Result;
}

void FreeStyleBuild::setResult(std::string value)
{
    m_Result = value;
}


int32_t FreeStyleBuild::getTimestamp() const
{
    return m_Timestamp;
}

void FreeStyleBuild::setTimestamp(int32_t value)
{
    m_Timestamp = value;
}


std::string FreeStyleBuild::getBuiltOn() const
{
    return m_BuiltOn;
}

void FreeStyleBuild::setBuiltOn(std::string value)
{
    m_BuiltOn = value;
}


EmptyChangeLogSet FreeStyleBuild::getChangeSet() const
{
    return m_ChangeSet;
}

void FreeStyleBuild::setChangeSet(EmptyChangeLogSet value)
{
    m_ChangeSet = value;
}



std::vector<FreeStyleBuild> createFreeStyleBuildVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<FreeStyleBuild>();
    for (const auto& child: pt) {
        vec.emplace_back(FreeStyleBuild(child.second));
    }

    return vec;
}

}
}
}
}

