/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MultibranchPipeline.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

MultibranchPipeline::MultibranchPipeline(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string MultibranchPipeline::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void MultibranchPipeline::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree MultibranchPipeline::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("displayName", m_DisplayName);
	pt.put("estimatedDurationInMillis", m_EstimatedDurationInMillis);
	pt.put("latestRun", m_LatestRun);
	pt.put("name", m_Name);
	pt.put("organization", m_Organization);
	pt.put("weatherScore", m_WeatherScore);
	// generate tree for BranchNames
    tmp_node.clear();
	if (!m_BranchNames.empty()) {
        tmp_node = toPt(m_BranchNames);
		pt.add_child("branchNames", tmp_node);
		tmp_node.clear();
	}
	pt.put("numberOfFailingBranches", m_NumberOfFailingBranches);
	pt.put("numberOfFailingPullRequests", m_NumberOfFailingPullRequests);
	pt.put("numberOfSuccessfulBranches", m_NumberOfSuccessfulBranches);
	pt.put("numberOfSuccessfulPullRequests", m_NumberOfSuccessfulPullRequests);
	pt.put("totalNumberOfBranches", m_TotalNumberOfBranches);
	pt.put("totalNumberOfPullRequests", m_TotalNumberOfPullRequests);
	pt.put("_class", m__class);
	return pt;
}

void MultibranchPipeline::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m_DisplayName = pt.get("displayName", "");
	m_EstimatedDurationInMillis = pt.get("estimatedDurationInMillis", 0);
	m_LatestRun = pt.get("latestRun", "");
	m_Name = pt.get("name", "");
	m_Organization = pt.get("organization", "");
	m_WeatherScore = pt.get("weatherScore", 0);
	// push all items of BranchNames into member
	if (pt.get_child_optional("branchNames")) {
        m_BranchNames = fromPt<std::vector<std::string>>(pt.get_child("branchNames"));
	}
	m_NumberOfFailingBranches = pt.get("numberOfFailingBranches", 0);
	m_NumberOfFailingPullRequests = pt.get("numberOfFailingPullRequests", 0);
	m_NumberOfSuccessfulBranches = pt.get("numberOfSuccessfulBranches", 0);
	m_NumberOfSuccessfulPullRequests = pt.get("numberOfSuccessfulPullRequests", 0);
	m_TotalNumberOfBranches = pt.get("totalNumberOfBranches", 0);
	m_TotalNumberOfPullRequests = pt.get("totalNumberOfPullRequests", 0);
	m__class = pt.get("_class", "");
}

std::string MultibranchPipeline::getDisplayName() const
{
    return m_DisplayName;
}

void MultibranchPipeline::setDisplayName(std::string value)
{
    m_DisplayName = value;
}


int32_t MultibranchPipeline::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}

void MultibranchPipeline::setEstimatedDurationInMillis(int32_t value)
{
    m_EstimatedDurationInMillis = value;
}


std::string MultibranchPipeline::getLatestRun() const
{
    return m_LatestRun;
}

void MultibranchPipeline::setLatestRun(std::string value)
{
    m_LatestRun = value;
}


std::string MultibranchPipeline::getName() const
{
    return m_Name;
}

void MultibranchPipeline::setName(std::string value)
{
    m_Name = value;
}


std::string MultibranchPipeline::getOrganization() const
{
    return m_Organization;
}

void MultibranchPipeline::setOrganization(std::string value)
{
    m_Organization = value;
}


int32_t MultibranchPipeline::getWeatherScore() const
{
    return m_WeatherScore;
}

void MultibranchPipeline::setWeatherScore(int32_t value)
{
    m_WeatherScore = value;
}


std::vector<std::string> MultibranchPipeline::getBranchNames() const
{
    return m_BranchNames;
}

void MultibranchPipeline::setBranchNames(std::vector<std::string> value)
{
    m_BranchNames = value;
}


int32_t MultibranchPipeline::getNumberOfFailingBranches() const
{
    return m_NumberOfFailingBranches;
}

void MultibranchPipeline::setNumberOfFailingBranches(int32_t value)
{
    m_NumberOfFailingBranches = value;
}


int32_t MultibranchPipeline::getNumberOfFailingPullRequests() const
{
    return m_NumberOfFailingPullRequests;
}

void MultibranchPipeline::setNumberOfFailingPullRequests(int32_t value)
{
    m_NumberOfFailingPullRequests = value;
}


int32_t MultibranchPipeline::getNumberOfSuccessfulBranches() const
{
    return m_NumberOfSuccessfulBranches;
}

void MultibranchPipeline::setNumberOfSuccessfulBranches(int32_t value)
{
    m_NumberOfSuccessfulBranches = value;
}


int32_t MultibranchPipeline::getNumberOfSuccessfulPullRequests() const
{
    return m_NumberOfSuccessfulPullRequests;
}

void MultibranchPipeline::setNumberOfSuccessfulPullRequests(int32_t value)
{
    m_NumberOfSuccessfulPullRequests = value;
}


int32_t MultibranchPipeline::getTotalNumberOfBranches() const
{
    return m_TotalNumberOfBranches;
}

void MultibranchPipeline::setTotalNumberOfBranches(int32_t value)
{
    m_TotalNumberOfBranches = value;
}


int32_t MultibranchPipeline::getTotalNumberOfPullRequests() const
{
    return m_TotalNumberOfPullRequests;
}

void MultibranchPipeline::setTotalNumberOfPullRequests(int32_t value)
{
    m_TotalNumberOfPullRequests = value;
}


std::string MultibranchPipeline::get_Class() const
{
    return m__class;
}

void MultibranchPipeline::set_Class(std::string value)
{
    m__class = value;
}



std::vector<MultibranchPipeline> createMultibranchPipelineVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<MultibranchPipeline>();
    for (const auto& child: pt) {
        vec.emplace_back(MultibranchPipeline(child.second));
    }

    return vec;
}

}
}
}
}

