/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "QueueLeftItem.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

QueueLeftItem::QueueLeftItem(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string QueueLeftItem::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void QueueLeftItem::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree QueueLeftItem::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	// generate tree for Actions
    tmp_node.clear();
	if (!m_Actions.empty()) {
        tmp_node = toPt(m_Actions);
		pt.add_child("actions", tmp_node);
		tmp_node.clear();
	}
	pt.put("blocked", m_Blocked);
	pt.put("buildable", m_Buildable);
	pt.put("id", m_Id);
	pt.put("inQueueSince", m_InQueueSince);
	pt.put("params", m_Params);
	pt.put("stuck", m_Stuck);
	pt.add_child("task", m_Task.toPropertyTree());
	pt.put("url", m_Url);
	pt.put("why", m_Why);
	pt.put("cancelled", m_Cancelled);
	pt.add_child("executable", m_Executable.toPropertyTree());
	return pt;
}

void QueueLeftItem::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	// push all items of Actions into member
	if (pt.get_child_optional("actions")) {
        m_Actions = fromPt<std::vector<CauseAction>>(pt.get_child("actions"));
	}
	m_Blocked = pt.get("blocked", false);
	m_Buildable = pt.get("buildable", false);
	m_Id = pt.get("id", 0);
	m_InQueueSince = pt.get("inQueueSince", 0);
	m_Params = pt.get("params", "");
	m_Stuck = pt.get("stuck", false);
	if (pt.get_child_optional("task")) {
        m_Task = fromPt<FreeStyleProject>(pt.get_child("task"));
	}
	m_Url = pt.get("url", "");
	m_Why = pt.get("why", "");
	m_Cancelled = pt.get("cancelled", false);
	if (pt.get_child_optional("executable")) {
        m_Executable = fromPt<FreeStyleBuild>(pt.get_child("executable"));
	}
}

std::string QueueLeftItem::get_Class() const
{
    return m__class;
}

void QueueLeftItem::set_Class(std::string value)
{
    m__class = value;
}


std::vector<CauseAction> QueueLeftItem::getActions() const
{
    return m_Actions;
}

void QueueLeftItem::setActions(std::vector<CauseAction> value)
{
    m_Actions = value;
}


bool QueueLeftItem::isBlocked() const
{
    return m_Blocked;
}

void QueueLeftItem::setBlocked(bool value)
{
    m_Blocked = value;
}


bool QueueLeftItem::isBuildable() const
{
    return m_Buildable;
}

void QueueLeftItem::setBuildable(bool value)
{
    m_Buildable = value;
}


int32_t QueueLeftItem::getId() const
{
    return m_Id;
}

void QueueLeftItem::setId(int32_t value)
{
    m_Id = value;
}


int32_t QueueLeftItem::getInQueueSince() const
{
    return m_InQueueSince;
}

void QueueLeftItem::setInQueueSince(int32_t value)
{
    m_InQueueSince = value;
}


std::string QueueLeftItem::getParams() const
{
    return m_Params;
}

void QueueLeftItem::setParams(std::string value)
{
    m_Params = value;
}


bool QueueLeftItem::isStuck() const
{
    return m_Stuck;
}

void QueueLeftItem::setStuck(bool value)
{
    m_Stuck = value;
}


FreeStyleProject QueueLeftItem::getTask() const
{
    return m_Task;
}

void QueueLeftItem::setTask(FreeStyleProject value)
{
    m_Task = value;
}


std::string QueueLeftItem::getUrl() const
{
    return m_Url;
}

void QueueLeftItem::setUrl(std::string value)
{
    m_Url = value;
}


std::string QueueLeftItem::getWhy() const
{
    return m_Why;
}

void QueueLeftItem::setWhy(std::string value)
{
    m_Why = value;
}


bool QueueLeftItem::isCancelled() const
{
    return m_Cancelled;
}

void QueueLeftItem::setCancelled(bool value)
{
    m_Cancelled = value;
}


FreeStyleBuild QueueLeftItem::getExecutable() const
{
    return m_Executable;
}

void QueueLeftItem::setExecutable(FreeStyleBuild value)
{
    m_Executable = value;
}



std::vector<QueueLeftItem> createQueueLeftItemVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<QueueLeftItem>();
    for (const auto& child: pt) {
        vec.emplace_back(QueueLeftItem(child.second));
    }

    return vec;
}

}
}
}
}

