/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HudsonMasterComputermonitorData.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

HudsonMasterComputermonitorData::HudsonMasterComputermonitorData(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string HudsonMasterComputermonitorData::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void HudsonMasterComputermonitorData::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree HudsonMasterComputermonitorData::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.add_child("hudson.node_monitors.SwapSpaceMonitor", m_Hudson_node_monitors_SwapSpaceMonitor.toPropertyTree());
	pt.add_child("hudson.node_monitors.TemporarySpaceMonitor", m_Hudson_node_monitors_TemporarySpaceMonitor.toPropertyTree());
	pt.add_child("hudson.node_monitors.DiskSpaceMonitor", m_Hudson_node_monitors_DiskSpaceMonitor.toPropertyTree());
	pt.put("hudson.node_monitors.ArchitectureMonitor", m_Hudson_node_monitors_ArchitectureMonitor);
	pt.add_child("hudson.node_monitors.ResponseTimeMonitor", m_Hudson_node_monitors_ResponseTimeMonitor.toPropertyTree());
	pt.add_child("hudson.node_monitors.ClockMonitor", m_Hudson_node_monitors_ClockMonitor.toPropertyTree());
	pt.put("_class", m__class);
	return pt;
}

void HudsonMasterComputermonitorData::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	if (pt.get_child_optional("hudson.node_monitors.SwapSpaceMonitor")) {
        m_Hudson_node_monitors_SwapSpaceMonitor = fromPt<SwapSpaceMonitorMemoryUsage2>(pt.get_child("hudson.node_monitors.SwapSpaceMonitor"));
	}
	if (pt.get_child_optional("hudson.node_monitors.TemporarySpaceMonitor")) {
        m_Hudson_node_monitors_TemporarySpaceMonitor = fromPt<DiskSpaceMonitorDescriptorDiskSpace>(pt.get_child("hudson.node_monitors.TemporarySpaceMonitor"));
	}
	if (pt.get_child_optional("hudson.node_monitors.DiskSpaceMonitor")) {
        m_Hudson_node_monitors_DiskSpaceMonitor = fromPt<DiskSpaceMonitorDescriptorDiskSpace>(pt.get_child("hudson.node_monitors.DiskSpaceMonitor"));
	}
	m_Hudson_node_monitors_ArchitectureMonitor = pt.get("hudson.node_monitors.ArchitectureMonitor", "");
	if (pt.get_child_optional("hudson.node_monitors.ResponseTimeMonitor")) {
        m_Hudson_node_monitors_ResponseTimeMonitor = fromPt<ResponseTimeMonitorData>(pt.get_child("hudson.node_monitors.ResponseTimeMonitor"));
	}
	if (pt.get_child_optional("hudson.node_monitors.ClockMonitor")) {
        m_Hudson_node_monitors_ClockMonitor = fromPt<ClockDifference>(pt.get_child("hudson.node_monitors.ClockMonitor"));
	}
	m__class = pt.get("_class", "");
}

SwapSpaceMonitorMemoryUsage2 HudsonMasterComputermonitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsSwapSpaceMonitor(SwapSpaceMonitorMemoryUsage2 value)
{
    m_Hudson_node_monitors_SwapSpaceMonitor = value;
}


DiskSpaceMonitorDescriptorDiskSpace HudsonMasterComputermonitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(DiskSpaceMonitorDescriptorDiskSpace value)
{
    m_Hudson_node_monitors_TemporarySpaceMonitor = value;
}


DiskSpaceMonitorDescriptorDiskSpace HudsonMasterComputermonitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsDiskSpaceMonitor(DiskSpaceMonitorDescriptorDiskSpace value)
{
    m_Hudson_node_monitors_DiskSpaceMonitor = value;
}


std::string HudsonMasterComputermonitorData::getHudsonNodeMonitorsArchitectureMonitor() const
{
    return m_Hudson_node_monitors_ArchitectureMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsArchitectureMonitor(std::string value)
{
    m_Hudson_node_monitors_ArchitectureMonitor = value;
}


ResponseTimeMonitorData HudsonMasterComputermonitorData::getHudsonNodeMonitorsResponseTimeMonitor() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsResponseTimeMonitor(ResponseTimeMonitorData value)
{
    m_Hudson_node_monitors_ResponseTimeMonitor = value;
}


ClockDifference HudsonMasterComputermonitorData::getHudsonNodeMonitorsClockMonitor() const
{
    return m_Hudson_node_monitors_ClockMonitor;
}

void HudsonMasterComputermonitorData::setHudsonNodeMonitorsClockMonitor(ClockDifference value)
{
    m_Hudson_node_monitors_ClockMonitor = value;
}


std::string HudsonMasterComputermonitorData::get_Class() const
{
    return m__class;
}

void HudsonMasterComputermonitorData::set_Class(std::string value)
{
    m__class = value;
}



std::vector<HudsonMasterComputermonitorData> createHudsonMasterComputermonitorDataVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<HudsonMasterComputermonitorData>();
    for (const auto& child: pt) {
        vec.emplace_back(HudsonMasterComputermonitorData(child.second));
    }

    return vec;
}

}
}
}
}

