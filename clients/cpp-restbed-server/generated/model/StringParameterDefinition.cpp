/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "StringParameterDefinition.h"

#include <string>
#include <vector>
#include <map>
#include <sstream>
#include <stdexcept>
#include <regex>
#include <boost/lexical_cast.hpp>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>
#include "helpers.h"

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace org {
namespace openapitools {
namespace server {
namespace model {

StringParameterDefinition::StringParameterDefinition(boost::property_tree::ptree const& pt)
{
        fromPropertyTree(pt);
}


std::string StringParameterDefinition::toJsonString(bool prettyJson /* = false */) const
{
	std::stringstream ss;
	write_json(ss, this->toPropertyTree(), prettyJson);
    // workaround inspired by: https://stackoverflow.com/a/56395440
    std::regex reg("\\\"([0-9]+\\.{0,1}[0-9]*)\\\"");
    std::string result = std::regex_replace(ss.str(), reg, "$1");
    return result;
}

void StringParameterDefinition::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	this->fromPropertyTree(pt);
}

ptree StringParameterDefinition::toPropertyTree() const
{
	ptree pt;
	ptree tmp_node;
	pt.put("_class", m__class);
	pt.add_child("defaultParameterValue", m_DefaultParameterValue.toPropertyTree());
	pt.put("description", m_Description);
	pt.put("name", m_Name);
	pt.put("type", m_Type);
	return pt;
}

void StringParameterDefinition::fromPropertyTree(ptree const &pt)
{
	ptree tmp_node;
	m__class = pt.get("_class", "");
	if (pt.get_child_optional("defaultParameterValue")) {
        m_DefaultParameterValue = fromPt<StringParameterValue>(pt.get_child("defaultParameterValue"));
	}
	m_Description = pt.get("description", "");
	m_Name = pt.get("name", "");
	m_Type = pt.get("type", "");
}

std::string StringParameterDefinition::get_Class() const
{
    return m__class;
}

void StringParameterDefinition::set_Class(std::string value)
{
    m__class = value;
}


StringParameterValue StringParameterDefinition::getDefaultParameterValue() const
{
    return m_DefaultParameterValue;
}

void StringParameterDefinition::setDefaultParameterValue(StringParameterValue value)
{
    m_DefaultParameterValue = value;
}


std::string StringParameterDefinition::getDescription() const
{
    return m_Description;
}

void StringParameterDefinition::setDescription(std::string value)
{
    m_Description = value;
}


std::string StringParameterDefinition::getName() const
{
    return m_Name;
}

void StringParameterDefinition::setName(std::string value)
{
    m_Name = value;
}


std::string StringParameterDefinition::getType() const
{
    return m_Type;
}

void StringParameterDefinition::setType(std::string value)
{
    m_Type = value;
}



std::vector<StringParameterDefinition> createStringParameterDefinitionVectorFromJsonString(const std::string& json)
{
    std::stringstream sstream(json);
    boost::property_tree::ptree pt;
    boost::property_tree::json_parser::read_json(sstream,pt);

    auto vec = std::vector<StringParameterDefinition>();
    for (const auto& child: pt) {
        vec.emplace_back(StringParameterDefinition(child.second));
    }

    return vec;
}

}
}
}
}

