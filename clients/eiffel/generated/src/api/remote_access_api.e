note
 description:"[
		Swaggy Jenkins
 		Jenkins API clients generated from Swagger / Open API specification
  		The version of the OpenAPI document: 2.0.1-pre.0
 	    Contact: blah+oapicf@cliffano.com

  	NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel openapi generator", "src=https://openapi-generator.tech", "protocol=uri"

class
	REMOTEACCESS_API

inherit

    API_I


feature -- API Access


	computer (depth: INTEGER_32): detachable COMPUTER_SET
			-- 
			-- Retrieve computer details
			-- 
			-- argument: depth Recursion depth in response model (required)
			-- 
			-- 
			-- Result COMPUTER_SET
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/computer/api/json"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "depth", depth));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { COMPUTER_SET } l_response.data ({ COMPUTER_SET }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	head_jenkins 
			-- 
			-- Retrieve Jenkins headers
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/json"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Head", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	jenkins : detachable HUDSON
			-- 
			-- Retrieve Jenkins details
			-- 
			-- 
			-- Result HUDSON
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/api/json"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { HUDSON } l_response.data ({ HUDSON }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	job (name: STRING_32): detachable FREE_STYLE_PROJECT
			-- 
			-- Retrieve job details
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- 
			-- Result FREE_STYLE_PROJECT
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/api/json"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { FREE_STYLE_PROJECT } l_response.data ({ FREE_STYLE_PROJECT }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	job_config (name: STRING_32): detachable STRING_32
			-- 
			-- Retrieve job configuration
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/config.xml"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	job_last_build (name: STRING_32): detachable FREE_STYLE_BUILD
			-- 
			-- Retrieve job&#39;s last build details
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- 
			-- Result FREE_STYLE_BUILD
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/lastBuild/api/json"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { FREE_STYLE_BUILD } l_response.data ({ FREE_STYLE_BUILD }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	job_progressive_text (name: STRING_32; number: STRING_32; start: STRING_32)
			-- 
			-- Retrieve job&#39;s build progressive text output
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- argument: number Build number (required)
			-- 
			-- argument: start Starting point of progressive text output (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/{number}/logText/progressiveText"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_path.replace_substring_all ("{"+"number"+"}", api_client.url_encode (number.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "start", start));


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_create_item (name: STRING_32; var_from: STRING_32; mode: STRING_32; jenkins__crumb: STRING_32; content__type: STRING_32; body: STRING_32)
			-- 
			-- Create a new job using job configuration, or copied from an existing job
			-- 
			-- argument: name Name of the new job (required)
			-- 
			-- argument: var_from Existing job to copy from (optional, default to null)
			-- 
			-- argument: mode Set to &#39;copy&#39; for copying an existing job (optional, default to null)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- argument: content__type Content type header application/xml (optional, default to null)
			-- 
			-- argument: body Job configuration in config.xml format (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/createItem"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "from", var_from));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "mode", mode));

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end
			if attached content__type as l_content__type then
				l_request.add_header(l_content__type.out,"Content-Type");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_create_view (name: STRING_32; jenkins__crumb: STRING_32; content__type: STRING_32; body: STRING_32)
			-- 
			-- Create a new view using view configuration
			-- 
			-- argument: name Name of the new view (required)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- argument: content__type Content type header application/xml (optional, default to null)
			-- 
			-- argument: body View configuration in config.xml format (optional)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/createView"
			l_request.fill_query_params(api_client.parameter_to_tuple("", "name", name));

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end
			if attached content__type as l_content__type then
				l_request.add_header(l_content__type.out,"Content-Type");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_job_build (name: STRING_32; json: STRING_32; token: STRING_32; jenkins__crumb: STRING_32)
			-- 
			-- Build a job
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- argument: json  (required)
			-- 
			-- argument: token  (optional, default to null)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/build"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))
			l_request.fill_query_params(api_client.parameter_to_tuple("", "json", json));
			l_request.fill_query_params(api_client.parameter_to_tuple("", "token", token));

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_job_config (name: STRING_32; body: STRING_32; jenkins__crumb: STRING_32)
			-- 
			-- Update job configuration
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- argument: body Job configuration in config.xml format (required)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/job/{name}/config.xml"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_job_delete (name: STRING_32; jenkins__crumb: STRING_32)
			-- 
			-- Delete a job
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/doDelete"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_job_disable (name: STRING_32; jenkins__crumb: STRING_32)
			-- 
			-- Disable a job
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/disable"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_job_enable (name: STRING_32; jenkins__crumb: STRING_32)
			-- 
			-- Enable a job
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/enable"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_job_last_build_stop (name: STRING_32; jenkins__crumb: STRING_32)
			-- 
			-- Stop a job
			-- 
			-- argument: name Name of the job (required)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/job/{name}/lastBuild/stop"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<>>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	post_view_config (name: STRING_32; body: STRING_32; jenkins__crumb: STRING_32)
			-- 
			-- Update view configuration
			-- 
			-- argument: name Name of the view (required)
			-- 
			-- argument: body View configuration in config.xml format (required)
			-- 
			-- argument: jenkins__crumb CSRF protection token (optional, default to null)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(body)
			l_path := "/view/{name}/config.xml"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))

			if attached jenkins__crumb as l_jenkins__crumb then
				l_request.add_header(l_jenkins__crumb.out,"Jenkins-Crumb");
			end

			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"*/*">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<"application/json">>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end

	queue : detachable QUEUE
			-- 
			-- Retrieve queue details
			-- 
			-- 
			-- Result QUEUE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/queue/api/json"


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { QUEUE } l_response.data ({ QUEUE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	queue_item (number: STRING_32): detachable QUEUE
			-- 
			-- Retrieve queued item details
			-- 
			-- argument: number Queue number (required)
			-- 
			-- 
			-- Result QUEUE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/queue/item/{number}/api/json"
			l_path.replace_substring_all ("{"+"number"+"}", api_client.url_encode (number.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { QUEUE } l_response.data ({ QUEUE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	view (name: STRING_32): detachable LIST_VIEW
			-- 
			-- Retrieve view details
			-- 
			-- argument: name Name of the view (required)
			-- 
			-- 
			-- Result LIST_VIEW
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/view/{name}/api/json"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { LIST_VIEW } l_response.data ({ LIST_VIEW }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end

	view_config (name: STRING_32): detachable STRING_32
			-- 
			-- Retrieve view configuration
			-- 
			-- argument: name Name of the view (required)
			-- 
			-- 
			-- Result STRING_32
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/view/{name}/config.xml"
			l_path.replace_substring_all ("{"+"name"+"}", api_client.url_encode (name.out))


			if attached {STRING} api_client.select_header_accept ({ARRAY [STRING]}<<"text/xml">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type ({ARRAY [STRING]}<<>>),"Content-Type")
			l_request.set_auth_names ({ARRAY [STRING]}<<"jenkins_auth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { STRING_32 } l_response.data ({ STRING_32 }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end


end
