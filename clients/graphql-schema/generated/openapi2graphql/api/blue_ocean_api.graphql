# Swaggy Jenkins
# Jenkins API clients generated from Swagger / Open API specification
# The version of the OpenAPI document: 3.0.2-pre.0
# Contact: blah+oapicf@cliffano.com
# Generated by OpenAPI Generator: https://openapi-generator.tech
#

# package openapi2graphql

# blue_ocean_api

type mutation {
  # Delete queue item from an organization pipeline queue
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! queue Name of the queue item
  # @return [null]
  DeletePipelineQueueItem(organization: String!, pipeline: String!, queue: String!): null

  # Replay an organization pipeline run
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @return [QueueItemImpl]
  PostPipelineRun(organization: String!, pipeline: String!, run: String!): QueueItemImpl

  # Start a build for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @return [QueueItemImpl]
  PostPipelineRuns(organization: String!, pipeline: String!): QueueItemImpl

  # Favorite/unfavorite a pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param Boolean! body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
  # @return [FavoriteImpl]
  PutPipelineFavorite(organization: String!, pipeline: String!, body: Boolean!): FavoriteImpl

  # Stop a build of an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @param String! blocking Set to true to make blocking stop, default: false
  # @param Int! timeOutInSecs Timeout in seconds, default: 10 seconds
  # @return [PipelineRun]
  PutPipelineRun(organization: String!, pipeline: String!, run: String!, blocking: String!, timeOutInSecs: Int!): PipelineRun

}

type query {
  # Retrieve authenticated user details for an organization
  # @param String! organization Name of the organization
  # @return [User]
  GetAuthenticatedUser(organization: String!): User

  # Get a list of class names supported by a given class
  # @param String! class Name of the class
  # @return [String!]
  GetClasses(class: String!): String!

  # Retrieve JSON Web Key
  # @param Int! key Key ID received as part of JWT header field kid
  # @return [String!]
  GetJsonWebKey(key: Int!): String!

  # Retrieve JSON Web Token
  # @param Int! expiryTimeInMins Token expiry time in minutes, default: 30 minutes
  # @param Int! maxExpiryTimeInMins Maximum token expiry time in minutes, default: 480 minutes
  # @return [String!]
  GetJsonWebToken(expiryTimeInMins: Int!, maxExpiryTimeInMins: Int!): String!

  # Retrieve organization details
  # @param String! organization Name of the organization
  # @return [Organisation]
  GetOrganisation(organization: String!): Organisation

  # Retrieve all organizations details
  # @return [[Organisation]]
  GetOrganisations(): [Organisation]

  # Retrieve pipeline details for an organization
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @return [Pipeline]
  GetPipeline(organization: String!, pipeline: String!): Pipeline

  # Retrieve all activities details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @return [[PipelineActivity]]
  GetPipelineActivities(organization: String!, pipeline: String!): [PipelineActivity]

  # Retrieve branch details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! branch Name of the branch
  # @return [BranchImpl]
  GetPipelineBranch(organization: String!, pipeline: String!, branch: String!): BranchImpl

  # Retrieve branch run details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! branch Name of the branch
  # @param String! run Name of the run
  # @return [PipelineRun]
  GetPipelineBranchRun(organization: String!, pipeline: String!, branch: String!, run: String!): PipelineRun

  # Retrieve all branches details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @return [MultibranchPipeline]
  GetPipelineBranches(organization: String!, pipeline: String!): MultibranchPipeline

  # Retrieve pipeline folder for an organization
  # @param String! organization Name of the organization
  # @param String! folder Name of the folder
  # @return [PipelineFolderImpl]
  GetPipelineFolder(organization: String!, folder: String!): PipelineFolderImpl

  # Retrieve pipeline details for an organization folder
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! folder Name of the folder
  # @return [PipelineImpl]
  GetPipelineFolderPipeline(organization: String!, pipeline: String!, folder: String!): PipelineImpl

  # Retrieve queue details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @return [[QueueItemImpl]]
  GetPipelineQueue(organization: String!, pipeline: String!): [QueueItemImpl]

  # Retrieve run details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @return [PipelineRun]
  GetPipelineRun(organization: String!, pipeline: String!, run: String!): PipelineRun

  # Get log for a pipeline run
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @param Int! start Start position of the log
  # @param Boolean! download Set to true in order to download the file, otherwise it&#39;s passed as a response body
  # @return [String!]
  GetPipelineRunLog(organization: String!, pipeline: String!, run: String!, start: Int!, download: Boolean!): String!

  # Retrieve run node details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @param String! node Name of the node
  # @return [PipelineRunNode]
  GetPipelineRunNode(organization: String!, pipeline: String!, run: String!, node: String!): PipelineRunNode

  # Retrieve run node details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @param String! node Name of the node
  # @param String! step Name of the step
  # @return [PipelineStepImpl]
  GetPipelineRunNodeStep(organization: String!, pipeline: String!, run: String!, node: String!, step: String!): PipelineStepImpl

  # Get log for a pipeline run node step
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @param String! node Name of the node
  # @param String! step Name of the step
  # @return [String!]
  GetPipelineRunNodeStepLog(organization: String!, pipeline: String!, run: String!, node: String!, step: String!): String!

  # Retrieve run node steps details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @param String! node Name of the node
  # @return [[PipelineStepImpl]]
  GetPipelineRunNodeSteps(organization: String!, pipeline: String!, run: String!, node: String!): [PipelineStepImpl]

  # Retrieve run nodes details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @param String! run Name of the run
  # @return [[PipelineRunNode]]
  GetPipelineRunNodes(organization: String!, pipeline: String!, run: String!): [PipelineRunNode]

  # Retrieve all runs details for an organization pipeline
  # @param String! organization Name of the organization
  # @param String! pipeline Name of the pipeline
  # @return [[PipelineRun]]
  GetPipelineRuns(organization: String!, pipeline: String!): [PipelineRun]

  # Retrieve all pipelines details for an organization
  # @param String! organization Name of the organization
  # @return [[Pipeline]]
  GetPipelines(organization: String!): [Pipeline]

  # Retrieve SCM details for an organization
  # @param String! organization Name of the organization
  # @param String! scm Name of SCM
  # @return [GithubScm]
  GetSCM(organization: String!, scm: String!): GithubScm

  # Retrieve SCM organization repositories details for an organization
  # @param String! organization Name of the organization
  # @param String! scm Name of SCM
  # @param String! scmOrganisation Name of the SCM organization
  # @param String! credentialId Credential ID
  # @param Int! pageSize Number of items in a page
  # @param Int! pageNumber Page number
  # @return [[GithubOrganization]]
  GetSCMOrganisationRepositories(organization: String!, scm: String!, scmOrganisation: String!, credentialId: String!, pageSize: Int!, pageNumber: Int!): [GithubOrganization]

  # Retrieve SCM organization repository details for an organization
  # @param String! organization Name of the organization
  # @param String! scm Name of SCM
  # @param String! scmOrganisation Name of the SCM organization
  # @param String! repository Name of the SCM repository
  # @param String! credentialId Credential ID
  # @return [[GithubOrganization]]
  GetSCMOrganisationRepository(organization: String!, scm: String!, scmOrganisation: String!, repository: String!, credentialId: String!): [GithubOrganization]

  # Retrieve SCM organizations details for an organization
  # @param String! organization Name of the organization
  # @param String! scm Name of SCM
  # @param String! credentialId Credential ID
  # @return [[GithubOrganization]]
  GetSCMOrganisations(organization: String!, scm: String!, credentialId: String!): [GithubOrganization]

  # Retrieve user details for an organization
  # @param String! organization Name of the organization
  # @param String! user Name of the user
  # @return [User]
  GetUser(organization: String!, user: String!): User

  # Retrieve user favorites details for an organization
  # @param String! user Name of the user
  # @return [[FavoriteImpl]]
  GetUserFavorites(user: String!): [FavoriteImpl]

  # Retrieve users details for an organization
  # @param String! organization Name of the organization
  # @return [User]
  GetUsers(organization: String!): User

  # Search for any resource details
  # @param String! q Query string
  # @return [String!]
  Search(q: String!): String!

  # Get classes details
  # @param String! q Query string containing an array of class names
  # @return [String!]
  SearchClasses(q: String!): String!

}

