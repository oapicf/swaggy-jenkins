/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GithubRepositorypermissions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

GithubRepositorypermissions::GithubRepositorypermissions()
{
    m_Admin = false;
    m_AdminIsSet = false;
    m_Push = false;
    m_PushIsSet = false;
    m_Pull = false;
    m_PullIsSet = false;
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
}

GithubRepositorypermissions::~GithubRepositorypermissions()
{
}

void GithubRepositorypermissions::validate()
{
    // TODO: implement validation
}

web::json::value GithubRepositorypermissions::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_AdminIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("admin"))] = ModelBase::toJson(m_Admin);
    }
    if(m_PushIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("push"))] = ModelBase::toJson(m_Push);
    }
    if(m_PullIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("pull"))] = ModelBase::toJson(m_Pull);
    }
    if(m__classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }

    return val;
}

bool GithubRepositorypermissions::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("admin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("admin")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAdmin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdmin);
            setAdmin(refVal_setAdmin);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("push"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("push")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPush;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPush);
            setPush(refVal_setPush);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pull"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pull")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPull;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPull);
            setPull(refVal_setPull);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
            
        }
    }
    return ok;
}

void GithubRepositorypermissions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AdminIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("admin")), m_Admin));
    }
    if(m_PushIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("push")), m_Push));
    }
    if(m_PullIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pull")), m_Pull));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
}

bool GithubRepositorypermissions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("admin"))))
    {
        bool refVal_setAdmin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("admin"))), refVal_setAdmin );
        setAdmin(refVal_setAdmin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("push"))))
    {
        bool refVal_setPush;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("push"))), refVal_setPush );
        setPush(refVal_setPush);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pull"))))
    {
        bool refVal_setPull;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pull"))), refVal_setPull );
        setPull(refVal_setPull);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    return ok;
}


bool GithubRepositorypermissions::isAdmin() const
{
    return m_Admin;
}

void GithubRepositorypermissions::setAdmin(bool value)
{
    m_Admin = value;
    m_AdminIsSet = true;
}

bool GithubRepositorypermissions::adminIsSet() const
{
    return m_AdminIsSet;
}

void GithubRepositorypermissions::unsetAdmin()
{
    m_AdminIsSet = false;
}
bool GithubRepositorypermissions::isPush() const
{
    return m_Push;
}

void GithubRepositorypermissions::setPush(bool value)
{
    m_Push = value;
    m_PushIsSet = true;
}

bool GithubRepositorypermissions::pushIsSet() const
{
    return m_PushIsSet;
}

void GithubRepositorypermissions::unsetPush()
{
    m_PushIsSet = false;
}
bool GithubRepositorypermissions::isPull() const
{
    return m_Pull;
}

void GithubRepositorypermissions::setPull(bool value)
{
    m_Pull = value;
    m_PullIsSet = true;
}

bool GithubRepositorypermissions::pullIsSet() const
{
    return m_PullIsSet;
}

void GithubRepositorypermissions::unsetPull()
{
    m_PullIsSet = false;
}
utility::string_t GithubRepositorypermissions::getClass() const
{
    return m__class;
}


void GithubRepositorypermissions::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool GithubRepositorypermissions::r_classIsSet() const
{
    return m__classIsSet;
}

void GithubRepositorypermissions::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}


