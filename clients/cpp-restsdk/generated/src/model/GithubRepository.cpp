/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GithubRepository.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GithubRepository::GithubRepository()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_DefaultBranch = utility::conversions::to_string_t("");
    m_DefaultBranchIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_PermissionsIsSet = false;
    m_r_private = false;
    m_r_privateIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
}

GithubRepository::~GithubRepository()
{
}

void GithubRepository::validate()
{
    // TODO: implement validation
}

web::json::value GithubRepository::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t(U("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_DefaultBranchIsSet)
    {
        val[utility::conversions::to_string_t(U("defaultBranch"))] = ModelBase::toJson(m_DefaultBranch);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_PermissionsIsSet)
    {
        val[utility::conversions::to_string_t(U("permissions"))] = ModelBase::toJson(m_Permissions);
    }
    if(m_r_privateIsSet)
    {
        val[utility::conversions::to_string_t(U("private"))] = ModelBase::toJson(m_r_private);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fullName"))] = ModelBase::toJson(m_FullName);
    }

    return val;
}

bool GithubRepository::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GithubRepositorylinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("defaultBranch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("defaultBranch")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDefaultBranch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultBranch);
            setDefaultBranch(refVal_setDefaultBranch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("permissions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("permissions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GithubRepositorypermissions> refVal_setPermissions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPermissions);
            setPermissions(refVal_setPermissions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("private"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("private")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRPrivate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRPrivate);
            setRPrivate(refVal_setRPrivate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullName);
            setFullName(refVal_setFullName);
        }
    }
    return ok;
}

void GithubRepository::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_links")), m__links));
    }
    if(m_DefaultBranchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("defaultBranch")), m_DefaultBranch));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_PermissionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("permissions")), m_Permissions));
    }
    if(m_r_privateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("private")), m_r_private));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullName")), m_FullName));
    }
}

bool GithubRepository::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_links"))))
    {
        std::shared_ptr<GithubRepositorylinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("defaultBranch"))))
    {
        utility::string_t refVal_setDefaultBranch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("defaultBranch"))), refVal_setDefaultBranch );
        setDefaultBranch(refVal_setDefaultBranch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("permissions"))))
    {
        std::shared_ptr<GithubRepositorypermissions> refVal_setPermissions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("permissions"))), refVal_setPermissions );
        setPermissions(refVal_setPermissions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("private"))))
    {
        bool refVal_setRPrivate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("private"))), refVal_setRPrivate );
        setRPrivate(refVal_setRPrivate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullName"))))
    {
        utility::string_t refVal_setFullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullName"))), refVal_setFullName );
        setFullName(refVal_setFullName);
    }
    return ok;
}

utility::string_t GithubRepository::getClass() const
{
    return m__class;
}

void GithubRepository::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool GithubRepository::r_classIsSet() const
{
    return m__classIsSet;
}

void GithubRepository::unset_class()
{
    m__classIsSet = false;
}
std::shared_ptr<GithubRepositorylinks> GithubRepository::getLinks() const
{
    return m__links;
}

void GithubRepository::setLinks(const std::shared_ptr<GithubRepositorylinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool GithubRepository::linksIsSet() const
{
    return m__linksIsSet;
}

void GithubRepository::unset_links()
{
    m__linksIsSet = false;
}
utility::string_t GithubRepository::getDefaultBranch() const
{
    return m_DefaultBranch;
}

void GithubRepository::setDefaultBranch(const utility::string_t& value)
{
    m_DefaultBranch = value;
    m_DefaultBranchIsSet = true;
}

bool GithubRepository::defaultBranchIsSet() const
{
    return m_DefaultBranchIsSet;
}

void GithubRepository::unsetDefaultBranch()
{
    m_DefaultBranchIsSet = false;
}
utility::string_t GithubRepository::getDescription() const
{
    return m_Description;
}

void GithubRepository::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool GithubRepository::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void GithubRepository::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t GithubRepository::getName() const
{
    return m_Name;
}

void GithubRepository::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GithubRepository::nameIsSet() const
{
    return m_NameIsSet;
}

void GithubRepository::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<GithubRepositorypermissions> GithubRepository::getPermissions() const
{
    return m_Permissions;
}

void GithubRepository::setPermissions(const std::shared_ptr<GithubRepositorypermissions>& value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}

bool GithubRepository::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}

void GithubRepository::unsetPermissions()
{
    m_PermissionsIsSet = false;
}
bool GithubRepository::isRPrivate() const
{
    return m_r_private;
}

void GithubRepository::setRPrivate(bool value)
{
    m_r_private = value;
    m_r_privateIsSet = true;
}

bool GithubRepository::rPrivateIsSet() const
{
    return m_r_privateIsSet;
}

void GithubRepository::unsetr_private()
{
    m_r_privateIsSet = false;
}
utility::string_t GithubRepository::getFullName() const
{
    return m_FullName;
}

void GithubRepository::setFullName(const utility::string_t& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}

bool GithubRepository::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void GithubRepository::unsetFullName()
{
    m_FullNameIsSet = false;
}
}
}
}
}


