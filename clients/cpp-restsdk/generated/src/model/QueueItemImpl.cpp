/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/QueueItemImpl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

QueueItemImpl::QueueItemImpl()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_ExpectedBuildNumber = 0;
    m_ExpectedBuildNumberIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Pipeline = utility::conversions::to_string_t("");
    m_PipelineIsSet = false;
    m_QueuedTime = 0;
    m_QueuedTimeIsSet = false;
}

QueueItemImpl::~QueueItemImpl()
{
}

void QueueItemImpl::validate()
{
    // TODO: implement validation
}

web::json::value QueueItemImpl::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m__classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_ExpectedBuildNumberIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("expectedBuildNumber"))] = ModelBase::toJson(m_ExpectedBuildNumber);
    }
    if(m_IdIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_PipelineIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("pipeline"))] = ModelBase::toJson(m_Pipeline);
    }
    if(m_QueuedTimeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("queuedTime"))] = ModelBase::toJson(m_QueuedTime);
    }

    return val;
}

bool QueueItemImpl::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expectedBuildNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expectedBuildNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setExpectedBuildNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpectedBuildNumber);
            setExpectedBuildNumber(refVal_setExpectedBuildNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pipeline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pipeline")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPipeline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPipeline);
            setPipeline(refVal_setPipeline);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("queuedTime"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("queuedTime")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setQueuedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQueuedTime);
            setQueuedTime(refVal_setQueuedTime);
            
        }
    }
    return ok;
}

void QueueItemImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_ExpectedBuildNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expectedBuildNumber")), m_ExpectedBuildNumber));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_PipelineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pipeline")), m_Pipeline));
    }
    if(m_QueuedTimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("queuedTime")), m_QueuedTime));
    }
}

bool QueueItemImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expectedBuildNumber"))))
    {
        int32_t refVal_setExpectedBuildNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expectedBuildNumber"))), refVal_setExpectedBuildNumber );
        setExpectedBuildNumber(refVal_setExpectedBuildNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pipeline"))))
    {
        utility::string_t refVal_setPipeline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pipeline"))), refVal_setPipeline );
        setPipeline(refVal_setPipeline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("queuedTime"))))
    {
        int32_t refVal_setQueuedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("queuedTime"))), refVal_setQueuedTime );
        setQueuedTime(refVal_setQueuedTime);
    }
    return ok;
}


utility::string_t QueueItemImpl::getClass() const
{
    return m__class;
}


void QueueItemImpl::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool QueueItemImpl::r_classIsSet() const
{
    return m__classIsSet;
}

void QueueItemImpl::unset_class()
{
    m__classIsSet = false;
}
int32_t QueueItemImpl::getExpectedBuildNumber() const
{
    return m_ExpectedBuildNumber;
}

void QueueItemImpl::setExpectedBuildNumber(int32_t value)
{
    m_ExpectedBuildNumber = value;
    m_ExpectedBuildNumberIsSet = true;
}

bool QueueItemImpl::expectedBuildNumberIsSet() const
{
    return m_ExpectedBuildNumberIsSet;
}

void QueueItemImpl::unsetExpectedBuildNumber()
{
    m_ExpectedBuildNumberIsSet = false;
}
utility::string_t QueueItemImpl::getId() const
{
    return m_Id;
}


void QueueItemImpl::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool QueueItemImpl::idIsSet() const
{
    return m_IdIsSet;
}

void QueueItemImpl::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t QueueItemImpl::getPipeline() const
{
    return m_Pipeline;
}


void QueueItemImpl::setPipeline(const utility::string_t& value)
{
    m_Pipeline = value;
    m_PipelineIsSet = true;
}

bool QueueItemImpl::pipelineIsSet() const
{
    return m_PipelineIsSet;
}

void QueueItemImpl::unsetPipeline()
{
    m_PipelineIsSet = false;
}
int32_t QueueItemImpl::getQueuedTime() const
{
    return m_QueuedTime;
}

void QueueItemImpl::setQueuedTime(int32_t value)
{
    m_QueuedTime = value;
    m_QueuedTimeIsSet = true;
}

bool QueueItemImpl::queuedTimeIsSet() const
{
    return m_QueuedTimeIsSet;
}

void QueueItemImpl::unsetQueuedTime()
{
    m_QueuedTimeIsSet = false;
}

}
}
}
}


