/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PipelineImpl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

PipelineImpl::PipelineImpl()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_EstimatedDurationInMillis = 0;
    m_EstimatedDurationInMillisIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_LatestRun = utility::conversions::to_string_t("");
    m_LatestRunIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Organization = utility::conversions::to_string_t("");
    m_OrganizationIsSet = false;
    m_WeatherScore = 0;
    m_WeatherScoreIsSet = false;
    m__linksIsSet = false;
}

PipelineImpl::~PipelineImpl()
{
}

void PipelineImpl::validate()
{
    // TODO: implement validation
}

web::json::value PipelineImpl::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m__classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_DisplayNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_DisplayName);
    }
    if(m_EstimatedDurationInMillisIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("estimatedDurationInMillis"))] = ModelBase::toJson(m_EstimatedDurationInMillis);
    }
    if(m_FullNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("fullName"))] = ModelBase::toJson(m_FullName);
    }
    if(m_LatestRunIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("latestRun"))] = ModelBase::toJson(m_LatestRun);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_OrganizationIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("organization"))] = ModelBase::toJson(m_Organization);
    }
    if(m_WeatherScoreIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("weatherScore"))] = ModelBase::toJson(m_WeatherScore);
    }
    if(m__linksIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_links"))] = ModelBase::toJson(m__links);
    }

    return val;
}

bool PipelineImpl::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("estimatedDurationInMillis"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("estimatedDurationInMillis")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEstimatedDurationInMillis;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEstimatedDurationInMillis);
            setEstimatedDurationInMillis(refVal_setEstimatedDurationInMillis);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullName);
            setFullName(refVal_setFullName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("latestRun"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("latestRun")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLatestRun;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLatestRun);
            setLatestRun(refVal_setLatestRun);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrganization;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrganization);
            setOrganization(refVal_setOrganization);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weatherScore"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weatherScore")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWeatherScore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeatherScore);
            setWeatherScore(refVal_setWeatherScore);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PipelineImpllinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
            
        }
    }
    return ok;
}

void PipelineImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_DisplayName));
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("estimatedDurationInMillis")), m_EstimatedDurationInMillis));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullName")), m_FullName));
    }
    if(m_LatestRunIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("latestRun")), m_LatestRun));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization")), m_Organization));
    }
    if(m_WeatherScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weatherScore")), m_WeatherScore));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_links")), m__links));
    }
}

bool PipelineImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("estimatedDurationInMillis"))))
    {
        int32_t refVal_setEstimatedDurationInMillis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("estimatedDurationInMillis"))), refVal_setEstimatedDurationInMillis );
        setEstimatedDurationInMillis(refVal_setEstimatedDurationInMillis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullName"))))
    {
        utility::string_t refVal_setFullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullName"))), refVal_setFullName );
        setFullName(refVal_setFullName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("latestRun"))))
    {
        utility::string_t refVal_setLatestRun;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("latestRun"))), refVal_setLatestRun );
        setLatestRun(refVal_setLatestRun);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization"))))
    {
        utility::string_t refVal_setOrganization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization"))), refVal_setOrganization );
        setOrganization(refVal_setOrganization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weatherScore"))))
    {
        int32_t refVal_setWeatherScore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weatherScore"))), refVal_setWeatherScore );
        setWeatherScore(refVal_setWeatherScore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_links"))))
    {
        std::shared_ptr<PipelineImpllinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    return ok;
}


utility::string_t PipelineImpl::getClass() const
{
    return m__class;
}


void PipelineImpl::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool PipelineImpl::r_classIsSet() const
{
    return m__classIsSet;
}

void PipelineImpl::unset_class()
{
    m__classIsSet = false;
}
utility::string_t PipelineImpl::getDisplayName() const
{
    return m_DisplayName;
}


void PipelineImpl::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool PipelineImpl::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void PipelineImpl::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
int32_t PipelineImpl::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}

void PipelineImpl::setEstimatedDurationInMillis(int32_t value)
{
    m_EstimatedDurationInMillis = value;
    m_EstimatedDurationInMillisIsSet = true;
}

bool PipelineImpl::estimatedDurationInMillisIsSet() const
{
    return m_EstimatedDurationInMillisIsSet;
}

void PipelineImpl::unsetEstimatedDurationInMillis()
{
    m_EstimatedDurationInMillisIsSet = false;
}
utility::string_t PipelineImpl::getFullName() const
{
    return m_FullName;
}


void PipelineImpl::setFullName(const utility::string_t& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}

bool PipelineImpl::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void PipelineImpl::unsetFullName()
{
    m_FullNameIsSet = false;
}
utility::string_t PipelineImpl::getLatestRun() const
{
    return m_LatestRun;
}


void PipelineImpl::setLatestRun(const utility::string_t& value)
{
    m_LatestRun = value;
    m_LatestRunIsSet = true;
}

bool PipelineImpl::latestRunIsSet() const
{
    return m_LatestRunIsSet;
}

void PipelineImpl::unsetLatestRun()
{
    m_LatestRunIsSet = false;
}
utility::string_t PipelineImpl::getName() const
{
    return m_Name;
}


void PipelineImpl::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool PipelineImpl::nameIsSet() const
{
    return m_NameIsSet;
}

void PipelineImpl::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t PipelineImpl::getOrganization() const
{
    return m_Organization;
}


void PipelineImpl::setOrganization(const utility::string_t& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool PipelineImpl::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void PipelineImpl::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
int32_t PipelineImpl::getWeatherScore() const
{
    return m_WeatherScore;
}

void PipelineImpl::setWeatherScore(int32_t value)
{
    m_WeatherScore = value;
    m_WeatherScoreIsSet = true;
}

bool PipelineImpl::weatherScoreIsSet() const
{
    return m_WeatherScoreIsSet;
}

void PipelineImpl::unsetWeatherScore()
{
    m_WeatherScoreIsSet = false;
}
std::shared_ptr<PipelineImpllinks> PipelineImpl::getLinks() const
{
    return m__links;
}


void PipelineImpl::setLinks(const std::shared_ptr<PipelineImpllinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool PipelineImpl::linksIsSet() const
{
    return m__linksIsSet;
}

void PipelineImpl::unset_links()
{
    m__linksIsSet = false;
}

}
}
}
}


