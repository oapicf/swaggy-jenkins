/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SwapSpaceMonitorMemoryUsage2.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



SwapSpaceMonitorMemoryUsage2::SwapSpaceMonitorMemoryUsage2()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_AvailablePhysicalMemory = 0;
    m_AvailablePhysicalMemoryIsSet = false;
    m_AvailableSwapSpace = 0;
    m_AvailableSwapSpaceIsSet = false;
    m_TotalPhysicalMemory = 0;
    m_TotalPhysicalMemoryIsSet = false;
    m_TotalSwapSpace = 0;
    m_TotalSwapSpaceIsSet = false;
}

SwapSpaceMonitorMemoryUsage2::~SwapSpaceMonitorMemoryUsage2()
{
}

void SwapSpaceMonitorMemoryUsage2::validate()
{
    // TODO: implement validation
}

web::json::value SwapSpaceMonitorMemoryUsage2::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_AvailablePhysicalMemoryIsSet)
    {
        val[utility::conversions::to_string_t(U("availablePhysicalMemory"))] = ModelBase::toJson(m_AvailablePhysicalMemory);
    }
    if(m_AvailableSwapSpaceIsSet)
    {
        val[utility::conversions::to_string_t(U("availableSwapSpace"))] = ModelBase::toJson(m_AvailableSwapSpace);
    }
    if(m_TotalPhysicalMemoryIsSet)
    {
        val[utility::conversions::to_string_t(U("totalPhysicalMemory"))] = ModelBase::toJson(m_TotalPhysicalMemory);
    }
    if(m_TotalSwapSpaceIsSet)
    {
        val[utility::conversions::to_string_t(U("totalSwapSpace"))] = ModelBase::toJson(m_TotalSwapSpace);
    }

    return val;
}

bool SwapSpaceMonitorMemoryUsage2::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availablePhysicalMemory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availablePhysicalMemory")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAvailablePhysicalMemory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvailablePhysicalMemory);
            setAvailablePhysicalMemory(refVal_setAvailablePhysicalMemory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availableSwapSpace"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availableSwapSpace")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAvailableSwapSpace;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvailableSwapSpace);
            setAvailableSwapSpace(refVal_setAvailableSwapSpace);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalPhysicalMemory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalPhysicalMemory")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalPhysicalMemory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalPhysicalMemory);
            setTotalPhysicalMemory(refVal_setTotalPhysicalMemory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalSwapSpace"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalSwapSpace")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalSwapSpace;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalSwapSpace);
            setTotalSwapSpace(refVal_setTotalSwapSpace);
        }
    }
    return ok;
}

void SwapSpaceMonitorMemoryUsage2::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_AvailablePhysicalMemoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availablePhysicalMemory")), m_AvailablePhysicalMemory));
    }
    if(m_AvailableSwapSpaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availableSwapSpace")), m_AvailableSwapSpace));
    }
    if(m_TotalPhysicalMemoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalPhysicalMemory")), m_TotalPhysicalMemory));
    }
    if(m_TotalSwapSpaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalSwapSpace")), m_TotalSwapSpace));
    }
}

bool SwapSpaceMonitorMemoryUsage2::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availablePhysicalMemory"))))
    {
        int32_t refVal_setAvailablePhysicalMemory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availablePhysicalMemory"))), refVal_setAvailablePhysicalMemory );
        setAvailablePhysicalMemory(refVal_setAvailablePhysicalMemory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availableSwapSpace"))))
    {
        int32_t refVal_setAvailableSwapSpace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availableSwapSpace"))), refVal_setAvailableSwapSpace );
        setAvailableSwapSpace(refVal_setAvailableSwapSpace);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalPhysicalMemory"))))
    {
        int32_t refVal_setTotalPhysicalMemory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalPhysicalMemory"))), refVal_setTotalPhysicalMemory );
        setTotalPhysicalMemory(refVal_setTotalPhysicalMemory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalSwapSpace"))))
    {
        int32_t refVal_setTotalSwapSpace;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalSwapSpace"))), refVal_setTotalSwapSpace );
        setTotalSwapSpace(refVal_setTotalSwapSpace);
    }
    return ok;
}

utility::string_t SwapSpaceMonitorMemoryUsage2::getClass() const
{
    return m__class;
}

void SwapSpaceMonitorMemoryUsage2::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool SwapSpaceMonitorMemoryUsage2::r_classIsSet() const
{
    return m__classIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unset_class()
{
    m__classIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getAvailablePhysicalMemory() const
{
    return m_AvailablePhysicalMemory;
}

void SwapSpaceMonitorMemoryUsage2::setAvailablePhysicalMemory(int32_t value)
{
    m_AvailablePhysicalMemory = value;
    m_AvailablePhysicalMemoryIsSet = true;
}

bool SwapSpaceMonitorMemoryUsage2::availablePhysicalMemoryIsSet() const
{
    return m_AvailablePhysicalMemoryIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unsetAvailablePhysicalMemory()
{
    m_AvailablePhysicalMemoryIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getAvailableSwapSpace() const
{
    return m_AvailableSwapSpace;
}

void SwapSpaceMonitorMemoryUsage2::setAvailableSwapSpace(int32_t value)
{
    m_AvailableSwapSpace = value;
    m_AvailableSwapSpaceIsSet = true;
}

bool SwapSpaceMonitorMemoryUsage2::availableSwapSpaceIsSet() const
{
    return m_AvailableSwapSpaceIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unsetAvailableSwapSpace()
{
    m_AvailableSwapSpaceIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getTotalPhysicalMemory() const
{
    return m_TotalPhysicalMemory;
}

void SwapSpaceMonitorMemoryUsage2::setTotalPhysicalMemory(int32_t value)
{
    m_TotalPhysicalMemory = value;
    m_TotalPhysicalMemoryIsSet = true;
}

bool SwapSpaceMonitorMemoryUsage2::totalPhysicalMemoryIsSet() const
{
    return m_TotalPhysicalMemoryIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unsetTotalPhysicalMemory()
{
    m_TotalPhysicalMemoryIsSet = false;
}
int32_t SwapSpaceMonitorMemoryUsage2::getTotalSwapSpace() const
{
    return m_TotalSwapSpace;
}

void SwapSpaceMonitorMemoryUsage2::setTotalSwapSpace(int32_t value)
{
    m_TotalSwapSpace = value;
    m_TotalSwapSpaceIsSet = true;
}

bool SwapSpaceMonitorMemoryUsage2::totalSwapSpaceIsSet() const
{
    return m_TotalSwapSpaceIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unsetTotalSwapSpace()
{
    m_TotalSwapSpaceIsSet = false;
}
}
}
}
}


