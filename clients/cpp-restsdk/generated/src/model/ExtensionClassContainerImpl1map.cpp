/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExtensionClassContainerImpl1map.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ExtensionClassContainerImpl1map::ExtensionClassContainerImpl1map()
{
    m_Io_jenkins_blueocean_service_embedded_rest_PipelineImplIsSet = false;
    m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImplIsSet = false;
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
}

ExtensionClassContainerImpl1map::~ExtensionClassContainerImpl1map()
{
}

void ExtensionClassContainerImpl1map::validate()
{
    // TODO: implement validation
}

web::json::value ExtensionClassContainerImpl1map::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_Io_jenkins_blueocean_service_embedded_rest_PipelineImplIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.PipelineImpl"))] = ModelBase::toJson(m_Io_jenkins_blueocean_service_embedded_rest_PipelineImpl);
    }
    if(m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImplIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl"))] = ModelBase::toJson(m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImpl);
    }
    if(m__classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }

    return val;
}

bool ExtensionClassContainerImpl1map::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.PipelineImpl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.PipelineImpl")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExtensionClassImpl> refVal_setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl);
            setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl(refVal_setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ExtensionClassImpl> refVal_setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl);
            setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl(refVal_setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
            
        }
    }
    return ok;
}

void ExtensionClassContainerImpl1map::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Io_jenkins_blueocean_service_embedded_rest_PipelineImplIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.PipelineImpl")), m_Io_jenkins_blueocean_service_embedded_rest_PipelineImpl));
    }
    if(m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImplIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl")), m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImpl));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
}

bool ExtensionClassContainerImpl1map::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.PipelineImpl"))))
    {
        std::shared_ptr<ExtensionClassImpl> refVal_setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.PipelineImpl"))), refVal_setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl );
        setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl(refVal_setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl"))))
    {
        std::shared_ptr<ExtensionClassImpl> refVal_setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl"))), refVal_setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl );
        setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl(refVal_setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    return ok;
}


std::shared_ptr<ExtensionClassImpl> ExtensionClassContainerImpl1map::getIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl() const
{
    return m_Io_jenkins_blueocean_service_embedded_rest_PipelineImpl;
}


void ExtensionClassContainerImpl1map::setIoJenkinsBlueoceanServiceEmbeddedRestPipelineImpl(const std::shared_ptr<ExtensionClassImpl>& value)
{
    m_Io_jenkins_blueocean_service_embedded_rest_PipelineImpl = value;
    m_Io_jenkins_blueocean_service_embedded_rest_PipelineImplIsSet = true;
}

bool ExtensionClassContainerImpl1map::ioJenkinsBlueoceanServiceEmbeddedRestPipelineImplIsSet() const
{
    return m_Io_jenkins_blueocean_service_embedded_rest_PipelineImplIsSet;
}

void ExtensionClassContainerImpl1map::unsetIo_jenkins_blueocean_service_embedded_rest_PipelineImpl()
{
    m_Io_jenkins_blueocean_service_embedded_rest_PipelineImplIsSet = false;
}
std::shared_ptr<ExtensionClassImpl> ExtensionClassContainerImpl1map::getIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl() const
{
    return m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImpl;
}


void ExtensionClassContainerImpl1map::setIoJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl(const std::shared_ptr<ExtensionClassImpl>& value)
{
    m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImpl = value;
    m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImplIsSet = true;
}

bool ExtensionClassContainerImpl1map::ioJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImplIsSet() const
{
    return m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImplIsSet;
}

void ExtensionClassContainerImpl1map::unsetIo_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImpl()
{
    m_Io_jenkins_blueocean_service_embedded_rest_MultiBranchPipelineImplIsSet = false;
}
utility::string_t ExtensionClassContainerImpl1map::getClass() const
{
    return m__class;
}


void ExtensionClassContainerImpl1map::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool ExtensionClassContainerImpl1map::r_classIsSet() const
{
    return m__classIsSet;
}

void ExtensionClassContainerImpl1map::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}


