/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GithubRepositories.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



GithubRepositories::GithubRepositories()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_ItemsIsSet = false;
    m_LastPage = 0;
    m_LastPageIsSet = false;
    m_NextPage = 0;
    m_NextPageIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
}

GithubRepositories::~GithubRepositories()
{
}

void GithubRepositories::validate()
{
    // TODO: implement validation
}

web::json::value GithubRepositories::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[utility::conversions::to_string_t(U("_links"))] = ModelBase::toJson(m__links);
    }
    if(m_ItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("items"))] = ModelBase::toJson(m_Items);
    }
    if(m_LastPageIsSet)
    {
        val[utility::conversions::to_string_t(U("lastPage"))] = ModelBase::toJson(m_LastPage);
    }
    if(m_NextPageIsSet)
    {
        val[utility::conversions::to_string_t(U("nextPage"))] = ModelBase::toJson(m_NextPage);
    }
    if(m_PageSizeIsSet)
    {
        val[utility::conversions::to_string_t(U("pageSize"))] = ModelBase::toJson(m_PageSize);
    }

    return val;
}

bool GithubRepositories::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_links")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GithubRepositorieslinks> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("items"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("items")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<GithubRepository>> refVal_setItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItems);
            setItems(refVal_setItems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastPage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastPage")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLastPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastPage);
            setLastPage(refVal_setLastPage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nextPage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nextPage")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNextPage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNextPage);
            setNextPage(refVal_setNextPage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pageSize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageSize")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageSize);
            setPageSize(refVal_setPageSize);
        }
    }
    return ok;
}

void GithubRepositories::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m__linksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_links")), m__links));
    }
    if(m_ItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("items")), m_Items));
    }
    if(m_LastPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastPage")), m_LastPage));
    }
    if(m_NextPageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nextPage")), m_NextPage));
    }
    if(m_PageSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageSize")), m_PageSize));
    }
}

bool GithubRepositories::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_links"))))
    {
        std::shared_ptr<GithubRepositorieslinks> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("items"))))
    {
        std::vector<std::shared_ptr<GithubRepository>> refVal_setItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("items"))), refVal_setItems );
        setItems(refVal_setItems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastPage"))))
    {
        int32_t refVal_setLastPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastPage"))), refVal_setLastPage );
        setLastPage(refVal_setLastPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nextPage"))))
    {
        int32_t refVal_setNextPage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nextPage"))), refVal_setNextPage );
        setNextPage(refVal_setNextPage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pageSize"))))
    {
        int32_t refVal_setPageSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageSize"))), refVal_setPageSize );
        setPageSize(refVal_setPageSize);
    }
    return ok;
}

utility::string_t GithubRepositories::getClass() const
{
    return m__class;
}

void GithubRepositories::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool GithubRepositories::r_classIsSet() const
{
    return m__classIsSet;
}

void GithubRepositories::unset_class()
{
    m__classIsSet = false;
}
std::shared_ptr<GithubRepositorieslinks> GithubRepositories::getLinks() const
{
    return m__links;
}

void GithubRepositories::setLinks(const std::shared_ptr<GithubRepositorieslinks>& value)
{
    m__links = value;
    m__linksIsSet = true;
}

bool GithubRepositories::linksIsSet() const
{
    return m__linksIsSet;
}

void GithubRepositories::unset_links()
{
    m__linksIsSet = false;
}
std::vector<std::shared_ptr<GithubRepository>>& GithubRepositories::getItems()
{
    return m_Items;
}

void GithubRepositories::setItems(const std::vector<std::shared_ptr<GithubRepository>>& value)
{
    m_Items = value;
    m_ItemsIsSet = true;
}

bool GithubRepositories::itemsIsSet() const
{
    return m_ItemsIsSet;
}

void GithubRepositories::unsetItems()
{
    m_ItemsIsSet = false;
}
int32_t GithubRepositories::getLastPage() const
{
    return m_LastPage;
}

void GithubRepositories::setLastPage(int32_t value)
{
    m_LastPage = value;
    m_LastPageIsSet = true;
}

bool GithubRepositories::lastPageIsSet() const
{
    return m_LastPageIsSet;
}

void GithubRepositories::unsetLastPage()
{
    m_LastPageIsSet = false;
}
int32_t GithubRepositories::getNextPage() const
{
    return m_NextPage;
}

void GithubRepositories::setNextPage(int32_t value)
{
    m_NextPage = value;
    m_NextPageIsSet = true;
}

bool GithubRepositories::nextPageIsSet() const
{
    return m_NextPageIsSet;
}

void GithubRepositories::unsetNextPage()
{
    m_NextPageIsSet = false;
}
int32_t GithubRepositories::getPageSize() const
{
    return m_PageSize;
}

void GithubRepositories::setPageSize(int32_t value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}

bool GithubRepositories::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}

void GithubRepositories::unsetPageSize()
{
    m_PageSizeIsSet = false;
}
}
}
}
}


