/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PipelineFolderImpl.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PipelineFolderImpl::PipelineFolderImpl()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Organization = utility::conversions::to_string_t("");
    m_OrganizationIsSet = false;
    m_NumberOfFolders = 0;
    m_NumberOfFoldersIsSet = false;
    m_NumberOfPipelines = 0;
    m_NumberOfPipelinesIsSet = false;
}

PipelineFolderImpl::~PipelineFolderImpl()
{
}

void PipelineFolderImpl::validate()
{
    // TODO: implement validation
}

web::json::value PipelineFolderImpl::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_DisplayName);
    }
    if(m_FullNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fullName"))] = ModelBase::toJson(m_FullName);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t(U("organization"))] = ModelBase::toJson(m_Organization);
    }
    if(m_NumberOfFoldersIsSet)
    {
        val[utility::conversions::to_string_t(U("numberOfFolders"))] = ModelBase::toJson(m_NumberOfFolders);
    }
    if(m_NumberOfPipelinesIsSet)
    {
        val[utility::conversions::to_string_t(U("numberOfPipelines"))] = ModelBase::toJson(m_NumberOfPipelines);
    }

    return val;
}

bool PipelineFolderImpl::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullName);
            setFullName(refVal_setFullName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("organization"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("organization")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrganization;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrganization);
            setOrganization(refVal_setOrganization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("numberOfFolders"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("numberOfFolders")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNumberOfFolders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumberOfFolders);
            setNumberOfFolders(refVal_setNumberOfFolders);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("numberOfPipelines"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("numberOfPipelines")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNumberOfPipelines;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumberOfPipelines);
            setNumberOfPipelines(refVal_setNumberOfPipelines);
        }
    }
    return ok;
}

void PipelineFolderImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_DisplayName));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullName")), m_FullName));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("organization")), m_Organization));
    }
    if(m_NumberOfFoldersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("numberOfFolders")), m_NumberOfFolders));
    }
    if(m_NumberOfPipelinesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("numberOfPipelines")), m_NumberOfPipelines));
    }
}

bool PipelineFolderImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullName"))))
    {
        utility::string_t refVal_setFullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullName"))), refVal_setFullName );
        setFullName(refVal_setFullName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("organization"))))
    {
        utility::string_t refVal_setOrganization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("organization"))), refVal_setOrganization );
        setOrganization(refVal_setOrganization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("numberOfFolders"))))
    {
        int32_t refVal_setNumberOfFolders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("numberOfFolders"))), refVal_setNumberOfFolders );
        setNumberOfFolders(refVal_setNumberOfFolders);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("numberOfPipelines"))))
    {
        int32_t refVal_setNumberOfPipelines;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("numberOfPipelines"))), refVal_setNumberOfPipelines );
        setNumberOfPipelines(refVal_setNumberOfPipelines);
    }
    return ok;
}

utility::string_t PipelineFolderImpl::getClass() const
{
    return m__class;
}

void PipelineFolderImpl::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool PipelineFolderImpl::r_classIsSet() const
{
    return m__classIsSet;
}

void PipelineFolderImpl::unset_class()
{
    m__classIsSet = false;
}
utility::string_t PipelineFolderImpl::getDisplayName() const
{
    return m_DisplayName;
}

void PipelineFolderImpl::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool PipelineFolderImpl::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void PipelineFolderImpl::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
utility::string_t PipelineFolderImpl::getFullName() const
{
    return m_FullName;
}

void PipelineFolderImpl::setFullName(const utility::string_t& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}

bool PipelineFolderImpl::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void PipelineFolderImpl::unsetFullName()
{
    m_FullNameIsSet = false;
}
utility::string_t PipelineFolderImpl::getName() const
{
    return m_Name;
}

void PipelineFolderImpl::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool PipelineFolderImpl::nameIsSet() const
{
    return m_NameIsSet;
}

void PipelineFolderImpl::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t PipelineFolderImpl::getOrganization() const
{
    return m_Organization;
}

void PipelineFolderImpl::setOrganization(const utility::string_t& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool PipelineFolderImpl::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void PipelineFolderImpl::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
int32_t PipelineFolderImpl::getNumberOfFolders() const
{
    return m_NumberOfFolders;
}

void PipelineFolderImpl::setNumberOfFolders(int32_t value)
{
    m_NumberOfFolders = value;
    m_NumberOfFoldersIsSet = true;
}

bool PipelineFolderImpl::numberOfFoldersIsSet() const
{
    return m_NumberOfFoldersIsSet;
}

void PipelineFolderImpl::unsetNumberOfFolders()
{
    m_NumberOfFoldersIsSet = false;
}
int32_t PipelineFolderImpl::getNumberOfPipelines() const
{
    return m_NumberOfPipelines;
}

void PipelineFolderImpl::setNumberOfPipelines(int32_t value)
{
    m_NumberOfPipelines = value;
    m_NumberOfPipelinesIsSet = true;
}

bool PipelineFolderImpl::numberOfPipelinesIsSet() const
{
    return m_NumberOfPipelinesIsSet;
}

void PipelineFolderImpl::unsetNumberOfPipelines()
{
    m_NumberOfPipelinesIsSet = false;
}
}
}
}
}


