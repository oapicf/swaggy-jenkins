/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/HudsonMasterComputer.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



HudsonMasterComputer::HudsonMasterComputer()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_ExecutorsIsSet = false;
    m_Icon = utility::conversions::to_string_t("");
    m_IconIsSet = false;
    m_IconClassName = utility::conversions::to_string_t("");
    m_IconClassNameIsSet = false;
    m_Idle = false;
    m_IdleIsSet = false;
    m_JnlpAgent = false;
    m_JnlpAgentIsSet = false;
    m_LaunchSupported = false;
    m_LaunchSupportedIsSet = false;
    m_LoadStatisticsIsSet = false;
    m_ManualLaunchAllowed = false;
    m_ManualLaunchAllowedIsSet = false;
    m_MonitorDataIsSet = false;
    m_NumExecutors = 0;
    m_NumExecutorsIsSet = false;
    m_Offline = false;
    m_OfflineIsSet = false;
    m_OfflineCause = utility::conversions::to_string_t("");
    m_OfflineCauseIsSet = false;
    m_OfflineCauseReason = utility::conversions::to_string_t("");
    m_OfflineCauseReasonIsSet = false;
    m_TemporarilyOffline = false;
    m_TemporarilyOfflineIsSet = false;
}

HudsonMasterComputer::~HudsonMasterComputer()
{
}

void HudsonMasterComputer::validate()
{
    // TODO: implement validation
}

web::json::value HudsonMasterComputer::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_DisplayName);
    }
    if(m_ExecutorsIsSet)
    {
        val[utility::conversions::to_string_t(U("executors"))] = ModelBase::toJson(m_Executors);
    }
    if(m_IconIsSet)
    {
        val[utility::conversions::to_string_t(U("icon"))] = ModelBase::toJson(m_Icon);
    }
    if(m_IconClassNameIsSet)
    {
        val[utility::conversions::to_string_t(U("iconClassName"))] = ModelBase::toJson(m_IconClassName);
    }
    if(m_IdleIsSet)
    {
        val[utility::conversions::to_string_t(U("idle"))] = ModelBase::toJson(m_Idle);
    }
    if(m_JnlpAgentIsSet)
    {
        val[utility::conversions::to_string_t(U("jnlpAgent"))] = ModelBase::toJson(m_JnlpAgent);
    }
    if(m_LaunchSupportedIsSet)
    {
        val[utility::conversions::to_string_t(U("launchSupported"))] = ModelBase::toJson(m_LaunchSupported);
    }
    if(m_LoadStatisticsIsSet)
    {
        val[utility::conversions::to_string_t(U("loadStatistics"))] = ModelBase::toJson(m_LoadStatistics);
    }
    if(m_ManualLaunchAllowedIsSet)
    {
        val[utility::conversions::to_string_t(U("manualLaunchAllowed"))] = ModelBase::toJson(m_ManualLaunchAllowed);
    }
    if(m_MonitorDataIsSet)
    {
        val[utility::conversions::to_string_t(U("monitorData"))] = ModelBase::toJson(m_MonitorData);
    }
    if(m_NumExecutorsIsSet)
    {
        val[utility::conversions::to_string_t(U("numExecutors"))] = ModelBase::toJson(m_NumExecutors);
    }
    if(m_OfflineIsSet)
    {
        val[utility::conversions::to_string_t(U("offline"))] = ModelBase::toJson(m_Offline);
    }
    if(m_OfflineCauseIsSet)
    {
        val[utility::conversions::to_string_t(U("offlineCause"))] = ModelBase::toJson(m_OfflineCause);
    }
    if(m_OfflineCauseReasonIsSet)
    {
        val[utility::conversions::to_string_t(U("offlineCauseReason"))] = ModelBase::toJson(m_OfflineCauseReason);
    }
    if(m_TemporarilyOfflineIsSet)
    {
        val[utility::conversions::to_string_t(U("temporarilyOffline"))] = ModelBase::toJson(m_TemporarilyOffline);
    }

    return val;
}

bool HudsonMasterComputer::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("executors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("executors")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> refVal_setExecutors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecutors);
            setExecutors(refVal_setExecutors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("icon"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("icon")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIcon;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIcon);
            setIcon(refVal_setIcon);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("iconClassName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iconClassName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIconClassName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIconClassName);
            setIconClassName(refVal_setIconClassName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("idle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("idle")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIdle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIdle);
            setIdle(refVal_setIdle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jnlpAgent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jnlpAgent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setJnlpAgent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJnlpAgent);
            setJnlpAgent(refVal_setJnlpAgent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("launchSupported"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("launchSupported")));
        if(!fieldValue.is_null())
        {
            bool refVal_setLaunchSupported;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLaunchSupported);
            setLaunchSupported(refVal_setLaunchSupported);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("loadStatistics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("loadStatistics")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Label1> refVal_setLoadStatistics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLoadStatistics);
            setLoadStatistics(refVal_setLoadStatistics);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("manualLaunchAllowed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("manualLaunchAllowed")));
        if(!fieldValue.is_null())
        {
            bool refVal_setManualLaunchAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setManualLaunchAllowed);
            setManualLaunchAllowed(refVal_setManualLaunchAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("monitorData"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("monitorData")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HudsonMasterComputermonitorData> refVal_setMonitorData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMonitorData);
            setMonitorData(refVal_setMonitorData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("numExecutors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("numExecutors")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNumExecutors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNumExecutors);
            setNumExecutors(refVal_setNumExecutors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offline")));
        if(!fieldValue.is_null())
        {
            bool refVal_setOffline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOffline);
            setOffline(refVal_setOffline);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offlineCause"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offlineCause")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfflineCause;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfflineCause);
            setOfflineCause(refVal_setOfflineCause);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("offlineCauseReason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("offlineCauseReason")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOfflineCauseReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOfflineCauseReason);
            setOfflineCauseReason(refVal_setOfflineCauseReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temporarilyOffline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temporarilyOffline")));
        if(!fieldValue.is_null())
        {
            bool refVal_setTemporarilyOffline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemporarilyOffline);
            setTemporarilyOffline(refVal_setTemporarilyOffline);
        }
    }
    return ok;
}

void HudsonMasterComputer::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_DisplayName));
    }
    if(m_ExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("executors")), m_Executors));
    }
    if(m_IconIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("icon")), m_Icon));
    }
    if(m_IconClassNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iconClassName")), m_IconClassName));
    }
    if(m_IdleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("idle")), m_Idle));
    }
    if(m_JnlpAgentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jnlpAgent")), m_JnlpAgent));
    }
    if(m_LaunchSupportedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("launchSupported")), m_LaunchSupported));
    }
    if(m_LoadStatisticsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("loadStatistics")), m_LoadStatistics));
    }
    if(m_ManualLaunchAllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("manualLaunchAllowed")), m_ManualLaunchAllowed));
    }
    if(m_MonitorDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("monitorData")), m_MonitorData));
    }
    if(m_NumExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("numExecutors")), m_NumExecutors));
    }
    if(m_OfflineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offline")), m_Offline));
    }
    if(m_OfflineCauseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offlineCause")), m_OfflineCause));
    }
    if(m_OfflineCauseReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("offlineCauseReason")), m_OfflineCauseReason));
    }
    if(m_TemporarilyOfflineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temporarilyOffline")), m_TemporarilyOffline));
    }
}

bool HudsonMasterComputer::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("executors"))))
    {
        std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> refVal_setExecutors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("executors"))), refVal_setExecutors );
        setExecutors(refVal_setExecutors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("icon"))))
    {
        utility::string_t refVal_setIcon;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("icon"))), refVal_setIcon );
        setIcon(refVal_setIcon);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("iconClassName"))))
    {
        utility::string_t refVal_setIconClassName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iconClassName"))), refVal_setIconClassName );
        setIconClassName(refVal_setIconClassName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("idle"))))
    {
        bool refVal_setIdle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("idle"))), refVal_setIdle );
        setIdle(refVal_setIdle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jnlpAgent"))))
    {
        bool refVal_setJnlpAgent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jnlpAgent"))), refVal_setJnlpAgent );
        setJnlpAgent(refVal_setJnlpAgent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("launchSupported"))))
    {
        bool refVal_setLaunchSupported;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("launchSupported"))), refVal_setLaunchSupported );
        setLaunchSupported(refVal_setLaunchSupported);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("loadStatistics"))))
    {
        std::shared_ptr<Label1> refVal_setLoadStatistics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("loadStatistics"))), refVal_setLoadStatistics );
        setLoadStatistics(refVal_setLoadStatistics);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("manualLaunchAllowed"))))
    {
        bool refVal_setManualLaunchAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("manualLaunchAllowed"))), refVal_setManualLaunchAllowed );
        setManualLaunchAllowed(refVal_setManualLaunchAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("monitorData"))))
    {
        std::shared_ptr<HudsonMasterComputermonitorData> refVal_setMonitorData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("monitorData"))), refVal_setMonitorData );
        setMonitorData(refVal_setMonitorData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("numExecutors"))))
    {
        int32_t refVal_setNumExecutors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("numExecutors"))), refVal_setNumExecutors );
        setNumExecutors(refVal_setNumExecutors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offline"))))
    {
        bool refVal_setOffline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offline"))), refVal_setOffline );
        setOffline(refVal_setOffline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offlineCause"))))
    {
        utility::string_t refVal_setOfflineCause;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offlineCause"))), refVal_setOfflineCause );
        setOfflineCause(refVal_setOfflineCause);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("offlineCauseReason"))))
    {
        utility::string_t refVal_setOfflineCauseReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("offlineCauseReason"))), refVal_setOfflineCauseReason );
        setOfflineCauseReason(refVal_setOfflineCauseReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temporarilyOffline"))))
    {
        bool refVal_setTemporarilyOffline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temporarilyOffline"))), refVal_setTemporarilyOffline );
        setTemporarilyOffline(refVal_setTemporarilyOffline);
    }
    return ok;
}

utility::string_t HudsonMasterComputer::getClass() const
{
    return m__class;
}

void HudsonMasterComputer::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool HudsonMasterComputer::r_classIsSet() const
{
    return m__classIsSet;
}

void HudsonMasterComputer::unset_class()
{
    m__classIsSet = false;
}
utility::string_t HudsonMasterComputer::getDisplayName() const
{
    return m_DisplayName;
}

void HudsonMasterComputer::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool HudsonMasterComputer::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void HudsonMasterComputer::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
std::vector<std::shared_ptr<HudsonMasterComputerexecutors>>& HudsonMasterComputer::getExecutors()
{
    return m_Executors;
}

void HudsonMasterComputer::setExecutors(const std::vector<std::shared_ptr<HudsonMasterComputerexecutors>>& value)
{
    m_Executors = value;
    m_ExecutorsIsSet = true;
}

bool HudsonMasterComputer::executorsIsSet() const
{
    return m_ExecutorsIsSet;
}

void HudsonMasterComputer::unsetExecutors()
{
    m_ExecutorsIsSet = false;
}
utility::string_t HudsonMasterComputer::getIcon() const
{
    return m_Icon;
}

void HudsonMasterComputer::setIcon(const utility::string_t& value)
{
    m_Icon = value;
    m_IconIsSet = true;
}

bool HudsonMasterComputer::iconIsSet() const
{
    return m_IconIsSet;
}

void HudsonMasterComputer::unsetIcon()
{
    m_IconIsSet = false;
}
utility::string_t HudsonMasterComputer::getIconClassName() const
{
    return m_IconClassName;
}

void HudsonMasterComputer::setIconClassName(const utility::string_t& value)
{
    m_IconClassName = value;
    m_IconClassNameIsSet = true;
}

bool HudsonMasterComputer::iconClassNameIsSet() const
{
    return m_IconClassNameIsSet;
}

void HudsonMasterComputer::unsetIconClassName()
{
    m_IconClassNameIsSet = false;
}
bool HudsonMasterComputer::isIdle() const
{
    return m_Idle;
}

void HudsonMasterComputer::setIdle(bool value)
{
    m_Idle = value;
    m_IdleIsSet = true;
}

bool HudsonMasterComputer::idleIsSet() const
{
    return m_IdleIsSet;
}

void HudsonMasterComputer::unsetIdle()
{
    m_IdleIsSet = false;
}
bool HudsonMasterComputer::isJnlpAgent() const
{
    return m_JnlpAgent;
}

void HudsonMasterComputer::setJnlpAgent(bool value)
{
    m_JnlpAgent = value;
    m_JnlpAgentIsSet = true;
}

bool HudsonMasterComputer::jnlpAgentIsSet() const
{
    return m_JnlpAgentIsSet;
}

void HudsonMasterComputer::unsetJnlpAgent()
{
    m_JnlpAgentIsSet = false;
}
bool HudsonMasterComputer::isLaunchSupported() const
{
    return m_LaunchSupported;
}

void HudsonMasterComputer::setLaunchSupported(bool value)
{
    m_LaunchSupported = value;
    m_LaunchSupportedIsSet = true;
}

bool HudsonMasterComputer::launchSupportedIsSet() const
{
    return m_LaunchSupportedIsSet;
}

void HudsonMasterComputer::unsetLaunchSupported()
{
    m_LaunchSupportedIsSet = false;
}
std::shared_ptr<Label1> HudsonMasterComputer::getLoadStatistics() const
{
    return m_LoadStatistics;
}

void HudsonMasterComputer::setLoadStatistics(const std::shared_ptr<Label1>& value)
{
    m_LoadStatistics = value;
    m_LoadStatisticsIsSet = true;
}

bool HudsonMasterComputer::loadStatisticsIsSet() const
{
    return m_LoadStatisticsIsSet;
}

void HudsonMasterComputer::unsetLoadStatistics()
{
    m_LoadStatisticsIsSet = false;
}
bool HudsonMasterComputer::isManualLaunchAllowed() const
{
    return m_ManualLaunchAllowed;
}

void HudsonMasterComputer::setManualLaunchAllowed(bool value)
{
    m_ManualLaunchAllowed = value;
    m_ManualLaunchAllowedIsSet = true;
}

bool HudsonMasterComputer::manualLaunchAllowedIsSet() const
{
    return m_ManualLaunchAllowedIsSet;
}

void HudsonMasterComputer::unsetManualLaunchAllowed()
{
    m_ManualLaunchAllowedIsSet = false;
}
std::shared_ptr<HudsonMasterComputermonitorData> HudsonMasterComputer::getMonitorData() const
{
    return m_MonitorData;
}

void HudsonMasterComputer::setMonitorData(const std::shared_ptr<HudsonMasterComputermonitorData>& value)
{
    m_MonitorData = value;
    m_MonitorDataIsSet = true;
}

bool HudsonMasterComputer::monitorDataIsSet() const
{
    return m_MonitorDataIsSet;
}

void HudsonMasterComputer::unsetMonitorData()
{
    m_MonitorDataIsSet = false;
}
int32_t HudsonMasterComputer::getNumExecutors() const
{
    return m_NumExecutors;
}

void HudsonMasterComputer::setNumExecutors(int32_t value)
{
    m_NumExecutors = value;
    m_NumExecutorsIsSet = true;
}

bool HudsonMasterComputer::numExecutorsIsSet() const
{
    return m_NumExecutorsIsSet;
}

void HudsonMasterComputer::unsetNumExecutors()
{
    m_NumExecutorsIsSet = false;
}
bool HudsonMasterComputer::isOffline() const
{
    return m_Offline;
}

void HudsonMasterComputer::setOffline(bool value)
{
    m_Offline = value;
    m_OfflineIsSet = true;
}

bool HudsonMasterComputer::offlineIsSet() const
{
    return m_OfflineIsSet;
}

void HudsonMasterComputer::unsetOffline()
{
    m_OfflineIsSet = false;
}
utility::string_t HudsonMasterComputer::getOfflineCause() const
{
    return m_OfflineCause;
}

void HudsonMasterComputer::setOfflineCause(const utility::string_t& value)
{
    m_OfflineCause = value;
    m_OfflineCauseIsSet = true;
}

bool HudsonMasterComputer::offlineCauseIsSet() const
{
    return m_OfflineCauseIsSet;
}

void HudsonMasterComputer::unsetOfflineCause()
{
    m_OfflineCauseIsSet = false;
}
utility::string_t HudsonMasterComputer::getOfflineCauseReason() const
{
    return m_OfflineCauseReason;
}

void HudsonMasterComputer::setOfflineCauseReason(const utility::string_t& value)
{
    m_OfflineCauseReason = value;
    m_OfflineCauseReasonIsSet = true;
}

bool HudsonMasterComputer::offlineCauseReasonIsSet() const
{
    return m_OfflineCauseReasonIsSet;
}

void HudsonMasterComputer::unsetOfflineCauseReason()
{
    m_OfflineCauseReasonIsSet = false;
}
bool HudsonMasterComputer::isTemporarilyOffline() const
{
    return m_TemporarilyOffline;
}

void HudsonMasterComputer::setTemporarilyOffline(bool value)
{
    m_TemporarilyOffline = value;
    m_TemporarilyOfflineIsSet = true;
}

bool HudsonMasterComputer::temporarilyOfflineIsSet() const
{
    return m_TemporarilyOfflineIsSet;
}

void HudsonMasterComputer::unsetTemporarilyOffline()
{
    m_TemporarilyOfflineIsSet = false;
}
}
}
}
}


