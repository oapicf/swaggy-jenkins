/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DefaultCrumbIssuer.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



DefaultCrumbIssuer::DefaultCrumbIssuer()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_Crumb = utility::conversions::to_string_t("");
    m_CrumbIsSet = false;
    m_CrumbRequestField = utility::conversions::to_string_t("");
    m_CrumbRequestFieldIsSet = false;
}

DefaultCrumbIssuer::~DefaultCrumbIssuer()
{
}

void DefaultCrumbIssuer::validate()
{
    // TODO: implement validation
}

web::json::value DefaultCrumbIssuer::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_CrumbIsSet)
    {
        val[utility::conversions::to_string_t(U("crumb"))] = ModelBase::toJson(m_Crumb);
    }
    if(m_CrumbRequestFieldIsSet)
    {
        val[utility::conversions::to_string_t(U("crumbRequestField"))] = ModelBase::toJson(m_CrumbRequestField);
    }

    return val;
}

bool DefaultCrumbIssuer::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("crumb"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("crumb")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCrumb;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCrumb);
            setCrumb(refVal_setCrumb);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("crumbRequestField"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("crumbRequestField")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCrumbRequestField;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCrumbRequestField);
            setCrumbRequestField(refVal_setCrumbRequestField);
        }
    }
    return ok;
}

void DefaultCrumbIssuer::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_CrumbIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("crumb")), m_Crumb));
    }
    if(m_CrumbRequestFieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("crumbRequestField")), m_CrumbRequestField));
    }
}

bool DefaultCrumbIssuer::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("crumb"))))
    {
        utility::string_t refVal_setCrumb;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("crumb"))), refVal_setCrumb );
        setCrumb(refVal_setCrumb);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("crumbRequestField"))))
    {
        utility::string_t refVal_setCrumbRequestField;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("crumbRequestField"))), refVal_setCrumbRequestField );
        setCrumbRequestField(refVal_setCrumbRequestField);
    }
    return ok;
}

utility::string_t DefaultCrumbIssuer::getClass() const
{
    return m__class;
}

void DefaultCrumbIssuer::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool DefaultCrumbIssuer::r_classIsSet() const
{
    return m__classIsSet;
}

void DefaultCrumbIssuer::unset_class()
{
    m__classIsSet = false;
}
utility::string_t DefaultCrumbIssuer::getCrumb() const
{
    return m_Crumb;
}

void DefaultCrumbIssuer::setCrumb(const utility::string_t& value)
{
    m_Crumb = value;
    m_CrumbIsSet = true;
}

bool DefaultCrumbIssuer::crumbIsSet() const
{
    return m_CrumbIsSet;
}

void DefaultCrumbIssuer::unsetCrumb()
{
    m_CrumbIsSet = false;
}
utility::string_t DefaultCrumbIssuer::getCrumbRequestField() const
{
    return m_CrumbRequestField;
}

void DefaultCrumbIssuer::setCrumbRequestField(const utility::string_t& value)
{
    m_CrumbRequestField = value;
    m_CrumbRequestFieldIsSet = true;
}

bool DefaultCrumbIssuer::crumbRequestFieldIsSet() const
{
    return m_CrumbRequestFieldIsSet;
}

void DefaultCrumbIssuer::unsetCrumbRequestField()
{
    m_CrumbRequestFieldIsSet = false;
}
}
}
}
}


