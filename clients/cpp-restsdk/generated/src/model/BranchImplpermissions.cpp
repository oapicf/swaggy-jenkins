/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BranchImplpermissions.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



BranchImplpermissions::BranchImplpermissions()
{
    m_Create = false;
    m_CreateIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
    m_Start = false;
    m_StartIsSet = false;
    m_Stop = false;
    m_StopIsSet = false;
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
}

BranchImplpermissions::~BranchImplpermissions()
{
}

void BranchImplpermissions::validate()
{
    // TODO: implement validation
}

web::json::value BranchImplpermissions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreateIsSet)
    {
        val[utility::conversions::to_string_t(U("create"))] = ModelBase::toJson(m_Create);
    }
    if(m_ReadIsSet)
    {
        val[utility::conversions::to_string_t(U("read"))] = ModelBase::toJson(m_Read);
    }
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t(U("start"))] = ModelBase::toJson(m_Start);
    }
    if(m_StopIsSet)
    {
        val[utility::conversions::to_string_t(U("stop"))] = ModelBase::toJson(m_Stop);
    }
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }

    return val;
}

bool BranchImplpermissions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("create"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("create")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCreate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreate);
            setCreate(refVal_setCreate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("read"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("read")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRead;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRead);
            setRead(refVal_setRead);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
            setStart(refVal_setStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stop"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stop")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStop;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStop);
            setStop(refVal_setStop);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
        }
    }
    return ok;
}

void BranchImplpermissions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("create")), m_Create));
    }
    if(m_ReadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("read")), m_Read));
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
    }
    if(m_StopIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stop")), m_Stop));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
}

bool BranchImplpermissions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("create"))))
    {
        bool refVal_setCreate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("create"))), refVal_setCreate );
        setCreate(refVal_setCreate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("read"))))
    {
        bool refVal_setRead;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("read"))), refVal_setRead );
        setRead(refVal_setRead);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start"))))
    {
        bool refVal_setStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start"))), refVal_setStart );
        setStart(refVal_setStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stop"))))
    {
        bool refVal_setStop;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stop"))), refVal_setStop );
        setStop(refVal_setStop);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    return ok;
}

bool BranchImplpermissions::isCreate() const
{
    return m_Create;
}

void BranchImplpermissions::setCreate(bool value)
{
    m_Create = value;
    m_CreateIsSet = true;
}

bool BranchImplpermissions::createIsSet() const
{
    return m_CreateIsSet;
}

void BranchImplpermissions::unsetCreate()
{
    m_CreateIsSet = false;
}
bool BranchImplpermissions::isRead() const
{
    return m_Read;
}

void BranchImplpermissions::setRead(bool value)
{
    m_Read = value;
    m_ReadIsSet = true;
}

bool BranchImplpermissions::readIsSet() const
{
    return m_ReadIsSet;
}

void BranchImplpermissions::unsetRead()
{
    m_ReadIsSet = false;
}
bool BranchImplpermissions::isStart() const
{
    return m_Start;
}

void BranchImplpermissions::setStart(bool value)
{
    m_Start = value;
    m_StartIsSet = true;
}

bool BranchImplpermissions::startIsSet() const
{
    return m_StartIsSet;
}

void BranchImplpermissions::unsetStart()
{
    m_StartIsSet = false;
}
bool BranchImplpermissions::isStop() const
{
    return m_Stop;
}

void BranchImplpermissions::setStop(bool value)
{
    m_Stop = value;
    m_StopIsSet = true;
}

bool BranchImplpermissions::stopIsSet() const
{
    return m_StopIsSet;
}

void BranchImplpermissions::unsetStop()
{
    m_StopIsSet = false;
}
utility::string_t BranchImplpermissions::getClass() const
{
    return m__class;
}

void BranchImplpermissions::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool BranchImplpermissions::r_classIsSet() const
{
    return m__classIsSet;
}

void BranchImplpermissions::unset_class()
{
    m__classIsSet = false;
}
}
}
}
}


