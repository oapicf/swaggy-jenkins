/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.4.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CauseAction.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



CauseAction::CauseAction()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_CausesIsSet = false;
}

CauseAction::~CauseAction()
{
}

void CauseAction::validate()
{
    // TODO: implement validation
}

web::json::value CauseAction::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m__classIsSet)
    {
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_CausesIsSet)
    {
        val[utility::conversions::to_string_t(U("causes"))] = ModelBase::toJson(m_Causes);
    }

    return val;
}

bool CauseAction::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("causes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("causes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<CauseUserIdCause>> refVal_setCauses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCauses);
            setCauses(refVal_setCauses);
        }
    }
    return ok;
}

void CauseAction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_CausesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("causes")), m_Causes));
    }
}

bool CauseAction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("causes"))))
    {
        std::vector<std::shared_ptr<CauseUserIdCause>> refVal_setCauses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("causes"))), refVal_setCauses );
        setCauses(refVal_setCauses);
    }
    return ok;
}

utility::string_t CauseAction::getClass() const
{
    return m__class;
}

void CauseAction::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool CauseAction::r_classIsSet() const
{
    return m__classIsSet;
}

void CauseAction::unset_class()
{
    m__classIsSet = false;
}
std::vector<std::shared_ptr<CauseUserIdCause>>& CauseAction::getCauses()
{
    return m_Causes;
}

void CauseAction::setCauses(const std::vector<std::shared_ptr<CauseUserIdCause>>& value)
{
    m_Causes = value;
    m_CausesIsSet = true;
}

bool CauseAction::causesIsSet() const
{
    return m_CausesIsSet;
}

void CauseAction::unsetCauses()
{
    m_CausesIsSet = false;
}
}
}
}
}


