/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/StringParameterDefinition.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

StringParameterDefinition::StringParameterDefinition()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_DefaultParameterValueIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
}

StringParameterDefinition::~StringParameterDefinition()
{
}

void StringParameterDefinition::validate()
{
    // TODO: implement validation
}

web::json::value StringParameterDefinition::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m__classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_DefaultParameterValueIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("defaultParameterValue"))] = ModelBase::toJson(m_DefaultParameterValue);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool StringParameterDefinition::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("defaultParameterValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("defaultParameterValue")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StringParameterValue> refVal_setDefaultParameterValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultParameterValue);
            setDefaultParameterValue(refVal_setDefaultParameterValue);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
            
        }
    }
    return ok;
}

void StringParameterDefinition::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_DefaultParameterValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("defaultParameterValue")), m_DefaultParameterValue));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
}

bool StringParameterDefinition::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("defaultParameterValue"))))
    {
        std::shared_ptr<StringParameterValue> refVal_setDefaultParameterValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("defaultParameterValue"))), refVal_setDefaultParameterValue );
        setDefaultParameterValue(refVal_setDefaultParameterValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    return ok;
}


utility::string_t StringParameterDefinition::getClass() const
{
    return m__class;
}


void StringParameterDefinition::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool StringParameterDefinition::r_classIsSet() const
{
    return m__classIsSet;
}

void StringParameterDefinition::unset_class()
{
    m__classIsSet = false;
}
std::shared_ptr<StringParameterValue> StringParameterDefinition::getDefaultParameterValue() const
{
    return m_DefaultParameterValue;
}


void StringParameterDefinition::setDefaultParameterValue(const std::shared_ptr<StringParameterValue>& value)
{
    m_DefaultParameterValue = value;
    m_DefaultParameterValueIsSet = true;
}

bool StringParameterDefinition::defaultParameterValueIsSet() const
{
    return m_DefaultParameterValueIsSet;
}

void StringParameterDefinition::unsetDefaultParameterValue()
{
    m_DefaultParameterValueIsSet = false;
}
utility::string_t StringParameterDefinition::getDescription() const
{
    return m_Description;
}


void StringParameterDefinition::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool StringParameterDefinition::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void StringParameterDefinition::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t StringParameterDefinition::getName() const
{
    return m_Name;
}


void StringParameterDefinition::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool StringParameterDefinition::nameIsSet() const
{
    return m_NameIsSet;
}

void StringParameterDefinition::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t StringParameterDefinition::getType() const
{
    return m_Type;
}


void StringParameterDefinition::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool StringParameterDefinition::typeIsSet() const
{
    return m_TypeIsSet;
}

void StringParameterDefinition::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}


