/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FreeStyleProjecthealthReport.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

FreeStyleProjecthealthReport::FreeStyleProjecthealthReport()
{
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_IconClassName = utility::conversions::to_string_t("");
    m_IconClassNameIsSet = false;
    m_IconUrl = utility::conversions::to_string_t("");
    m_IconUrlIsSet = false;
    m_Score = 0;
    m_ScoreIsSet = false;
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
}

FreeStyleProjecthealthReport::~FreeStyleProjecthealthReport()
{
}

void FreeStyleProjecthealthReport::validate()
{
    // TODO: implement validation
}

web::json::value FreeStyleProjecthealthReport::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_IconClassNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("iconClassName"))] = ModelBase::toJson(m_IconClassName);
    }
    if(m_IconUrlIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("iconUrl"))] = ModelBase::toJson(m_IconUrl);
    }
    if(m_ScoreIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("score"))] = ModelBase::toJson(m_Score);
    }
    if(m__classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }

    return val;
}

bool FreeStyleProjecthealthReport::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("iconClassName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iconClassName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIconClassName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIconClassName);
            setIconClassName(refVal_setIconClassName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("iconUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("iconUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIconUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIconUrl);
            setIconUrl(refVal_setIconUrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("score"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("score")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScore);
            setScore(refVal_setScore);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
            
        }
    }
    return ok;
}

void FreeStyleProjecthealthReport::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_IconClassNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iconClassName")), m_IconClassName));
    }
    if(m_IconUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("iconUrl")), m_IconUrl));
    }
    if(m_ScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("score")), m_Score));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
}

bool FreeStyleProjecthealthReport::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("iconClassName"))))
    {
        utility::string_t refVal_setIconClassName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iconClassName"))), refVal_setIconClassName );
        setIconClassName(refVal_setIconClassName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("iconUrl"))))
    {
        utility::string_t refVal_setIconUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("iconUrl"))), refVal_setIconUrl );
        setIconUrl(refVal_setIconUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("score"))))
    {
        int32_t refVal_setScore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("score"))), refVal_setScore );
        setScore(refVal_setScore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    return ok;
}


utility::string_t FreeStyleProjecthealthReport::getDescription() const
{
    return m_Description;
}


void FreeStyleProjecthealthReport::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool FreeStyleProjecthealthReport::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void FreeStyleProjecthealthReport::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t FreeStyleProjecthealthReport::getIconClassName() const
{
    return m_IconClassName;
}


void FreeStyleProjecthealthReport::setIconClassName(const utility::string_t& value)
{
    m_IconClassName = value;
    m_IconClassNameIsSet = true;
}

bool FreeStyleProjecthealthReport::iconClassNameIsSet() const
{
    return m_IconClassNameIsSet;
}

void FreeStyleProjecthealthReport::unsetIconClassName()
{
    m_IconClassNameIsSet = false;
}
utility::string_t FreeStyleProjecthealthReport::getIconUrl() const
{
    return m_IconUrl;
}


void FreeStyleProjecthealthReport::setIconUrl(const utility::string_t& value)
{
    m_IconUrl = value;
    m_IconUrlIsSet = true;
}

bool FreeStyleProjecthealthReport::iconUrlIsSet() const
{
    return m_IconUrlIsSet;
}

void FreeStyleProjecthealthReport::unsetIconUrl()
{
    m_IconUrlIsSet = false;
}
int32_t FreeStyleProjecthealthReport::getScore() const
{
    return m_Score;
}

void FreeStyleProjecthealthReport::setScore(int32_t value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}

bool FreeStyleProjecthealthReport::scoreIsSet() const
{
    return m_ScoreIsSet;
}

void FreeStyleProjecthealthReport::unsetScore()
{
    m_ScoreIsSet = false;
}
utility::string_t FreeStyleProjecthealthReport::getClass() const
{
    return m__class;
}


void FreeStyleProjecthealthReport::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool FreeStyleProjecthealthReport::r_classIsSet() const
{
    return m__classIsSet;
}

void FreeStyleProjecthealthReport::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}


