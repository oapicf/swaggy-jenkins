/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FreeStyleProject.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

FreeStyleProject::FreeStyleProject()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Color = utility::conversions::to_string_t("");
    m_ColorIsSet = false;
    m_ActionsIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_DisplayNameOrNull = utility::conversions::to_string_t("");
    m_DisplayNameOrNullIsSet = false;
    m_FullDisplayName = utility::conversions::to_string_t("");
    m_FullDisplayNameIsSet = false;
    m_FullName = utility::conversions::to_string_t("");
    m_FullNameIsSet = false;
    m_Buildable = false;
    m_BuildableIsSet = false;
    m_BuildsIsSet = false;
    m_FirstBuildIsSet = false;
    m_HealthReportIsSet = false;
    m_InQueue = false;
    m_InQueueIsSet = false;
    m_KeepDependencies = false;
    m_KeepDependenciesIsSet = false;
    m_LastBuildIsSet = false;
    m_LastCompletedBuildIsSet = false;
    m_LastFailedBuild = utility::conversions::to_string_t("");
    m_LastFailedBuildIsSet = false;
    m_LastStableBuildIsSet = false;
    m_LastSuccessfulBuildIsSet = false;
    m_LastUnstableBuild = utility::conversions::to_string_t("");
    m_LastUnstableBuildIsSet = false;
    m_LastUnsuccessfulBuild = utility::conversions::to_string_t("");
    m_LastUnsuccessfulBuildIsSet = false;
    m_NextBuildNumber = 0;
    m_NextBuildNumberIsSet = false;
    m_QueueItem = utility::conversions::to_string_t("");
    m_QueueItemIsSet = false;
    m_ConcurrentBuild = false;
    m_ConcurrentBuildIsSet = false;
    m_ScmIsSet = false;
}

FreeStyleProject::~FreeStyleProject()
{
}

void FreeStyleProject::validate()
{
    // TODO: implement validation
}

web::json::value FreeStyleProject::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m__classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_NameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_UrlIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_ColorIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("color"))] = ModelBase::toJson(m_Color);
    }
    if(m_ActionsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("actions"))] = ModelBase::toJson(m_Actions);
    }
    if(m_DescriptionIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_DisplayNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_DisplayName);
    }
    if(m_DisplayNameOrNullIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("displayNameOrNull"))] = ModelBase::toJson(m_DisplayNameOrNull);
    }
    if(m_FullDisplayNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("fullDisplayName"))] = ModelBase::toJson(m_FullDisplayName);
    }
    if(m_FullNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("fullName"))] = ModelBase::toJson(m_FullName);
    }
    if(m_BuildableIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("buildable"))] = ModelBase::toJson(m_Buildable);
    }
    if(m_BuildsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("builds"))] = ModelBase::toJson(m_Builds);
    }
    if(m_FirstBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("firstBuild"))] = ModelBase::toJson(m_FirstBuild);
    }
    if(m_HealthReportIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("healthReport"))] = ModelBase::toJson(m_HealthReport);
    }
    if(m_InQueueIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("inQueue"))] = ModelBase::toJson(m_InQueue);
    }
    if(m_KeepDependenciesIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("keepDependencies"))] = ModelBase::toJson(m_KeepDependencies);
    }
    if(m_LastBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lastBuild"))] = ModelBase::toJson(m_LastBuild);
    }
    if(m_LastCompletedBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lastCompletedBuild"))] = ModelBase::toJson(m_LastCompletedBuild);
    }
    if(m_LastFailedBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lastFailedBuild"))] = ModelBase::toJson(m_LastFailedBuild);
    }
    if(m_LastStableBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lastStableBuild"))] = ModelBase::toJson(m_LastStableBuild);
    }
    if(m_LastSuccessfulBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lastSuccessfulBuild"))] = ModelBase::toJson(m_LastSuccessfulBuild);
    }
    if(m_LastUnstableBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lastUnstableBuild"))] = ModelBase::toJson(m_LastUnstableBuild);
    }
    if(m_LastUnsuccessfulBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("lastUnsuccessfulBuild"))] = ModelBase::toJson(m_LastUnsuccessfulBuild);
    }
    if(m_NextBuildNumberIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("nextBuildNumber"))] = ModelBase::toJson(m_NextBuildNumber);
    }
    if(m_QueueItemIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("queueItem"))] = ModelBase::toJson(m_QueueItem);
    }
    if(m_ConcurrentBuildIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("concurrentBuild"))] = ModelBase::toJson(m_ConcurrentBuild);
    }
    if(m_ScmIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("scm"))] = ModelBase::toJson(m_Scm);
    }

    return val;
}

bool FreeStyleProject::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("color"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("color")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setColor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setColor);
            setColor(refVal_setColor);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("actions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("actions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FreeStyleProjectactions>> refVal_setActions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActions);
            setActions(refVal_setActions);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayNameOrNull"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayNameOrNull")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayNameOrNull;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayNameOrNull);
            setDisplayNameOrNull(refVal_setDisplayNameOrNull);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullDisplayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullDisplayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFullDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullDisplayName);
            setFullDisplayName(refVal_setFullDisplayName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fullName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fullName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFullName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFullName);
            setFullName(refVal_setFullName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("buildable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("buildable")));
        if(!fieldValue.is_null())
        {
            bool refVal_setBuildable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuildable);
            setBuildable(refVal_setBuildable);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("builds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("builds")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FreeStyleBuild>> refVal_setBuilds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBuilds);
            setBuilds(refVal_setBuilds);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("firstBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("firstBuild")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FreeStyleBuild> refVal_setFirstBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFirstBuild);
            setFirstBuild(refVal_setFirstBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("healthReport"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("healthReport")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> refVal_setHealthReport;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHealthReport);
            setHealthReport(refVal_setHealthReport);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inQueue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inQueue")));
        if(!fieldValue.is_null())
        {
            bool refVal_setInQueue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInQueue);
            setInQueue(refVal_setInQueue);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("keepDependencies"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("keepDependencies")));
        if(!fieldValue.is_null())
        {
            bool refVal_setKeepDependencies;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKeepDependencies);
            setKeepDependencies(refVal_setKeepDependencies);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastBuild")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FreeStyleBuild> refVal_setLastBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastBuild);
            setLastBuild(refVal_setLastBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastCompletedBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastCompletedBuild")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FreeStyleBuild> refVal_setLastCompletedBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastCompletedBuild);
            setLastCompletedBuild(refVal_setLastCompletedBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastFailedBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastFailedBuild")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastFailedBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastFailedBuild);
            setLastFailedBuild(refVal_setLastFailedBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastStableBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastStableBuild")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FreeStyleBuild> refVal_setLastStableBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastStableBuild);
            setLastStableBuild(refVal_setLastStableBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastSuccessfulBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastSuccessfulBuild")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FreeStyleBuild> refVal_setLastSuccessfulBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastSuccessfulBuild);
            setLastSuccessfulBuild(refVal_setLastSuccessfulBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastUnstableBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastUnstableBuild")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastUnstableBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastUnstableBuild);
            setLastUnstableBuild(refVal_setLastUnstableBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastUnsuccessfulBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastUnsuccessfulBuild")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastUnsuccessfulBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastUnsuccessfulBuild);
            setLastUnsuccessfulBuild(refVal_setLastUnsuccessfulBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nextBuildNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nextBuildNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNextBuildNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNextBuildNumber);
            setNextBuildNumber(refVal_setNextBuildNumber);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("queueItem"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("queueItem")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQueueItem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQueueItem);
            setQueueItem(refVal_setQueueItem);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("concurrentBuild"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("concurrentBuild")));
        if(!fieldValue.is_null())
        {
            bool refVal_setConcurrentBuild;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConcurrentBuild);
            setConcurrentBuild(refVal_setConcurrentBuild);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scm")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<NullSCM> refVal_setScm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScm);
            setScm(refVal_setScm);
            
        }
    }
    return ok;
}

void FreeStyleProject::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_ColorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("color")), m_Color));
    }
    if(m_ActionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("actions")), m_Actions));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_DisplayName));
    }
    if(m_DisplayNameOrNullIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayNameOrNull")), m_DisplayNameOrNull));
    }
    if(m_FullDisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullDisplayName")), m_FullDisplayName));
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fullName")), m_FullName));
    }
    if(m_BuildableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("buildable")), m_Buildable));
    }
    if(m_BuildsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("builds")), m_Builds));
    }
    if(m_FirstBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("firstBuild")), m_FirstBuild));
    }
    if(m_HealthReportIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("healthReport")), m_HealthReport));
    }
    if(m_InQueueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inQueue")), m_InQueue));
    }
    if(m_KeepDependenciesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("keepDependencies")), m_KeepDependencies));
    }
    if(m_LastBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastBuild")), m_LastBuild));
    }
    if(m_LastCompletedBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastCompletedBuild")), m_LastCompletedBuild));
    }
    if(m_LastFailedBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastFailedBuild")), m_LastFailedBuild));
    }
    if(m_LastStableBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastStableBuild")), m_LastStableBuild));
    }
    if(m_LastSuccessfulBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastSuccessfulBuild")), m_LastSuccessfulBuild));
    }
    if(m_LastUnstableBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastUnstableBuild")), m_LastUnstableBuild));
    }
    if(m_LastUnsuccessfulBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastUnsuccessfulBuild")), m_LastUnsuccessfulBuild));
    }
    if(m_NextBuildNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nextBuildNumber")), m_NextBuildNumber));
    }
    if(m_QueueItemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("queueItem")), m_QueueItem));
    }
    if(m_ConcurrentBuildIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("concurrentBuild")), m_ConcurrentBuild));
    }
    if(m_ScmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scm")), m_Scm));
    }
}

bool FreeStyleProject::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("color"))))
    {
        utility::string_t refVal_setColor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("color"))), refVal_setColor );
        setColor(refVal_setColor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("actions"))))
    {
        std::vector<std::shared_ptr<FreeStyleProjectactions>> refVal_setActions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("actions"))), refVal_setActions );
        setActions(refVal_setActions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayNameOrNull"))))
    {
        utility::string_t refVal_setDisplayNameOrNull;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayNameOrNull"))), refVal_setDisplayNameOrNull );
        setDisplayNameOrNull(refVal_setDisplayNameOrNull);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullDisplayName"))))
    {
        utility::string_t refVal_setFullDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullDisplayName"))), refVal_setFullDisplayName );
        setFullDisplayName(refVal_setFullDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fullName"))))
    {
        utility::string_t refVal_setFullName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fullName"))), refVal_setFullName );
        setFullName(refVal_setFullName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("buildable"))))
    {
        bool refVal_setBuildable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("buildable"))), refVal_setBuildable );
        setBuildable(refVal_setBuildable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("builds"))))
    {
        std::vector<std::shared_ptr<FreeStyleBuild>> refVal_setBuilds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("builds"))), refVal_setBuilds );
        setBuilds(refVal_setBuilds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("firstBuild"))))
    {
        std::shared_ptr<FreeStyleBuild> refVal_setFirstBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("firstBuild"))), refVal_setFirstBuild );
        setFirstBuild(refVal_setFirstBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("healthReport"))))
    {
        std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> refVal_setHealthReport;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("healthReport"))), refVal_setHealthReport );
        setHealthReport(refVal_setHealthReport);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inQueue"))))
    {
        bool refVal_setInQueue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inQueue"))), refVal_setInQueue );
        setInQueue(refVal_setInQueue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("keepDependencies"))))
    {
        bool refVal_setKeepDependencies;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("keepDependencies"))), refVal_setKeepDependencies );
        setKeepDependencies(refVal_setKeepDependencies);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastBuild"))))
    {
        std::shared_ptr<FreeStyleBuild> refVal_setLastBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastBuild"))), refVal_setLastBuild );
        setLastBuild(refVal_setLastBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastCompletedBuild"))))
    {
        std::shared_ptr<FreeStyleBuild> refVal_setLastCompletedBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastCompletedBuild"))), refVal_setLastCompletedBuild );
        setLastCompletedBuild(refVal_setLastCompletedBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastFailedBuild"))))
    {
        utility::string_t refVal_setLastFailedBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastFailedBuild"))), refVal_setLastFailedBuild );
        setLastFailedBuild(refVal_setLastFailedBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastStableBuild"))))
    {
        std::shared_ptr<FreeStyleBuild> refVal_setLastStableBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastStableBuild"))), refVal_setLastStableBuild );
        setLastStableBuild(refVal_setLastStableBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastSuccessfulBuild"))))
    {
        std::shared_ptr<FreeStyleBuild> refVal_setLastSuccessfulBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastSuccessfulBuild"))), refVal_setLastSuccessfulBuild );
        setLastSuccessfulBuild(refVal_setLastSuccessfulBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastUnstableBuild"))))
    {
        utility::string_t refVal_setLastUnstableBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastUnstableBuild"))), refVal_setLastUnstableBuild );
        setLastUnstableBuild(refVal_setLastUnstableBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastUnsuccessfulBuild"))))
    {
        utility::string_t refVal_setLastUnsuccessfulBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastUnsuccessfulBuild"))), refVal_setLastUnsuccessfulBuild );
        setLastUnsuccessfulBuild(refVal_setLastUnsuccessfulBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nextBuildNumber"))))
    {
        int32_t refVal_setNextBuildNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nextBuildNumber"))), refVal_setNextBuildNumber );
        setNextBuildNumber(refVal_setNextBuildNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("queueItem"))))
    {
        utility::string_t refVal_setQueueItem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("queueItem"))), refVal_setQueueItem );
        setQueueItem(refVal_setQueueItem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("concurrentBuild"))))
    {
        bool refVal_setConcurrentBuild;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("concurrentBuild"))), refVal_setConcurrentBuild );
        setConcurrentBuild(refVal_setConcurrentBuild);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scm"))))
    {
        std::shared_ptr<NullSCM> refVal_setScm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scm"))), refVal_setScm );
        setScm(refVal_setScm);
    }
    return ok;
}


utility::string_t FreeStyleProject::getClass() const
{
    return m__class;
}


void FreeStyleProject::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool FreeStyleProject::r_classIsSet() const
{
    return m__classIsSet;
}

void FreeStyleProject::unset_class()
{
    m__classIsSet = false;
}
utility::string_t FreeStyleProject::getName() const
{
    return m_Name;
}


void FreeStyleProject::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool FreeStyleProject::nameIsSet() const
{
    return m_NameIsSet;
}

void FreeStyleProject::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t FreeStyleProject::getUrl() const
{
    return m_Url;
}


void FreeStyleProject::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool FreeStyleProject::urlIsSet() const
{
    return m_UrlIsSet;
}

void FreeStyleProject::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t FreeStyleProject::getColor() const
{
    return m_Color;
}


void FreeStyleProject::setColor(const utility::string_t& value)
{
    m_Color = value;
    m_ColorIsSet = true;
}

bool FreeStyleProject::colorIsSet() const
{
    return m_ColorIsSet;
}

void FreeStyleProject::unsetColor()
{
    m_ColorIsSet = false;
}
std::vector<std::shared_ptr<FreeStyleProjectactions>> FreeStyleProject::getActions() const
{
    return m_Actions;
}


void FreeStyleProject::setActions(const std::vector<std::shared_ptr<FreeStyleProjectactions>>& value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}

bool FreeStyleProject::actionsIsSet() const
{
    return m_ActionsIsSet;
}

void FreeStyleProject::unsetActions()
{
    m_ActionsIsSet = false;
}
utility::string_t FreeStyleProject::getDescription() const
{
    return m_Description;
}


void FreeStyleProject::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool FreeStyleProject::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void FreeStyleProject::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t FreeStyleProject::getDisplayName() const
{
    return m_DisplayName;
}


void FreeStyleProject::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool FreeStyleProject::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void FreeStyleProject::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
utility::string_t FreeStyleProject::getDisplayNameOrNull() const
{
    return m_DisplayNameOrNull;
}


void FreeStyleProject::setDisplayNameOrNull(const utility::string_t& value)
{
    m_DisplayNameOrNull = value;
    m_DisplayNameOrNullIsSet = true;
}

bool FreeStyleProject::displayNameOrNullIsSet() const
{
    return m_DisplayNameOrNullIsSet;
}

void FreeStyleProject::unsetDisplayNameOrNull()
{
    m_DisplayNameOrNullIsSet = false;
}
utility::string_t FreeStyleProject::getFullDisplayName() const
{
    return m_FullDisplayName;
}


void FreeStyleProject::setFullDisplayName(const utility::string_t& value)
{
    m_FullDisplayName = value;
    m_FullDisplayNameIsSet = true;
}

bool FreeStyleProject::fullDisplayNameIsSet() const
{
    return m_FullDisplayNameIsSet;
}

void FreeStyleProject::unsetFullDisplayName()
{
    m_FullDisplayNameIsSet = false;
}
utility::string_t FreeStyleProject::getFullName() const
{
    return m_FullName;
}


void FreeStyleProject::setFullName(const utility::string_t& value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}

bool FreeStyleProject::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void FreeStyleProject::unsetFullName()
{
    m_FullNameIsSet = false;
}
bool FreeStyleProject::isBuildable() const
{
    return m_Buildable;
}

void FreeStyleProject::setBuildable(bool value)
{
    m_Buildable = value;
    m_BuildableIsSet = true;
}

bool FreeStyleProject::buildableIsSet() const
{
    return m_BuildableIsSet;
}

void FreeStyleProject::unsetBuildable()
{
    m_BuildableIsSet = false;
}
std::vector<std::shared_ptr<FreeStyleBuild>> FreeStyleProject::getBuilds() const
{
    return m_Builds;
}


void FreeStyleProject::setBuilds(const std::vector<std::shared_ptr<FreeStyleBuild>>& value)
{
    m_Builds = value;
    m_BuildsIsSet = true;
}

bool FreeStyleProject::buildsIsSet() const
{
    return m_BuildsIsSet;
}

void FreeStyleProject::unsetBuilds()
{
    m_BuildsIsSet = false;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getFirstBuild() const
{
    return m_FirstBuild;
}


void FreeStyleProject::setFirstBuild(const std::shared_ptr<FreeStyleBuild>& value)
{
    m_FirstBuild = value;
    m_FirstBuildIsSet = true;
}

bool FreeStyleProject::firstBuildIsSet() const
{
    return m_FirstBuildIsSet;
}

void FreeStyleProject::unsetFirstBuild()
{
    m_FirstBuildIsSet = false;
}
std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> FreeStyleProject::getHealthReport() const
{
    return m_HealthReport;
}


void FreeStyleProject::setHealthReport(const std::vector<std::shared_ptr<FreeStyleProjecthealthReport>>& value)
{
    m_HealthReport = value;
    m_HealthReportIsSet = true;
}

bool FreeStyleProject::healthReportIsSet() const
{
    return m_HealthReportIsSet;
}

void FreeStyleProject::unsetHealthReport()
{
    m_HealthReportIsSet = false;
}
bool FreeStyleProject::isInQueue() const
{
    return m_InQueue;
}

void FreeStyleProject::setInQueue(bool value)
{
    m_InQueue = value;
    m_InQueueIsSet = true;
}

bool FreeStyleProject::inQueueIsSet() const
{
    return m_InQueueIsSet;
}

void FreeStyleProject::unsetInQueue()
{
    m_InQueueIsSet = false;
}
bool FreeStyleProject::isKeepDependencies() const
{
    return m_KeepDependencies;
}

void FreeStyleProject::setKeepDependencies(bool value)
{
    m_KeepDependencies = value;
    m_KeepDependenciesIsSet = true;
}

bool FreeStyleProject::keepDependenciesIsSet() const
{
    return m_KeepDependenciesIsSet;
}

void FreeStyleProject::unsetKeepDependencies()
{
    m_KeepDependenciesIsSet = false;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastBuild() const
{
    return m_LastBuild;
}


void FreeStyleProject::setLastBuild(const std::shared_ptr<FreeStyleBuild>& value)
{
    m_LastBuild = value;
    m_LastBuildIsSet = true;
}

bool FreeStyleProject::lastBuildIsSet() const
{
    return m_LastBuildIsSet;
}

void FreeStyleProject::unsetLastBuild()
{
    m_LastBuildIsSet = false;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastCompletedBuild() const
{
    return m_LastCompletedBuild;
}


void FreeStyleProject::setLastCompletedBuild(const std::shared_ptr<FreeStyleBuild>& value)
{
    m_LastCompletedBuild = value;
    m_LastCompletedBuildIsSet = true;
}

bool FreeStyleProject::lastCompletedBuildIsSet() const
{
    return m_LastCompletedBuildIsSet;
}

void FreeStyleProject::unsetLastCompletedBuild()
{
    m_LastCompletedBuildIsSet = false;
}
utility::string_t FreeStyleProject::getLastFailedBuild() const
{
    return m_LastFailedBuild;
}


void FreeStyleProject::setLastFailedBuild(const utility::string_t& value)
{
    m_LastFailedBuild = value;
    m_LastFailedBuildIsSet = true;
}

bool FreeStyleProject::lastFailedBuildIsSet() const
{
    return m_LastFailedBuildIsSet;
}

void FreeStyleProject::unsetLastFailedBuild()
{
    m_LastFailedBuildIsSet = false;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastStableBuild() const
{
    return m_LastStableBuild;
}


void FreeStyleProject::setLastStableBuild(const std::shared_ptr<FreeStyleBuild>& value)
{
    m_LastStableBuild = value;
    m_LastStableBuildIsSet = true;
}

bool FreeStyleProject::lastStableBuildIsSet() const
{
    return m_LastStableBuildIsSet;
}

void FreeStyleProject::unsetLastStableBuild()
{
    m_LastStableBuildIsSet = false;
}
std::shared_ptr<FreeStyleBuild> FreeStyleProject::getLastSuccessfulBuild() const
{
    return m_LastSuccessfulBuild;
}


void FreeStyleProject::setLastSuccessfulBuild(const std::shared_ptr<FreeStyleBuild>& value)
{
    m_LastSuccessfulBuild = value;
    m_LastSuccessfulBuildIsSet = true;
}

bool FreeStyleProject::lastSuccessfulBuildIsSet() const
{
    return m_LastSuccessfulBuildIsSet;
}

void FreeStyleProject::unsetLastSuccessfulBuild()
{
    m_LastSuccessfulBuildIsSet = false;
}
utility::string_t FreeStyleProject::getLastUnstableBuild() const
{
    return m_LastUnstableBuild;
}


void FreeStyleProject::setLastUnstableBuild(const utility::string_t& value)
{
    m_LastUnstableBuild = value;
    m_LastUnstableBuildIsSet = true;
}

bool FreeStyleProject::lastUnstableBuildIsSet() const
{
    return m_LastUnstableBuildIsSet;
}

void FreeStyleProject::unsetLastUnstableBuild()
{
    m_LastUnstableBuildIsSet = false;
}
utility::string_t FreeStyleProject::getLastUnsuccessfulBuild() const
{
    return m_LastUnsuccessfulBuild;
}


void FreeStyleProject::setLastUnsuccessfulBuild(const utility::string_t& value)
{
    m_LastUnsuccessfulBuild = value;
    m_LastUnsuccessfulBuildIsSet = true;
}

bool FreeStyleProject::lastUnsuccessfulBuildIsSet() const
{
    return m_LastUnsuccessfulBuildIsSet;
}

void FreeStyleProject::unsetLastUnsuccessfulBuild()
{
    m_LastUnsuccessfulBuildIsSet = false;
}
int32_t FreeStyleProject::getNextBuildNumber() const
{
    return m_NextBuildNumber;
}

void FreeStyleProject::setNextBuildNumber(int32_t value)
{
    m_NextBuildNumber = value;
    m_NextBuildNumberIsSet = true;
}

bool FreeStyleProject::nextBuildNumberIsSet() const
{
    return m_NextBuildNumberIsSet;
}

void FreeStyleProject::unsetNextBuildNumber()
{
    m_NextBuildNumberIsSet = false;
}
utility::string_t FreeStyleProject::getQueueItem() const
{
    return m_QueueItem;
}


void FreeStyleProject::setQueueItem(const utility::string_t& value)
{
    m_QueueItem = value;
    m_QueueItemIsSet = true;
}

bool FreeStyleProject::queueItemIsSet() const
{
    return m_QueueItemIsSet;
}

void FreeStyleProject::unsetQueueItem()
{
    m_QueueItemIsSet = false;
}
bool FreeStyleProject::isConcurrentBuild() const
{
    return m_ConcurrentBuild;
}

void FreeStyleProject::setConcurrentBuild(bool value)
{
    m_ConcurrentBuild = value;
    m_ConcurrentBuildIsSet = true;
}

bool FreeStyleProject::concurrentBuildIsSet() const
{
    return m_ConcurrentBuildIsSet;
}

void FreeStyleProject::unsetConcurrentBuild()
{
    m_ConcurrentBuildIsSet = false;
}
std::shared_ptr<NullSCM> FreeStyleProject::getScm() const
{
    return m_Scm;
}


void FreeStyleProject::setScm(const std::shared_ptr<NullSCM>& value)
{
    m_Scm = value;
    m_ScmIsSet = true;
}

bool FreeStyleProject::scmIsSet() const
{
    return m_ScmIsSet;
}

void FreeStyleProject::unsetScm()
{
    m_ScmIsSet = false;
}

}
}
}
}


