/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ComputerSet.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

ComputerSet::ComputerSet()
{
    m__class = utility::conversions::to_string_t("");
    m__classIsSet = false;
    m_BusyExecutors = 0;
    m_BusyExecutorsIsSet = false;
    m_ComputerIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_TotalExecutors = 0;
    m_TotalExecutorsIsSet = false;
}

ComputerSet::~ComputerSet()
{
}

void ComputerSet::validate()
{
    // TODO: implement validation
}

web::json::value ComputerSet::toJson() const
{
    web::json::value val = web::json::value::object();
    if(m__classIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("_class"))] = ModelBase::toJson(m__class);
    }
    if(m_BusyExecutorsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("busyExecutors"))] = ModelBase::toJson(m_BusyExecutors);
    }
    if(m_ComputerIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("computer"))] = ModelBase::toJson(m_Computer);
    }
    if(m_DisplayNameIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_DisplayName);
    }
    if(m_TotalExecutorsIsSet)
    {   
        
        val[utility::conversions::to_string_t(U("totalExecutors"))] = ModelBase::toJson(m_TotalExecutors);
    }

    return val;
}

bool ComputerSet::fromJson(const web::json::value& val)
{
    bool ok = true;
    if(val.has_field(utility::conversions::to_string_t(U("_class"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("_class")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClass;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClass);
            setClass(refVal_setClass);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("busyExecutors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("busyExecutors")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBusyExecutors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBusyExecutors);
            setBusyExecutors(refVal_setBusyExecutors);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("computer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("computer")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<HudsonMasterComputer>> refVal_setComputer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComputer);
            setComputer(refVal_setComputer);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
            
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalExecutors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalExecutors")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalExecutors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalExecutors);
            setTotalExecutors(refVal_setTotalExecutors);
            
        }
    }
    return ok;
}

void ComputerSet::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("_class")), m__class));
    }
    if(m_BusyExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("busyExecutors")), m_BusyExecutors));
    }
    if(m_ComputerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("computer")), m_Computer));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_DisplayName));
    }
    if(m_TotalExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalExecutors")), m_TotalExecutors));
    }
}

bool ComputerSet::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("_class"))))
    {
        utility::string_t refVal_setClass;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("_class"))), refVal_setClass );
        setClass(refVal_setClass);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("busyExecutors"))))
    {
        int32_t refVal_setBusyExecutors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("busyExecutors"))), refVal_setBusyExecutors );
        setBusyExecutors(refVal_setBusyExecutors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("computer"))))
    {
        std::vector<std::shared_ptr<HudsonMasterComputer>> refVal_setComputer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("computer"))), refVal_setComputer );
        setComputer(refVal_setComputer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalExecutors"))))
    {
        int32_t refVal_setTotalExecutors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalExecutors"))), refVal_setTotalExecutors );
        setTotalExecutors(refVal_setTotalExecutors);
    }
    return ok;
}


utility::string_t ComputerSet::getClass() const
{
    return m__class;
}


void ComputerSet::setClass(const utility::string_t& value)
{
    m__class = value;
    m__classIsSet = true;
}

bool ComputerSet::r_classIsSet() const
{
    return m__classIsSet;
}

void ComputerSet::unset_class()
{
    m__classIsSet = false;
}
int32_t ComputerSet::getBusyExecutors() const
{
    return m_BusyExecutors;
}

void ComputerSet::setBusyExecutors(int32_t value)
{
    m_BusyExecutors = value;
    m_BusyExecutorsIsSet = true;
}

bool ComputerSet::busyExecutorsIsSet() const
{
    return m_BusyExecutorsIsSet;
}

void ComputerSet::unsetBusyExecutors()
{
    m_BusyExecutorsIsSet = false;
}
std::vector<std::shared_ptr<HudsonMasterComputer>> ComputerSet::getComputer() const
{
    return m_Computer;
}


void ComputerSet::setComputer(const std::vector<std::shared_ptr<HudsonMasterComputer>>& value)
{
    m_Computer = value;
    m_ComputerIsSet = true;
}

bool ComputerSet::computerIsSet() const
{
    return m_ComputerIsSet;
}

void ComputerSet::unsetComputer()
{
    m_ComputerIsSet = false;
}
utility::string_t ComputerSet::getDisplayName() const
{
    return m_DisplayName;
}


void ComputerSet::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool ComputerSet::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void ComputerSet::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
int32_t ComputerSet::getTotalExecutors() const
{
    return m_TotalExecutors;
}

void ComputerSet::setTotalExecutors(int32_t value)
{
    m_TotalExecutors = value;
    m_TotalExecutorsIsSet = true;
}

bool ComputerSet::totalExecutorsIsSet() const
{
    return m_TotalExecutorsIsSet;
}

void ComputerSet::unsetTotalExecutors()
{
    m_TotalExecutorsIsSet = false;
}

}
}
}
}


