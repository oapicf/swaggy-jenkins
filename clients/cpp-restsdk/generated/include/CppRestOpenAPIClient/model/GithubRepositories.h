/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GithubRepositories.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_GithubRepositories_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_GithubRepositories_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/GithubRepository.h"
#include "CppRestOpenAPIClient/model/GithubRepositorieslinks.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class GithubRepositorieslinks;
class GithubRepository;


class  GithubRepositories
    : public ModelBase
{
public:
    GithubRepositories();
    virtual ~GithubRepositories();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// GithubRepositories members


    utility::string_t getClass() const;
    bool r_classIsSet() const;
    void unset_class();
    void setClass(const utility::string_t& value);

    std::shared_ptr<GithubRepositorieslinks> getLinks() const;
    bool linksIsSet() const;
    void unset_links();
    void setLinks(const std::shared_ptr<GithubRepositorieslinks>& value);

    std::vector<std::shared_ptr<GithubRepository>> getItems() const;
    bool itemsIsSet() const;
    void unsetItems();
    void setItems(const std::vector<std::shared_ptr<GithubRepository>>& value);

    int32_t getLastPage() const;
    bool lastPageIsSet() const;
    void unsetLastPage();
    void setLastPage(int32_t value);

    int32_t getNextPage() const;
    bool nextPageIsSet() const;
    void unsetNextPage();
    void setNextPage(int32_t value);

    int32_t getPageSize() const;
    bool pageSizeIsSet() const;
    void unsetPageSize();
    void setPageSize(int32_t value);


protected:
    utility::string_t m__class;
    bool m__classIsSet;

    std::shared_ptr<GithubRepositorieslinks> m__links;
    bool m__linksIsSet;

    std::vector<std::shared_ptr<GithubRepository>> m_Items;
    bool m_ItemsIsSet;

    int32_t m_LastPage;
    bool m_LastPageIsSet;

    int32_t m_NextPage;
    bool m_NextPageIsSet;

    int32_t m_PageSize;
    bool m_PageSizeIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_GithubRepositories_H_ */
