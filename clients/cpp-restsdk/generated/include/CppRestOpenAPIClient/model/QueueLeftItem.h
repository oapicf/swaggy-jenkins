/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * QueueLeftItem.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_QueueLeftItem_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_QueueLeftItem_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/FreeStyleProject.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/CauseAction.h"
#include <vector>
#include "CppRestOpenAPIClient/model/FreeStyleBuild.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class CauseAction;
class FreeStyleProject;
class FreeStyleBuild;


class  QueueLeftItem
    : public ModelBase
{
public:
    QueueLeftItem();
    virtual ~QueueLeftItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// QueueLeftItem members


    utility::string_t getClass() const;
    bool r_classIsSet() const;
    void unset_class();
    void setClass(const utility::string_t& value);

    std::vector<std::shared_ptr<CauseAction>> getActions() const;
    bool actionsIsSet() const;
    void unsetActions();
    void setActions(const std::vector<std::shared_ptr<CauseAction>>& value);

    bool isBlocked() const;
    bool blockedIsSet() const;
    void unsetBlocked();
    void setBlocked(bool value);

    bool isBuildable() const;
    bool buildableIsSet() const;
    void unsetBuildable();
    void setBuildable(bool value);

    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int32_t value);

    int32_t getInQueueSince() const;
    bool inQueueSinceIsSet() const;
    void unsetInQueueSince();
    void setInQueueSince(int32_t value);

    utility::string_t getParams() const;
    bool paramsIsSet() const;
    void unsetParams();
    void setParams(const utility::string_t& value);

    bool isStuck() const;
    bool stuckIsSet() const;
    void unsetStuck();
    void setStuck(bool value);

    std::shared_ptr<FreeStyleProject> getTask() const;
    bool taskIsSet() const;
    void unsetTask();
    void setTask(const std::shared_ptr<FreeStyleProject>& value);

    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();
    void setUrl(const utility::string_t& value);

    utility::string_t getWhy() const;
    bool whyIsSet() const;
    void unsetWhy();
    void setWhy(const utility::string_t& value);

    bool isCancelled() const;
    bool cancelledIsSet() const;
    void unsetCancelled();
    void setCancelled(bool value);

    std::shared_ptr<FreeStyleBuild> getExecutable() const;
    bool executableIsSet() const;
    void unsetExecutable();
    void setExecutable(const std::shared_ptr<FreeStyleBuild>& value);


protected:
    utility::string_t m__class;
    bool m__classIsSet;

    std::vector<std::shared_ptr<CauseAction>> m_Actions;
    bool m_ActionsIsSet;

    bool m_Blocked;
    bool m_BlockedIsSet;

    bool m_Buildable;
    bool m_BuildableIsSet;

    int32_t m_Id;
    bool m_IdIsSet;

    int32_t m_InQueueSince;
    bool m_InQueueSinceIsSet;

    utility::string_t m_Params;
    bool m_ParamsIsSet;

    bool m_Stuck;
    bool m_StuckIsSet;

    std::shared_ptr<FreeStyleProject> m_Task;
    bool m_TaskIsSet;

    utility::string_t m_Url;
    bool m_UrlIsSet;

    utility::string_t m_Why;
    bool m_WhyIsSet;

    bool m_Cancelled;
    bool m_CancelledIsSet;

    std::shared_ptr<FreeStyleBuild> m_Executable;
    bool m_ExecutableIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_QueueLeftItem_H_ */
