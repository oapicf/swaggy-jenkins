/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HudsonMasterComputer.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_HudsonMasterComputer_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_HudsonMasterComputer_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Label1.h"
#include "CppRestOpenAPIClient/model/HudsonMasterComputermonitorData.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/HudsonMasterComputerexecutors.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class HudsonMasterComputerexecutors;
class Label1;
class HudsonMasterComputermonitorData;


class  HudsonMasterComputer
    : public ModelBase
{
public:
    HudsonMasterComputer();
    virtual ~HudsonMasterComputer();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;


    /////////////////////////////////////////////
    /// HudsonMasterComputer members


    utility::string_t getClass() const;
    bool r_classIsSet() const;
    void unset_class();
    void setClass(const utility::string_t& value);

    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();
    void setDisplayName(const utility::string_t& value);

    std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> getExecutors() const;
    bool executorsIsSet() const;
    void unsetExecutors();
    void setExecutors(const std::vector<std::shared_ptr<HudsonMasterComputerexecutors>>& value);

    utility::string_t getIcon() const;
    bool iconIsSet() const;
    void unsetIcon();
    void setIcon(const utility::string_t& value);

    utility::string_t getIconClassName() const;
    bool iconClassNameIsSet() const;
    void unsetIconClassName();
    void setIconClassName(const utility::string_t& value);

    bool isIdle() const;
    bool idleIsSet() const;
    void unsetIdle();
    void setIdle(bool value);

    bool isJnlpAgent() const;
    bool jnlpAgentIsSet() const;
    void unsetJnlpAgent();
    void setJnlpAgent(bool value);

    bool isLaunchSupported() const;
    bool launchSupportedIsSet() const;
    void unsetLaunchSupported();
    void setLaunchSupported(bool value);

    std::shared_ptr<Label1> getLoadStatistics() const;
    bool loadStatisticsIsSet() const;
    void unsetLoadStatistics();
    void setLoadStatistics(const std::shared_ptr<Label1>& value);

    bool isManualLaunchAllowed() const;
    bool manualLaunchAllowedIsSet() const;
    void unsetManualLaunchAllowed();
    void setManualLaunchAllowed(bool value);

    std::shared_ptr<HudsonMasterComputermonitorData> getMonitorData() const;
    bool monitorDataIsSet() const;
    void unsetMonitorData();
    void setMonitorData(const std::shared_ptr<HudsonMasterComputermonitorData>& value);

    int32_t getNumExecutors() const;
    bool numExecutorsIsSet() const;
    void unsetNumExecutors();
    void setNumExecutors(int32_t value);

    bool isOffline() const;
    bool offlineIsSet() const;
    void unsetOffline();
    void setOffline(bool value);

    utility::string_t getOfflineCause() const;
    bool offlineCauseIsSet() const;
    void unsetOfflineCause();
    void setOfflineCause(const utility::string_t& value);

    utility::string_t getOfflineCauseReason() const;
    bool offlineCauseReasonIsSet() const;
    void unsetOfflineCauseReason();
    void setOfflineCauseReason(const utility::string_t& value);

    bool isTemporarilyOffline() const;
    bool temporarilyOfflineIsSet() const;
    void unsetTemporarilyOffline();
    void setTemporarilyOffline(bool value);


protected:
    utility::string_t m__class;
    bool m__classIsSet;

    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;

    std::vector<std::shared_ptr<HudsonMasterComputerexecutors>> m_Executors;
    bool m_ExecutorsIsSet;

    utility::string_t m_Icon;
    bool m_IconIsSet;

    utility::string_t m_IconClassName;
    bool m_IconClassNameIsSet;

    bool m_Idle;
    bool m_IdleIsSet;

    bool m_JnlpAgent;
    bool m_JnlpAgentIsSet;

    bool m_LaunchSupported;
    bool m_LaunchSupportedIsSet;

    std::shared_ptr<Label1> m_LoadStatistics;
    bool m_LoadStatisticsIsSet;

    bool m_ManualLaunchAllowed;
    bool m_ManualLaunchAllowedIsSet;

    std::shared_ptr<HudsonMasterComputermonitorData> m_MonitorData;
    bool m_MonitorDataIsSet;

    int32_t m_NumExecutors;
    bool m_NumExecutorsIsSet;

    bool m_Offline;
    bool m_OfflineIsSet;

    utility::string_t m_OfflineCause;
    bool m_OfflineCauseIsSet;

    utility::string_t m_OfflineCauseReason;
    bool m_OfflineCauseReasonIsSet;

    bool m_TemporarilyOffline;
    bool m_TemporarilyOfflineIsSet;

};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_HudsonMasterComputer_H_ */
