/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.12.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * RemoteAccessApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_RemoteAccessApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_RemoteAccessApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/ComputerSet.h"
#include "CppRestOpenAPIClient/model/FreeStyleBuild.h"
#include "CppRestOpenAPIClient/model/FreeStyleProject.h"
#include "CppRestOpenAPIClient/model/Hudson.h"
#include "CppRestOpenAPIClient/model/ListView.h"
#include "CppRestOpenAPIClient/model/Queue.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  RemoteAccessApi 
{
public:

    explicit RemoteAccessApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~RemoteAccessApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve computer details
    /// </remarks>
    /// <param name="depth">Recursion depth in response model</param>
    pplx::task<std::shared_ptr<ComputerSet>> getComputer(
        int32_t depth
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve Jenkins details
    /// </remarks>
    pplx::task<std::shared_ptr<Hudson>> getJenkins(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job details
    /// </remarks>
    /// <param name="name">Name of the job</param>
    pplx::task<std::shared_ptr<FreeStyleProject>> getJob(
        utility::string_t name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job configuration
    /// </remarks>
    /// <param name="name">Name of the job</param>
    pplx::task<utility::string_t> getJobConfig(
        utility::string_t name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job&#39;s last build details
    /// </remarks>
    /// <param name="name">Name of the job</param>
    pplx::task<std::shared_ptr<FreeStyleBuild>> getJobLastBuild(
        utility::string_t name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job&#39;s build progressive text output
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="number">Build number</param>
    /// <param name="start">Starting point of progressive text output</param>
    pplx::task<void> getJobProgressiveText(
        utility::string_t name,
        utility::string_t number,
        utility::string_t start
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve queue details
    /// </remarks>
    pplx::task<std::shared_ptr<Queue>> getQueue(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve queued item details
    /// </remarks>
    /// <param name="number">Queue number</param>
    pplx::task<std::shared_ptr<Queue>> getQueueItem(
        utility::string_t number
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve view details
    /// </remarks>
    /// <param name="name">Name of the view</param>
    pplx::task<std::shared_ptr<ListView>> getView(
        utility::string_t name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve view configuration
    /// </remarks>
    /// <param name="name">Name of the view</param>
    pplx::task<utility::string_t> getViewConfig(
        utility::string_t name
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve Jenkins headers
    /// </remarks>
    pplx::task<void> headJenkins(
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new job using job configuration, or copied from an existing job
    /// </remarks>
    /// <param name="name">Name of the new job</param>
    /// <param name="from">Existing job to copy from (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="mode">Set to &#39;copy&#39; for copying an existing job (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="contentType">Content type header application/xml (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="body">Job configuration in config.xml format (optional)</param>
    pplx::task<void> postCreateItem(
        utility::string_t name,
        boost::optional<utility::string_t> from,
        boost::optional<utility::string_t> mode,
        boost::optional<utility::string_t> jenkinsCrumb,
        boost::optional<utility::string_t> contentType,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new view using view configuration
    /// </remarks>
    /// <param name="name">Name of the new view</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="contentType">Content type header application/xml (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="body">View configuration in config.xml format (optional)</param>
    pplx::task<void> postCreateView(
        utility::string_t name,
        boost::optional<utility::string_t> jenkinsCrumb,
        boost::optional<utility::string_t> contentType,
        boost::optional<utility::string_t> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Build a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="json"></param>
    /// <param name="token"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> postJobBuild(
        utility::string_t name,
        utility::string_t json,
        boost::optional<utility::string_t> token,
        boost::optional<utility::string_t> jenkinsCrumb
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update job configuration
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="body">Job configuration in config.xml format</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> postJobConfig(
        utility::string_t name,
        utility::string_t body,
        boost::optional<utility::string_t> jenkinsCrumb
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> postJobDelete(
        utility::string_t name,
        boost::optional<utility::string_t> jenkinsCrumb
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Disable a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> postJobDisable(
        utility::string_t name,
        boost::optional<utility::string_t> jenkinsCrumb
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Enable a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> postJobEnable(
        utility::string_t name,
        boost::optional<utility::string_t> jenkinsCrumb
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Stop a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> postJobLastBuildStop(
        utility::string_t name,
        boost::optional<utility::string_t> jenkinsCrumb
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update view configuration
    /// </remarks>
    /// <param name="name">Name of the view</param>
    /// <param name="body">View configuration in config.xml format</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> postViewConfig(
        utility::string_t name,
        utility::string_t body,
        boost::optional<utility::string_t> jenkinsCrumb
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_RemoteAccessApi_H_ */

