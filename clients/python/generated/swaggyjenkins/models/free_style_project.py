# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    The version of the OpenAPI document: 3.0.2-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from swaggyjenkins.models.free_style_build import FreeStyleBuild
from swaggyjenkins.models.free_style_projectactions import FreeStyleProjectactions
from swaggyjenkins.models.free_style_projecthealth_report import FreeStyleProjecthealthReport
from swaggyjenkins.models.null_scm import NullSCM
from typing import Optional, Set
from typing_extensions import Self

class FreeStyleProject(BaseModel):
    """
    FreeStyleProject
    """ # noqa: E501
    var_class: Optional[StrictStr] = Field(default=None, alias="_class")
    name: Optional[StrictStr] = None
    url: Optional[StrictStr] = None
    color: Optional[StrictStr] = None
    actions: Optional[List[FreeStyleProjectactions]] = None
    description: Optional[StrictStr] = None
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    display_name_or_null: Optional[StrictStr] = Field(default=None, alias="displayNameOrNull")
    full_display_name: Optional[StrictStr] = Field(default=None, alias="fullDisplayName")
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    buildable: Optional[StrictBool] = None
    builds: Optional[List[FreeStyleBuild]] = None
    first_build: Optional[FreeStyleBuild] = Field(default=None, alias="firstBuild")
    health_report: Optional[List[FreeStyleProjecthealthReport]] = Field(default=None, alias="healthReport")
    in_queue: Optional[StrictBool] = Field(default=None, alias="inQueue")
    keep_dependencies: Optional[StrictBool] = Field(default=None, alias="keepDependencies")
    last_build: Optional[FreeStyleBuild] = Field(default=None, alias="lastBuild")
    last_completed_build: Optional[FreeStyleBuild] = Field(default=None, alias="lastCompletedBuild")
    last_failed_build: Optional[StrictStr] = Field(default=None, alias="lastFailedBuild")
    last_stable_build: Optional[FreeStyleBuild] = Field(default=None, alias="lastStableBuild")
    last_successful_build: Optional[FreeStyleBuild] = Field(default=None, alias="lastSuccessfulBuild")
    last_unstable_build: Optional[StrictStr] = Field(default=None, alias="lastUnstableBuild")
    last_unsuccessful_build: Optional[StrictStr] = Field(default=None, alias="lastUnsuccessfulBuild")
    next_build_number: Optional[StrictInt] = Field(default=None, alias="nextBuildNumber")
    queue_item: Optional[StrictStr] = Field(default=None, alias="queueItem")
    concurrent_build: Optional[StrictBool] = Field(default=None, alias="concurrentBuild")
    scm: Optional[NullSCM] = None
    __properties: ClassVar[List[str]] = ["_class", "name", "url", "color", "actions", "description", "displayName", "displayNameOrNull", "fullDisplayName", "fullName", "buildable", "builds", "firstBuild", "healthReport", "inQueue", "keepDependencies", "lastBuild", "lastCompletedBuild", "lastFailedBuild", "lastStableBuild", "lastSuccessfulBuild", "lastUnstableBuild", "lastUnsuccessfulBuild", "nextBuildNumber", "queueItem", "concurrentBuild", "scm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FreeStyleProject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in builds (list)
        _items = []
        if self.builds:
            for _item_builds in self.builds:
                if _item_builds:
                    _items.append(_item_builds.to_dict())
            _dict['builds'] = _items
        # override the default output from pydantic by calling `to_dict()` of first_build
        if self.first_build:
            _dict['firstBuild'] = self.first_build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in health_report (list)
        _items = []
        if self.health_report:
            for _item_health_report in self.health_report:
                if _item_health_report:
                    _items.append(_item_health_report.to_dict())
            _dict['healthReport'] = _items
        # override the default output from pydantic by calling `to_dict()` of last_build
        if self.last_build:
            _dict['lastBuild'] = self.last_build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_completed_build
        if self.last_completed_build:
            _dict['lastCompletedBuild'] = self.last_completed_build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_stable_build
        if self.last_stable_build:
            _dict['lastStableBuild'] = self.last_stable_build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of last_successful_build
        if self.last_successful_build:
            _dict['lastSuccessfulBuild'] = self.last_successful_build.to_dict()
        # override the default output from pydantic by calling `to_dict()` of scm
        if self.scm:
            _dict['scm'] = self.scm.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FreeStyleProject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_class": obj.get("_class"),
            "name": obj.get("name"),
            "url": obj.get("url"),
            "color": obj.get("color"),
            "actions": [FreeStyleProjectactions.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "description": obj.get("description"),
            "displayName": obj.get("displayName"),
            "displayNameOrNull": obj.get("displayNameOrNull"),
            "fullDisplayName": obj.get("fullDisplayName"),
            "fullName": obj.get("fullName"),
            "buildable": obj.get("buildable"),
            "builds": [FreeStyleBuild.from_dict(_item) for _item in obj["builds"]] if obj.get("builds") is not None else None,
            "firstBuild": FreeStyleBuild.from_dict(obj["firstBuild"]) if obj.get("firstBuild") is not None else None,
            "healthReport": [FreeStyleProjecthealthReport.from_dict(_item) for _item in obj["healthReport"]] if obj.get("healthReport") is not None else None,
            "inQueue": obj.get("inQueue"),
            "keepDependencies": obj.get("keepDependencies"),
            "lastBuild": FreeStyleBuild.from_dict(obj["lastBuild"]) if obj.get("lastBuild") is not None else None,
            "lastCompletedBuild": FreeStyleBuild.from_dict(obj["lastCompletedBuild"]) if obj.get("lastCompletedBuild") is not None else None,
            "lastFailedBuild": obj.get("lastFailedBuild"),
            "lastStableBuild": FreeStyleBuild.from_dict(obj["lastStableBuild"]) if obj.get("lastStableBuild") is not None else None,
            "lastSuccessfulBuild": FreeStyleBuild.from_dict(obj["lastSuccessfulBuild"]) if obj.get("lastSuccessfulBuild") is not None else None,
            "lastUnstableBuild": obj.get("lastUnstableBuild"),
            "lastUnsuccessfulBuild": obj.get("lastUnsuccessfulBuild"),
            "nextBuildNumber": obj.get("nextBuildNumber"),
            "queueItem": obj.get("queueItem"),
            "concurrentBuild": obj.get("concurrentBuild"),
            "scm": NullSCM.from_dict(obj["scm"]) if obj.get("scm") is not None else None
        })
        return _obj


