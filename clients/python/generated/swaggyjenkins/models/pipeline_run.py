# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    The version of the OpenAPI document: 2.0.1-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from swaggyjenkins.models.pipeline_runartifacts import PipelineRunartifacts
from typing import Optional, Set
from typing_extensions import Self

class PipelineRun(BaseModel):
    """
    PipelineRun
    """ # noqa: E501
    var_class: Optional[StrictStr] = Field(default=None, alias="_class")
    artifacts: Optional[List[PipelineRunartifacts]] = None
    duration_in_millis: Optional[StrictInt] = Field(default=None, alias="durationInMillis")
    estimated_duration_in_millis: Optional[StrictInt] = Field(default=None, alias="estimatedDurationInMillis")
    en_queue_time: Optional[StrictStr] = Field(default=None, alias="enQueueTime")
    end_time: Optional[StrictStr] = Field(default=None, alias="endTime")
    id: Optional[StrictStr] = None
    organization: Optional[StrictStr] = None
    pipeline: Optional[StrictStr] = None
    result: Optional[StrictStr] = None
    run_summary: Optional[StrictStr] = Field(default=None, alias="runSummary")
    start_time: Optional[StrictStr] = Field(default=None, alias="startTime")
    state: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    commit_id: Optional[StrictStr] = Field(default=None, alias="commitId")
    __properties: ClassVar[List[str]] = ["_class", "artifacts", "durationInMillis", "estimatedDurationInMillis", "enQueueTime", "endTime", "id", "organization", "pipeline", "result", "runSummary", "startTime", "state", "type", "commitId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineRun from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in artifacts (list)
        _items = []
        if self.artifacts:
            for _item in self.artifacts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['artifacts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineRun from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_class": obj.get("_class"),
            "artifacts": [PipelineRunartifacts.from_dict(_item) for _item in obj["artifacts"]] if obj.get("artifacts") is not None else None,
            "durationInMillis": obj.get("durationInMillis"),
            "estimatedDurationInMillis": obj.get("estimatedDurationInMillis"),
            "enQueueTime": obj.get("enQueueTime"),
            "endTime": obj.get("endTime"),
            "id": obj.get("id"),
            "organization": obj.get("organization"),
            "pipeline": obj.get("pipeline"),
            "result": obj.get("result"),
            "runSummary": obj.get("runSummary"),
            "startTime": obj.get("startTime"),
            "state": obj.get("state"),
            "type": obj.get("type"),
            "commitId": obj.get("commitId")
        })
        return _obj


