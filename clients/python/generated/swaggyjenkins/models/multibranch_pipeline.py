# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    The version of the OpenAPI document: 3.0.2-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class MultibranchPipeline(BaseModel):
    """
    MultibranchPipeline
    """ # noqa: E501
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    estimated_duration_in_millis: Optional[StrictInt] = Field(default=None, alias="estimatedDurationInMillis")
    latest_run: Optional[StrictStr] = Field(default=None, alias="latestRun")
    name: Optional[StrictStr] = None
    organization: Optional[StrictStr] = None
    weather_score: Optional[StrictInt] = Field(default=None, alias="weatherScore")
    branch_names: Optional[List[StrictStr]] = Field(default=None, alias="branchNames")
    number_of_failing_branches: Optional[StrictInt] = Field(default=None, alias="numberOfFailingBranches")
    number_of_failing_pull_requests: Optional[StrictInt] = Field(default=None, alias="numberOfFailingPullRequests")
    number_of_successful_branches: Optional[StrictInt] = Field(default=None, alias="numberOfSuccessfulBranches")
    number_of_successful_pull_requests: Optional[StrictInt] = Field(default=None, alias="numberOfSuccessfulPullRequests")
    total_number_of_branches: Optional[StrictInt] = Field(default=None, alias="totalNumberOfBranches")
    total_number_of_pull_requests: Optional[StrictInt] = Field(default=None, alias="totalNumberOfPullRequests")
    var_class: Optional[StrictStr] = Field(default=None, alias="_class")
    __properties: ClassVar[List[str]] = ["displayName", "estimatedDurationInMillis", "latestRun", "name", "organization", "weatherScore", "branchNames", "numberOfFailingBranches", "numberOfFailingPullRequests", "numberOfSuccessfulBranches", "numberOfSuccessfulPullRequests", "totalNumberOfBranches", "totalNumberOfPullRequests", "_class"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MultibranchPipeline from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MultibranchPipeline from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "displayName": obj.get("displayName"),
            "estimatedDurationInMillis": obj.get("estimatedDurationInMillis"),
            "latestRun": obj.get("latestRun"),
            "name": obj.get("name"),
            "organization": obj.get("organization"),
            "weatherScore": obj.get("weatherScore"),
            "branchNames": obj.get("branchNames"),
            "numberOfFailingBranches": obj.get("numberOfFailingBranches"),
            "numberOfFailingPullRequests": obj.get("numberOfFailingPullRequests"),
            "numberOfSuccessfulBranches": obj.get("numberOfSuccessfulBranches"),
            "numberOfSuccessfulPullRequests": obj.get("numberOfSuccessfulPullRequests"),
            "totalNumberOfBranches": obj.get("totalNumberOfBranches"),
            "totalNumberOfPullRequests": obj.get("totalNumberOfPullRequests"),
            "_class": obj.get("_class")
        })
        return _obj


