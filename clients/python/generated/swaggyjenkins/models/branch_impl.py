# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    The version of the OpenAPI document: 3.0.2-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from swaggyjenkins.models.branch_impllinks import BranchImpllinks
from swaggyjenkins.models.branch_implpermissions import BranchImplpermissions
from swaggyjenkins.models.pipeline_run_impl import PipelineRunImpl
from swaggyjenkins.models.string_parameter_definition import StringParameterDefinition
from typing import Optional, Set
from typing_extensions import Self

class BranchImpl(BaseModel):
    """
    BranchImpl
    """ # noqa: E501
    var_class: Optional[StrictStr] = Field(default=None, alias="_class")
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    estimated_duration_in_millis: Optional[StrictInt] = Field(default=None, alias="estimatedDurationInMillis")
    full_display_name: Optional[StrictStr] = Field(default=None, alias="fullDisplayName")
    full_name: Optional[StrictStr] = Field(default=None, alias="fullName")
    name: Optional[StrictStr] = None
    organization: Optional[StrictStr] = None
    parameters: Optional[List[StringParameterDefinition]] = None
    permissions: Optional[BranchImplpermissions] = None
    weather_score: Optional[StrictInt] = Field(default=None, alias="weatherScore")
    pull_request: Optional[StrictStr] = Field(default=None, alias="pullRequest")
    links: Optional[BranchImpllinks] = Field(default=None, alias="_links")
    latest_run: Optional[PipelineRunImpl] = Field(default=None, alias="latestRun")
    __properties: ClassVar[List[str]] = ["_class", "displayName", "estimatedDurationInMillis", "fullDisplayName", "fullName", "name", "organization", "parameters", "permissions", "weatherScore", "pullRequest", "_links", "latestRun"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BranchImpl from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        _items = []
        if self.parameters:
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of permissions
        if self.permissions:
            _dict['permissions'] = self.permissions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of links
        if self.links:
            _dict['_links'] = self.links.to_dict()
        # override the default output from pydantic by calling `to_dict()` of latest_run
        if self.latest_run:
            _dict['latestRun'] = self.latest_run.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BranchImpl from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "_class": obj.get("_class"),
            "displayName": obj.get("displayName"),
            "estimatedDurationInMillis": obj.get("estimatedDurationInMillis"),
            "fullDisplayName": obj.get("fullDisplayName"),
            "fullName": obj.get("fullName"),
            "name": obj.get("name"),
            "organization": obj.get("organization"),
            "parameters": [StringParameterDefinition.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "permissions": BranchImplpermissions.from_dict(obj["permissions"]) if obj.get("permissions") is not None else None,
            "weatherScore": obj.get("weatherScore"),
            "pullRequest": obj.get("pullRequest"),
            "_links": BranchImpllinks.from_dict(obj["_links"]) if obj.get("_links") is not None else None,
            "latestRun": PipelineRunImpl.from_dict(obj["latestRun"]) if obj.get("latestRun") is not None else None
        })
        return _obj


