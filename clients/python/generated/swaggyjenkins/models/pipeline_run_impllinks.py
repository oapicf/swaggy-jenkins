# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    The version of the OpenAPI document: 2.0.1-pre.0
    Contact: blah+oapicf@cliffano.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from swaggyjenkins.models.link import Link
from typing import Optional, Set
from typing_extensions import Self

class PipelineRunImpllinks(BaseModel):
    """
    PipelineRunImpllinks
    """ # noqa: E501
    nodes: Optional[Link] = None
    log: Optional[Link] = None
    var_self: Optional[Link] = Field(default=None, alias="self")
    actions: Optional[Link] = None
    steps: Optional[Link] = None
    var_class: Optional[StrictStr] = Field(default=None, alias="_class")
    __properties: ClassVar[List[str]] = ["nodes", "log", "self", "actions", "steps", "_class"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineRunImpllinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of nodes
        if self.nodes:
            _dict['nodes'] = self.nodes.to_dict()
        # override the default output from pydantic by calling `to_dict()` of log
        if self.log:
            _dict['log'] = self.log.to_dict()
        # override the default output from pydantic by calling `to_dict()` of var_self
        if self.var_self:
            _dict['self'] = self.var_self.to_dict()
        # override the default output from pydantic by calling `to_dict()` of actions
        if self.actions:
            _dict['actions'] = self.actions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of steps
        if self.steps:
            _dict['steps'] = self.steps.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineRunImpllinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nodes": Link.from_dict(obj["nodes"]) if obj.get("nodes") is not None else None,
            "log": Link.from_dict(obj["log"]) if obj.get("log") is not None else None,
            "self": Link.from_dict(obj["self"]) if obj.get("self") is not None else None,
            "actions": Link.from_dict(obj["actions"]) if obj.get("actions") is not None else None,
            "steps": Link.from_dict(obj["steps"]) if obj.get("steps") is not None else None,
            "_class": obj.get("_class")
        })
        return _obj


