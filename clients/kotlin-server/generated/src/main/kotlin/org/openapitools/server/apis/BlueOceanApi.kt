/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* The version of the OpenAPI document: 3.0.2-pre.0
* Contact: blah+oapicf@cliffano.com
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package org.openapitools.server.apis

import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import org.openapitools.server.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import org.openapitools.server.infrastructure.ApiPrincipal
import org.openapitools.server.models.BranchImpl
import org.openapitools.server.models.FavoriteImpl
import org.openapitools.server.models.GithubOrganization
import org.openapitools.server.models.GithubScm
import org.openapitools.server.models.MultibranchPipeline
import org.openapitools.server.models.Organisation
import org.openapitools.server.models.Pipeline
import org.openapitools.server.models.PipelineActivity
import org.openapitools.server.models.PipelineFolderImpl
import org.openapitools.server.models.PipelineImpl
import org.openapitools.server.models.PipelineRun
import org.openapitools.server.models.PipelineRunNode
import org.openapitools.server.models.PipelineStepImpl
import org.openapitools.server.models.QueueItemImpl
import org.openapitools.server.models.User

fun Route.BlueOceanApi() {
    val empty = mutableMapOf<String, Any?>()

    authenticate("jenkins_auth") {
    delete<Paths.deletePipelineQueueItem> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        call.respond(HttpStatusCode.NotImplemented)
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getAuthenticatedUser> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "fullName" : "fullName",
              "_class" : "_class",
              "id" : "id",
              "email" : "email"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getClasses> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        call.respond(HttpStatusCode.NotImplemented)
        
    }
    }

    get<Paths.getJsonWebKey> {
        call.respond(HttpStatusCode.NotImplemented)
        
    }

    get<Paths.getJsonWebToken> {
        call.respond(HttpStatusCode.NotImplemented)
        
    }

    authenticate("jenkins_auth") {
    get<Paths.getOrganisation> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "_class" : "_class"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getOrganisations> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "name" : "name",
              "_class" : "_class"
            }, {
              "name" : "name",
              "_class" : "_class"
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipeline> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "weatherScore" : 0,
              "latestRun" : {
                "runSummary" : "runSummary",
                "durationInMillis" : 5,
                "commitId" : "commitId",
                "type" : "type",
                "pipeline" : "pipeline",
                "result" : "result",
                "organization" : "organization",
                "estimatedDurationInMillis" : 5,
                "enQueueTime" : "enQueueTime",
                "startTime" : "startTime",
                "endTime" : "endTime",
                "id" : "id",
                "state" : "state",
                "_class" : "_class",
                "artifacts" : [ {
                  "size" : 1,
                  "name" : "name",
                  "_class" : "_class",
                  "url" : "url"
                }, {
                  "size" : 1,
                  "name" : "name",
                  "_class" : "_class",
                  "url" : "url"
                } ]
              },
              "displayName" : "displayName",
              "organization" : "organization",
              "name" : "name",
              "estimatedDurationInMillis" : 6,
              "fullName" : "fullName",
              "_class" : "_class"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineActivities> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "runSummary" : "runSummary",
              "durationInMillis" : 6,
              "commitId" : "commitId",
              "type" : "type",
              "pipeline" : "pipeline",
              "result" : "result",
              "organization" : "organization",
              "estimatedDurationInMillis" : 1,
              "enQueueTime" : "enQueueTime",
              "startTime" : "startTime",
              "_class" : "_class",
              "endTime" : "endTime",
              "id" : "id",
              "state" : "state",
              "artifacts" : [ {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              }, {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              } ]
            }, {
              "runSummary" : "runSummary",
              "durationInMillis" : 6,
              "commitId" : "commitId",
              "type" : "type",
              "pipeline" : "pipeline",
              "result" : "result",
              "organization" : "organization",
              "estimatedDurationInMillis" : 1,
              "enQueueTime" : "enQueueTime",
              "startTime" : "startTime",
              "_class" : "_class",
              "endTime" : "endTime",
              "id" : "id",
              "state" : "state",
              "artifacts" : [ {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              }, {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              } ]
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineBranch> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "weatherScore" : 6,
              "latestRun" : {
                "runSummary" : "runSummary",
                "_links" : {
                  "nodes" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "log" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "self" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "_class" : "_class",
                  "actions" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "steps" : {
                    "_class" : "_class",
                    "href" : "href"
                  }
                },
                "durationInMillis" : 1,
                "commitId" : "commitId",
                "type" : "type",
                "pipeline" : "pipeline",
                "result" : "result",
                "organization" : "organization",
                "enQueueTime" : "enQueueTime",
                "estimatedDurationInMillis" : 5,
                "startTime" : "startTime",
                "_class" : "_class",
                "endTime" : "endTime",
                "id" : "id",
                "state" : "state"
              },
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class",
                "actions" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "runs" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "queue" : {
                  "_class" : "_class",
                  "href" : "href"
                }
              },
              "displayName" : "displayName",
              "fullDisplayName" : "fullDisplayName",
              "fullName" : "fullName",
              "pullRequest" : "pullRequest",
              "permissions" : {
                "read" : true,
                "stop" : true,
                "start" : true,
                "create" : true,
                "_class" : "_class"
              },
              "organization" : "organization",
              "estimatedDurationInMillis" : 0,
              "name" : "name",
              "_class" : "_class",
              "parameters" : [ {
                "name" : "name",
                "description" : "description",
                "_class" : "_class",
                "type" : "type",
                "defaultParameterValue" : {
                  "name" : "name",
                  "_class" : "_class",
                  "value" : "value"
                }
              }, {
                "name" : "name",
                "description" : "description",
                "_class" : "_class",
                "type" : "type",
                "defaultParameterValue" : {
                  "name" : "name",
                  "_class" : "_class",
                  "value" : "value"
                }
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineBranchRun> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "runSummary" : "runSummary",
              "durationInMillis" : 6,
              "commitId" : "commitId",
              "type" : "type",
              "pipeline" : "pipeline",
              "result" : "result",
              "organization" : "organization",
              "estimatedDurationInMillis" : 1,
              "enQueueTime" : "enQueueTime",
              "startTime" : "startTime",
              "_class" : "_class",
              "endTime" : "endTime",
              "id" : "id",
              "state" : "state",
              "artifacts" : [ {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              }, {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineBranches> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "weatherScore" : 6,
              "latestRun" : "latestRun",
              "displayName" : "displayName",
              "totalNumberOfPullRequests" : 9,
              "numberOfFailingPullRequests" : 5,
              "branchNames" : [ "branchNames", "branchNames" ],
              "organization" : "organization",
              "totalNumberOfBranches" : 7,
              "estimatedDurationInMillis" : 0,
              "name" : "name",
              "numberOfSuccessfulPullRequests" : 2,
              "numberOfSuccessfulBranches" : 5,
              "numberOfFailingBranches" : 1,
              "_class" : "_class"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineFolder> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "numberOfPipelines" : 6,
              "displayName" : "displayName",
              "numberOfFolders" : 0,
              "organization" : "organization",
              "name" : "name",
              "fullName" : "fullName",
              "_class" : "_class"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineFolderPipeline> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "weatherScore" : 6,
              "latestRun" : "latestRun",
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class",
                "runs" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "actions" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "queue" : {
                  "_class" : "_class",
                  "href" : "href"
                }
              },
              "displayName" : "displayName",
              "organization" : "organization",
              "estimatedDurationInMillis" : 0,
              "name" : "name",
              "fullName" : "fullName",
              "_class" : "_class"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineQueue> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "pipeline" : "pipeline",
              "expectedBuildNumber" : 0,
              "queuedTime" : 6,
              "_class" : "_class",
              "id" : "id"
            }, {
              "pipeline" : "pipeline",
              "expectedBuildNumber" : 0,
              "queuedTime" : 6,
              "_class" : "_class",
              "id" : "id"
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineRun> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "runSummary" : "runSummary",
              "durationInMillis" : 6,
              "commitId" : "commitId",
              "type" : "type",
              "pipeline" : "pipeline",
              "result" : "result",
              "organization" : "organization",
              "estimatedDurationInMillis" : 1,
              "enQueueTime" : "enQueueTime",
              "startTime" : "startTime",
              "_class" : "_class",
              "endTime" : "endTime",
              "id" : "id",
              "state" : "state",
              "artifacts" : [ {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              }, {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineRunLog> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        call.respond(HttpStatusCode.NotImplemented)
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineRunNode> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : "result",
              "durationInMillis" : 0,
              "displayName" : "displayName",
              "edges" : [ {
                "id" : "id",
                "_class" : "_class"
              }, {
                "id" : "id",
                "_class" : "_class"
              } ],
              "startTime" : "startTime",
              "_class" : "_class",
              "id" : "id",
              "state" : "state"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineRunNodeStep> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "result" : "result",
              "input" : {
                "submitter" : "submitter",
                "_links" : {
                  "self" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "_class" : "_class"
                },
                "_class" : "_class",
                "id" : "id",
                "message" : "message",
                "ok" : "ok",
                "parameters" : [ {
                  "name" : "name",
                  "description" : "description",
                  "_class" : "_class",
                  "type" : "type",
                  "defaultParameterValue" : {
                    "name" : "name",
                    "_class" : "_class",
                    "value" : "value"
                  }
                }, {
                  "name" : "name",
                  "description" : "description",
                  "_class" : "_class",
                  "type" : "type",
                  "defaultParameterValue" : {
                    "name" : "name",
                    "_class" : "_class",
                    "value" : "value"
                  }
                } ]
              },
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class",
                "actions" : {
                  "_class" : "_class",
                  "href" : "href"
                }
              },
              "durationInMillis" : 0,
              "displayName" : "displayName",
              "startTime" : "startTime",
              "_class" : "_class",
              "id" : "id",
              "state" : "state"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineRunNodeStepLog> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        call.respond(HttpStatusCode.NotImplemented)
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineRunNodeSteps> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "result" : "result",
              "input" : {
                "submitter" : "submitter",
                "_links" : {
                  "self" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "_class" : "_class"
                },
                "_class" : "_class",
                "id" : "id",
                "message" : "message",
                "ok" : "ok",
                "parameters" : [ {
                  "name" : "name",
                  "description" : "description",
                  "_class" : "_class",
                  "type" : "type",
                  "defaultParameterValue" : {
                    "name" : "name",
                    "_class" : "_class",
                    "value" : "value"
                  }
                }, {
                  "name" : "name",
                  "description" : "description",
                  "_class" : "_class",
                  "type" : "type",
                  "defaultParameterValue" : {
                    "name" : "name",
                    "_class" : "_class",
                    "value" : "value"
                  }
                } ]
              },
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class",
                "actions" : {
                  "_class" : "_class",
                  "href" : "href"
                }
              },
              "durationInMillis" : 0,
              "displayName" : "displayName",
              "startTime" : "startTime",
              "_class" : "_class",
              "id" : "id",
              "state" : "state"
            }, {
              "result" : "result",
              "input" : {
                "submitter" : "submitter",
                "_links" : {
                  "self" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "_class" : "_class"
                },
                "_class" : "_class",
                "id" : "id",
                "message" : "message",
                "ok" : "ok",
                "parameters" : [ {
                  "name" : "name",
                  "description" : "description",
                  "_class" : "_class",
                  "type" : "type",
                  "defaultParameterValue" : {
                    "name" : "name",
                    "_class" : "_class",
                    "value" : "value"
                  }
                }, {
                  "name" : "name",
                  "description" : "description",
                  "_class" : "_class",
                  "type" : "type",
                  "defaultParameterValue" : {
                    "name" : "name",
                    "_class" : "_class",
                    "value" : "value"
                  }
                } ]
              },
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class",
                "actions" : {
                  "_class" : "_class",
                  "href" : "href"
                }
              },
              "durationInMillis" : 0,
              "displayName" : "displayName",
              "startTime" : "startTime",
              "_class" : "_class",
              "id" : "id",
              "state" : "state"
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineRunNodes> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "result" : "result",
              "durationInMillis" : 0,
              "displayName" : "displayName",
              "edges" : [ {
                "id" : "id",
                "_class" : "_class"
              }, {
                "id" : "id",
                "_class" : "_class"
              } ],
              "startTime" : "startTime",
              "_class" : "_class",
              "id" : "id",
              "state" : "state"
            }, {
              "result" : "result",
              "durationInMillis" : 0,
              "displayName" : "displayName",
              "edges" : [ {
                "id" : "id",
                "_class" : "_class"
              }, {
                "id" : "id",
                "_class" : "_class"
              } ],
              "startTime" : "startTime",
              "_class" : "_class",
              "id" : "id",
              "state" : "state"
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelineRuns> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "runSummary" : "runSummary",
              "durationInMillis" : 6,
              "commitId" : "commitId",
              "type" : "type",
              "pipeline" : "pipeline",
              "result" : "result",
              "organization" : "organization",
              "estimatedDurationInMillis" : 1,
              "enQueueTime" : "enQueueTime",
              "startTime" : "startTime",
              "_class" : "_class",
              "endTime" : "endTime",
              "id" : "id",
              "state" : "state",
              "artifacts" : [ {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              }, {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              } ]
            }, {
              "runSummary" : "runSummary",
              "durationInMillis" : 6,
              "commitId" : "commitId",
              "type" : "type",
              "pipeline" : "pipeline",
              "result" : "result",
              "organization" : "organization",
              "estimatedDurationInMillis" : 1,
              "enQueueTime" : "enQueueTime",
              "startTime" : "startTime",
              "_class" : "_class",
              "endTime" : "endTime",
              "id" : "id",
              "state" : "state",
              "artifacts" : [ {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              }, {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              } ]
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getPipelines> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "weatherScore" : 0,
              "latestRun" : {
                "runSummary" : "runSummary",
                "durationInMillis" : 5,
                "commitId" : "commitId",
                "type" : "type",
                "pipeline" : "pipeline",
                "result" : "result",
                "organization" : "organization",
                "estimatedDurationInMillis" : 5,
                "enQueueTime" : "enQueueTime",
                "startTime" : "startTime",
                "endTime" : "endTime",
                "id" : "id",
                "state" : "state",
                "_class" : "_class",
                "artifacts" : [ {
                  "size" : 1,
                  "name" : "name",
                  "_class" : "_class",
                  "url" : "url"
                }, {
                  "size" : 1,
                  "name" : "name",
                  "_class" : "_class",
                  "url" : "url"
                } ]
              },
              "displayName" : "displayName",
              "organization" : "organization",
              "name" : "name",
              "estimatedDurationInMillis" : 6,
              "fullName" : "fullName",
              "_class" : "_class"
            }, {
              "weatherScore" : 0,
              "latestRun" : {
                "runSummary" : "runSummary",
                "durationInMillis" : 5,
                "commitId" : "commitId",
                "type" : "type",
                "pipeline" : "pipeline",
                "result" : "result",
                "organization" : "organization",
                "estimatedDurationInMillis" : 5,
                "enQueueTime" : "enQueueTime",
                "startTime" : "startTime",
                "endTime" : "endTime",
                "id" : "id",
                "state" : "state",
                "_class" : "_class",
                "artifacts" : [ {
                  "size" : 1,
                  "name" : "name",
                  "_class" : "_class",
                  "url" : "url"
                }, {
                  "size" : 1,
                  "name" : "name",
                  "_class" : "_class",
                  "url" : "url"
                } ]
              },
              "displayName" : "displayName",
              "organization" : "organization",
              "name" : "name",
              "estimatedDurationInMillis" : 6,
              "fullName" : "fullName",
              "_class" : "_class"
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getSCM> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "credentialId" : "credentialId",
              "_class" : "_class",
              "id" : "id",
              "uri" : "uri"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getSCMOrganisationRepositories> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "_links" : {
                "repositories" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "name" : "name",
              "_class" : "_class",
              "jenkinsOrganizationPipeline" : true
            }, {
              "_links" : {
                "repositories" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "name" : "name",
              "_class" : "_class",
              "jenkinsOrganizationPipeline" : true
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getSCMOrganisationRepository> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "_links" : {
                "repositories" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "name" : "name",
              "_class" : "_class",
              "jenkinsOrganizationPipeline" : true
            }, {
              "_links" : {
                "repositories" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "name" : "name",
              "_class" : "_class",
              "jenkinsOrganizationPipeline" : true
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getSCMOrganisations> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "_links" : {
                "repositories" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "name" : "name",
              "_class" : "_class",
              "jenkinsOrganizationPipeline" : true
            }, {
              "_links" : {
                "repositories" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "name" : "name",
              "_class" : "_class",
              "jenkinsOrganizationPipeline" : true
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getUser> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "fullName" : "fullName",
              "_class" : "_class",
              "id" : "id",
              "email" : "email"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getUserFavorites> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """[ {
              "item" : {
                "weatherScore" : 6,
                "latestRun" : "latestRun",
                "_links" : {
                  "self" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "_class" : "_class",
                  "runs" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "actions" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "queue" : {
                    "_class" : "_class",
                    "href" : "href"
                  }
                },
                "displayName" : "displayName",
                "organization" : "organization",
                "estimatedDurationInMillis" : 0,
                "name" : "name",
                "fullName" : "fullName",
                "_class" : "_class"
              },
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "_class" : "_class"
            }, {
              "item" : {
                "weatherScore" : 6,
                "latestRun" : "latestRun",
                "_links" : {
                  "self" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "_class" : "_class",
                  "runs" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "actions" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "queue" : {
                    "_class" : "_class",
                    "href" : "href"
                  }
                },
                "displayName" : "displayName",
                "organization" : "organization",
                "estimatedDurationInMillis" : 0,
                "name" : "name",
                "fullName" : "fullName",
                "_class" : "_class"
              },
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "_class" : "_class"
            } ]"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.getUsers> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "name" : "name",
              "fullName" : "fullName",
              "_class" : "_class",
              "id" : "id",
              "email" : "email"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    post<Paths.postPipelineRun> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "pipeline" : "pipeline",
              "expectedBuildNumber" : 0,
              "queuedTime" : 6,
              "_class" : "_class",
              "id" : "id"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    post<Paths.postPipelineRuns> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "pipeline" : "pipeline",
              "expectedBuildNumber" : 0,
              "queuedTime" : 6,
              "_class" : "_class",
              "id" : "id"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    put<Paths.putPipelineFavorite> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "item" : {
                "weatherScore" : 6,
                "latestRun" : "latestRun",
                "_links" : {
                  "self" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "_class" : "_class",
                  "runs" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "actions" : {
                    "_class" : "_class",
                    "href" : "href"
                  },
                  "queue" : {
                    "_class" : "_class",
                    "href" : "href"
                  }
                },
                "displayName" : "displayName",
                "organization" : "organization",
                "estimatedDurationInMillis" : 0,
                "name" : "name",
                "fullName" : "fullName",
                "_class" : "_class"
              },
              "_links" : {
                "self" : {
                  "_class" : "_class",
                  "href" : "href"
                },
                "_class" : "_class"
              },
              "_class" : "_class"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    put<Paths.putPipelineRun> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "runSummary" : "runSummary",
              "durationInMillis" : 6,
              "commitId" : "commitId",
              "type" : "type",
              "pipeline" : "pipeline",
              "result" : "result",
              "organization" : "organization",
              "estimatedDurationInMillis" : 1,
              "enQueueTime" : "enQueueTime",
              "startTime" : "startTime",
              "_class" : "_class",
              "endTime" : "endTime",
              "id" : "id",
              "state" : "state",
              "artifacts" : [ {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              }, {
                "size" : 0,
                "name" : "name",
                "_class" : "_class",
                "url" : "url"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respondText(exampleContentType, ContentType.Application.Json)
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.search> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        call.respond(HttpStatusCode.NotImplemented)
        
    }
    }

    authenticate("jenkins_auth") {
    get<Paths.searchClasses> {
        val principal = call.authentication.principal<UserIdPrincipal>()
        
        
        call.respond(HttpStatusCode.NotImplemented)
        
    }
    }

}
