<?php
/**
 * CauseUserIdCause
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the CauseUserIdCause model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class CauseUserIdCause 
{
        /**
     * @var string|null
     * @SerializedName("_class")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $class = null;

    /**
     * @var string|null
     * @SerializedName("shortDescription")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $shortDescription = null;

    /**
     * @var string|null
     * @SerializedName("userId")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $userId = null;

    /**
     * @var string|null
     * @SerializedName("userName")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $userName = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->class = array_key_exists('class', $data) ? $data['class'] : $this->class;
            $this->shortDescription = array_key_exists('shortDescription', $data) ? $data['shortDescription'] : $this->shortDescription;
            $this->userId = array_key_exists('userId', $data) ? $data['userId'] : $this->userId;
            $this->userName = array_key_exists('userName', $data) ? $data['userName'] : $this->userName;
        }
    }

    /**
     * Gets class.
     *
     * @return string|null
     */
    public function getClass(): ?string
    {
        return $this->class;
    }



    /**
     * Sets class.
     *
     * @param string|null $class
     *
     * @return $this
     */
    public function setClass(?string $class = null): self
    {
        $this->class = $class;

        return $this;
    }

    /**
     * Gets shortDescription.
     *
     * @return string|null
     */
    public function getShortDescription(): ?string
    {
        return $this->shortDescription;
    }



    /**
     * Sets shortDescription.
     *
     * @param string|null $shortDescription
     *
     * @return $this
     */
    public function setShortDescription(?string $shortDescription = null): self
    {
        $this->shortDescription = $shortDescription;

        return $this;
    }

    /**
     * Gets userId.
     *
     * @return string|null
     */
    public function getUserId(): ?string
    {
        return $this->userId;
    }



    /**
     * Sets userId.
     *
     * @param string|null $userId
     *
     * @return $this
     */
    public function setUserId(?string $userId = null): self
    {
        $this->userId = $userId;

        return $this;
    }

    /**
     * Gets userName.
     *
     * @return string|null
     */
    public function getUserName(): ?string
    {
        return $this->userName;
    }



    /**
     * Sets userName.
     *
     * @param string|null $userName
     *
     * @return $this
     */
    public function setUserName(?string $userName = null): self
    {
        $this->userName = $userName;

        return $this;
    }
}


