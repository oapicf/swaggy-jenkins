<?php
/**
 * QueueBlockedItem
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the QueueBlockedItem model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class QueueBlockedItem 
{
        /**
     * @var string|null
     * @SerializedName("_class")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $class = null;

    /**
     * @var CauseAction[]|null
     * @SerializedName("actions")
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\CauseAction")
     * })
     * @Type("array<OpenAPI\Server\Model\CauseAction>")
     */
    protected ?array $actions = null;

    /**
     * @var bool|null
     * @SerializedName("blocked")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $blocked = null;

    /**
     * @var bool|null
     * @SerializedName("buildable")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $buildable = null;

    /**
     * @var int|null
     * @SerializedName("id")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $id = null;

    /**
     * @var int|null
     * @SerializedName("inQueueSince")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $inQueueSince = null;

    /**
     * @var string|null
     * @SerializedName("params")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $params = null;

    /**
     * @var bool|null
     * @SerializedName("stuck")
     * @Assert\Type("bool")
     * @Type("bool")
     */
    protected ?bool $stuck = null;

    /**
     * @var FreeStyleProject|null
     * @SerializedName("task")
     * @Assert\Type("OpenAPI\Server\Model\FreeStyleProject")
     * @Type("OpenAPI\Server\Model\FreeStyleProject")
     */
    protected ?FreeStyleProject $task = null;

    /**
     * @var string|null
     * @SerializedName("url")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $url = null;

    /**
     * @var string|null
     * @SerializedName("why")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected ?string $why = null;

    /**
     * @var int|null
     * @SerializedName("buildableStartMilliseconds")
     * @Assert\Type("int")
     * @Type("int")
     */
    protected ?int $buildableStartMilliseconds = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        if (is_array($data)) {
            $this->class = array_key_exists('class', $data) ? $data['class'] : $this->class;
            $this->actions = array_key_exists('actions', $data) ? $data['actions'] : $this->actions;
            $this->blocked = array_key_exists('blocked', $data) ? $data['blocked'] : $this->blocked;
            $this->buildable = array_key_exists('buildable', $data) ? $data['buildable'] : $this->buildable;
            $this->id = array_key_exists('id', $data) ? $data['id'] : $this->id;
            $this->inQueueSince = array_key_exists('inQueueSince', $data) ? $data['inQueueSince'] : $this->inQueueSince;
            $this->params = array_key_exists('params', $data) ? $data['params'] : $this->params;
            $this->stuck = array_key_exists('stuck', $data) ? $data['stuck'] : $this->stuck;
            $this->task = array_key_exists('task', $data) ? $data['task'] : $this->task;
            $this->url = array_key_exists('url', $data) ? $data['url'] : $this->url;
            $this->why = array_key_exists('why', $data) ? $data['why'] : $this->why;
            $this->buildableStartMilliseconds = array_key_exists('buildableStartMilliseconds', $data) ? $data['buildableStartMilliseconds'] : $this->buildableStartMilliseconds;
        }
    }

    /**
     * Gets class.
     *
     * @return string|null
     */
    public function getClass(): ?string
    {
        return $this->class;
    }



    /**
     * Sets class.
     *
     * @param string|null $class
     *
     * @return $this
     */
    public function setClass(?string $class = null): self
    {
        $this->class = $class;

        return $this;
    }

    /**
     * Gets actions.
     *
     * @return CauseAction[]|null
     */
    public function getActions(): ?array
    {
        return $this->actions;
    }



    /**
     * Sets actions.
     *
     * @param CauseAction[]|null $actions
     *
     * @return $this
     */
    public function setActions(?array $actions = null): self
    {
        $this->actions = $actions;

        return $this;
    }

    /**
     * Gets blocked.
     *
     * @return bool|null
     */
    public function isBlocked(): ?bool
    {
        return $this->blocked;
    }



    /**
     * Sets blocked.
     *
     * @param bool|null $blocked
     *
     * @return $this
     */
    public function setBlocked(?bool $blocked = null): self
    {
        $this->blocked = $blocked;

        return $this;
    }

    /**
     * Gets buildable.
     *
     * @return bool|null
     */
    public function isBuildable(): ?bool
    {
        return $this->buildable;
    }



    /**
     * Sets buildable.
     *
     * @param bool|null $buildable
     *
     * @return $this
     */
    public function setBuildable(?bool $buildable = null): self
    {
        $this->buildable = $buildable;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->id;
    }



    /**
     * Sets id.
     *
     * @param int|null $id
     *
     * @return $this
     */
    public function setId(?int $id = null): self
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets inQueueSince.
     *
     * @return int|null
     */
    public function getInQueueSince(): ?int
    {
        return $this->inQueueSince;
    }



    /**
     * Sets inQueueSince.
     *
     * @param int|null $inQueueSince
     *
     * @return $this
     */
    public function setInQueueSince(?int $inQueueSince = null): self
    {
        $this->inQueueSince = $inQueueSince;

        return $this;
    }

    /**
     * Gets params.
     *
     * @return string|null
     */
    public function getParams(): ?string
    {
        return $this->params;
    }



    /**
     * Sets params.
     *
     * @param string|null $params
     *
     * @return $this
     */
    public function setParams(?string $params = null): self
    {
        $this->params = $params;

        return $this;
    }

    /**
     * Gets stuck.
     *
     * @return bool|null
     */
    public function isStuck(): ?bool
    {
        return $this->stuck;
    }



    /**
     * Sets stuck.
     *
     * @param bool|null $stuck
     *
     * @return $this
     */
    public function setStuck(?bool $stuck = null): self
    {
        $this->stuck = $stuck;

        return $this;
    }

    /**
     * Gets task.
     *
     * @return FreeStyleProject|null
     */
    public function getTask(): ?FreeStyleProject
    {
        return $this->task;
    }



    /**
     * Sets task.
     *
     * @param FreeStyleProject|null $task
     *
     * @return $this
     */
    public function setTask(?FreeStyleProject $task = null): self
    {
        $this->task = $task;

        return $this;
    }

    /**
     * Gets url.
     *
     * @return string|null
     */
    public function getUrl(): ?string
    {
        return $this->url;
    }



    /**
     * Sets url.
     *
     * @param string|null $url
     *
     * @return $this
     */
    public function setUrl(?string $url = null): self
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Gets why.
     *
     * @return string|null
     */
    public function getWhy(): ?string
    {
        return $this->why;
    }



    /**
     * Sets why.
     *
     * @param string|null $why
     *
     * @return $this
     */
    public function setWhy(?string $why = null): self
    {
        $this->why = $why;

        return $this;
    }

    /**
     * Gets buildableStartMilliseconds.
     *
     * @return int|null
     */
    public function getBuildableStartMilliseconds(): ?int
    {
        return $this->buildableStartMilliseconds;
    }



    /**
     * Sets buildableStartMilliseconds.
     *
     * @param int|null $buildableStartMilliseconds
     *
     * @return $this
     */
    public function setBuildableStartMilliseconds(?int $buildableStartMilliseconds = null): self
    {
        $this->buildableStartMilliseconds = $buildableStartMilliseconds;

        return $this;
    }
}


