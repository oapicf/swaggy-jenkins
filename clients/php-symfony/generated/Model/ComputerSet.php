<?php
/**
 * ComputerSet
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\Accessor;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the ComputerSet model.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */

class ComputerSet 
{
        /**
     * @var string|null
     * @SerializedName("_class")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $class = null;

    /**
     * @var int|null
     * @SerializedName("busyExecutors")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $busyExecutors = null;

    /**
     * @var HudsonMasterComputer[]|null
     * @SerializedName("computer")
     * @Type("array<OpenAPI\Server\Model\HudsonMasterComputer>")
    */
    #[Assert\All([
        new Assert\Type("OpenAPI\Server\Model\HudsonMasterComputer"),
    ])]
    protected ?array $computer = null;

    /**
     * @var string|null
     * @SerializedName("displayName")
     * @Type("string")
    */
    #[Assert\Type("string")]
    protected ?string $displayName = null;

    /**
     * @var int|null
     * @SerializedName("totalExecutors")
     * @Type("int")
    */
    #[Assert\Type("int")]
    protected ?int $totalExecutors = null;

    /**
     * Constructor
     * @param array|null $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        if (is_array($data)) {
            $this->class = array_key_exists('class', $data) ? $data['class'] : $this->class;
            $this->busyExecutors = array_key_exists('busyExecutors', $data) ? $data['busyExecutors'] : $this->busyExecutors;
            $this->computer = array_key_exists('computer', $data) ? $data['computer'] : $this->computer;
            $this->displayName = array_key_exists('displayName', $data) ? $data['displayName'] : $this->displayName;
            $this->totalExecutors = array_key_exists('totalExecutors', $data) ? $data['totalExecutors'] : $this->totalExecutors;
        }
    }

    /**
     * Gets class.
     *
     * @return string|null
     */
    public function getClass(): ?string
    {
        return $this->class;
    }

    /**
    * Sets class.
    *
    * @param string|null $class
    *
    * @return $this
    */
    public function setClass(?string $class = null): self
    {
        $this->class = $class;

        return $this;
    }




    /**
     * Gets busyExecutors.
     *
     * @return int|null
     */
    public function getBusyExecutors(): ?int
    {
        return $this->busyExecutors;
    }

    /**
    * Sets busyExecutors.
    *
    * @param int|null $busyExecutors
    *
    * @return $this
    */
    public function setBusyExecutors(?int $busyExecutors = null): self
    {
        $this->busyExecutors = $busyExecutors;

        return $this;
    }




    /**
     * Gets computer.
     *
     * @return HudsonMasterComputer[]|null
     */
    public function getComputer(): ?array
    {
        return $this->computer;
    }

    /**
    * Sets computer.
    *
    * @param HudsonMasterComputer[]|null $computer
    *
    * @return $this
    */
    public function setComputer(?array $computer = null): self
    {
        $this->computer = $computer;

        return $this;
    }




    /**
     * Gets displayName.
     *
     * @return string|null
     */
    public function getDisplayName(): ?string
    {
        return $this->displayName;
    }

    /**
    * Sets displayName.
    *
    * @param string|null $displayName
    *
    * @return $this
    */
    public function setDisplayName(?string $displayName = null): self
    {
        $this->displayName = $displayName;

        return $this;
    }




    /**
     * Gets totalExecutors.
     *
     * @return int|null
     */
    public function getTotalExecutors(): ?int
    {
        return $this->totalExecutors;
    }

    /**
    * Sets totalExecutors.
    *
    * @param int|null $totalExecutors
    *
    * @return $this
    */
    public function setTotalExecutors(?int $totalExecutors = null): self
    {
        $this->totalExecutors = $totalExecutors;

        return $this;
    }



}


