<?php
/**
 * BlueOceanApiInterfaceTest
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Server\Tests\Api;

use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;

/**
 * BlueOceanApiInterfaceTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Api
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Api\BlueOceanApiInterface
 */
class BlueOceanApiInterfaceTest extends WebTestCase
{
    private static ?KernelBrowser $client = null;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        if (null === self::$client) {
            self::$client = static::createClient();
        }
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
        static::ensureKernelShutdown();
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deletePipelineQueueItem
     *
     * .
     *
     */
    public function testDeletePipelineQueueItem(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{queue}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('DELETE', $path);
        $this->markTestSkipped('Test for deletePipelineQueueItem not implemented');
    }

    /**
     * Test case for getAuthenticatedUser
     *
     * .
     *
     */
    public function testGetAuthenticatedUser(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/user/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getAuthenticatedUser not implemented');
    }

    /**
     * Test case for getClasses
     *
     * .
     *
     */
    public function testGetClasses(): void
    {
        $client = self::$client;

        $path = '/blue/rest/classes/{class}';
        $pattern = '{class}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getClasses not implemented');
    }

    /**
     * Test case for getJsonWebKey
     *
     * .
     *
     */
    public function testGetJsonWebKey(): void
    {
        $client = self::$client;

        $path = '/jwt-auth/jwks/{key}';
        $pattern = '{key}';
        $data = $this->genTestData('\d+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getJsonWebKey not implemented');
    }

    /**
     * Test case for getJsonWebToken
     *
     * .
     *
     */
    public function testGetJsonWebToken(): void
    {
        $client = self::$client;

        $path = '/jwt-auth/token';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getJsonWebToken not implemented');
    }

    /**
     * Test case for getOrganisation
     *
     * .
     *
     */
    public function testGetOrganisation(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOrganisation not implemented');
    }

    /**
     * Test case for getOrganisations
     *
     * .
     *
     */
    public function testGetOrganisations(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getOrganisations not implemented');
    }

    /**
     * Test case for getPipeline
     *
     * .
     *
     */
    public function testGetPipeline(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipeline not implemented');
    }

    /**
     * Test case for getPipelineActivities
     *
     * .
     *
     */
    public function testGetPipelineActivities(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineActivities not implemented');
    }

    /**
     * Test case for getPipelineBranch
     *
     * .
     *
     */
    public function testGetPipelineBranch(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{branch}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineBranch not implemented');
    }

    /**
     * Test case for getPipelineBranchRun
     *
     * .
     *
     */
    public function testGetPipelineBranchRun(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{branch}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineBranchRun not implemented');
    }

    /**
     * Test case for getPipelineBranches
     *
     * .
     *
     */
    public function testGetPipelineBranches(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineBranches not implemented');
    }

    /**
     * Test case for getPipelineFolder
     *
     * .
     *
     */
    public function testGetPipelineFolder(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{folder}/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{folder}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineFolder not implemented');
    }

    /**
     * Test case for getPipelineFolderPipeline
     *
     * .
     *
     */
    public function testGetPipelineFolderPipeline(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{folder}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineFolderPipeline not implemented');
    }

    /**
     * Test case for getPipelineQueue
     *
     * .
     *
     */
    public function testGetPipelineQueue(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineQueue not implemented');
    }

    /**
     * Test case for getPipelineRun
     *
     * .
     *
     */
    public function testGetPipelineRun(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineRun not implemented');
    }

    /**
     * Test case for getPipelineRunLog
     *
     * .
     *
     */
    public function testGetPipelineRunLog(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineRunLog not implemented');
    }

    /**
     * Test case for getPipelineRunNode
     *
     * .
     *
     */
    public function testGetPipelineRunNode(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{node}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineRunNode not implemented');
    }

    /**
     * Test case for getPipelineRunNodeStep
     *
     * .
     *
     */
    public function testGetPipelineRunNodeStep(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{node}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{step}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineRunNodeStep not implemented');
    }

    /**
     * Test case for getPipelineRunNodeStepLog
     *
     * .
     *
     */
    public function testGetPipelineRunNodeStepLog(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{node}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{step}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineRunNodeStepLog not implemented');
    }

    /**
     * Test case for getPipelineRunNodeSteps
     *
     * .
     *
     */
    public function testGetPipelineRunNodeSteps(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{node}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineRunNodeSteps not implemented');
    }

    /**
     * Test case for getPipelineRunNodes
     *
     * .
     *
     */
    public function testGetPipelineRunNodes(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineRunNodes not implemented');
    }

    /**
     * Test case for getPipelineRuns
     *
     * .
     *
     */
    public function testGetPipelineRuns(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelineRuns not implemented');
    }

    /**
     * Test case for getPipelines
     *
     * .
     *
     */
    public function testGetPipelines(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getPipelines not implemented');
    }

    /**
     * Test case for getSCM
     *
     * .
     *
     */
    public function testGetSCM(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/scm/{scm}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scm}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSCM not implemented');
    }

    /**
     * Test case for getSCMOrganisationRepositories
     *
     * .
     *
     */
    public function testGetSCMOrganisationRepositories(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scm}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scmOrganisation}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSCMOrganisationRepositories not implemented');
    }

    /**
     * Test case for getSCMOrganisationRepository
     *
     * .
     *
     */
    public function testGetSCMOrganisationRepository(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scm}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scmOrganisation}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{repository}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSCMOrganisationRepository not implemented');
    }

    /**
     * Test case for getSCMOrganisations
     *
     * .
     *
     */
    public function testGetSCMOrganisations(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/scm/{scm}/organizations';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{scm}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getSCMOrganisations not implemented');
    }

    /**
     * Test case for getUser
     *
     * .
     *
     */
    public function testGetUser(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/users/{user}';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{user}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getUser not implemented');
    }

    /**
     * Test case for getUserFavorites
     *
     * .
     *
     */
    public function testGetUserFavorites(): void
    {
        $client = self::$client;

        $path = '/blue/rest/users/{user}/favorites';
        $pattern = '{user}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getUserFavorites not implemented');
    }

    /**
     * Test case for getUsers
     *
     * .
     *
     */
    public function testGetUsers(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/users/';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for getUsers not implemented');
    }

    /**
     * Test case for postPipelineRun
     *
     * .
     *
     */
    public function testPostPipelineRun(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for postPipelineRun not implemented');
    }

    /**
     * Test case for postPipelineRuns
     *
     * .
     *
     */
    public function testPostPipelineRuns(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('POST', $path);
        $this->markTestSkipped('Test for postPipelineRuns not implemented');
    }

    /**
     * Test case for putPipelineFavorite
     *
     * .
     *
     */
    public function testPutPipelineFavorite(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path, [], [], ['CONTENT_TYPE' => 'application/json']);
        $this->markTestSkipped('Test for putPipelineFavorite not implemented');
    }

    /**
     * Test case for putPipelineRun
     *
     * .
     *
     */
    public function testPutPipelineRun(): void
    {
        $client = self::$client;

        $path = '/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop';
        $pattern = '{organization}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{pipeline}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);
        $pattern = '{run}';
        $data = $this->genTestData('[a-z0-9]+');
        $path = str_replace($pattern, $data, $path);

        $crawler = $client->request('PUT', $path);
        $this->markTestSkipped('Test for putPipelineRun not implemented');
    }

    /**
     * Test case for search
     *
     * .
     *
     */
    public function testSearch(): void
    {
        $client = self::$client;

        $path = '/blue/rest/search/';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for search not implemented');
    }

    /**
     * Test case for searchClasses
     *
     * .
     *
     */
    public function testSearchClasses(): void
    {
        $client = self::$client;

        $path = '/blue/rest/classes/';

        $crawler = $client->request('GET', $path);
        $this->markTestSkipped('Test for searchClasses not implemented');
    }

    /**
     * @param string $regexp
     * @return mixed
     */
    protected function genTestData(string $regexp)
    {
        $grammar  = new \Hoa\File\Read('hoa://Library/Regex/Grammar.pp');
        $compiler = \Hoa\Compiler\Llk\Llk::load($grammar);
        $ast      = $compiler->parse($regexp);
        $generator = new \Hoa\Regex\Visitor\Isotropic(new \Hoa\Math\Sampler\Random());

        return $generator->visit($ast);
    }
}
