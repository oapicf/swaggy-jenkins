<?php
/**
 * MultibranchPipelineTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 2.0.1-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\MultibranchPipeline;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * MultibranchPipelineTest Class Doc Comment
 *
 * @category    Class
 * @description MultibranchPipeline
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\MultibranchPipeline
 */
class MultibranchPipelineTest extends TestCase
{
    protected MultibranchPipeline|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(MultibranchPipeline::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(MultibranchPipeline::class));
        $this->assertInstanceOf(MultibranchPipeline::class, $this->object);
    }

    /**
     * Test attribute "displayName"
     *
     * @group unit
     * @small
     */
    public function testPropertyDisplayName(): void
    {
        $this->markTestSkipped('Test for property displayName not implemented');
    }

    /**
     * Test attribute "estimatedDurationInMillis"
     *
     * @group unit
     * @small
     */
    public function testPropertyEstimatedDurationInMillis(): void
    {
        $this->markTestSkipped('Test for property estimatedDurationInMillis not implemented');
    }

    /**
     * Test attribute "latestRun"
     *
     * @group unit
     * @small
     */
    public function testPropertyLatestRun(): void
    {
        $this->markTestSkipped('Test for property latestRun not implemented');
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "organization"
     *
     * @group unit
     * @small
     */
    public function testPropertyOrganization(): void
    {
        $this->markTestSkipped('Test for property organization not implemented');
    }

    /**
     * Test attribute "weatherScore"
     *
     * @group unit
     * @small
     */
    public function testPropertyWeatherScore(): void
    {
        $this->markTestSkipped('Test for property weatherScore not implemented');
    }

    /**
     * Test attribute "branchNames"
     *
     * @group unit
     * @small
     */
    public function testPropertyBranchNames(): void
    {
        $this->markTestSkipped('Test for property branchNames not implemented');
    }

    /**
     * Test attribute "numberOfFailingBranches"
     *
     * @group unit
     * @small
     */
    public function testPropertyNumberOfFailingBranches(): void
    {
        $this->markTestSkipped('Test for property numberOfFailingBranches not implemented');
    }

    /**
     * Test attribute "numberOfFailingPullRequests"
     *
     * @group unit
     * @small
     */
    public function testPropertyNumberOfFailingPullRequests(): void
    {
        $this->markTestSkipped('Test for property numberOfFailingPullRequests not implemented');
    }

    /**
     * Test attribute "numberOfSuccessfulBranches"
     *
     * @group unit
     * @small
     */
    public function testPropertyNumberOfSuccessfulBranches(): void
    {
        $this->markTestSkipped('Test for property numberOfSuccessfulBranches not implemented');
    }

    /**
     * Test attribute "numberOfSuccessfulPullRequests"
     *
     * @group unit
     * @small
     */
    public function testPropertyNumberOfSuccessfulPullRequests(): void
    {
        $this->markTestSkipped('Test for property numberOfSuccessfulPullRequests not implemented');
    }

    /**
     * Test attribute "totalNumberOfBranches"
     *
     * @group unit
     * @small
     */
    public function testPropertyTotalNumberOfBranches(): void
    {
        $this->markTestSkipped('Test for property totalNumberOfBranches not implemented');
    }

    /**
     * Test attribute "totalNumberOfPullRequests"
     *
     * @group unit
     * @small
     */
    public function testPropertyTotalNumberOfPullRequests(): void
    {
        $this->markTestSkipped('Test for property totalNumberOfPullRequests not implemented');
    }

    /**
     * Test attribute "class"
     *
     * @group unit
     * @small
     */
    public function testPropertyClass(): void
    {
        $this->markTestSkipped('Test for property class not implemented');
    }
}
