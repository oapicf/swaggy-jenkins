<?php
/**
 * PipelinelatestRunTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\PipelinelatestRun;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * PipelinelatestRunTest Class Doc Comment
 *
 * @category    Class
 * @description PipelinelatestRun
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\PipelinelatestRun
 */
class PipelinelatestRunTest extends TestCase
{
    protected PipelinelatestRun|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(PipelinelatestRun::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(PipelinelatestRun::class));
        $this->assertInstanceOf(PipelinelatestRun::class, $this->object);
    }

    /**
     * Test attribute "artifacts"
     *
     * @group unit
     * @small
     */
    public function testPropertyArtifacts(): void
    {
        $this->markTestSkipped('Test for property artifacts not implemented');
    }

    /**
     * Test attribute "durationInMillis"
     *
     * @group unit
     * @small
     */
    public function testPropertyDurationInMillis(): void
    {
        $this->markTestSkipped('Test for property durationInMillis not implemented');
    }

    /**
     * Test attribute "estimatedDurationInMillis"
     *
     * @group unit
     * @small
     */
    public function testPropertyEstimatedDurationInMillis(): void
    {
        $this->markTestSkipped('Test for property estimatedDurationInMillis not implemented');
    }

    /**
     * Test attribute "enQueueTime"
     *
     * @group unit
     * @small
     */
    public function testPropertyEnQueueTime(): void
    {
        $this->markTestSkipped('Test for property enQueueTime not implemented');
    }

    /**
     * Test attribute "endTime"
     *
     * @group unit
     * @small
     */
    public function testPropertyEndTime(): void
    {
        $this->markTestSkipped('Test for property endTime not implemented');
    }

    /**
     * Test attribute "id"
     *
     * @group unit
     * @small
     */
    public function testPropertyId(): void
    {
        $this->markTestSkipped('Test for property id not implemented');
    }

    /**
     * Test attribute "organization"
     *
     * @group unit
     * @small
     */
    public function testPropertyOrganization(): void
    {
        $this->markTestSkipped('Test for property organization not implemented');
    }

    /**
     * Test attribute "pipeline"
     *
     * @group unit
     * @small
     */
    public function testPropertyPipeline(): void
    {
        $this->markTestSkipped('Test for property pipeline not implemented');
    }

    /**
     * Test attribute "result"
     *
     * @group unit
     * @small
     */
    public function testPropertyResult(): void
    {
        $this->markTestSkipped('Test for property result not implemented');
    }

    /**
     * Test attribute "runSummary"
     *
     * @group unit
     * @small
     */
    public function testPropertyRunSummary(): void
    {
        $this->markTestSkipped('Test for property runSummary not implemented');
    }

    /**
     * Test attribute "startTime"
     *
     * @group unit
     * @small
     */
    public function testPropertyStartTime(): void
    {
        $this->markTestSkipped('Test for property startTime not implemented');
    }

    /**
     * Test attribute "state"
     *
     * @group unit
     * @small
     */
    public function testPropertyState(): void
    {
        $this->markTestSkipped('Test for property state not implemented');
    }

    /**
     * Test attribute "type"
     *
     * @group unit
     * @small
     */
    public function testPropertyType(): void
    {
        $this->markTestSkipped('Test for property type not implemented');
    }

    /**
     * Test attribute "commitId"
     *
     * @group unit
     * @small
     */
    public function testPropertyCommitId(): void
    {
        $this->markTestSkipped('Test for property commitId not implemented');
    }

    /**
     * Test attribute "class"
     *
     * @group unit
     * @small
     */
    public function testPropertyClass(): void
    {
        $this->markTestSkipped('Test for property class not implemented');
    }
}
