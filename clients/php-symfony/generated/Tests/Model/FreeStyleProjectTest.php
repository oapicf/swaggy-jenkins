<?php
/**
 * FreeStyleProjectTest
 *
 * PHP version 8.1.1
 *
 * @category Class
 * @package  OpenAPI\Server\Tests\Model
 * @author   openapi-generator contributors
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * The version of the OpenAPI document: 3.0.2-pre.0
 * Contact: blah+oapicf@cliffano.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Server\Tests\Model;

use OpenAPI\Server\Model\FreeStyleProject;
use PHPUnit\Framework\MockObject\MockObject;
use PHPUnit\Framework\TestCase;

/**
 * FreeStyleProjectTest Class Doc Comment
 *
 * @category    Class
 * @description FreeStyleProject
 * @package     OpenAPI\Server\Tests\Model
 * @author      openapi-generator contributors
 * @link        https://github.com/openapitools/openapi-generator
 * @coversDefaultClass \OpenAPI\Server\Model\FreeStyleProject
 */
class FreeStyleProjectTest extends TestCase
{
    protected FreeStyleProject|MockObject $object;

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
        $this->object = $this->getMockBuilder(FreeStyleProject::class)->getMockForAbstractClass();
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * @group integration
     * @small
     */
    public function testTestClassExists(): void
    {
        $this->assertTrue(class_exists(FreeStyleProject::class));
        $this->assertInstanceOf(FreeStyleProject::class, $this->object);
    }

    /**
     * Test attribute "class"
     *
     * @group unit
     * @small
     */
    public function testPropertyClass(): void
    {
        $this->markTestSkipped('Test for property class not implemented');
    }

    /**
     * Test attribute "name"
     *
     * @group unit
     * @small
     */
    public function testPropertyName(): void
    {
        $this->markTestSkipped('Test for property name not implemented');
    }

    /**
     * Test attribute "url"
     *
     * @group unit
     * @small
     */
    public function testPropertyUrl(): void
    {
        $this->markTestSkipped('Test for property url not implemented');
    }

    /**
     * Test attribute "color"
     *
     * @group unit
     * @small
     */
    public function testPropertyColor(): void
    {
        $this->markTestSkipped('Test for property color not implemented');
    }

    /**
     * Test attribute "actions"
     *
     * @group unit
     * @small
     */
    public function testPropertyActions(): void
    {
        $this->markTestSkipped('Test for property actions not implemented');
    }

    /**
     * Test attribute "description"
     *
     * @group unit
     * @small
     */
    public function testPropertyDescription(): void
    {
        $this->markTestSkipped('Test for property description not implemented');
    }

    /**
     * Test attribute "displayName"
     *
     * @group unit
     * @small
     */
    public function testPropertyDisplayName(): void
    {
        $this->markTestSkipped('Test for property displayName not implemented');
    }

    /**
     * Test attribute "displayNameOrNull"
     *
     * @group unit
     * @small
     */
    public function testPropertyDisplayNameOrNull(): void
    {
        $this->markTestSkipped('Test for property displayNameOrNull not implemented');
    }

    /**
     * Test attribute "fullDisplayName"
     *
     * @group unit
     * @small
     */
    public function testPropertyFullDisplayName(): void
    {
        $this->markTestSkipped('Test for property fullDisplayName not implemented');
    }

    /**
     * Test attribute "fullName"
     *
     * @group unit
     * @small
     */
    public function testPropertyFullName(): void
    {
        $this->markTestSkipped('Test for property fullName not implemented');
    }

    /**
     * Test attribute "buildable"
     *
     * @group unit
     * @small
     */
    public function testPropertyBuildable(): void
    {
        $this->markTestSkipped('Test for property buildable not implemented');
    }

    /**
     * Test attribute "builds"
     *
     * @group unit
     * @small
     */
    public function testPropertyBuilds(): void
    {
        $this->markTestSkipped('Test for property builds not implemented');
    }

    /**
     * Test attribute "firstBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyFirstBuild(): void
    {
        $this->markTestSkipped('Test for property firstBuild not implemented');
    }

    /**
     * Test attribute "healthReport"
     *
     * @group unit
     * @small
     */
    public function testPropertyHealthReport(): void
    {
        $this->markTestSkipped('Test for property healthReport not implemented');
    }

    /**
     * Test attribute "inQueue"
     *
     * @group unit
     * @small
     */
    public function testPropertyInQueue(): void
    {
        $this->markTestSkipped('Test for property inQueue not implemented');
    }

    /**
     * Test attribute "keepDependencies"
     *
     * @group unit
     * @small
     */
    public function testPropertyKeepDependencies(): void
    {
        $this->markTestSkipped('Test for property keepDependencies not implemented');
    }

    /**
     * Test attribute "lastBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastBuild(): void
    {
        $this->markTestSkipped('Test for property lastBuild not implemented');
    }

    /**
     * Test attribute "lastCompletedBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastCompletedBuild(): void
    {
        $this->markTestSkipped('Test for property lastCompletedBuild not implemented');
    }

    /**
     * Test attribute "lastFailedBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastFailedBuild(): void
    {
        $this->markTestSkipped('Test for property lastFailedBuild not implemented');
    }

    /**
     * Test attribute "lastStableBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastStableBuild(): void
    {
        $this->markTestSkipped('Test for property lastStableBuild not implemented');
    }

    /**
     * Test attribute "lastSuccessfulBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastSuccessfulBuild(): void
    {
        $this->markTestSkipped('Test for property lastSuccessfulBuild not implemented');
    }

    /**
     * Test attribute "lastUnstableBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastUnstableBuild(): void
    {
        $this->markTestSkipped('Test for property lastUnstableBuild not implemented');
    }

    /**
     * Test attribute "lastUnsuccessfulBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyLastUnsuccessfulBuild(): void
    {
        $this->markTestSkipped('Test for property lastUnsuccessfulBuild not implemented');
    }

    /**
     * Test attribute "nextBuildNumber"
     *
     * @group unit
     * @small
     */
    public function testPropertyNextBuildNumber(): void
    {
        $this->markTestSkipped('Test for property nextBuildNumber not implemented');
    }

    /**
     * Test attribute "queueItem"
     *
     * @group unit
     * @small
     */
    public function testPropertyQueueItem(): void
    {
        $this->markTestSkipped('Test for property queueItem not implemented');
    }

    /**
     * Test attribute "concurrentBuild"
     *
     * @group unit
     * @small
     */
    public function testPropertyConcurrentBuild(): void
    {
        $this->markTestSkipped('Test for property concurrentBuild not implemented');
    }

    /**
     * Test attribute "scm"
     *
     * @group unit
     * @small
     */
    public function testPropertyScm(): void
    {
        $this->markTestSkipped('Test for property scm not implemented');
    }
}
