{-
   Swaggy Jenkins
   Jenkins API clients generated from Swagger / Open API specification

   The version of the OpenAPI document: 3.0.2-pre.0
   Contact: blah+oapicf@cliffano.com

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AllView
    , BranchImpl
    , BranchImpllinks
    , BranchImplpermissions
    , CauseAction
    , CauseUserIdCause
    , ClassesByClass
    , ClockDifference
    , ComputerSet
    , DefaultCrumbIssuer
    , DiskSpaceMonitorDescriptorDiskSpace
    , EmptyChangeLogSet
    , ExtensionClassContainerImpl1
    , ExtensionClassContainerImpl1links
    , ExtensionClassContainerImpl1map
    , ExtensionClassImpl
    , ExtensionClassImpllinks
    , FavoriteImpl
    , FavoriteImpllinks
    , FreeStyleBuild
    , FreeStyleProject
    , FreeStyleProjectactions
    , FreeStyleProjecthealthReport
    , GenericResource
    , GithubContent
    , GithubFile
    , GithubOrganization
    , GithubOrganizationlinks
    , GithubRepositories
    , GithubRepositorieslinks
    , GithubRepository
    , GithubRepositorylinks
    , GithubRepositorypermissions
    , GithubRespositoryContainer
    , GithubRespositoryContainerlinks
    , GithubScm
    , GithubScmlinks
    , Hudson
    , HudsonMasterComputer
    , HudsonMasterComputerexecutors
    , HudsonMasterComputermonitorData
    , HudsonassignedLabels
    , InputStepImpl
    , InputStepImpllinks
    , Label1
    , Link
    , ListView
    , MultibranchPipeline
    , NullSCM
    , Organisation
    , Pipeline
    , PipelineActivity
    , PipelineActivityartifacts
    , PipelineBranchesitem
    , PipelineBranchesitemlatestRun
    , PipelineBranchesitempullRequest
    , PipelineBranchesitempullRequestlinks
    , PipelineFolderImpl
    , PipelineImpl
    , PipelineImpllinks
    , PipelineRun
    , PipelineRunImpl
    , PipelineRunImpllinks
    , PipelineRunNode
    , PipelineRunNodeedges
    , PipelineRunartifacts
    , PipelineStepImpl
    , PipelineStepImpllinks
    , PipelinelatestRun
    , PipelinelatestRunartifacts
    , Queue
    , QueueBlockedItem
    , QueueItemImpl
    , QueueLeftItem
    , ResponseTimeMonitorData
    , StringParameterDefinition
    , StringParameterValue
    , SwapSpaceMonitorMemoryUsage2
    , UnlabeledLoadStatistics
    , User
    , encodeAllView
    , encodeBranchImpl
    , encodeBranchImpllinks
    , encodeBranchImplpermissions
    , encodeCauseAction
    , encodeCauseUserIdCause
    , encodeClassesByClass
    , encodeClockDifference
    , encodeComputerSet
    , encodeDefaultCrumbIssuer
    , encodeDiskSpaceMonitorDescriptorDiskSpace
    , encodeEmptyChangeLogSet
    , encodeExtensionClassContainerImpl1
    , encodeExtensionClassContainerImpl1links
    , encodeExtensionClassContainerImpl1map
    , encodeExtensionClassImpl
    , encodeExtensionClassImpllinks
    , encodeFavoriteImpl
    , encodeFavoriteImpllinks
    , encodeFreeStyleBuild
    , encodeFreeStyleProject
    , encodeFreeStyleProjectactions
    , encodeFreeStyleProjecthealthReport
    , encodeGenericResource
    , encodeGithubContent
    , encodeGithubFile
    , encodeGithubOrganization
    , encodeGithubOrganizationlinks
    , encodeGithubRepositories
    , encodeGithubRepositorieslinks
    , encodeGithubRepository
    , encodeGithubRepositorylinks
    , encodeGithubRepositorypermissions
    , encodeGithubRespositoryContainer
    , encodeGithubRespositoryContainerlinks
    , encodeGithubScm
    , encodeGithubScmlinks
    , encodeHudson
    , encodeHudsonMasterComputer
    , encodeHudsonMasterComputerexecutors
    , encodeHudsonMasterComputermonitorData
    , encodeHudsonassignedLabels
    , encodeInputStepImpl
    , encodeInputStepImpllinks
    , encodeLabel1
    , encodeLink
    , encodeListView
    , encodeMultibranchPipeline
    , encodeNullSCM
    , encodeOrganisation
    , encodePipeline
    , encodePipelineActivity
    , encodePipelineActivityartifacts
    , encodePipelineBranchesitem
    , encodePipelineBranchesitemlatestRun
    , encodePipelineBranchesitempullRequest
    , encodePipelineBranchesitempullRequestlinks
    , encodePipelineFolderImpl
    , encodePipelineImpl
    , encodePipelineImpllinks
    , encodePipelineRun
    , encodePipelineRunImpl
    , encodePipelineRunImpllinks
    , encodePipelineRunNode
    , encodePipelineRunNodeedges
    , encodePipelineRunartifacts
    , encodePipelineStepImpl
    , encodePipelineStepImpllinks
    , encodePipelinelatestRun
    , encodePipelinelatestRunartifacts
    , encodeQueue
    , encodeQueueBlockedItem
    , encodeQueueItemImpl
    , encodeQueueLeftItem
    , encodeResponseTimeMonitorData
    , encodeStringParameterDefinition
    , encodeStringParameterValue
    , encodeSwapSpaceMonitorMemoryUsage2
    , encodeUnlabeledLoadStatistics
    , encodeUser
    , allViewDecoder
    , branchImplDecoder
    , branchImpllinksDecoder
    , branchImplpermissionsDecoder
    , causeActionDecoder
    , causeUserIdCauseDecoder
    , classesByClassDecoder
    , clockDifferenceDecoder
    , computerSetDecoder
    , defaultCrumbIssuerDecoder
    , diskSpaceMonitorDescriptorDiskSpaceDecoder
    , emptyChangeLogSetDecoder
    , extensionClassContainerImpl1Decoder
    , extensionClassContainerImpl1linksDecoder
    , extensionClassContainerImpl1mapDecoder
    , extensionClassImplDecoder
    , extensionClassImpllinksDecoder
    , favoriteImplDecoder
    , favoriteImpllinksDecoder
    , freeStyleBuildDecoder
    , freeStyleProjectDecoder
    , freeStyleProjectactionsDecoder
    , freeStyleProjecthealthReportDecoder
    , genericResourceDecoder
    , githubContentDecoder
    , githubFileDecoder
    , githubOrganizationDecoder
    , githubOrganizationlinksDecoder
    , githubRepositoriesDecoder
    , githubRepositorieslinksDecoder
    , githubRepositoryDecoder
    , githubRepositorylinksDecoder
    , githubRepositorypermissionsDecoder
    , githubRespositoryContainerDecoder
    , githubRespositoryContainerlinksDecoder
    , githubScmDecoder
    , githubScmlinksDecoder
    , hudsonDecoder
    , hudsonMasterComputerDecoder
    , hudsonMasterComputerexecutorsDecoder
    , hudsonMasterComputermonitorDataDecoder
    , hudsonassignedLabelsDecoder
    , inputStepImplDecoder
    , inputStepImpllinksDecoder
    , label1Decoder
    , linkDecoder
    , listViewDecoder
    , multibranchPipelineDecoder
    , nullSCMDecoder
    , organisationDecoder
    , pipelineDecoder
    , pipelineActivityDecoder
    , pipelineActivityartifactsDecoder
    , pipelineBranchesitemDecoder
    , pipelineBranchesitemlatestRunDecoder
    , pipelineBranchesitempullRequestDecoder
    , pipelineBranchesitempullRequestlinksDecoder
    , pipelineFolderImplDecoder
    , pipelineImplDecoder
    , pipelineImpllinksDecoder
    , pipelineRunDecoder
    , pipelineRunImplDecoder
    , pipelineRunImpllinksDecoder
    , pipelineRunNodeDecoder
    , pipelineRunNodeedgesDecoder
    , pipelineRunartifactsDecoder
    , pipelineStepImplDecoder
    , pipelineStepImpllinksDecoder
    , pipelinelatestRunDecoder
    , pipelinelatestRunartifactsDecoder
    , queueDecoder
    , queueBlockedItemDecoder
    , queueItemImplDecoder
    , queueLeftItemDecoder
    , responseTimeMonitorDataDecoder
    , stringParameterDefinitionDecoder
    , stringParameterValueDecoder
    , swapSpaceMonitorMemoryUsage2Decoder
    , unlabeledLoadStatisticsDecoder
    , userDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type alias AllView =
    { class : Maybe String
    , name : Maybe String
    , url : Maybe String
    }


type alias BranchImpl =
    { class : Maybe String
    , displayName : Maybe String
    , estimatedDurationInMillis : Maybe Int
    , fullDisplayName : Maybe String
    , fullName : Maybe String
    , name : Maybe String
    , organization : Maybe String
    , parameters : Maybe ( List StringParameterDefinition )
    , permissions : Maybe BranchImplpermissions
    , weatherScore : Maybe Int
    , pullRequest : Maybe String
    , links : Maybe BranchImpllinks
    , latestRun : Maybe PipelineRunImpl
    }


type alias BranchImpllinks =
    { self : Maybe Link
    , actions : Maybe Link
    , runs : Maybe Link
    , queue : Maybe Link
    , class : Maybe String
    }


type alias BranchImplpermissions =
    { create : Maybe Bool
    , read : Maybe Bool
    , start : Maybe Bool
    , stop : Maybe Bool
    , class : Maybe String
    }


type alias CauseAction =
    { class : Maybe String
    , causes : Maybe ( List CauseUserIdCause )
    }


type alias CauseUserIdCause =
    { class : Maybe String
    , shortDescription : Maybe String
    , userId : Maybe String
    , userName : Maybe String
    }


type alias ClassesByClass =
    { classes : Maybe ( List String )
    , class : Maybe String
    }


type alias ClockDifference =
    { class : Maybe String
    , diff : Maybe Int
    }


type alias ComputerSet =
    { class : Maybe String
    , busyExecutors : Maybe Int
    , computer : Maybe ( List HudsonMasterComputer )
    , displayName : Maybe String
    , totalExecutors : Maybe Int
    }


type alias DefaultCrumbIssuer =
    { class : Maybe String
    , crumb : Maybe String
    , crumbRequestField : Maybe String
    }


type alias DiskSpaceMonitorDescriptorDiskSpace =
    { class : Maybe String
    , timestamp : Maybe Int
    , path : Maybe String
    , size : Maybe Int
    }


type alias EmptyChangeLogSet =
    { class : Maybe String
    , kind : Maybe String
    }


type alias ExtensionClassContainerImpl1 =
    { class : Maybe String
    , links : Maybe ExtensionClassContainerImpl1links
    , map : Maybe ExtensionClassContainerImpl1map
    }


type alias ExtensionClassContainerImpl1links =
    { self : Maybe Link
    , class : Maybe String
    }


type alias ExtensionClassContainerImpl1map =
    { iojenkinsblueoceanserviceembeddedrestPipelineImpl : Maybe ExtensionClassImpl
    , iojenkinsblueoceanserviceembeddedrestMultiBranchPipelineImpl : Maybe ExtensionClassImpl
    , class : Maybe String
    }


type alias ExtensionClassImpl =
    { class : Maybe String
    , links : Maybe ExtensionClassImpllinks
    , classes : Maybe ( List String )
    }


type alias ExtensionClassImpllinks =
    { self : Maybe Link
    , class : Maybe String
    }


type alias FavoriteImpl =
    { class : Maybe String
    , links : Maybe FavoriteImpllinks
    , item : Maybe PipelineImpl
    }


type alias FavoriteImpllinks =
    { self : Maybe Link
    , class : Maybe String
    }


type alias FreeStyleBuild =
    { class : Maybe String
    , number : Maybe Int
    , url : Maybe String
    , actions : Maybe ( List CauseAction )
    , building : Maybe Bool
    , description : Maybe String
    , displayName : Maybe String
    , duration : Maybe Int
    , estimatedDuration : Maybe Int
    , executor : Maybe String
    , fullDisplayName : Maybe String
    , id : Maybe String
    , keepLog : Maybe Bool
    , queueId : Maybe Int
    , result : Maybe String
    , timestamp : Maybe Int
    , builtOn : Maybe String
    , changeSet : Maybe EmptyChangeLogSet
    }


type alias FreeStyleProject =
    { class : Maybe String
    , name : Maybe String
    , url : Maybe String
    , color : Maybe String
    , actions : Maybe ( List FreeStyleProjectactions )
    , description : Maybe String
    , displayName : Maybe String
    , displayNameOrNull : Maybe String
    , fullDisplayName : Maybe String
    , fullName : Maybe String
    , buildable : Maybe Bool
    , builds : Maybe ( List FreeStyleBuild )
    , firstBuild : Maybe FreeStyleBuild
    , healthReport : Maybe ( List FreeStyleProjecthealthReport )
    , inQueue : Maybe Bool
    , keepDependencies : Maybe Bool
    , lastBuild : Maybe FreeStyleBuild
    , lastCompletedBuild : Maybe FreeStyleBuild
    , lastFailedBuild : Maybe String
    , lastStableBuild : Maybe FreeStyleBuild
    , lastSuccessfulBuild : Maybe FreeStyleBuild
    , lastUnstableBuild : Maybe String
    , lastUnsuccessfulBuild : Maybe String
    , nextBuildNumber : Maybe Int
    , queueItem : Maybe String
    , concurrentBuild : Maybe Bool
    , scm : Maybe NullSCM
    }


type alias FreeStyleProjectactions =
    { class : Maybe String
    }


type alias FreeStyleProjecthealthReport =
    { description : Maybe String
    , iconClassName : Maybe String
    , iconUrl : Maybe String
    , score : Maybe Int
    , class : Maybe String
    }


type alias GenericResource =
    { class : Maybe String
    , displayName : Maybe String
    , durationInMillis : Maybe Int
    , id : Maybe String
    , result : Maybe String
    , startTime : Maybe String
    }


type alias GithubContent =
    { name : Maybe String
    , sha : Maybe String
    , class : Maybe String
    , repo : Maybe String
    , size : Maybe Int
    , owner : Maybe String
    , path : Maybe String
    , base64Data : Maybe String
    }


type alias GithubFile =
    { content : Maybe GithubContent
    , class : Maybe String
    }


type alias GithubOrganization =
    { class : Maybe String
    , links : Maybe GithubOrganizationlinks
    , jenkinsOrganizationPipeline : Maybe Bool
    , name : Maybe String
    }


type alias GithubOrganizationlinks =
    { repositories : Maybe Link
    , self : Maybe Link
    , class : Maybe String
    }


type alias GithubRepositories =
    { class : Maybe String
    , links : Maybe GithubRepositorieslinks
    , items : Maybe ( List GithubRepository )
    , lastPage : Maybe Int
    , nextPage : Maybe Int
    , pageSize : Maybe Int
    }


type alias GithubRepositorieslinks =
    { self : Maybe Link
    , class : Maybe String
    }


type alias GithubRepository =
    { class : Maybe String
    , links : Maybe GithubRepositorylinks
    , defaultBranch : Maybe String
    , description : Maybe String
    , name : Maybe String
    , permissions : Maybe GithubRepositorypermissions
    , private : Maybe Bool
    , fullName : Maybe String
    }


type alias GithubRepositorylinks =
    { self : Maybe Link
    , class : Maybe String
    }


type alias GithubRepositorypermissions =
    { admin : Maybe Bool
    , push : Maybe Bool
    , pull : Maybe Bool
    , class : Maybe String
    }


type alias GithubRespositoryContainer =
    { class : Maybe String
    , links : Maybe GithubRespositoryContainerlinks
    , repositories : Maybe GithubRepositories
    }


type alias GithubRespositoryContainerlinks =
    { self : Maybe Link
    , class : Maybe String
    }


type alias GithubScm =
    { class : Maybe String
    , links : Maybe GithubScmlinks
    , credentialId : Maybe String
    , id : Maybe String
    , uri : Maybe String
    }


type alias GithubScmlinks =
    { self : Maybe Link
    , class : Maybe String
    }


type alias Hudson =
    { class : Maybe String
    , assignedLabels : Maybe ( List HudsonassignedLabels )
    , mode : Maybe String
    , nodeDescription : Maybe String
    , nodeName : Maybe String
    , numExecutors : Maybe Int
    , description : Maybe String
    , jobs : Maybe ( List FreeStyleProject )
    , primaryView : Maybe AllView
    , quietingDown : Maybe Bool
    , slaveAgentPort : Maybe Int
    , unlabeledLoad : Maybe UnlabeledLoadStatistics
    , useCrumbs : Maybe Bool
    , useSecurity : Maybe Bool
    , views : Maybe ( List AllView )
    }


type alias HudsonMasterComputer =
    { class : Maybe String
    , displayName : Maybe String
    , executors : Maybe ( List HudsonMasterComputerexecutors )
    , icon : Maybe String
    , iconClassName : Maybe String
    , idle : Maybe Bool
    , jnlpAgent : Maybe Bool
    , launchSupported : Maybe Bool
    , loadStatistics : Maybe Label1
    , manualLaunchAllowed : Maybe Bool
    , monitorData : Maybe HudsonMasterComputermonitorData
    , numExecutors : Maybe Int
    , offline : Maybe Bool
    , offlineCause : Maybe String
    , offlineCauseReason : Maybe String
    , temporarilyOffline : Maybe Bool
    }


type alias HudsonMasterComputerexecutors =
    { currentExecutable : Maybe FreeStyleBuild
    , idle : Maybe Bool
    , likelyStuck : Maybe Bool
    , number : Maybe Int
    , progress : Maybe Int
    , class : Maybe String
    }


type alias HudsonMasterComputermonitorData =
    { hudsonnodeMonitorsSwapSpaceMonitor : Maybe SwapSpaceMonitorMemoryUsage2
    , hudsonnodeMonitorsTemporarySpaceMonitor : Maybe DiskSpaceMonitorDescriptorDiskSpace
    , hudsonnodeMonitorsDiskSpaceMonitor : Maybe DiskSpaceMonitorDescriptorDiskSpace
    , hudsonnodeMonitorsArchitectureMonitor : Maybe String
    , hudsonnodeMonitorsResponseTimeMonitor : Maybe ResponseTimeMonitorData
    , hudsonnodeMonitorsClockMonitor : Maybe ClockDifference
    , class : Maybe String
    }


type alias HudsonassignedLabels =
    { class : Maybe String
    }


type alias InputStepImpl =
    { class : Maybe String
    , links : Maybe InputStepImpllinks
    , id : Maybe String
    , message : Maybe String
    , ok : Maybe String
    , parameters : Maybe ( List StringParameterDefinition )
    , submitter : Maybe String
    }


type alias InputStepImpllinks =
    { self : Maybe Link
    , class : Maybe String
    }


type alias Label1 =
    { class : Maybe String
    }


type alias Link =
    { class : Maybe String
    , href : Maybe String
    }


type alias ListView =
    { class : Maybe String
    , description : Maybe String
    , jobs : Maybe ( List FreeStyleProject )
    , name : Maybe String
    , url : Maybe String
    }


type alias MultibranchPipeline =
    { displayName : Maybe String
    , estimatedDurationInMillis : Maybe Int
    , latestRun : Maybe String
    , name : Maybe String
    , organization : Maybe String
    , weatherScore : Maybe Int
    , branchNames : Maybe ( List String )
    , numberOfFailingBranches : Maybe Int
    , numberOfFailingPullRequests : Maybe Int
    , numberOfSuccessfulBranches : Maybe Int
    , numberOfSuccessfulPullRequests : Maybe Int
    , totalNumberOfBranches : Maybe Int
    , totalNumberOfPullRequests : Maybe Int
    , class : Maybe String
    }


type alias NullSCM =
    { class : Maybe String
    }


type alias Organisation =
    { class : Maybe String
    , name : Maybe String
    }


type alias Pipeline =
    { class : Maybe String
    , organization : Maybe String
    , name : Maybe String
    , displayName : Maybe String
    , fullName : Maybe String
    , weatherScore : Maybe Int
    , estimatedDurationInMillis : Maybe Int
    , latestRun : Maybe PipelinelatestRun
    }


type alias PipelineActivity =
    { class : Maybe String
    , artifacts : Maybe ( List PipelineActivityartifacts )
    , durationInMillis : Maybe Int
    , estimatedDurationInMillis : Maybe Int
    , enQueueTime : Maybe String
    , endTime : Maybe String
    , id : Maybe String
    , organization : Maybe String
    , pipeline : Maybe String
    , result : Maybe String
    , runSummary : Maybe String
    , startTime : Maybe String
    , state : Maybe String
    , type_ : Maybe String
    , commitId : Maybe String
    }


type alias PipelineActivityartifacts =
    { name : Maybe String
    , size : Maybe Int
    , url : Maybe String
    , class : Maybe String
    }


type alias PipelineBranchesitem =
    { displayName : Maybe String
    , estimatedDurationInMillis : Maybe Int
    , name : Maybe String
    , weatherScore : Maybe Int
    , latestRun : Maybe PipelineBranchesitemlatestRun
    , organization : Maybe String
    , pullRequest : Maybe PipelineBranchesitempullRequest
    , totalNumberOfPullRequests : Maybe Int
    , class : Maybe String
    }


type alias PipelineBranchesitemlatestRun =
    { durationInMillis : Maybe Int
    , estimatedDurationInMillis : Maybe Int
    , enQueueTime : Maybe String
    , endTime : Maybe String
    , id : Maybe String
    , organization : Maybe String
    , pipeline : Maybe String
    , result : Maybe String
    , runSummary : Maybe String
    , startTime : Maybe String
    , state : Maybe String
    , type_ : Maybe String
    , commitId : Maybe String
    , class : Maybe String
    }


type alias PipelineBranchesitempullRequest =
    { links : Maybe PipelineBranchesitempullRequestlinks
    , author : Maybe String
    , id : Maybe String
    , title : Maybe String
    , url : Maybe String
    , class : Maybe String
    }


type alias PipelineBranchesitempullRequestlinks =
    { self : Maybe String
    , class : Maybe String
    }


type alias PipelineFolderImpl =
    { class : Maybe String
    , displayName : Maybe String
    , fullName : Maybe String
    , name : Maybe String
    , organization : Maybe String
    , numberOfFolders : Maybe Int
    , numberOfPipelines : Maybe Int
    }


type alias PipelineImpl =
    { class : Maybe String
    , displayName : Maybe String
    , estimatedDurationInMillis : Maybe Int
    , fullName : Maybe String
    , latestRun : Maybe String
    , name : Maybe String
    , organization : Maybe String
    , weatherScore : Maybe Int
    , links : Maybe PipelineImpllinks
    }


type alias PipelineImpllinks =
    { runs : Maybe Link
    , self : Maybe Link
    , queue : Maybe Link
    , actions : Maybe Link
    , class : Maybe String
    }


type alias PipelineRun =
    { class : Maybe String
    , artifacts : Maybe ( List PipelineRunartifacts )
    , durationInMillis : Maybe Int
    , estimatedDurationInMillis : Maybe Int
    , enQueueTime : Maybe String
    , endTime : Maybe String
    , id : Maybe String
    , organization : Maybe String
    , pipeline : Maybe String
    , result : Maybe String
    , runSummary : Maybe String
    , startTime : Maybe String
    , state : Maybe String
    , type_ : Maybe String
    , commitId : Maybe String
    }


type alias PipelineRunImpl =
    { class : Maybe String
    , links : Maybe PipelineRunImpllinks
    , durationInMillis : Maybe Int
    , enQueueTime : Maybe String
    , endTime : Maybe String
    , estimatedDurationInMillis : Maybe Int
    , id : Maybe String
    , organization : Maybe String
    , pipeline : Maybe String
    , result : Maybe String
    , runSummary : Maybe String
    , startTime : Maybe String
    , state : Maybe String
    , type_ : Maybe String
    , commitId : Maybe String
    }


type alias PipelineRunImpllinks =
    { nodes : Maybe Link
    , log : Maybe Link
    , self : Maybe Link
    , actions : Maybe Link
    , steps : Maybe Link
    , class : Maybe String
    }


type alias PipelineRunNode =
    { class : Maybe String
    , displayName : Maybe String
    , durationInMillis : Maybe Int
    , edges : Maybe ( List PipelineRunNodeedges )
    , id : Maybe String
    , result : Maybe String
    , startTime : Maybe String
    , state : Maybe String
    }


type alias PipelineRunNodeedges =
    { id : Maybe String
    , class : Maybe String
    }


type alias PipelineRunartifacts =
    { name : Maybe String
    , size : Maybe Int
    , url : Maybe String
    , class : Maybe String
    }


type alias PipelineStepImpl =
    { class : Maybe String
    , links : Maybe PipelineStepImpllinks
    , displayName : Maybe String
    , durationInMillis : Maybe Int
    , id : Maybe String
    , input : Maybe InputStepImpl
    , result : Maybe String
    , startTime : Maybe String
    , state : Maybe String
    }


type alias PipelineStepImpllinks =
    { self : Maybe Link
    , actions : Maybe Link
    , class : Maybe String
    }


type alias PipelinelatestRun =
    { artifacts : Maybe ( List PipelinelatestRunartifacts )
    , durationInMillis : Maybe Int
    , estimatedDurationInMillis : Maybe Int
    , enQueueTime : Maybe String
    , endTime : Maybe String
    , id : Maybe String
    , organization : Maybe String
    , pipeline : Maybe String
    , result : Maybe String
    , runSummary : Maybe String
    , startTime : Maybe String
    , state : Maybe String
    , type_ : Maybe String
    , commitId : Maybe String
    , class : Maybe String
    }


type alias PipelinelatestRunartifacts =
    { name : Maybe String
    , size : Maybe Int
    , url : Maybe String
    , class : Maybe String
    }


type alias Queue =
    { class : Maybe String
    , items : Maybe ( List QueueBlockedItem )
    }


type alias QueueBlockedItem =
    { class : Maybe String
    , actions : Maybe ( List CauseAction )
    , blocked : Maybe Bool
    , buildable : Maybe Bool
    , id : Maybe Int
    , inQueueSince : Maybe Int
    , params : Maybe String
    , stuck : Maybe Bool
    , task : Maybe FreeStyleProject
    , url : Maybe String
    , why : Maybe String
    , buildableStartMilliseconds : Maybe Int
    }


type alias QueueItemImpl =
    { class : Maybe String
    , expectedBuildNumber : Maybe Int
    , id : Maybe String
    , pipeline : Maybe String
    , queuedTime : Maybe Int
    }


type alias QueueLeftItem =
    { class : Maybe String
    , actions : Maybe ( List CauseAction )
    , blocked : Maybe Bool
    , buildable : Maybe Bool
    , id : Maybe Int
    , inQueueSince : Maybe Int
    , params : Maybe String
    , stuck : Maybe Bool
    , task : Maybe FreeStyleProject
    , url : Maybe String
    , why : Maybe String
    , cancelled : Maybe Bool
    , executable : Maybe FreeStyleBuild
    }


type alias ResponseTimeMonitorData =
    { class : Maybe String
    , timestamp : Maybe Int
    , average : Maybe Int
    }


type alias StringParameterDefinition =
    { class : Maybe String
    , defaultParameterValue : Maybe StringParameterValue
    , description : Maybe String
    , name : Maybe String
    , type_ : Maybe String
    }


type alias StringParameterValue =
    { class : Maybe String
    , name : Maybe String
    , value : Maybe String
    }


type alias SwapSpaceMonitorMemoryUsage2 =
    { class : Maybe String
    , availablePhysicalMemory : Maybe Int
    , availableSwapSpace : Maybe Int
    , totalPhysicalMemory : Maybe Int
    , totalSwapSpace : Maybe Int
    }


type alias UnlabeledLoadStatistics =
    { class : Maybe String
    }


type alias User =
    { class : Maybe String
    , id : Maybe String
    , fullName : Maybe String
    , email : Maybe String
    , name : Maybe String
    }


-- ENCODER


encodeAllView : AllView -> Json.Encode.Value
encodeAllView =
    encodeObject << encodeAllViewPairs


encodeAllViewWithTag : ( String, String ) -> AllView -> Json.Encode.Value
encodeAllViewWithTag (tagField, tag) model =
    encodeObject (encodeAllViewPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeAllViewPairs : AllView -> List EncodedField
encodeAllViewPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "url" Json.Encode.string model.url
            ]
    in
    pairs


encodeBranchImpl : BranchImpl -> Json.Encode.Value
encodeBranchImpl =
    encodeObject << encodeBranchImplPairs


encodeBranchImplWithTag : ( String, String ) -> BranchImpl -> Json.Encode.Value
encodeBranchImplWithTag (tagField, tag) model =
    encodeObject (encodeBranchImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBranchImplPairs : BranchImpl -> List EncodedField
encodeBranchImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "fullDisplayName" Json.Encode.string model.fullDisplayName
            , maybeEncode "fullName" Json.Encode.string model.fullName
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "parameters" (Json.Encode.list encodeStringParameterDefinition) model.parameters
            , maybeEncode "permissions" encodeBranchImplpermissions model.permissions
            , maybeEncode "weatherScore" Json.Encode.int model.weatherScore
            , maybeEncode "pullRequest" Json.Encode.string model.pullRequest
            , maybeEncode "_links" encodeBranchImpllinks model.links
            , maybeEncode "latestRun" encodePipelineRunImpl model.latestRun
            ]
    in
    pairs


encodeBranchImpllinks : BranchImpllinks -> Json.Encode.Value
encodeBranchImpllinks =
    encodeObject << encodeBranchImpllinksPairs


encodeBranchImpllinksWithTag : ( String, String ) -> BranchImpllinks -> Json.Encode.Value
encodeBranchImpllinksWithTag (tagField, tag) model =
    encodeObject (encodeBranchImpllinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBranchImpllinksPairs : BranchImpllinks -> List EncodedField
encodeBranchImpllinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "actions" encodeLink model.actions
            , maybeEncode "runs" encodeLink model.runs
            , maybeEncode "queue" encodeLink model.queue
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeBranchImplpermissions : BranchImplpermissions -> Json.Encode.Value
encodeBranchImplpermissions =
    encodeObject << encodeBranchImplpermissionsPairs


encodeBranchImplpermissionsWithTag : ( String, String ) -> BranchImplpermissions -> Json.Encode.Value
encodeBranchImplpermissionsWithTag (tagField, tag) model =
    encodeObject (encodeBranchImplpermissionsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeBranchImplpermissionsPairs : BranchImplpermissions -> List EncodedField
encodeBranchImplpermissionsPairs model =
    let
        pairs =
            [ maybeEncode "create" Json.Encode.bool model.create
            , maybeEncode "read" Json.Encode.bool model.read
            , maybeEncode "start" Json.Encode.bool model.start
            , maybeEncode "stop" Json.Encode.bool model.stop
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeCauseAction : CauseAction -> Json.Encode.Value
encodeCauseAction =
    encodeObject << encodeCauseActionPairs


encodeCauseActionWithTag : ( String, String ) -> CauseAction -> Json.Encode.Value
encodeCauseActionWithTag (tagField, tag) model =
    encodeObject (encodeCauseActionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCauseActionPairs : CauseAction -> List EncodedField
encodeCauseActionPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "causes" (Json.Encode.list encodeCauseUserIdCause) model.causes
            ]
    in
    pairs


encodeCauseUserIdCause : CauseUserIdCause -> Json.Encode.Value
encodeCauseUserIdCause =
    encodeObject << encodeCauseUserIdCausePairs


encodeCauseUserIdCauseWithTag : ( String, String ) -> CauseUserIdCause -> Json.Encode.Value
encodeCauseUserIdCauseWithTag (tagField, tag) model =
    encodeObject (encodeCauseUserIdCausePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeCauseUserIdCausePairs : CauseUserIdCause -> List EncodedField
encodeCauseUserIdCausePairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "shortDescription" Json.Encode.string model.shortDescription
            , maybeEncode "userId" Json.Encode.string model.userId
            , maybeEncode "userName" Json.Encode.string model.userName
            ]
    in
    pairs


encodeClassesByClass : ClassesByClass -> Json.Encode.Value
encodeClassesByClass =
    encodeObject << encodeClassesByClassPairs


encodeClassesByClassWithTag : ( String, String ) -> ClassesByClass -> Json.Encode.Value
encodeClassesByClassWithTag (tagField, tag) model =
    encodeObject (encodeClassesByClassPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClassesByClassPairs : ClassesByClass -> List EncodedField
encodeClassesByClassPairs model =
    let
        pairs =
            [ maybeEncode "classes" (Json.Encode.list Json.Encode.string) model.classes
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeClockDifference : ClockDifference -> Json.Encode.Value
encodeClockDifference =
    encodeObject << encodeClockDifferencePairs


encodeClockDifferenceWithTag : ( String, String ) -> ClockDifference -> Json.Encode.Value
encodeClockDifferenceWithTag (tagField, tag) model =
    encodeObject (encodeClockDifferencePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeClockDifferencePairs : ClockDifference -> List EncodedField
encodeClockDifferencePairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "diff" Json.Encode.int model.diff
            ]
    in
    pairs


encodeComputerSet : ComputerSet -> Json.Encode.Value
encodeComputerSet =
    encodeObject << encodeComputerSetPairs


encodeComputerSetWithTag : ( String, String ) -> ComputerSet -> Json.Encode.Value
encodeComputerSetWithTag (tagField, tag) model =
    encodeObject (encodeComputerSetPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeComputerSetPairs : ComputerSet -> List EncodedField
encodeComputerSetPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "busyExecutors" Json.Encode.int model.busyExecutors
            , maybeEncode "computer" (Json.Encode.list encodeHudsonMasterComputer) model.computer
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "totalExecutors" Json.Encode.int model.totalExecutors
            ]
    in
    pairs


encodeDefaultCrumbIssuer : DefaultCrumbIssuer -> Json.Encode.Value
encodeDefaultCrumbIssuer =
    encodeObject << encodeDefaultCrumbIssuerPairs


encodeDefaultCrumbIssuerWithTag : ( String, String ) -> DefaultCrumbIssuer -> Json.Encode.Value
encodeDefaultCrumbIssuerWithTag (tagField, tag) model =
    encodeObject (encodeDefaultCrumbIssuerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDefaultCrumbIssuerPairs : DefaultCrumbIssuer -> List EncodedField
encodeDefaultCrumbIssuerPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "crumb" Json.Encode.string model.crumb
            , maybeEncode "crumbRequestField" Json.Encode.string model.crumbRequestField
            ]
    in
    pairs


encodeDiskSpaceMonitorDescriptorDiskSpace : DiskSpaceMonitorDescriptorDiskSpace -> Json.Encode.Value
encodeDiskSpaceMonitorDescriptorDiskSpace =
    encodeObject << encodeDiskSpaceMonitorDescriptorDiskSpacePairs


encodeDiskSpaceMonitorDescriptorDiskSpaceWithTag : ( String, String ) -> DiskSpaceMonitorDescriptorDiskSpace -> Json.Encode.Value
encodeDiskSpaceMonitorDescriptorDiskSpaceWithTag (tagField, tag) model =
    encodeObject (encodeDiskSpaceMonitorDescriptorDiskSpacePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDiskSpaceMonitorDescriptorDiskSpacePairs : DiskSpaceMonitorDescriptorDiskSpace -> List EncodedField
encodeDiskSpaceMonitorDescriptorDiskSpacePairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "timestamp" Json.Encode.int model.timestamp
            , maybeEncode "path" Json.Encode.string model.path
            , maybeEncode "size" Json.Encode.int model.size
            ]
    in
    pairs


encodeEmptyChangeLogSet : EmptyChangeLogSet -> Json.Encode.Value
encodeEmptyChangeLogSet =
    encodeObject << encodeEmptyChangeLogSetPairs


encodeEmptyChangeLogSetWithTag : ( String, String ) -> EmptyChangeLogSet -> Json.Encode.Value
encodeEmptyChangeLogSetWithTag (tagField, tag) model =
    encodeObject (encodeEmptyChangeLogSetPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEmptyChangeLogSetPairs : EmptyChangeLogSet -> List EncodedField
encodeEmptyChangeLogSetPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "kind" Json.Encode.string model.kind
            ]
    in
    pairs


encodeExtensionClassContainerImpl1 : ExtensionClassContainerImpl1 -> Json.Encode.Value
encodeExtensionClassContainerImpl1 =
    encodeObject << encodeExtensionClassContainerImpl1Pairs


encodeExtensionClassContainerImpl1WithTag : ( String, String ) -> ExtensionClassContainerImpl1 -> Json.Encode.Value
encodeExtensionClassContainerImpl1WithTag (tagField, tag) model =
    encodeObject (encodeExtensionClassContainerImpl1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtensionClassContainerImpl1Pairs : ExtensionClassContainerImpl1 -> List EncodedField
encodeExtensionClassContainerImpl1Pairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeExtensionClassContainerImpl1links model.links
            , maybeEncode "map" encodeExtensionClassContainerImpl1map model.map
            ]
    in
    pairs


encodeExtensionClassContainerImpl1links : ExtensionClassContainerImpl1links -> Json.Encode.Value
encodeExtensionClassContainerImpl1links =
    encodeObject << encodeExtensionClassContainerImpl1linksPairs


encodeExtensionClassContainerImpl1linksWithTag : ( String, String ) -> ExtensionClassContainerImpl1links -> Json.Encode.Value
encodeExtensionClassContainerImpl1linksWithTag (tagField, tag) model =
    encodeObject (encodeExtensionClassContainerImpl1linksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtensionClassContainerImpl1linksPairs : ExtensionClassContainerImpl1links -> List EncodedField
encodeExtensionClassContainerImpl1linksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeExtensionClassContainerImpl1map : ExtensionClassContainerImpl1map -> Json.Encode.Value
encodeExtensionClassContainerImpl1map =
    encodeObject << encodeExtensionClassContainerImpl1mapPairs


encodeExtensionClassContainerImpl1mapWithTag : ( String, String ) -> ExtensionClassContainerImpl1map -> Json.Encode.Value
encodeExtensionClassContainerImpl1mapWithTag (tagField, tag) model =
    encodeObject (encodeExtensionClassContainerImpl1mapPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtensionClassContainerImpl1mapPairs : ExtensionClassContainerImpl1map -> List EncodedField
encodeExtensionClassContainerImpl1mapPairs model =
    let
        pairs =
            [ maybeEncode "io.jenkins.blueocean.service.embedded.rest.PipelineImpl" encodeExtensionClassImpl model.iojenkinsblueoceanserviceembeddedrestPipelineImpl
            , maybeEncode "io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl" encodeExtensionClassImpl model.iojenkinsblueoceanserviceembeddedrestMultiBranchPipelineImpl
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeExtensionClassImpl : ExtensionClassImpl -> Json.Encode.Value
encodeExtensionClassImpl =
    encodeObject << encodeExtensionClassImplPairs


encodeExtensionClassImplWithTag : ( String, String ) -> ExtensionClassImpl -> Json.Encode.Value
encodeExtensionClassImplWithTag (tagField, tag) model =
    encodeObject (encodeExtensionClassImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtensionClassImplPairs : ExtensionClassImpl -> List EncodedField
encodeExtensionClassImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeExtensionClassImpllinks model.links
            , maybeEncode "classes" (Json.Encode.list Json.Encode.string) model.classes
            ]
    in
    pairs


encodeExtensionClassImpllinks : ExtensionClassImpllinks -> Json.Encode.Value
encodeExtensionClassImpllinks =
    encodeObject << encodeExtensionClassImpllinksPairs


encodeExtensionClassImpllinksWithTag : ( String, String ) -> ExtensionClassImpllinks -> Json.Encode.Value
encodeExtensionClassImpllinksWithTag (tagField, tag) model =
    encodeObject (encodeExtensionClassImpllinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeExtensionClassImpllinksPairs : ExtensionClassImpllinks -> List EncodedField
encodeExtensionClassImpllinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeFavoriteImpl : FavoriteImpl -> Json.Encode.Value
encodeFavoriteImpl =
    encodeObject << encodeFavoriteImplPairs


encodeFavoriteImplWithTag : ( String, String ) -> FavoriteImpl -> Json.Encode.Value
encodeFavoriteImplWithTag (tagField, tag) model =
    encodeObject (encodeFavoriteImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFavoriteImplPairs : FavoriteImpl -> List EncodedField
encodeFavoriteImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeFavoriteImpllinks model.links
            , maybeEncode "item" encodePipelineImpl model.item
            ]
    in
    pairs


encodeFavoriteImpllinks : FavoriteImpllinks -> Json.Encode.Value
encodeFavoriteImpllinks =
    encodeObject << encodeFavoriteImpllinksPairs


encodeFavoriteImpllinksWithTag : ( String, String ) -> FavoriteImpllinks -> Json.Encode.Value
encodeFavoriteImpllinksWithTag (tagField, tag) model =
    encodeObject (encodeFavoriteImpllinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFavoriteImpllinksPairs : FavoriteImpllinks -> List EncodedField
encodeFavoriteImpllinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeFreeStyleBuild : FreeStyleBuild -> Json.Encode.Value
encodeFreeStyleBuild =
    encodeObject << encodeFreeStyleBuildPairs


encodeFreeStyleBuildWithTag : ( String, String ) -> FreeStyleBuild -> Json.Encode.Value
encodeFreeStyleBuildWithTag (tagField, tag) model =
    encodeObject (encodeFreeStyleBuildPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFreeStyleBuildPairs : FreeStyleBuild -> List EncodedField
encodeFreeStyleBuildPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "number" Json.Encode.int model.number
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "actions" (Json.Encode.list encodeCauseAction) model.actions
            , maybeEncode "building" Json.Encode.bool model.building
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "duration" Json.Encode.int model.duration
            , maybeEncode "estimatedDuration" Json.Encode.int model.estimatedDuration
            , maybeEncode "executor" Json.Encode.string model.executor
            , maybeEncode "fullDisplayName" Json.Encode.string model.fullDisplayName
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "keepLog" Json.Encode.bool model.keepLog
            , maybeEncode "queueId" Json.Encode.int model.queueId
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "timestamp" Json.Encode.int model.timestamp
            , maybeEncode "builtOn" Json.Encode.string model.builtOn
            , maybeEncode "changeSet" encodeEmptyChangeLogSet model.changeSet
            ]
    in
    pairs


encodeFreeStyleProject : FreeStyleProject -> Json.Encode.Value
encodeFreeStyleProject =
    encodeObject << encodeFreeStyleProjectPairs


encodeFreeStyleProjectWithTag : ( String, String ) -> FreeStyleProject -> Json.Encode.Value
encodeFreeStyleProjectWithTag (tagField, tag) model =
    encodeObject (encodeFreeStyleProjectPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFreeStyleProjectPairs : FreeStyleProject -> List EncodedField
encodeFreeStyleProjectPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "color" Json.Encode.string model.color
            , maybeEncode "actions" (Json.Encode.list encodeFreeStyleProjectactions) model.actions
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "displayNameOrNull" Json.Encode.string model.displayNameOrNull
            , maybeEncode "fullDisplayName" Json.Encode.string model.fullDisplayName
            , maybeEncode "fullName" Json.Encode.string model.fullName
            , maybeEncode "buildable" Json.Encode.bool model.buildable
            , maybeEncode "builds" (Json.Encode.list encodeFreeStyleBuild) model.builds
            , maybeEncode "firstBuild" encodeFreeStyleBuild model.firstBuild
            , maybeEncode "healthReport" (Json.Encode.list encodeFreeStyleProjecthealthReport) model.healthReport
            , maybeEncode "inQueue" Json.Encode.bool model.inQueue
            , maybeEncode "keepDependencies" Json.Encode.bool model.keepDependencies
            , maybeEncode "lastBuild" encodeFreeStyleBuild model.lastBuild
            , maybeEncode "lastCompletedBuild" encodeFreeStyleBuild model.lastCompletedBuild
            , maybeEncode "lastFailedBuild" Json.Encode.string model.lastFailedBuild
            , maybeEncode "lastStableBuild" encodeFreeStyleBuild model.lastStableBuild
            , maybeEncode "lastSuccessfulBuild" encodeFreeStyleBuild model.lastSuccessfulBuild
            , maybeEncode "lastUnstableBuild" Json.Encode.string model.lastUnstableBuild
            , maybeEncode "lastUnsuccessfulBuild" Json.Encode.string model.lastUnsuccessfulBuild
            , maybeEncode "nextBuildNumber" Json.Encode.int model.nextBuildNumber
            , maybeEncode "queueItem" Json.Encode.string model.queueItem
            , maybeEncode "concurrentBuild" Json.Encode.bool model.concurrentBuild
            , maybeEncode "scm" encodeNullSCM model.scm
            ]
    in
    pairs


encodeFreeStyleProjectactions : FreeStyleProjectactions -> Json.Encode.Value
encodeFreeStyleProjectactions =
    encodeObject << encodeFreeStyleProjectactionsPairs


encodeFreeStyleProjectactionsWithTag : ( String, String ) -> FreeStyleProjectactions -> Json.Encode.Value
encodeFreeStyleProjectactionsWithTag (tagField, tag) model =
    encodeObject (encodeFreeStyleProjectactionsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFreeStyleProjectactionsPairs : FreeStyleProjectactions -> List EncodedField
encodeFreeStyleProjectactionsPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeFreeStyleProjecthealthReport : FreeStyleProjecthealthReport -> Json.Encode.Value
encodeFreeStyleProjecthealthReport =
    encodeObject << encodeFreeStyleProjecthealthReportPairs


encodeFreeStyleProjecthealthReportWithTag : ( String, String ) -> FreeStyleProjecthealthReport -> Json.Encode.Value
encodeFreeStyleProjecthealthReportWithTag (tagField, tag) model =
    encodeObject (encodeFreeStyleProjecthealthReportPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeFreeStyleProjecthealthReportPairs : FreeStyleProjecthealthReport -> List EncodedField
encodeFreeStyleProjecthealthReportPairs model =
    let
        pairs =
            [ maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "iconClassName" Json.Encode.string model.iconClassName
            , maybeEncode "iconUrl" Json.Encode.string model.iconUrl
            , maybeEncode "score" Json.Encode.int model.score
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeGenericResource : GenericResource -> Json.Encode.Value
encodeGenericResource =
    encodeObject << encodeGenericResourcePairs


encodeGenericResourceWithTag : ( String, String ) -> GenericResource -> Json.Encode.Value
encodeGenericResourceWithTag (tagField, tag) model =
    encodeObject (encodeGenericResourcePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGenericResourcePairs : GenericResource -> List EncodedField
encodeGenericResourcePairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "durationInMillis" Json.Encode.int model.durationInMillis
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "startTime" Json.Encode.string model.startTime
            ]
    in
    pairs


encodeGithubContent : GithubContent -> Json.Encode.Value
encodeGithubContent =
    encodeObject << encodeGithubContentPairs


encodeGithubContentWithTag : ( String, String ) -> GithubContent -> Json.Encode.Value
encodeGithubContentWithTag (tagField, tag) model =
    encodeObject (encodeGithubContentPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubContentPairs : GithubContent -> List EncodedField
encodeGithubContentPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "sha" Json.Encode.string model.sha
            , maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "repo" Json.Encode.string model.repo
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "owner" Json.Encode.string model.owner
            , maybeEncode "path" Json.Encode.string model.path
            , maybeEncode "base64Data" Json.Encode.string model.base64Data
            ]
    in
    pairs


encodeGithubFile : GithubFile -> Json.Encode.Value
encodeGithubFile =
    encodeObject << encodeGithubFilePairs


encodeGithubFileWithTag : ( String, String ) -> GithubFile -> Json.Encode.Value
encodeGithubFileWithTag (tagField, tag) model =
    encodeObject (encodeGithubFilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubFilePairs : GithubFile -> List EncodedField
encodeGithubFilePairs model =
    let
        pairs =
            [ maybeEncode "content" encodeGithubContent model.content
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeGithubOrganization : GithubOrganization -> Json.Encode.Value
encodeGithubOrganization =
    encodeObject << encodeGithubOrganizationPairs


encodeGithubOrganizationWithTag : ( String, String ) -> GithubOrganization -> Json.Encode.Value
encodeGithubOrganizationWithTag (tagField, tag) model =
    encodeObject (encodeGithubOrganizationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubOrganizationPairs : GithubOrganization -> List EncodedField
encodeGithubOrganizationPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeGithubOrganizationlinks model.links
            , maybeEncode "jenkinsOrganizationPipeline" Json.Encode.bool model.jenkinsOrganizationPipeline
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeGithubOrganizationlinks : GithubOrganizationlinks -> Json.Encode.Value
encodeGithubOrganizationlinks =
    encodeObject << encodeGithubOrganizationlinksPairs


encodeGithubOrganizationlinksWithTag : ( String, String ) -> GithubOrganizationlinks -> Json.Encode.Value
encodeGithubOrganizationlinksWithTag (tagField, tag) model =
    encodeObject (encodeGithubOrganizationlinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubOrganizationlinksPairs : GithubOrganizationlinks -> List EncodedField
encodeGithubOrganizationlinksPairs model =
    let
        pairs =
            [ maybeEncode "repositories" encodeLink model.repositories
            , maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeGithubRepositories : GithubRepositories -> Json.Encode.Value
encodeGithubRepositories =
    encodeObject << encodeGithubRepositoriesPairs


encodeGithubRepositoriesWithTag : ( String, String ) -> GithubRepositories -> Json.Encode.Value
encodeGithubRepositoriesWithTag (tagField, tag) model =
    encodeObject (encodeGithubRepositoriesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubRepositoriesPairs : GithubRepositories -> List EncodedField
encodeGithubRepositoriesPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeGithubRepositorieslinks model.links
            , maybeEncode "items" (Json.Encode.list encodeGithubRepository) model.items
            , maybeEncode "lastPage" Json.Encode.int model.lastPage
            , maybeEncode "nextPage" Json.Encode.int model.nextPage
            , maybeEncode "pageSize" Json.Encode.int model.pageSize
            ]
    in
    pairs


encodeGithubRepositorieslinks : GithubRepositorieslinks -> Json.Encode.Value
encodeGithubRepositorieslinks =
    encodeObject << encodeGithubRepositorieslinksPairs


encodeGithubRepositorieslinksWithTag : ( String, String ) -> GithubRepositorieslinks -> Json.Encode.Value
encodeGithubRepositorieslinksWithTag (tagField, tag) model =
    encodeObject (encodeGithubRepositorieslinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubRepositorieslinksPairs : GithubRepositorieslinks -> List EncodedField
encodeGithubRepositorieslinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeGithubRepository : GithubRepository -> Json.Encode.Value
encodeGithubRepository =
    encodeObject << encodeGithubRepositoryPairs


encodeGithubRepositoryWithTag : ( String, String ) -> GithubRepository -> Json.Encode.Value
encodeGithubRepositoryWithTag (tagField, tag) model =
    encodeObject (encodeGithubRepositoryPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubRepositoryPairs : GithubRepository -> List EncodedField
encodeGithubRepositoryPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeGithubRepositorylinks model.links
            , maybeEncode "defaultBranch" Json.Encode.string model.defaultBranch
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "permissions" encodeGithubRepositorypermissions model.permissions
            , maybeEncode "private" Json.Encode.bool model.private
            , maybeEncode "fullName" Json.Encode.string model.fullName
            ]
    in
    pairs


encodeGithubRepositorylinks : GithubRepositorylinks -> Json.Encode.Value
encodeGithubRepositorylinks =
    encodeObject << encodeGithubRepositorylinksPairs


encodeGithubRepositorylinksWithTag : ( String, String ) -> GithubRepositorylinks -> Json.Encode.Value
encodeGithubRepositorylinksWithTag (tagField, tag) model =
    encodeObject (encodeGithubRepositorylinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubRepositorylinksPairs : GithubRepositorylinks -> List EncodedField
encodeGithubRepositorylinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeGithubRepositorypermissions : GithubRepositorypermissions -> Json.Encode.Value
encodeGithubRepositorypermissions =
    encodeObject << encodeGithubRepositorypermissionsPairs


encodeGithubRepositorypermissionsWithTag : ( String, String ) -> GithubRepositorypermissions -> Json.Encode.Value
encodeGithubRepositorypermissionsWithTag (tagField, tag) model =
    encodeObject (encodeGithubRepositorypermissionsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubRepositorypermissionsPairs : GithubRepositorypermissions -> List EncodedField
encodeGithubRepositorypermissionsPairs model =
    let
        pairs =
            [ maybeEncode "admin" Json.Encode.bool model.admin
            , maybeEncode "push" Json.Encode.bool model.push
            , maybeEncode "pull" Json.Encode.bool model.pull
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeGithubRespositoryContainer : GithubRespositoryContainer -> Json.Encode.Value
encodeGithubRespositoryContainer =
    encodeObject << encodeGithubRespositoryContainerPairs


encodeGithubRespositoryContainerWithTag : ( String, String ) -> GithubRespositoryContainer -> Json.Encode.Value
encodeGithubRespositoryContainerWithTag (tagField, tag) model =
    encodeObject (encodeGithubRespositoryContainerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubRespositoryContainerPairs : GithubRespositoryContainer -> List EncodedField
encodeGithubRespositoryContainerPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeGithubRespositoryContainerlinks model.links
            , maybeEncode "repositories" encodeGithubRepositories model.repositories
            ]
    in
    pairs


encodeGithubRespositoryContainerlinks : GithubRespositoryContainerlinks -> Json.Encode.Value
encodeGithubRespositoryContainerlinks =
    encodeObject << encodeGithubRespositoryContainerlinksPairs


encodeGithubRespositoryContainerlinksWithTag : ( String, String ) -> GithubRespositoryContainerlinks -> Json.Encode.Value
encodeGithubRespositoryContainerlinksWithTag (tagField, tag) model =
    encodeObject (encodeGithubRespositoryContainerlinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubRespositoryContainerlinksPairs : GithubRespositoryContainerlinks -> List EncodedField
encodeGithubRespositoryContainerlinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeGithubScm : GithubScm -> Json.Encode.Value
encodeGithubScm =
    encodeObject << encodeGithubScmPairs


encodeGithubScmWithTag : ( String, String ) -> GithubScm -> Json.Encode.Value
encodeGithubScmWithTag (tagField, tag) model =
    encodeObject (encodeGithubScmPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubScmPairs : GithubScm -> List EncodedField
encodeGithubScmPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeGithubScmlinks model.links
            , maybeEncode "credentialId" Json.Encode.string model.credentialId
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "uri" Json.Encode.string model.uri
            ]
    in
    pairs


encodeGithubScmlinks : GithubScmlinks -> Json.Encode.Value
encodeGithubScmlinks =
    encodeObject << encodeGithubScmlinksPairs


encodeGithubScmlinksWithTag : ( String, String ) -> GithubScmlinks -> Json.Encode.Value
encodeGithubScmlinksWithTag (tagField, tag) model =
    encodeObject (encodeGithubScmlinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeGithubScmlinksPairs : GithubScmlinks -> List EncodedField
encodeGithubScmlinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeHudson : Hudson -> Json.Encode.Value
encodeHudson =
    encodeObject << encodeHudsonPairs


encodeHudsonWithTag : ( String, String ) -> Hudson -> Json.Encode.Value
encodeHudsonWithTag (tagField, tag) model =
    encodeObject (encodeHudsonPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeHudsonPairs : Hudson -> List EncodedField
encodeHudsonPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "assignedLabels" (Json.Encode.list encodeHudsonassignedLabels) model.assignedLabels
            , maybeEncode "mode" Json.Encode.string model.mode
            , maybeEncode "nodeDescription" Json.Encode.string model.nodeDescription
            , maybeEncode "nodeName" Json.Encode.string model.nodeName
            , maybeEncode "numExecutors" Json.Encode.int model.numExecutors
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "jobs" (Json.Encode.list encodeFreeStyleProject) model.jobs
            , maybeEncode "primaryView" encodeAllView model.primaryView
            , maybeEncode "quietingDown" Json.Encode.bool model.quietingDown
            , maybeEncode "slaveAgentPort" Json.Encode.int model.slaveAgentPort
            , maybeEncode "unlabeledLoad" encodeUnlabeledLoadStatistics model.unlabeledLoad
            , maybeEncode "useCrumbs" Json.Encode.bool model.useCrumbs
            , maybeEncode "useSecurity" Json.Encode.bool model.useSecurity
            , maybeEncode "views" (Json.Encode.list encodeAllView) model.views
            ]
    in
    pairs


encodeHudsonMasterComputer : HudsonMasterComputer -> Json.Encode.Value
encodeHudsonMasterComputer =
    encodeObject << encodeHudsonMasterComputerPairs


encodeHudsonMasterComputerWithTag : ( String, String ) -> HudsonMasterComputer -> Json.Encode.Value
encodeHudsonMasterComputerWithTag (tagField, tag) model =
    encodeObject (encodeHudsonMasterComputerPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeHudsonMasterComputerPairs : HudsonMasterComputer -> List EncodedField
encodeHudsonMasterComputerPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "executors" (Json.Encode.list encodeHudsonMasterComputerexecutors) model.executors
            , maybeEncode "icon" Json.Encode.string model.icon
            , maybeEncode "iconClassName" Json.Encode.string model.iconClassName
            , maybeEncode "idle" Json.Encode.bool model.idle
            , maybeEncode "jnlpAgent" Json.Encode.bool model.jnlpAgent
            , maybeEncode "launchSupported" Json.Encode.bool model.launchSupported
            , maybeEncode "loadStatistics" encodeLabel1 model.loadStatistics
            , maybeEncode "manualLaunchAllowed" Json.Encode.bool model.manualLaunchAllowed
            , maybeEncode "monitorData" encodeHudsonMasterComputermonitorData model.monitorData
            , maybeEncode "numExecutors" Json.Encode.int model.numExecutors
            , maybeEncode "offline" Json.Encode.bool model.offline
            , maybeEncode "offlineCause" Json.Encode.string model.offlineCause
            , maybeEncode "offlineCauseReason" Json.Encode.string model.offlineCauseReason
            , maybeEncode "temporarilyOffline" Json.Encode.bool model.temporarilyOffline
            ]
    in
    pairs


encodeHudsonMasterComputerexecutors : HudsonMasterComputerexecutors -> Json.Encode.Value
encodeHudsonMasterComputerexecutors =
    encodeObject << encodeHudsonMasterComputerexecutorsPairs


encodeHudsonMasterComputerexecutorsWithTag : ( String, String ) -> HudsonMasterComputerexecutors -> Json.Encode.Value
encodeHudsonMasterComputerexecutorsWithTag (tagField, tag) model =
    encodeObject (encodeHudsonMasterComputerexecutorsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeHudsonMasterComputerexecutorsPairs : HudsonMasterComputerexecutors -> List EncodedField
encodeHudsonMasterComputerexecutorsPairs model =
    let
        pairs =
            [ maybeEncode "currentExecutable" encodeFreeStyleBuild model.currentExecutable
            , maybeEncode "idle" Json.Encode.bool model.idle
            , maybeEncode "likelyStuck" Json.Encode.bool model.likelyStuck
            , maybeEncode "number" Json.Encode.int model.number
            , maybeEncode "progress" Json.Encode.int model.progress
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeHudsonMasterComputermonitorData : HudsonMasterComputermonitorData -> Json.Encode.Value
encodeHudsonMasterComputermonitorData =
    encodeObject << encodeHudsonMasterComputermonitorDataPairs


encodeHudsonMasterComputermonitorDataWithTag : ( String, String ) -> HudsonMasterComputermonitorData -> Json.Encode.Value
encodeHudsonMasterComputermonitorDataWithTag (tagField, tag) model =
    encodeObject (encodeHudsonMasterComputermonitorDataPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeHudsonMasterComputermonitorDataPairs : HudsonMasterComputermonitorData -> List EncodedField
encodeHudsonMasterComputermonitorDataPairs model =
    let
        pairs =
            [ maybeEncode "hudson.node_monitors.SwapSpaceMonitor" encodeSwapSpaceMonitorMemoryUsage2 model.hudsonnodeMonitorsSwapSpaceMonitor
            , maybeEncode "hudson.node_monitors.TemporarySpaceMonitor" encodeDiskSpaceMonitorDescriptorDiskSpace model.hudsonnodeMonitorsTemporarySpaceMonitor
            , maybeEncode "hudson.node_monitors.DiskSpaceMonitor" encodeDiskSpaceMonitorDescriptorDiskSpace model.hudsonnodeMonitorsDiskSpaceMonitor
            , maybeEncode "hudson.node_monitors.ArchitectureMonitor" Json.Encode.string model.hudsonnodeMonitorsArchitectureMonitor
            , maybeEncode "hudson.node_monitors.ResponseTimeMonitor" encodeResponseTimeMonitorData model.hudsonnodeMonitorsResponseTimeMonitor
            , maybeEncode "hudson.node_monitors.ClockMonitor" encodeClockDifference model.hudsonnodeMonitorsClockMonitor
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeHudsonassignedLabels : HudsonassignedLabels -> Json.Encode.Value
encodeHudsonassignedLabels =
    encodeObject << encodeHudsonassignedLabelsPairs


encodeHudsonassignedLabelsWithTag : ( String, String ) -> HudsonassignedLabels -> Json.Encode.Value
encodeHudsonassignedLabelsWithTag (tagField, tag) model =
    encodeObject (encodeHudsonassignedLabelsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeHudsonassignedLabelsPairs : HudsonassignedLabels -> List EncodedField
encodeHudsonassignedLabelsPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeInputStepImpl : InputStepImpl -> Json.Encode.Value
encodeInputStepImpl =
    encodeObject << encodeInputStepImplPairs


encodeInputStepImplWithTag : ( String, String ) -> InputStepImpl -> Json.Encode.Value
encodeInputStepImplWithTag (tagField, tag) model =
    encodeObject (encodeInputStepImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInputStepImplPairs : InputStepImpl -> List EncodedField
encodeInputStepImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodeInputStepImpllinks model.links
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "message" Json.Encode.string model.message
            , maybeEncode "ok" Json.Encode.string model.ok
            , maybeEncode "parameters" (Json.Encode.list encodeStringParameterDefinition) model.parameters
            , maybeEncode "submitter" Json.Encode.string model.submitter
            ]
    in
    pairs


encodeInputStepImpllinks : InputStepImpllinks -> Json.Encode.Value
encodeInputStepImpllinks =
    encodeObject << encodeInputStepImpllinksPairs


encodeInputStepImpllinksWithTag : ( String, String ) -> InputStepImpllinks -> Json.Encode.Value
encodeInputStepImpllinksWithTag (tagField, tag) model =
    encodeObject (encodeInputStepImpllinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeInputStepImpllinksPairs : InputStepImpllinks -> List EncodedField
encodeInputStepImpllinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeLabel1 : Label1 -> Json.Encode.Value
encodeLabel1 =
    encodeObject << encodeLabel1Pairs


encodeLabel1WithTag : ( String, String ) -> Label1 -> Json.Encode.Value
encodeLabel1WithTag (tagField, tag) model =
    encodeObject (encodeLabel1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLabel1Pairs : Label1 -> List EncodedField
encodeLabel1Pairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeLink : Link -> Json.Encode.Value
encodeLink =
    encodeObject << encodeLinkPairs


encodeLinkWithTag : ( String, String ) -> Link -> Json.Encode.Value
encodeLinkWithTag (tagField, tag) model =
    encodeObject (encodeLinkPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeLinkPairs : Link -> List EncodedField
encodeLinkPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "href" Json.Encode.string model.href
            ]
    in
    pairs


encodeListView : ListView -> Json.Encode.Value
encodeListView =
    encodeObject << encodeListViewPairs


encodeListViewWithTag : ( String, String ) -> ListView -> Json.Encode.Value
encodeListViewWithTag (tagField, tag) model =
    encodeObject (encodeListViewPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeListViewPairs : ListView -> List EncodedField
encodeListViewPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "jobs" (Json.Encode.list encodeFreeStyleProject) model.jobs
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "url" Json.Encode.string model.url
            ]
    in
    pairs


encodeMultibranchPipeline : MultibranchPipeline -> Json.Encode.Value
encodeMultibranchPipeline =
    encodeObject << encodeMultibranchPipelinePairs


encodeMultibranchPipelineWithTag : ( String, String ) -> MultibranchPipeline -> Json.Encode.Value
encodeMultibranchPipelineWithTag (tagField, tag) model =
    encodeObject (encodeMultibranchPipelinePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeMultibranchPipelinePairs : MultibranchPipeline -> List EncodedField
encodeMultibranchPipelinePairs model =
    let
        pairs =
            [ maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "latestRun" Json.Encode.string model.latestRun
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "weatherScore" Json.Encode.int model.weatherScore
            , maybeEncode "branchNames" (Json.Encode.list Json.Encode.string) model.branchNames
            , maybeEncode "numberOfFailingBranches" Json.Encode.int model.numberOfFailingBranches
            , maybeEncode "numberOfFailingPullRequests" Json.Encode.int model.numberOfFailingPullRequests
            , maybeEncode "numberOfSuccessfulBranches" Json.Encode.int model.numberOfSuccessfulBranches
            , maybeEncode "numberOfSuccessfulPullRequests" Json.Encode.int model.numberOfSuccessfulPullRequests
            , maybeEncode "totalNumberOfBranches" Json.Encode.int model.totalNumberOfBranches
            , maybeEncode "totalNumberOfPullRequests" Json.Encode.int model.totalNumberOfPullRequests
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeNullSCM : NullSCM -> Json.Encode.Value
encodeNullSCM =
    encodeObject << encodeNullSCMPairs


encodeNullSCMWithTag : ( String, String ) -> NullSCM -> Json.Encode.Value
encodeNullSCMWithTag (tagField, tag) model =
    encodeObject (encodeNullSCMPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNullSCMPairs : NullSCM -> List EncodedField
encodeNullSCMPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeOrganisation : Organisation -> Json.Encode.Value
encodeOrganisation =
    encodeObject << encodeOrganisationPairs


encodeOrganisationWithTag : ( String, String ) -> Organisation -> Json.Encode.Value
encodeOrganisationWithTag (tagField, tag) model =
    encodeObject (encodeOrganisationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrganisationPairs : Organisation -> List EncodedField
encodeOrganisationPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodePipeline : Pipeline -> Json.Encode.Value
encodePipeline =
    encodeObject << encodePipelinePairs


encodePipelineWithTag : ( String, String ) -> Pipeline -> Json.Encode.Value
encodePipelineWithTag (tagField, tag) model =
    encodeObject (encodePipelinePairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelinePairs : Pipeline -> List EncodedField
encodePipelinePairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "fullName" Json.Encode.string model.fullName
            , maybeEncode "weatherScore" Json.Encode.int model.weatherScore
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "latestRun" encodePipelinelatestRun model.latestRun
            ]
    in
    pairs


encodePipelineActivity : PipelineActivity -> Json.Encode.Value
encodePipelineActivity =
    encodeObject << encodePipelineActivityPairs


encodePipelineActivityWithTag : ( String, String ) -> PipelineActivity -> Json.Encode.Value
encodePipelineActivityWithTag (tagField, tag) model =
    encodeObject (encodePipelineActivityPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineActivityPairs : PipelineActivity -> List EncodedField
encodePipelineActivityPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "artifacts" (Json.Encode.list encodePipelineActivityartifacts) model.artifacts
            , maybeEncode "durationInMillis" Json.Encode.int model.durationInMillis
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "enQueueTime" Json.Encode.string model.enQueueTime
            , maybeEncode "endTime" Json.Encode.string model.endTime
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "pipeline" Json.Encode.string model.pipeline
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "runSummary" Json.Encode.string model.runSummary
            , maybeEncode "startTime" Json.Encode.string model.startTime
            , maybeEncode "state" Json.Encode.string model.state
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "commitId" Json.Encode.string model.commitId
            ]
    in
    pairs


encodePipelineActivityartifacts : PipelineActivityartifacts -> Json.Encode.Value
encodePipelineActivityartifacts =
    encodeObject << encodePipelineActivityartifactsPairs


encodePipelineActivityartifactsWithTag : ( String, String ) -> PipelineActivityartifacts -> Json.Encode.Value
encodePipelineActivityartifactsWithTag (tagField, tag) model =
    encodeObject (encodePipelineActivityartifactsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineActivityartifactsPairs : PipelineActivityartifacts -> List EncodedField
encodePipelineActivityartifactsPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineBranchesitem : PipelineBranchesitem -> Json.Encode.Value
encodePipelineBranchesitem =
    encodeObject << encodePipelineBranchesitemPairs


encodePipelineBranchesitemWithTag : ( String, String ) -> PipelineBranchesitem -> Json.Encode.Value
encodePipelineBranchesitemWithTag (tagField, tag) model =
    encodeObject (encodePipelineBranchesitemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineBranchesitemPairs : PipelineBranchesitem -> List EncodedField
encodePipelineBranchesitemPairs model =
    let
        pairs =
            [ maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "weatherScore" Json.Encode.int model.weatherScore
            , maybeEncode "latestRun" encodePipelineBranchesitemlatestRun model.latestRun
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "pullRequest" encodePipelineBranchesitempullRequest model.pullRequest
            , maybeEncode "totalNumberOfPullRequests" Json.Encode.int model.totalNumberOfPullRequests
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineBranchesitemlatestRun : PipelineBranchesitemlatestRun -> Json.Encode.Value
encodePipelineBranchesitemlatestRun =
    encodeObject << encodePipelineBranchesitemlatestRunPairs


encodePipelineBranchesitemlatestRunWithTag : ( String, String ) -> PipelineBranchesitemlatestRun -> Json.Encode.Value
encodePipelineBranchesitemlatestRunWithTag (tagField, tag) model =
    encodeObject (encodePipelineBranchesitemlatestRunPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineBranchesitemlatestRunPairs : PipelineBranchesitemlatestRun -> List EncodedField
encodePipelineBranchesitemlatestRunPairs model =
    let
        pairs =
            [ maybeEncode "durationInMillis" Json.Encode.int model.durationInMillis
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "enQueueTime" Json.Encode.string model.enQueueTime
            , maybeEncode "endTime" Json.Encode.string model.endTime
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "pipeline" Json.Encode.string model.pipeline
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "runSummary" Json.Encode.string model.runSummary
            , maybeEncode "startTime" Json.Encode.string model.startTime
            , maybeEncode "state" Json.Encode.string model.state
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "commitId" Json.Encode.string model.commitId
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineBranchesitempullRequest : PipelineBranchesitempullRequest -> Json.Encode.Value
encodePipelineBranchesitempullRequest =
    encodeObject << encodePipelineBranchesitempullRequestPairs


encodePipelineBranchesitempullRequestWithTag : ( String, String ) -> PipelineBranchesitempullRequest -> Json.Encode.Value
encodePipelineBranchesitempullRequestWithTag (tagField, tag) model =
    encodeObject (encodePipelineBranchesitempullRequestPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineBranchesitempullRequestPairs : PipelineBranchesitempullRequest -> List EncodedField
encodePipelineBranchesitempullRequestPairs model =
    let
        pairs =
            [ maybeEncode "_links" encodePipelineBranchesitempullRequestlinks model.links
            , maybeEncode "author" Json.Encode.string model.author
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "title" Json.Encode.string model.title
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineBranchesitempullRequestlinks : PipelineBranchesitempullRequestlinks -> Json.Encode.Value
encodePipelineBranchesitempullRequestlinks =
    encodeObject << encodePipelineBranchesitempullRequestlinksPairs


encodePipelineBranchesitempullRequestlinksWithTag : ( String, String ) -> PipelineBranchesitempullRequestlinks -> Json.Encode.Value
encodePipelineBranchesitempullRequestlinksWithTag (tagField, tag) model =
    encodeObject (encodePipelineBranchesitempullRequestlinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineBranchesitempullRequestlinksPairs : PipelineBranchesitempullRequestlinks -> List EncodedField
encodePipelineBranchesitempullRequestlinksPairs model =
    let
        pairs =
            [ maybeEncode "self" Json.Encode.string model.self
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineFolderImpl : PipelineFolderImpl -> Json.Encode.Value
encodePipelineFolderImpl =
    encodeObject << encodePipelineFolderImplPairs


encodePipelineFolderImplWithTag : ( String, String ) -> PipelineFolderImpl -> Json.Encode.Value
encodePipelineFolderImplWithTag (tagField, tag) model =
    encodeObject (encodePipelineFolderImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineFolderImplPairs : PipelineFolderImpl -> List EncodedField
encodePipelineFolderImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "fullName" Json.Encode.string model.fullName
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "numberOfFolders" Json.Encode.int model.numberOfFolders
            , maybeEncode "numberOfPipelines" Json.Encode.int model.numberOfPipelines
            ]
    in
    pairs


encodePipelineImpl : PipelineImpl -> Json.Encode.Value
encodePipelineImpl =
    encodeObject << encodePipelineImplPairs


encodePipelineImplWithTag : ( String, String ) -> PipelineImpl -> Json.Encode.Value
encodePipelineImplWithTag (tagField, tag) model =
    encodeObject (encodePipelineImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineImplPairs : PipelineImpl -> List EncodedField
encodePipelineImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "fullName" Json.Encode.string model.fullName
            , maybeEncode "latestRun" Json.Encode.string model.latestRun
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "weatherScore" Json.Encode.int model.weatherScore
            , maybeEncode "_links" encodePipelineImpllinks model.links
            ]
    in
    pairs


encodePipelineImpllinks : PipelineImpllinks -> Json.Encode.Value
encodePipelineImpllinks =
    encodeObject << encodePipelineImpllinksPairs


encodePipelineImpllinksWithTag : ( String, String ) -> PipelineImpllinks -> Json.Encode.Value
encodePipelineImpllinksWithTag (tagField, tag) model =
    encodeObject (encodePipelineImpllinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineImpllinksPairs : PipelineImpllinks -> List EncodedField
encodePipelineImpllinksPairs model =
    let
        pairs =
            [ maybeEncode "runs" encodeLink model.runs
            , maybeEncode "self" encodeLink model.self
            , maybeEncode "queue" encodeLink model.queue
            , maybeEncode "actions" encodeLink model.actions
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineRun : PipelineRun -> Json.Encode.Value
encodePipelineRun =
    encodeObject << encodePipelineRunPairs


encodePipelineRunWithTag : ( String, String ) -> PipelineRun -> Json.Encode.Value
encodePipelineRunWithTag (tagField, tag) model =
    encodeObject (encodePipelineRunPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineRunPairs : PipelineRun -> List EncodedField
encodePipelineRunPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "artifacts" (Json.Encode.list encodePipelineRunartifacts) model.artifacts
            , maybeEncode "durationInMillis" Json.Encode.int model.durationInMillis
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "enQueueTime" Json.Encode.string model.enQueueTime
            , maybeEncode "endTime" Json.Encode.string model.endTime
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "pipeline" Json.Encode.string model.pipeline
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "runSummary" Json.Encode.string model.runSummary
            , maybeEncode "startTime" Json.Encode.string model.startTime
            , maybeEncode "state" Json.Encode.string model.state
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "commitId" Json.Encode.string model.commitId
            ]
    in
    pairs


encodePipelineRunImpl : PipelineRunImpl -> Json.Encode.Value
encodePipelineRunImpl =
    encodeObject << encodePipelineRunImplPairs


encodePipelineRunImplWithTag : ( String, String ) -> PipelineRunImpl -> Json.Encode.Value
encodePipelineRunImplWithTag (tagField, tag) model =
    encodeObject (encodePipelineRunImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineRunImplPairs : PipelineRunImpl -> List EncodedField
encodePipelineRunImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodePipelineRunImpllinks model.links
            , maybeEncode "durationInMillis" Json.Encode.int model.durationInMillis
            , maybeEncode "enQueueTime" Json.Encode.string model.enQueueTime
            , maybeEncode "endTime" Json.Encode.string model.endTime
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "pipeline" Json.Encode.string model.pipeline
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "runSummary" Json.Encode.string model.runSummary
            , maybeEncode "startTime" Json.Encode.string model.startTime
            , maybeEncode "state" Json.Encode.string model.state
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "commitId" Json.Encode.string model.commitId
            ]
    in
    pairs


encodePipelineRunImpllinks : PipelineRunImpllinks -> Json.Encode.Value
encodePipelineRunImpllinks =
    encodeObject << encodePipelineRunImpllinksPairs


encodePipelineRunImpllinksWithTag : ( String, String ) -> PipelineRunImpllinks -> Json.Encode.Value
encodePipelineRunImpllinksWithTag (tagField, tag) model =
    encodeObject (encodePipelineRunImpllinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineRunImpllinksPairs : PipelineRunImpllinks -> List EncodedField
encodePipelineRunImpllinksPairs model =
    let
        pairs =
            [ maybeEncode "nodes" encodeLink model.nodes
            , maybeEncode "log" encodeLink model.log
            , maybeEncode "self" encodeLink model.self
            , maybeEncode "actions" encodeLink model.actions
            , maybeEncode "steps" encodeLink model.steps
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineRunNode : PipelineRunNode -> Json.Encode.Value
encodePipelineRunNode =
    encodeObject << encodePipelineRunNodePairs


encodePipelineRunNodeWithTag : ( String, String ) -> PipelineRunNode -> Json.Encode.Value
encodePipelineRunNodeWithTag (tagField, tag) model =
    encodeObject (encodePipelineRunNodePairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineRunNodePairs : PipelineRunNode -> List EncodedField
encodePipelineRunNodePairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "durationInMillis" Json.Encode.int model.durationInMillis
            , maybeEncode "edges" (Json.Encode.list encodePipelineRunNodeedges) model.edges
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "startTime" Json.Encode.string model.startTime
            , maybeEncode "state" Json.Encode.string model.state
            ]
    in
    pairs


encodePipelineRunNodeedges : PipelineRunNodeedges -> Json.Encode.Value
encodePipelineRunNodeedges =
    encodeObject << encodePipelineRunNodeedgesPairs


encodePipelineRunNodeedgesWithTag : ( String, String ) -> PipelineRunNodeedges -> Json.Encode.Value
encodePipelineRunNodeedgesWithTag (tagField, tag) model =
    encodeObject (encodePipelineRunNodeedgesPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineRunNodeedgesPairs : PipelineRunNodeedges -> List EncodedField
encodePipelineRunNodeedgesPairs model =
    let
        pairs =
            [ maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineRunartifacts : PipelineRunartifacts -> Json.Encode.Value
encodePipelineRunartifacts =
    encodeObject << encodePipelineRunartifactsPairs


encodePipelineRunartifactsWithTag : ( String, String ) -> PipelineRunartifacts -> Json.Encode.Value
encodePipelineRunartifactsWithTag (tagField, tag) model =
    encodeObject (encodePipelineRunartifactsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineRunartifactsPairs : PipelineRunartifacts -> List EncodedField
encodePipelineRunartifactsPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelineStepImpl : PipelineStepImpl -> Json.Encode.Value
encodePipelineStepImpl =
    encodeObject << encodePipelineStepImplPairs


encodePipelineStepImplWithTag : ( String, String ) -> PipelineStepImpl -> Json.Encode.Value
encodePipelineStepImplWithTag (tagField, tag) model =
    encodeObject (encodePipelineStepImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineStepImplPairs : PipelineStepImpl -> List EncodedField
encodePipelineStepImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "_links" encodePipelineStepImpllinks model.links
            , maybeEncode "displayName" Json.Encode.string model.displayName
            , maybeEncode "durationInMillis" Json.Encode.int model.durationInMillis
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "input" encodeInputStepImpl model.input
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "startTime" Json.Encode.string model.startTime
            , maybeEncode "state" Json.Encode.string model.state
            ]
    in
    pairs


encodePipelineStepImpllinks : PipelineStepImpllinks -> Json.Encode.Value
encodePipelineStepImpllinks =
    encodeObject << encodePipelineStepImpllinksPairs


encodePipelineStepImpllinksWithTag : ( String, String ) -> PipelineStepImpllinks -> Json.Encode.Value
encodePipelineStepImpllinksWithTag (tagField, tag) model =
    encodeObject (encodePipelineStepImpllinksPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelineStepImpllinksPairs : PipelineStepImpllinks -> List EncodedField
encodePipelineStepImpllinksPairs model =
    let
        pairs =
            [ maybeEncode "self" encodeLink model.self
            , maybeEncode "actions" encodeLink model.actions
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelinelatestRun : PipelinelatestRun -> Json.Encode.Value
encodePipelinelatestRun =
    encodeObject << encodePipelinelatestRunPairs


encodePipelinelatestRunWithTag : ( String, String ) -> PipelinelatestRun -> Json.Encode.Value
encodePipelinelatestRunWithTag (tagField, tag) model =
    encodeObject (encodePipelinelatestRunPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelinelatestRunPairs : PipelinelatestRun -> List EncodedField
encodePipelinelatestRunPairs model =
    let
        pairs =
            [ maybeEncode "artifacts" (Json.Encode.list encodePipelinelatestRunartifacts) model.artifacts
            , maybeEncode "durationInMillis" Json.Encode.int model.durationInMillis
            , maybeEncode "estimatedDurationInMillis" Json.Encode.int model.estimatedDurationInMillis
            , maybeEncode "enQueueTime" Json.Encode.string model.enQueueTime
            , maybeEncode "endTime" Json.Encode.string model.endTime
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "organization" Json.Encode.string model.organization
            , maybeEncode "pipeline" Json.Encode.string model.pipeline
            , maybeEncode "result" Json.Encode.string model.result
            , maybeEncode "runSummary" Json.Encode.string model.runSummary
            , maybeEncode "startTime" Json.Encode.string model.startTime
            , maybeEncode "state" Json.Encode.string model.state
            , maybeEncode "type" Json.Encode.string model.type_
            , maybeEncode "commitId" Json.Encode.string model.commitId
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodePipelinelatestRunartifacts : PipelinelatestRunartifacts -> Json.Encode.Value
encodePipelinelatestRunartifacts =
    encodeObject << encodePipelinelatestRunartifactsPairs


encodePipelinelatestRunartifactsWithTag : ( String, String ) -> PipelinelatestRunartifacts -> Json.Encode.Value
encodePipelinelatestRunartifactsWithTag (tagField, tag) model =
    encodeObject (encodePipelinelatestRunartifactsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodePipelinelatestRunartifactsPairs : PipelinelatestRunartifacts -> List EncodedField
encodePipelinelatestRunartifactsPairs model =
    let
        pairs =
            [ maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "size" Json.Encode.int model.size
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeQueue : Queue -> Json.Encode.Value
encodeQueue =
    encodeObject << encodeQueuePairs


encodeQueueWithTag : ( String, String ) -> Queue -> Json.Encode.Value
encodeQueueWithTag (tagField, tag) model =
    encodeObject (encodeQueuePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQueuePairs : Queue -> List EncodedField
encodeQueuePairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "items" (Json.Encode.list encodeQueueBlockedItem) model.items
            ]
    in
    pairs


encodeQueueBlockedItem : QueueBlockedItem -> Json.Encode.Value
encodeQueueBlockedItem =
    encodeObject << encodeQueueBlockedItemPairs


encodeQueueBlockedItemWithTag : ( String, String ) -> QueueBlockedItem -> Json.Encode.Value
encodeQueueBlockedItemWithTag (tagField, tag) model =
    encodeObject (encodeQueueBlockedItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQueueBlockedItemPairs : QueueBlockedItem -> List EncodedField
encodeQueueBlockedItemPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "actions" (Json.Encode.list encodeCauseAction) model.actions
            , maybeEncode "blocked" Json.Encode.bool model.blocked
            , maybeEncode "buildable" Json.Encode.bool model.buildable
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "inQueueSince" Json.Encode.int model.inQueueSince
            , maybeEncode "params" Json.Encode.string model.params
            , maybeEncode "stuck" Json.Encode.bool model.stuck
            , maybeEncode "task" encodeFreeStyleProject model.task
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "why" Json.Encode.string model.why
            , maybeEncode "buildableStartMilliseconds" Json.Encode.int model.buildableStartMilliseconds
            ]
    in
    pairs


encodeQueueItemImpl : QueueItemImpl -> Json.Encode.Value
encodeQueueItemImpl =
    encodeObject << encodeQueueItemImplPairs


encodeQueueItemImplWithTag : ( String, String ) -> QueueItemImpl -> Json.Encode.Value
encodeQueueItemImplWithTag (tagField, tag) model =
    encodeObject (encodeQueueItemImplPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQueueItemImplPairs : QueueItemImpl -> List EncodedField
encodeQueueItemImplPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "expectedBuildNumber" Json.Encode.int model.expectedBuildNumber
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "pipeline" Json.Encode.string model.pipeline
            , maybeEncode "queuedTime" Json.Encode.int model.queuedTime
            ]
    in
    pairs


encodeQueueLeftItem : QueueLeftItem -> Json.Encode.Value
encodeQueueLeftItem =
    encodeObject << encodeQueueLeftItemPairs


encodeQueueLeftItemWithTag : ( String, String ) -> QueueLeftItem -> Json.Encode.Value
encodeQueueLeftItemWithTag (tagField, tag) model =
    encodeObject (encodeQueueLeftItemPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeQueueLeftItemPairs : QueueLeftItem -> List EncodedField
encodeQueueLeftItemPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "actions" (Json.Encode.list encodeCauseAction) model.actions
            , maybeEncode "blocked" Json.Encode.bool model.blocked
            , maybeEncode "buildable" Json.Encode.bool model.buildable
            , maybeEncode "id" Json.Encode.int model.id
            , maybeEncode "inQueueSince" Json.Encode.int model.inQueueSince
            , maybeEncode "params" Json.Encode.string model.params
            , maybeEncode "stuck" Json.Encode.bool model.stuck
            , maybeEncode "task" encodeFreeStyleProject model.task
            , maybeEncode "url" Json.Encode.string model.url
            , maybeEncode "why" Json.Encode.string model.why
            , maybeEncode "cancelled" Json.Encode.bool model.cancelled
            , maybeEncode "executable" encodeFreeStyleBuild model.executable
            ]
    in
    pairs


encodeResponseTimeMonitorData : ResponseTimeMonitorData -> Json.Encode.Value
encodeResponseTimeMonitorData =
    encodeObject << encodeResponseTimeMonitorDataPairs


encodeResponseTimeMonitorDataWithTag : ( String, String ) -> ResponseTimeMonitorData -> Json.Encode.Value
encodeResponseTimeMonitorDataWithTag (tagField, tag) model =
    encodeObject (encodeResponseTimeMonitorDataPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseTimeMonitorDataPairs : ResponseTimeMonitorData -> List EncodedField
encodeResponseTimeMonitorDataPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "timestamp" Json.Encode.int model.timestamp
            , maybeEncode "average" Json.Encode.int model.average
            ]
    in
    pairs


encodeStringParameterDefinition : StringParameterDefinition -> Json.Encode.Value
encodeStringParameterDefinition =
    encodeObject << encodeStringParameterDefinitionPairs


encodeStringParameterDefinitionWithTag : ( String, String ) -> StringParameterDefinition -> Json.Encode.Value
encodeStringParameterDefinitionWithTag (tagField, tag) model =
    encodeObject (encodeStringParameterDefinitionPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeStringParameterDefinitionPairs : StringParameterDefinition -> List EncodedField
encodeStringParameterDefinitionPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "defaultParameterValue" encodeStringParameterValue model.defaultParameterValue
            , maybeEncode "description" Json.Encode.string model.description
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "type" Json.Encode.string model.type_
            ]
    in
    pairs


encodeStringParameterValue : StringParameterValue -> Json.Encode.Value
encodeStringParameterValue =
    encodeObject << encodeStringParameterValuePairs


encodeStringParameterValueWithTag : ( String, String ) -> StringParameterValue -> Json.Encode.Value
encodeStringParameterValueWithTag (tagField, tag) model =
    encodeObject (encodeStringParameterValuePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeStringParameterValuePairs : StringParameterValue -> List EncodedField
encodeStringParameterValuePairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "name" Json.Encode.string model.name
            , maybeEncode "value" Json.Encode.string model.value
            ]
    in
    pairs


encodeSwapSpaceMonitorMemoryUsage2 : SwapSpaceMonitorMemoryUsage2 -> Json.Encode.Value
encodeSwapSpaceMonitorMemoryUsage2 =
    encodeObject << encodeSwapSpaceMonitorMemoryUsage2Pairs


encodeSwapSpaceMonitorMemoryUsage2WithTag : ( String, String ) -> SwapSpaceMonitorMemoryUsage2 -> Json.Encode.Value
encodeSwapSpaceMonitorMemoryUsage2WithTag (tagField, tag) model =
    encodeObject (encodeSwapSpaceMonitorMemoryUsage2Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSwapSpaceMonitorMemoryUsage2Pairs : SwapSpaceMonitorMemoryUsage2 -> List EncodedField
encodeSwapSpaceMonitorMemoryUsage2Pairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "availablePhysicalMemory" Json.Encode.int model.availablePhysicalMemory
            , maybeEncode "availableSwapSpace" Json.Encode.int model.availableSwapSpace
            , maybeEncode "totalPhysicalMemory" Json.Encode.int model.totalPhysicalMemory
            , maybeEncode "totalSwapSpace" Json.Encode.int model.totalSwapSpace
            ]
    in
    pairs


encodeUnlabeledLoadStatistics : UnlabeledLoadStatistics -> Json.Encode.Value
encodeUnlabeledLoadStatistics =
    encodeObject << encodeUnlabeledLoadStatisticsPairs


encodeUnlabeledLoadStatisticsWithTag : ( String, String ) -> UnlabeledLoadStatistics -> Json.Encode.Value
encodeUnlabeledLoadStatisticsWithTag (tagField, tag) model =
    encodeObject (encodeUnlabeledLoadStatisticsPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUnlabeledLoadStatisticsPairs : UnlabeledLoadStatistics -> List EncodedField
encodeUnlabeledLoadStatisticsPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            ]
    in
    pairs


encodeUser : User -> Json.Encode.Value
encodeUser =
    encodeObject << encodeUserPairs


encodeUserWithTag : ( String, String ) -> User -> Json.Encode.Value
encodeUserWithTag (tagField, tag) model =
    encodeObject (encodeUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUserPairs : User -> List EncodedField
encodeUserPairs model =
    let
        pairs =
            [ maybeEncode "_class" Json.Encode.string model.class
            , maybeEncode "id" Json.Encode.string model.id
            , maybeEncode "fullName" Json.Encode.string model.fullName
            , maybeEncode "email" Json.Encode.string model.email
            , maybeEncode "name" Json.Encode.string model.name
            ]
    in
    pairs


-- DECODER


allViewDecoder : Json.Decode.Decoder AllView
allViewDecoder =
    Json.Decode.succeed AllView
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing


branchImplDecoder : Json.Decode.Decoder BranchImpl
branchImplDecoder =
    Json.Decode.succeed BranchImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "fullDisplayName" Json.Decode.string Nothing
        |> maybeDecode "fullName" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "parameters" (Json.Decode.list stringParameterDefinitionDecoder) Nothing
        |> maybeDecode "permissions" branchImplpermissionsDecoder Nothing
        |> maybeDecode "weatherScore" Json.Decode.int Nothing
        |> maybeDecode "pullRequest" Json.Decode.string Nothing
        |> maybeDecode "_links" branchImpllinksDecoder Nothing
        |> maybeDecode "latestRun" pipelineRunImplDecoder Nothing


branchImpllinksDecoder : Json.Decode.Decoder BranchImpllinks
branchImpllinksDecoder =
    Json.Decode.succeed BranchImpllinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "actions" linkDecoder Nothing
        |> maybeDecode "runs" linkDecoder Nothing
        |> maybeDecode "queue" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


branchImplpermissionsDecoder : Json.Decode.Decoder BranchImplpermissions
branchImplpermissionsDecoder =
    Json.Decode.succeed BranchImplpermissions
        |> maybeDecode "create" Json.Decode.bool Nothing
        |> maybeDecode "read" Json.Decode.bool Nothing
        |> maybeDecode "start" Json.Decode.bool Nothing
        |> maybeDecode "stop" Json.Decode.bool Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


causeActionDecoder : Json.Decode.Decoder CauseAction
causeActionDecoder =
    Json.Decode.succeed CauseAction
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "causes" (Json.Decode.list causeUserIdCauseDecoder) Nothing


causeUserIdCauseDecoder : Json.Decode.Decoder CauseUserIdCause
causeUserIdCauseDecoder =
    Json.Decode.succeed CauseUserIdCause
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "shortDescription" Json.Decode.string Nothing
        |> maybeDecode "userId" Json.Decode.string Nothing
        |> maybeDecode "userName" Json.Decode.string Nothing


classesByClassDecoder : Json.Decode.Decoder ClassesByClass
classesByClassDecoder =
    Json.Decode.succeed ClassesByClass
        |> maybeDecode "classes" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


clockDifferenceDecoder : Json.Decode.Decoder ClockDifference
clockDifferenceDecoder =
    Json.Decode.succeed ClockDifference
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "diff" Json.Decode.int Nothing


computerSetDecoder : Json.Decode.Decoder ComputerSet
computerSetDecoder =
    Json.Decode.succeed ComputerSet
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "busyExecutors" Json.Decode.int Nothing
        |> maybeDecode "computer" (Json.Decode.list hudsonMasterComputerDecoder) Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "totalExecutors" Json.Decode.int Nothing


defaultCrumbIssuerDecoder : Json.Decode.Decoder DefaultCrumbIssuer
defaultCrumbIssuerDecoder =
    Json.Decode.succeed DefaultCrumbIssuer
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "crumb" Json.Decode.string Nothing
        |> maybeDecode "crumbRequestField" Json.Decode.string Nothing


diskSpaceMonitorDescriptorDiskSpaceDecoder : Json.Decode.Decoder DiskSpaceMonitorDescriptorDiskSpace
diskSpaceMonitorDescriptorDiskSpaceDecoder =
    Json.Decode.succeed DiskSpaceMonitorDescriptorDiskSpace
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "timestamp" Json.Decode.int Nothing
        |> maybeDecode "path" Json.Decode.string Nothing
        |> maybeDecode "size" Json.Decode.int Nothing


emptyChangeLogSetDecoder : Json.Decode.Decoder EmptyChangeLogSet
emptyChangeLogSetDecoder =
    Json.Decode.succeed EmptyChangeLogSet
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "kind" Json.Decode.string Nothing


extensionClassContainerImpl1Decoder : Json.Decode.Decoder ExtensionClassContainerImpl1
extensionClassContainerImpl1Decoder =
    Json.Decode.succeed ExtensionClassContainerImpl1
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" extensionClassContainerImpl1linksDecoder Nothing
        |> maybeDecode "map" extensionClassContainerImpl1mapDecoder Nothing


extensionClassContainerImpl1linksDecoder : Json.Decode.Decoder ExtensionClassContainerImpl1links
extensionClassContainerImpl1linksDecoder =
    Json.Decode.succeed ExtensionClassContainerImpl1links
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


extensionClassContainerImpl1mapDecoder : Json.Decode.Decoder ExtensionClassContainerImpl1map
extensionClassContainerImpl1mapDecoder =
    Json.Decode.succeed ExtensionClassContainerImpl1map
        |> maybeDecode "io.jenkins.blueocean.service.embedded.rest.PipelineImpl" extensionClassImplDecoder Nothing
        |> maybeDecode "io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl" extensionClassImplDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


extensionClassImplDecoder : Json.Decode.Decoder ExtensionClassImpl
extensionClassImplDecoder =
    Json.Decode.succeed ExtensionClassImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" extensionClassImpllinksDecoder Nothing
        |> maybeDecode "classes" (Json.Decode.list Json.Decode.string) Nothing


extensionClassImpllinksDecoder : Json.Decode.Decoder ExtensionClassImpllinks
extensionClassImpllinksDecoder =
    Json.Decode.succeed ExtensionClassImpllinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


favoriteImplDecoder : Json.Decode.Decoder FavoriteImpl
favoriteImplDecoder =
    Json.Decode.succeed FavoriteImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" favoriteImpllinksDecoder Nothing
        |> maybeDecode "item" pipelineImplDecoder Nothing


favoriteImpllinksDecoder : Json.Decode.Decoder FavoriteImpllinks
favoriteImpllinksDecoder =
    Json.Decode.succeed FavoriteImpllinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


freeStyleBuildDecoder : Json.Decode.Decoder FreeStyleBuild
freeStyleBuildDecoder =
    Json.Decode.succeed FreeStyleBuild
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "number" Json.Decode.int Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "actions" (Json.Decode.list causeActionDecoder) Nothing
        |> maybeDecode "building" Json.Decode.bool Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "duration" Json.Decode.int Nothing
        |> maybeDecode "estimatedDuration" Json.Decode.int Nothing
        |> maybeDecode "executor" Json.Decode.string Nothing
        |> maybeDecode "fullDisplayName" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "keepLog" Json.Decode.bool Nothing
        |> maybeDecode "queueId" Json.Decode.int Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "timestamp" Json.Decode.int Nothing
        |> maybeDecode "builtOn" Json.Decode.string Nothing
        |> maybeDecode "changeSet" emptyChangeLogSetDecoder Nothing


freeStyleProjectDecoder : Json.Decode.Decoder FreeStyleProject
freeStyleProjectDecoder =
    Json.Decode.succeed FreeStyleProject
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "color" Json.Decode.string Nothing
        |> maybeDecode "actions" (Json.Decode.list freeStyleProjectactionsDecoder) Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "displayNameOrNull" Json.Decode.string Nothing
        |> maybeDecode "fullDisplayName" Json.Decode.string Nothing
        |> maybeDecode "fullName" Json.Decode.string Nothing
        |> maybeDecode "buildable" Json.Decode.bool Nothing
        |> maybeDecode "builds" (Json.Decode.list freeStyleBuildDecoder) Nothing
        |> maybeDecode "firstBuild" freeStyleBuildDecoder Nothing
        |> maybeDecode "healthReport" (Json.Decode.list freeStyleProjecthealthReportDecoder) Nothing
        |> maybeDecode "inQueue" Json.Decode.bool Nothing
        |> maybeDecode "keepDependencies" Json.Decode.bool Nothing
        |> maybeDecode "lastBuild" freeStyleBuildDecoder Nothing
        |> maybeDecode "lastCompletedBuild" freeStyleBuildDecoder Nothing
        |> maybeDecode "lastFailedBuild" Json.Decode.string Nothing
        |> maybeDecode "lastStableBuild" freeStyleBuildDecoder Nothing
        |> maybeDecode "lastSuccessfulBuild" freeStyleBuildDecoder Nothing
        |> maybeDecode "lastUnstableBuild" Json.Decode.string Nothing
        |> maybeDecode "lastUnsuccessfulBuild" Json.Decode.string Nothing
        |> maybeDecode "nextBuildNumber" Json.Decode.int Nothing
        |> maybeDecode "queueItem" Json.Decode.string Nothing
        |> maybeDecode "concurrentBuild" Json.Decode.bool Nothing
        |> maybeDecode "scm" nullSCMDecoder Nothing


freeStyleProjectactionsDecoder : Json.Decode.Decoder FreeStyleProjectactions
freeStyleProjectactionsDecoder =
    Json.Decode.succeed FreeStyleProjectactions
        |> maybeDecode "_class" Json.Decode.string Nothing


freeStyleProjecthealthReportDecoder : Json.Decode.Decoder FreeStyleProjecthealthReport
freeStyleProjecthealthReportDecoder =
    Json.Decode.succeed FreeStyleProjecthealthReport
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "iconClassName" Json.Decode.string Nothing
        |> maybeDecode "iconUrl" Json.Decode.string Nothing
        |> maybeDecode "score" Json.Decode.int Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


genericResourceDecoder : Json.Decode.Decoder GenericResource
genericResourceDecoder =
    Json.Decode.succeed GenericResource
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "durationInMillis" Json.Decode.int Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "startTime" Json.Decode.string Nothing


githubContentDecoder : Json.Decode.Decoder GithubContent
githubContentDecoder =
    Json.Decode.succeed GithubContent
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "sha" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "repo" Json.Decode.string Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "owner" Json.Decode.string Nothing
        |> maybeDecode "path" Json.Decode.string Nothing
        |> maybeDecode "base64Data" Json.Decode.string Nothing


githubFileDecoder : Json.Decode.Decoder GithubFile
githubFileDecoder =
    Json.Decode.succeed GithubFile
        |> maybeDecode "content" githubContentDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


githubOrganizationDecoder : Json.Decode.Decoder GithubOrganization
githubOrganizationDecoder =
    Json.Decode.succeed GithubOrganization
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" githubOrganizationlinksDecoder Nothing
        |> maybeDecode "jenkinsOrganizationPipeline" Json.Decode.bool Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


githubOrganizationlinksDecoder : Json.Decode.Decoder GithubOrganizationlinks
githubOrganizationlinksDecoder =
    Json.Decode.succeed GithubOrganizationlinks
        |> maybeDecode "repositories" linkDecoder Nothing
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


githubRepositoriesDecoder : Json.Decode.Decoder GithubRepositories
githubRepositoriesDecoder =
    Json.Decode.succeed GithubRepositories
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" githubRepositorieslinksDecoder Nothing
        |> maybeDecode "items" (Json.Decode.list githubRepositoryDecoder) Nothing
        |> maybeDecode "lastPage" Json.Decode.int Nothing
        |> maybeDecode "nextPage" Json.Decode.int Nothing
        |> maybeDecode "pageSize" Json.Decode.int Nothing


githubRepositorieslinksDecoder : Json.Decode.Decoder GithubRepositorieslinks
githubRepositorieslinksDecoder =
    Json.Decode.succeed GithubRepositorieslinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


githubRepositoryDecoder : Json.Decode.Decoder GithubRepository
githubRepositoryDecoder =
    Json.Decode.succeed GithubRepository
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" githubRepositorylinksDecoder Nothing
        |> maybeDecode "defaultBranch" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "permissions" githubRepositorypermissionsDecoder Nothing
        |> maybeDecode "private" Json.Decode.bool Nothing
        |> maybeDecode "fullName" Json.Decode.string Nothing


githubRepositorylinksDecoder : Json.Decode.Decoder GithubRepositorylinks
githubRepositorylinksDecoder =
    Json.Decode.succeed GithubRepositorylinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


githubRepositorypermissionsDecoder : Json.Decode.Decoder GithubRepositorypermissions
githubRepositorypermissionsDecoder =
    Json.Decode.succeed GithubRepositorypermissions
        |> maybeDecode "admin" Json.Decode.bool Nothing
        |> maybeDecode "push" Json.Decode.bool Nothing
        |> maybeDecode "pull" Json.Decode.bool Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


githubRespositoryContainerDecoder : Json.Decode.Decoder GithubRespositoryContainer
githubRespositoryContainerDecoder =
    Json.Decode.succeed GithubRespositoryContainer
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" githubRespositoryContainerlinksDecoder Nothing
        |> maybeDecode "repositories" githubRepositoriesDecoder Nothing


githubRespositoryContainerlinksDecoder : Json.Decode.Decoder GithubRespositoryContainerlinks
githubRespositoryContainerlinksDecoder =
    Json.Decode.succeed GithubRespositoryContainerlinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


githubScmDecoder : Json.Decode.Decoder GithubScm
githubScmDecoder =
    Json.Decode.succeed GithubScm
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" githubScmlinksDecoder Nothing
        |> maybeDecode "credentialId" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "uri" Json.Decode.string Nothing


githubScmlinksDecoder : Json.Decode.Decoder GithubScmlinks
githubScmlinksDecoder =
    Json.Decode.succeed GithubScmlinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


hudsonDecoder : Json.Decode.Decoder Hudson
hudsonDecoder =
    Json.Decode.succeed Hudson
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "assignedLabels" (Json.Decode.list hudsonassignedLabelsDecoder) Nothing
        |> maybeDecode "mode" Json.Decode.string Nothing
        |> maybeDecode "nodeDescription" Json.Decode.string Nothing
        |> maybeDecode "nodeName" Json.Decode.string Nothing
        |> maybeDecode "numExecutors" Json.Decode.int Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "jobs" (Json.Decode.list freeStyleProjectDecoder) Nothing
        |> maybeDecode "primaryView" allViewDecoder Nothing
        |> maybeDecode "quietingDown" Json.Decode.bool Nothing
        |> maybeDecode "slaveAgentPort" Json.Decode.int Nothing
        |> maybeDecode "unlabeledLoad" unlabeledLoadStatisticsDecoder Nothing
        |> maybeDecode "useCrumbs" Json.Decode.bool Nothing
        |> maybeDecode "useSecurity" Json.Decode.bool Nothing
        |> maybeDecode "views" (Json.Decode.list allViewDecoder) Nothing


hudsonMasterComputerDecoder : Json.Decode.Decoder HudsonMasterComputer
hudsonMasterComputerDecoder =
    Json.Decode.succeed HudsonMasterComputer
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "executors" (Json.Decode.list hudsonMasterComputerexecutorsDecoder) Nothing
        |> maybeDecode "icon" Json.Decode.string Nothing
        |> maybeDecode "iconClassName" Json.Decode.string Nothing
        |> maybeDecode "idle" Json.Decode.bool Nothing
        |> maybeDecode "jnlpAgent" Json.Decode.bool Nothing
        |> maybeDecode "launchSupported" Json.Decode.bool Nothing
        |> maybeDecode "loadStatistics" label1Decoder Nothing
        |> maybeDecode "manualLaunchAllowed" Json.Decode.bool Nothing
        |> maybeDecode "monitorData" hudsonMasterComputermonitorDataDecoder Nothing
        |> maybeDecode "numExecutors" Json.Decode.int Nothing
        |> maybeDecode "offline" Json.Decode.bool Nothing
        |> maybeDecode "offlineCause" Json.Decode.string Nothing
        |> maybeDecode "offlineCauseReason" Json.Decode.string Nothing
        |> maybeDecode "temporarilyOffline" Json.Decode.bool Nothing


hudsonMasterComputerexecutorsDecoder : Json.Decode.Decoder HudsonMasterComputerexecutors
hudsonMasterComputerexecutorsDecoder =
    Json.Decode.succeed HudsonMasterComputerexecutors
        |> maybeDecode "currentExecutable" freeStyleBuildDecoder Nothing
        |> maybeDecode "idle" Json.Decode.bool Nothing
        |> maybeDecode "likelyStuck" Json.Decode.bool Nothing
        |> maybeDecode "number" Json.Decode.int Nothing
        |> maybeDecode "progress" Json.Decode.int Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


hudsonMasterComputermonitorDataDecoder : Json.Decode.Decoder HudsonMasterComputermonitorData
hudsonMasterComputermonitorDataDecoder =
    Json.Decode.succeed HudsonMasterComputermonitorData
        |> maybeDecode "hudson.node_monitors.SwapSpaceMonitor" swapSpaceMonitorMemoryUsage2Decoder Nothing
        |> maybeDecode "hudson.node_monitors.TemporarySpaceMonitor" diskSpaceMonitorDescriptorDiskSpaceDecoder Nothing
        |> maybeDecode "hudson.node_monitors.DiskSpaceMonitor" diskSpaceMonitorDescriptorDiskSpaceDecoder Nothing
        |> maybeDecode "hudson.node_monitors.ArchitectureMonitor" Json.Decode.string Nothing
        |> maybeDecode "hudson.node_monitors.ResponseTimeMonitor" responseTimeMonitorDataDecoder Nothing
        |> maybeDecode "hudson.node_monitors.ClockMonitor" clockDifferenceDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


hudsonassignedLabelsDecoder : Json.Decode.Decoder HudsonassignedLabels
hudsonassignedLabelsDecoder =
    Json.Decode.succeed HudsonassignedLabels
        |> maybeDecode "_class" Json.Decode.string Nothing


inputStepImplDecoder : Json.Decode.Decoder InputStepImpl
inputStepImplDecoder =
    Json.Decode.succeed InputStepImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" inputStepImpllinksDecoder Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "message" Json.Decode.string Nothing
        |> maybeDecode "ok" Json.Decode.string Nothing
        |> maybeDecode "parameters" (Json.Decode.list stringParameterDefinitionDecoder) Nothing
        |> maybeDecode "submitter" Json.Decode.string Nothing


inputStepImpllinksDecoder : Json.Decode.Decoder InputStepImpllinks
inputStepImpllinksDecoder =
    Json.Decode.succeed InputStepImpllinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


label1Decoder : Json.Decode.Decoder Label1
label1Decoder =
    Json.Decode.succeed Label1
        |> maybeDecode "_class" Json.Decode.string Nothing


linkDecoder : Json.Decode.Decoder Link
linkDecoder =
    Json.Decode.succeed Link
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "href" Json.Decode.string Nothing


listViewDecoder : Json.Decode.Decoder ListView
listViewDecoder =
    Json.Decode.succeed ListView
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "jobs" (Json.Decode.list freeStyleProjectDecoder) Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing


multibranchPipelineDecoder : Json.Decode.Decoder MultibranchPipeline
multibranchPipelineDecoder =
    Json.Decode.succeed MultibranchPipeline
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "latestRun" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "weatherScore" Json.Decode.int Nothing
        |> maybeDecode "branchNames" (Json.Decode.list Json.Decode.string) Nothing
        |> maybeDecode "numberOfFailingBranches" Json.Decode.int Nothing
        |> maybeDecode "numberOfFailingPullRequests" Json.Decode.int Nothing
        |> maybeDecode "numberOfSuccessfulBranches" Json.Decode.int Nothing
        |> maybeDecode "numberOfSuccessfulPullRequests" Json.Decode.int Nothing
        |> maybeDecode "totalNumberOfBranches" Json.Decode.int Nothing
        |> maybeDecode "totalNumberOfPullRequests" Json.Decode.int Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


nullSCMDecoder : Json.Decode.Decoder NullSCM
nullSCMDecoder =
    Json.Decode.succeed NullSCM
        |> maybeDecode "_class" Json.Decode.string Nothing


organisationDecoder : Json.Decode.Decoder Organisation
organisationDecoder =
    Json.Decode.succeed Organisation
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing


pipelineDecoder : Json.Decode.Decoder Pipeline
pipelineDecoder =
    Json.Decode.succeed Pipeline
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "fullName" Json.Decode.string Nothing
        |> maybeDecode "weatherScore" Json.Decode.int Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "latestRun" pipelinelatestRunDecoder Nothing


pipelineActivityDecoder : Json.Decode.Decoder PipelineActivity
pipelineActivityDecoder =
    Json.Decode.succeed PipelineActivity
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "artifacts" (Json.Decode.list pipelineActivityartifactsDecoder) Nothing
        |> maybeDecode "durationInMillis" Json.Decode.int Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "enQueueTime" Json.Decode.string Nothing
        |> maybeDecode "endTime" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "pipeline" Json.Decode.string Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "runSummary" Json.Decode.string Nothing
        |> maybeDecode "startTime" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "commitId" Json.Decode.string Nothing


pipelineActivityartifactsDecoder : Json.Decode.Decoder PipelineActivityartifacts
pipelineActivityartifactsDecoder =
    Json.Decode.succeed PipelineActivityartifacts
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineBranchesitemDecoder : Json.Decode.Decoder PipelineBranchesitem
pipelineBranchesitemDecoder =
    Json.Decode.succeed PipelineBranchesitem
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "weatherScore" Json.Decode.int Nothing
        |> maybeDecode "latestRun" pipelineBranchesitemlatestRunDecoder Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "pullRequest" pipelineBranchesitempullRequestDecoder Nothing
        |> maybeDecode "totalNumberOfPullRequests" Json.Decode.int Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineBranchesitemlatestRunDecoder : Json.Decode.Decoder PipelineBranchesitemlatestRun
pipelineBranchesitemlatestRunDecoder =
    Json.Decode.succeed PipelineBranchesitemlatestRun
        |> maybeDecode "durationInMillis" Json.Decode.int Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "enQueueTime" Json.Decode.string Nothing
        |> maybeDecode "endTime" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "pipeline" Json.Decode.string Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "runSummary" Json.Decode.string Nothing
        |> maybeDecode "startTime" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "commitId" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineBranchesitempullRequestDecoder : Json.Decode.Decoder PipelineBranchesitempullRequest
pipelineBranchesitempullRequestDecoder =
    Json.Decode.succeed PipelineBranchesitempullRequest
        |> maybeDecode "_links" pipelineBranchesitempullRequestlinksDecoder Nothing
        |> maybeDecode "author" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "title" Json.Decode.string Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineBranchesitempullRequestlinksDecoder : Json.Decode.Decoder PipelineBranchesitempullRequestlinks
pipelineBranchesitempullRequestlinksDecoder =
    Json.Decode.succeed PipelineBranchesitempullRequestlinks
        |> maybeDecode "self" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineFolderImplDecoder : Json.Decode.Decoder PipelineFolderImpl
pipelineFolderImplDecoder =
    Json.Decode.succeed PipelineFolderImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "fullName" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "numberOfFolders" Json.Decode.int Nothing
        |> maybeDecode "numberOfPipelines" Json.Decode.int Nothing


pipelineImplDecoder : Json.Decode.Decoder PipelineImpl
pipelineImplDecoder =
    Json.Decode.succeed PipelineImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "fullName" Json.Decode.string Nothing
        |> maybeDecode "latestRun" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "weatherScore" Json.Decode.int Nothing
        |> maybeDecode "_links" pipelineImpllinksDecoder Nothing


pipelineImpllinksDecoder : Json.Decode.Decoder PipelineImpllinks
pipelineImpllinksDecoder =
    Json.Decode.succeed PipelineImpllinks
        |> maybeDecode "runs" linkDecoder Nothing
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "queue" linkDecoder Nothing
        |> maybeDecode "actions" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineRunDecoder : Json.Decode.Decoder PipelineRun
pipelineRunDecoder =
    Json.Decode.succeed PipelineRun
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "artifacts" (Json.Decode.list pipelineRunartifactsDecoder) Nothing
        |> maybeDecode "durationInMillis" Json.Decode.int Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "enQueueTime" Json.Decode.string Nothing
        |> maybeDecode "endTime" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "pipeline" Json.Decode.string Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "runSummary" Json.Decode.string Nothing
        |> maybeDecode "startTime" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "commitId" Json.Decode.string Nothing


pipelineRunImplDecoder : Json.Decode.Decoder PipelineRunImpl
pipelineRunImplDecoder =
    Json.Decode.succeed PipelineRunImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" pipelineRunImpllinksDecoder Nothing
        |> maybeDecode "durationInMillis" Json.Decode.int Nothing
        |> maybeDecode "enQueueTime" Json.Decode.string Nothing
        |> maybeDecode "endTime" Json.Decode.string Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "pipeline" Json.Decode.string Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "runSummary" Json.Decode.string Nothing
        |> maybeDecode "startTime" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "commitId" Json.Decode.string Nothing


pipelineRunImpllinksDecoder : Json.Decode.Decoder PipelineRunImpllinks
pipelineRunImpllinksDecoder =
    Json.Decode.succeed PipelineRunImpllinks
        |> maybeDecode "nodes" linkDecoder Nothing
        |> maybeDecode "log" linkDecoder Nothing
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "actions" linkDecoder Nothing
        |> maybeDecode "steps" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineRunNodeDecoder : Json.Decode.Decoder PipelineRunNode
pipelineRunNodeDecoder =
    Json.Decode.succeed PipelineRunNode
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "durationInMillis" Json.Decode.int Nothing
        |> maybeDecode "edges" (Json.Decode.list pipelineRunNodeedgesDecoder) Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "startTime" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing


pipelineRunNodeedgesDecoder : Json.Decode.Decoder PipelineRunNodeedges
pipelineRunNodeedgesDecoder =
    Json.Decode.succeed PipelineRunNodeedges
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineRunartifactsDecoder : Json.Decode.Decoder PipelineRunartifacts
pipelineRunartifactsDecoder =
    Json.Decode.succeed PipelineRunartifacts
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelineStepImplDecoder : Json.Decode.Decoder PipelineStepImpl
pipelineStepImplDecoder =
    Json.Decode.succeed PipelineStepImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "_links" pipelineStepImpllinksDecoder Nothing
        |> maybeDecode "displayName" Json.Decode.string Nothing
        |> maybeDecode "durationInMillis" Json.Decode.int Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "input" inputStepImplDecoder Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "startTime" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing


pipelineStepImpllinksDecoder : Json.Decode.Decoder PipelineStepImpllinks
pipelineStepImpllinksDecoder =
    Json.Decode.succeed PipelineStepImpllinks
        |> maybeDecode "self" linkDecoder Nothing
        |> maybeDecode "actions" linkDecoder Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelinelatestRunDecoder : Json.Decode.Decoder PipelinelatestRun
pipelinelatestRunDecoder =
    Json.Decode.succeed PipelinelatestRun
        |> maybeDecode "artifacts" (Json.Decode.list pipelinelatestRunartifactsDecoder) Nothing
        |> maybeDecode "durationInMillis" Json.Decode.int Nothing
        |> maybeDecode "estimatedDurationInMillis" Json.Decode.int Nothing
        |> maybeDecode "enQueueTime" Json.Decode.string Nothing
        |> maybeDecode "endTime" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "organization" Json.Decode.string Nothing
        |> maybeDecode "pipeline" Json.Decode.string Nothing
        |> maybeDecode "result" Json.Decode.string Nothing
        |> maybeDecode "runSummary" Json.Decode.string Nothing
        |> maybeDecode "startTime" Json.Decode.string Nothing
        |> maybeDecode "state" Json.Decode.string Nothing
        |> maybeDecode "type" Json.Decode.string Nothing
        |> maybeDecode "commitId" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


pipelinelatestRunartifactsDecoder : Json.Decode.Decoder PipelinelatestRunartifacts
pipelinelatestRunartifactsDecoder =
    Json.Decode.succeed PipelinelatestRunartifacts
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "size" Json.Decode.int Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "_class" Json.Decode.string Nothing


queueDecoder : Json.Decode.Decoder Queue
queueDecoder =
    Json.Decode.succeed Queue
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "items" (Json.Decode.list queueBlockedItemDecoder) Nothing


queueBlockedItemDecoder : Json.Decode.Decoder QueueBlockedItem
queueBlockedItemDecoder =
    Json.Decode.succeed QueueBlockedItem
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "actions" (Json.Decode.list causeActionDecoder) Nothing
        |> maybeDecode "blocked" Json.Decode.bool Nothing
        |> maybeDecode "buildable" Json.Decode.bool Nothing
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "inQueueSince" Json.Decode.int Nothing
        |> maybeDecode "params" Json.Decode.string Nothing
        |> maybeDecode "stuck" Json.Decode.bool Nothing
        |> maybeDecode "task" freeStyleProjectDecoder Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "why" Json.Decode.string Nothing
        |> maybeDecode "buildableStartMilliseconds" Json.Decode.int Nothing


queueItemImplDecoder : Json.Decode.Decoder QueueItemImpl
queueItemImplDecoder =
    Json.Decode.succeed QueueItemImpl
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "expectedBuildNumber" Json.Decode.int Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "pipeline" Json.Decode.string Nothing
        |> maybeDecode "queuedTime" Json.Decode.int Nothing


queueLeftItemDecoder : Json.Decode.Decoder QueueLeftItem
queueLeftItemDecoder =
    Json.Decode.succeed QueueLeftItem
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "actions" (Json.Decode.list causeActionDecoder) Nothing
        |> maybeDecode "blocked" Json.Decode.bool Nothing
        |> maybeDecode "buildable" Json.Decode.bool Nothing
        |> maybeDecode "id" Json.Decode.int Nothing
        |> maybeDecode "inQueueSince" Json.Decode.int Nothing
        |> maybeDecode "params" Json.Decode.string Nothing
        |> maybeDecode "stuck" Json.Decode.bool Nothing
        |> maybeDecode "task" freeStyleProjectDecoder Nothing
        |> maybeDecode "url" Json.Decode.string Nothing
        |> maybeDecode "why" Json.Decode.string Nothing
        |> maybeDecode "cancelled" Json.Decode.bool Nothing
        |> maybeDecode "executable" freeStyleBuildDecoder Nothing


responseTimeMonitorDataDecoder : Json.Decode.Decoder ResponseTimeMonitorData
responseTimeMonitorDataDecoder =
    Json.Decode.succeed ResponseTimeMonitorData
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "timestamp" Json.Decode.int Nothing
        |> maybeDecode "average" Json.Decode.int Nothing


stringParameterDefinitionDecoder : Json.Decode.Decoder StringParameterDefinition
stringParameterDefinitionDecoder =
    Json.Decode.succeed StringParameterDefinition
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "defaultParameterValue" stringParameterValueDecoder Nothing
        |> maybeDecode "description" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "type" Json.Decode.string Nothing


stringParameterValueDecoder : Json.Decode.Decoder StringParameterValue
stringParameterValueDecoder =
    Json.Decode.succeed StringParameterValue
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing
        |> maybeDecode "value" Json.Decode.string Nothing


swapSpaceMonitorMemoryUsage2Decoder : Json.Decode.Decoder SwapSpaceMonitorMemoryUsage2
swapSpaceMonitorMemoryUsage2Decoder =
    Json.Decode.succeed SwapSpaceMonitorMemoryUsage2
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "availablePhysicalMemory" Json.Decode.int Nothing
        |> maybeDecode "availableSwapSpace" Json.Decode.int Nothing
        |> maybeDecode "totalPhysicalMemory" Json.Decode.int Nothing
        |> maybeDecode "totalSwapSpace" Json.Decode.int Nothing


unlabeledLoadStatisticsDecoder : Json.Decode.Decoder UnlabeledLoadStatistics
unlabeledLoadStatisticsDecoder =
    Json.Decode.succeed UnlabeledLoadStatistics
        |> maybeDecode "_class" Json.Decode.string Nothing


userDecoder : Json.Decode.Decoder User
userDecoder =
    Json.Decode.succeed User
        |> maybeDecode "_class" Json.Decode.string Nothing
        |> maybeDecode "id" Json.Decode.string Nothing
        |> maybeDecode "fullName" Json.Decode.string Nothing
        |> maybeDecode "email" Json.Decode.string Nothing
        |> maybeDecode "name" Json.Decode.string Nothing




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f